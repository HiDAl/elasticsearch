{
  "synthetics-browser.screenshot-0.10.2": {
    "processors": [
      {
        "pipeline": {
          "name": "synthetics-browser.screenshot@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "synthetics"
      }
    }
  },
  "synthetics-icmp-0.10.2": {
    "processors": [
      {
        "pipeline": {
          "name": "synthetics-icmp@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "synthetics"
      }
    }
  },
  "logs-panw.panos-3.1.1-hipmatch": {
    "description": "Pipeline for PanOS HIP Match Logs.",
    "processors": [
      {
        "csv": {
          "field": "message",
          "target_fields": [
            "_temp_.srcuser",
            "panw.panos.virtual_sys",
            "panw.panos.machine.name",
            "panw.panos.machine.os",
            "panw.panos.source.ip",
            "panw.panos.matchname",
            "panw.panos.repeat_count",
            "panw.panos.matchtype",
            "_temp_.future_use3",
            "_temp_.future_use4",
            "panw.panos.sequence_number",
            "panw.panos.action_flags",
            "panw.panos.device_group_hierarchy1",
            "panw.panos.device_group_hierarchy2",
            "panw.panos.device_group_hierarchy3",
            "panw.panos.device_group_hierarchy4",
            "panw.panos.vsys_name",
            "panw.panos.device_name",
            "panw.panos.vsys_id",
            "_temp_.source_ipv6",
            "panw.panos.host.id",
            "panw.panos.serial_number",
            "panw.panos.machine.mac_address",
            "_temp_.high_res_timestamp"
          ]
        }
      },
      {
        "set": {
          "field": "source.ip",
          "copy_from": "panw.panos.source.ip",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.ip",
          "value": "{{_temp_.source_ipv6}}",
          "if": "ctx?._temp_?.source_ipv6 != null && ctx?._temp_?.source_ipv6 != \"\" && ctx?._temp_?.source_ipv6 != \"0.0.0.0\""
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": [
            "network"
          ]
        }
      },
      {
        "set": {
          "field": "host.id",
          "copy_from": "panw.panos.host.id",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "host.mac",
          "copy_from": "panw.panos.machine.mac_address",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "host.name",
          "copy_from": "panw.panos.machine.name",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "host.os.full",
          "copy_from": "panw.panos.machine.os",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.hostname",
          "copy_from": "panw.panos.device_name",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "panw.panos.source.ipv6",
          "copy_from": "_temp_.source_ipv6",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "panw.panos.source.user",
          "copy_from": "_temp_.srcuser",
          "ignore_failure": true
        }
      },
      {
        "pipeline": {
          "name": "logs-panw.panos@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "append": {
          "field": "error.message",
          "value": "error in HIP Match pipeline: error in [{{_ingest.on_failure_processor_type}}] processor{{#_ingest.on_failure_processor_tag}} with tag [{{_ingest.on_failure_processor_tag }}]{{/_ingest.on_failure_processor_tag}} {{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "panw"
      }
    }
  },
  "metrics-system.load-1.20.4": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-system.load@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "system"
      }
    }
  },
  "logs-elastic_agent.fleet_server-1.3.5": {
    "processors": [
      {
        "pipeline": {
          "name": "logs-elastic_agent.fleet_server@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "elastic_agent"
      }
    }
  },
  "logs-aws.securityhub_findings-1.25.2": {
    "description": "Pipeline for processing AWS Security Hub Findings logs.",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.2.0"
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "set": {
          "field": "event.type",
          "value": [
            "info"
          ]
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "json",
          "ignore_failure": true
        }
      },
      {
        "fingerprint": {
          "fields": [
            "json.UpdatedAt",
            "json.Id",
            "json.CreatedAt"
          ],
          "target_field": "_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Action.ActionType",
          "target_field": "aws.securityhub_findings.action.type",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "event.action",
          "copy_from": "aws.securityhub_findings.action.type",
          "ignore_failure": true
        }
      },
      {
        "lowercase": {
          "field": "event.action",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Action.AwsApiCallAction.AffectedResources",
          "target_field": "aws.securityhub_findings.action.aws_api_call.affected_resources",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Action.AwsApiCallAction.Api",
          "target_field": "aws.securityhub_findings.action.aws_api_call.api",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Action.AwsApiCallAction.CallerType",
          "target_field": "aws.securityhub_findings.action.aws_api_call.caller.type",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Action.AwsApiCallAction.DomainDetails.Domain",
          "target_field": "aws.securityhub_findings.action.aws_api_call.domain_details.domain",
          "ignore_missing": true
        }
      },
      {
        "date": {
          "field": "json.Action.AwsApiCallAction.FirstSeen",
          "if": "ctx.json?.Action?.AwsApiCallAction?.FirstSeen != null && ctx.json?.Action?.AwsApiCallAction?.FirstSeen != ''",
          "target_field": "aws.securityhub_findings.action.aws_api_call.first_seen",
          "formats": [
            "ISO8601",
            "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
          ],
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "date": {
          "field": "json.Action.AwsApiCallAction.LastSeen",
          "if": "ctx.json?.Action?.AwsApiCallAction?.LastSeen != null && ctx.json?.Action?.AwsApiCallAction?.LastSeen != ''",
          "target_field": "aws.securityhub_findings.action.aws_api_call.last_seen",
          "formats": [
            "ISO8601",
            "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
          ],
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "rename": {
          "field": "json.Action.AwsApiCallAction.RemoteIpDetails.City.CityName",
          "target_field": "aws.securityhub_findings.action.aws_api_call.remote_ip.city.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Action.AwsApiCallAction.RemoteIpDetails.Country.CountryCode",
          "target_field": "aws.securityhub_findings.action.aws_api_call.remote_ip.country.code",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Action.AwsApiCallAction.RemoteIpDetails.Country.CountryName",
          "target_field": "aws.securityhub_findings.action.aws_api_call.remote_ip.country.name",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.Action.AwsApiCallAction.RemoteIpDetails.GeoLocation.Lat",
          "target_field": "aws.securityhub_findings.action.aws_api_call.remote_ip.geolocation.latitude",
          "if": "ctx.json?.Action?.AwsApiCallAction?.RemoteIpDetails?.GeoLocation?.Lat != ''",
          "type": "double",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "json.Action.AwsApiCallAction.RemoteIpDetails.GeoLocation.Lon",
          "target_field": "aws.securityhub_findings.action.aws_api_call.remote_ip.geolocation.longitude",
          "if": "ctx.json?.Action?.AwsApiCallAction?.RemoteIpDetails?.GeoLocation?.Lon != ''",
          "type": "double",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "json.Action.AwsApiCallAction.RemoteIpDetails.IpAddressV4",
          "target_field": "aws.securityhub_findings.action.aws_api_call.remote_ip.ip.address_v4",
          "if": "ctx.json?.Action?.AwsApiCallAction?.RemoteIpDetails?.IpAddressV4 != ''",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "json.Action.AwsApiCallAction.RemoteIpDetails.Organization.Asn",
          "target_field": "aws.securityhub_findings.action.aws_api_call.remote_ip.organization.asn",
          "if": "ctx.json?.Action?.AwsApiCallAction?.RemoteIpDetails?.Organization?.Asn != ''",
          "type": "string",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "rename": {
          "field": "json.Action.AwsApiCallAction.RemoteIpDetails.Organization.AsnOrg",
          "target_field": "aws.securityhub_findings.action.aws_api_call.remote_ip.organization.asn_organization",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Action.AwsApiCallAction.RemoteIpDetails.Organization.Isp",
          "target_field": "aws.securityhub_findings.action.aws_api_call.remote_ip.organization.internet_service_provider",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Action.AwsApiCallAction.RemoteIpDetails.Organization.Org",
          "target_field": "aws.securityhub_findings.action.aws_api_call.remote_ip.organization.internet_provider",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Action.AwsApiCallAction.ServiceName",
          "target_field": "aws.securityhub_findings.action.aws_api_call.service.name",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.Action.DnsRequestAction.Blocked",
          "target_field": "aws.securityhub_findings.action.dns_request.blocked",
          "if": "ctx.json?.Action?.DnsRequestAction?.Blocked != ''",
          "type": "boolean",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "rename": {
          "field": "json.Action.DnsRequestAction.Domain",
          "target_field": "aws.securityhub_findings.action.dns_request.domain",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Action.DnsRequestAction.Protocol",
          "target_field": "aws.securityhub_findings.action.dns_request.protocol",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.Action.NetworkConnectionAction.Blocked",
          "target_field": "aws.securityhub_findings.action.network_connection.blocked",
          "if": "ctx.json?.Action?.NetworkConnectionAction?.Blocked != ''",
          "type": "boolean",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "rename": {
          "field": "json.Action.NetworkConnectionAction.ConnectionDirection",
          "target_field": "aws.securityhub_findings.action.network_connection.direction",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.Action.NetworkConnectionAction.LocalPortDetails.Port",
          "target_field": "aws.securityhub_findings.action.network_connection.local.port.number",
          "if": "ctx.json?.Action?.NetworkConnectionAction?.LocalPortDetails?.Port != ''",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "rename": {
          "field": "json.Action.NetworkConnectionAction.LocalPortDetails.PortName",
          "target_field": "aws.securityhub_findings.action.network_connection.local.port.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Action.NetworkConnectionAction.Protocol",
          "target_field": "aws.securityhub_findings.action.network_connection.protocol",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Action.NetworkConnectionAction.RemoteIpDetails.City.CityName",
          "target_field": "aws.securityhub_findings.action.network_connection.remote_ip.city.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Action.NetworkConnectionAction.RemoteIpDetails.Country.CountryCode",
          "target_field": "aws.securityhub_findings.action.network_connection.remote_ip.country.code",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Action.NetworkConnectionAction.RemoteIpDetails.Country.CountryName",
          "target_field": "aws.securityhub_findings.action.network_connection.remote_ip.country.name",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.Action.NetworkConnectionAction.RemoteIpDetails.GeoLocation.Lat",
          "target_field": "aws.securityhub_findings.action.network_connection.remote_ip.geolocation.latitude",
          "if": "ctx.json?.Action?.NetworkConnectionAction?.RemoteIpDetails?.GeoLocation?.Lat != ''",
          "type": "double",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "json.Action.NetworkConnectionAction.RemoteIpDetails.GeoLocation.Lon",
          "target_field": "aws.securityhub_findings.action.network_connection.remote_ip.geolocation.longitude",
          "if": "ctx.json?.Action?.NetworkConnectionAction?.RemoteIpDetails?.GeoLocation?.Lon != ''",
          "type": "double",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "json.Action.NetworkConnectionAction.RemoteIpDetails.IpAddressV4",
          "target_field": "aws.securityhub_findings.action.network_connection.remote_ip.ip.address_v4",
          "if": "ctx.json?.Action?.NetworkConnectionAction?.RemoteIpDetails?.IpAddressV4 != ''",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "json.Action.NetworkConnectionAction.RemoteIpDetails.Organization.Asn",
          "target_field": "aws.securityhub_findings.action.network_connection.remote_ip.organization.asn",
          "if": "ctx.json?.Action?.NetworkConnectionAction?.RemoteIpDetails?.Organization?.Asn != ''",
          "type": "string",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "rename": {
          "field": "json.Action.NetworkConnectionAction.RemoteIpDetails.Organization.AsnOrg",
          "target_field": "aws.securityhub_findings.action.network_connection.remote_ip.organization.asn_organization",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Action.NetworkConnectionAction.RemoteIpDetails.Organization.Isp",
          "target_field": "aws.securityhub_findings.action.network_connection.remote_ip.organization.internet_service_provider",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Action.NetworkConnectionAction.RemoteIpDetails.Organization.Org",
          "target_field": "aws.securityhub_findings.action.network_connection.remote_ip.organization.internet_provider",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.Action.NetworkConnectionAction.RemotePortDetails.Port",
          "target_field": "aws.securityhub_findings.action.network_connection.remote.port.number",
          "if": "ctx.json?.Action?.NetworkConnectionAction?.RemotePortDetails?.Port != ''",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "rename": {
          "field": "json.Action.NetworkConnectionAction.RemotePortDetails.PortName",
          "target_field": "aws.securityhub_findings.action.network_connection.remote.port.name",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.Action.PortProbeAction.Blocked",
          "target_field": "aws.securityhub_findings.action.port_probe.blocked",
          "if": "ctx.json?.Action?.PortProbeAction?.Blocked != ''",
          "type": "boolean",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "foreach": {
          "field": "json.Action.PortProbeAction.PortProbeDetails",
          "processor": {
            "convert": {
              "field": "_ingest._value.LocalIpDetails.IpAddressV4",
              "target_field": "_ingest._value.local.ip.address_v4",
              "type": "ip",
              "ignore_missing": true,
              "on_failure": [
                {
                  "append": {
                    "field": "error.message",
                    "value": "{{{_ingest.on_failure_message}}}"
                  }
                }
              ]
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Action?.PortProbeAction?.PortProbeDetails != null && ctx.json?.Action?.PortProbeAction?.PortProbeDetails instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Action.PortProbeAction.PortProbeDetails",
          "processor": {
            "convert": {
              "field": "_ingest._value.LocalPortDetails.Port",
              "target_field": "_ingest._value.local.port.number",
              "type": "long",
              "ignore_missing": true,
              "on_failure": [
                {
                  "append": {
                    "field": "error.message",
                    "value": "{{{_ingest.on_failure_message}}}"
                  }
                }
              ]
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Action?.PortProbeAction?.PortProbeDetails != null && ctx.json?.Action?.PortProbeAction?.PortProbeDetails instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Action.PortProbeAction.PortProbeDetails",
          "processor": {
            "rename": {
              "field": "_ingest._value.LocalPortDetails.PortName",
              "target_field": "_ingest._value.local.port.name",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Action?.PortProbeAction?.PortProbeDetails != null && ctx.json?.Action?.PortProbeAction?.PortProbeDetails instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Action.PortProbeAction.PortProbeDetails",
          "processor": {
            "rename": {
              "field": "_ingest._value.RemoteIpDetails.City.CityName",
              "target_field": "_ingest._value.remote_ip.city.name",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Action?.PortProbeAction?.PortProbeDetails != null && ctx.json?.Action?.PortProbeAction?.PortProbeDetails instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Action.PortProbeAction.PortProbeDetails",
          "processor": {
            "rename": {
              "field": "_ingest._value.RemoteIpDetails.Country.CountryCode",
              "target_field": "_ingest._value.remote_ip.country.code",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Action?.PortProbeAction?.PortProbeDetails != null && ctx.json?.Action?.PortProbeAction?.PortProbeDetails instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Action.PortProbeAction.PortProbeDetails",
          "processor": {
            "rename": {
              "field": "_ingest._value.RemoteIpDetails.Country.CountryName",
              "target_field": "_ingest._value.remote_ip.country.name",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Action?.PortProbeAction?.PortProbeDetails != null && ctx.json?.Action?.PortProbeAction?.PortProbeDetails instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Action.PortProbeAction.PortProbeDetails",
          "processor": {
            "convert": {
              "field": "_ingest._value.RemoteIpDetails.GeoLocation.Lat",
              "target_field": "_ingest._value.remote_ip.geolocation.latitude",
              "type": "double",
              "ignore_missing": true,
              "on_failure": [
                {
                  "append": {
                    "field": "error.message",
                    "value": "{{{_ingest.on_failure_message}}}"
                  }
                }
              ]
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Action?.PortProbeAction?.PortProbeDetails != null && ctx.json?.Action?.PortProbeAction?.PortProbeDetails instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Action.PortProbeAction.PortProbeDetails",
          "processor": {
            "convert": {
              "field": "_ingest._value.RemoteIpDetails.GeoLocation.Lon",
              "target_field": "_ingest._value.remote_ip.geolocation.longitude",
              "type": "double",
              "ignore_missing": true,
              "on_failure": [
                {
                  "append": {
                    "field": "error.message",
                    "value": "{{{_ingest.on_failure_message}}}"
                  }
                }
              ]
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Action?.PortProbeAction?.PortProbeDetails != null && ctx.json?.Action?.PortProbeAction?.PortProbeDetails instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Action.PortProbeAction.PortProbeDetails",
          "processor": {
            "convert": {
              "field": "_ingest._value.RemoteIpDetails.IpAddressV4",
              "target_field": "_ingest._value.remote_ip.ip.address_v4",
              "type": "ip",
              "ignore_missing": true,
              "on_failure": [
                {
                  "append": {
                    "field": "error.message",
                    "value": "{{{_ingest.on_failure_message}}}"
                  }
                }
              ]
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Action?.PortProbeAction?.PortProbeDetails != null && ctx.json?.Action?.PortProbeAction?.PortProbeDetails instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Action.PortProbeAction.PortProbeDetails",
          "processor": {
            "convert": {
              "field": "_ingest._value.RemoteIpDetails.Organization.Asn",
              "target_field": "_ingest._value.remote_ip.organization.asn",
              "type": "string",
              "ignore_missing": true,
              "on_failure": [
                {
                  "append": {
                    "field": "error.message",
                    "value": "{{{_ingest.on_failure_message}}}"
                  }
                }
              ]
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Action?.PortProbeAction?.PortProbeDetails != null && ctx.json?.Action?.PortProbeAction?.PortProbeDetails instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Action.PortProbeAction.PortProbeDetails",
          "processor": {
            "rename": {
              "field": "_ingest._value.RemoteIpDetails.Organization.AsnOrg",
              "target_field": "_ingest._value.remote_ip.organization.asn_organization",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Action?.PortProbeAction?.PortProbeDetails != null && ctx.json?.Action?.PortProbeAction?.PortProbeDetails instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Action.PortProbeAction.PortProbeDetails",
          "processor": {
            "rename": {
              "field": "_ingest._value.RemoteIpDetails.Organization.Isp",
              "target_field": "_ingest._value.remote_ip.organization.internet_service_provider",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Action?.PortProbeAction?.PortProbeDetails != null && ctx.json?.Action?.PortProbeAction?.PortProbeDetails instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Action.PortProbeAction.PortProbeDetails",
          "processor": {
            "rename": {
              "field": "_ingest._value.RemoteIpDetails.Organization.Org",
              "target_field": "_ingest._value.remote_ip.organization.internet_provider",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Action?.PortProbeAction?.PortProbeDetails != null && ctx.json?.Action?.PortProbeAction?.PortProbeDetails instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Action.PortProbeAction.PortProbeDetails",
          "processor": {
            "remove": {
              "field": [
                "_ingest._value.LocalIpDetails",
                "_ingest._value.LocalPortDetails",
                "_ingest._value.RemoteIpDetails"
              ],
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Action?.PortProbeAction?.PortProbeDetails != null && ctx.json?.Action?.PortProbeAction?.PortProbeDetails instanceof List"
        }
      },
      {
        "rename": {
          "field": "json.Action.PortProbeAction.PortProbeDetails",
          "target_field": "aws.securityhub_findings.action.port_probe.details",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.AwsAccountId",
          "target_field": "aws.securityhub_findings.aws_account_id",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "cloud.account.id",
          "copy_from": "aws.securityhub_findings.aws_account_id",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.CompanyName",
          "target_field": "aws.securityhub_findings.company.name",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "organization.name",
          "copy_from": "aws.securityhub_findings.company.name",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.Compliance.RelatedRequirements",
          "target_field": "aws.securityhub_findings.compliance.related_requirements",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Compliance.Status",
          "target_field": "aws.securityhub_findings.compliance.status",
          "ignore_missing": true
        }
      },
      {
        "foreach": {
          "field": "json.Compliance.StatusReasons",
          "processor": {
            "rename": {
              "field": "_ingest._value.Description",
              "target_field": "_ingest._value.description",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Compliance?.StatusReasons != null && ctx.json?.Compliance?.StatusReasons instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Compliance.StatusReasons",
          "processor": {
            "rename": {
              "field": "_ingest._value.ReasonCode",
              "target_field": "_ingest._value.reason_code",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Compliance?.StatusReasons != null && ctx.json?.Compliance?.StatusReasons instanceof List"
        }
      },
      {
        "rename": {
          "field": "json.Compliance.StatusReasons",
          "target_field": "aws.securityhub_findings.compliance.status_reasons",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.Confidence",
          "target_field": "aws.securityhub_findings.confidence",
          "if": "ctx.json?.Confidence != ''",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "date": {
          "field": "json.CreatedAt",
          "if": "ctx.json?.CreatedAt != null && ctx.json?.CreatedAt != ''",
          "target_field": "aws.securityhub_findings.created_at",
          "formats": [
            "ISO8601",
            "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
          ],
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "set": {
          "field": "@timestamp",
          "copy_from": "aws.securityhub_findings.created_at",
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "json.Criticality",
          "target_field": "aws.securityhub_findings.criticality",
          "if": "ctx.json?.Criticality != ''",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "rename": {
          "field": "json.Description",
          "target_field": "aws.securityhub_findings.description",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.FindingProviderFields.Confidence",
          "target_field": "aws.securityhub_findings.provider_fields.confidence",
          "if": "ctx.json?.FindingProviderFields?.Confidence != ''",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "json.FindingProviderFields.Criticality",
          "target_field": "aws.securityhub_findings.provider_fields.criticality",
          "if": "ctx.json?.FindingProviderFields?.Criticality != ''",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "foreach": {
          "field": "json.FindingProviderFields.RelatedFindings",
          "processor": {
            "rename": {
              "field": "_ingest._value.Id",
              "target_field": "_ingest._value.id",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.FindingProviderFields?.RelatedFindings != null && ctx.json?.FindingProviderFields?.RelatedFindings instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.FindingProviderFields.RelatedFindings",
          "processor": {
            "rename": {
              "field": "_ingest._value.ProductArn",
              "target_field": "_ingest._value.product.arn",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.FindingProviderFields?.RelatedFindings != null && ctx.json?.FindingProviderFields?.RelatedFindings instanceof List"
        }
      },
      {
        "rename": {
          "field": "json.FindingProviderFields.RelatedFindings",
          "target_field": "aws.securityhub_findings.provider_fields.related_findings",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.FindingProviderFields.Severity.Label",
          "target_field": "aws.securityhub_findings.provider_fields.severity.label",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.FindingProviderFields.Severity.Original",
          "target_field": "aws.securityhub_findings.provider_fields.severity.original",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.FindingProviderFields.Severity.Normalized",
          "target_field": "aws.securityhub_findings.provider_fields.severity.normalized",
          "if": "ctx.json?.FindingProviderFields?.Severity?.Normalized != ''",
          "type": "string",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "json.FindingProviderFields.Severity.Product",
          "target_field": "aws.securityhub_findings.provider_fields.severity.product",
          "if": "ctx.json?.FindingProviderFields?.Severity?.Product != ''",
          "type": "string",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "rename": {
          "field": "json.FindingProviderFields.Types",
          "target_field": "aws.securityhub_findings.provider_fields.types",
          "ignore_missing": true
        }
      },
      {
        "date": {
          "field": "json.FirstObservedAt",
          "if": "ctx.json?.FirstObservedAt != null && ctx.json?.FirstObservedAt != ''",
          "target_field": "aws.securityhub_findings.first_observed_at",
          "formats": [
            "ISO8601",
            "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
          ],
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "rename": {
          "field": "json.GeneratorId",
          "target_field": "aws.securityhub_findings.generator.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Id",
          "target_field": "aws.securityhub_findings.id",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "event.id",
          "copy_from": "aws.securityhub_findings.id",
          "ignore_failure": true
        }
      },
      {
        "date": {
          "field": "json.LastObservedAt",
          "if": "ctx.json?.LastObservedAt != null && ctx.json?.LastObservedAt != ''",
          "target_field": "aws.securityhub_findings.last_observed_at",
          "formats": [
            "ISO8601",
            "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
          ],
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "foreach": {
          "field": "json.Malware",
          "processor": {
            "rename": {
              "field": "_ingest._value.Name",
              "target_field": "_ingest._value.name",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Malware != null && ctx.json?.Malware instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Malware",
          "processor": {
            "rename": {
              "field": "_ingest._value.Path",
              "target_field": "_ingest._value.path",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Malware != null && ctx.json?.Malware instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Malware",
          "processor": {
            "rename": {
              "field": "_ingest._value.State",
              "target_field": "_ingest._value.state",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Malware != null && ctx.json?.Malware instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Malware",
          "processor": {
            "rename": {
              "field": "_ingest._value.Type",
              "target_field": "_ingest._value.type",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Malware != null && ctx.json?.Malware instanceof List"
        }
      },
      {
        "rename": {
          "field": "json.Malware",
          "target_field": "aws.securityhub_findings.malware",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Network.DestinationDomain",
          "target_field": "aws.securityhub_findings.network.destination.domain",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "destination.domain",
          "copy_from": "aws.securityhub_findings.network.destination.domain",
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "json.Network.DestinationIpV4",
          "target_field": "aws.securityhub_findings.network.destination.ip.v4",
          "if": "ctx.json?.Network?.DestinationIpV4 != ''",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "append": {
          "field": "destination.ip",
          "value": "{{{aws.securityhub_findings.network.destination.ip.v4}}}",
          "if": "ctx.aws?.securityhub_findings?.network?.destination?.ip?.v4 != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "json.Network.DestinationIpV6",
          "target_field": "aws.securityhub_findings.network.destination.ip.v6",
          "if": "ctx.json?.Network?.DestinationIpV6 != ''",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "append": {
          "field": "destination.ip",
          "value": "{{{aws.securityhub_findings.network.destination.ip.v6}}}",
          "if": "ctx.aws?.securityhub_findings?.network?.destination?.ip?.v6 != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "json.Network.DestinationPort",
          "target_field": "aws.securityhub_findings.network.destination.port",
          "if": "ctx.json?.Network?.DestinationPort != ''",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "set": {
          "field": "destination.port",
          "copy_from": "aws.securityhub_findings.network.destination.port",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.Network.Direction",
          "target_field": "aws.securityhub_findings.network.direction",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "network.direction",
          "copy_from": "aws.securityhub_findings.network.direction",
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "json.Network.OpenPortRange.Begin",
          "target_field": "aws.securityhub_findings.network.open_port_range.begin",
          "if": "ctx.json?.Network?.OpenPortRange?.Begin != ''",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "json.Network.OpenPortRange.End",
          "target_field": "aws.securityhub_findings.network.open_port_range.end",
          "if": "ctx.json?.Network?.OpenPortRange?.End != ''",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "rename": {
          "field": "json.Network.Protocol",
          "target_field": "aws.securityhub_findings.network.protocol",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "network.protocol",
          "copy_from": "aws.securityhub_findings.network.protocol",
          "ignore_failure": true
        }
      },
      {
        "lowercase": {
          "field": "network.protocol",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Network.SourceDomain",
          "target_field": "aws.securityhub_findings.network.source.domain",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "source.domain",
          "copy_from": "aws.securityhub_findings.network.source.domain",
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "json.Network.SourceIpV4",
          "target_field": "aws.securityhub_findings.network.source.ip.v4",
          "if": "ctx.json?.Network?.SourceIpV4 != ''",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "append": {
          "field": "source.ip",
          "value": "{{{aws.securityhub_findings.network.source.ip.v4}}}",
          "if": "ctx.aws?.securityhub_findings?.network?.source?.ip?.v4 != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "json.Network.SourceIpV6",
          "target_field": "aws.securityhub_findings.network.source.ip.v6",
          "if": "ctx.json?.Network?.SourceIpV6 != ''",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "append": {
          "field": "source.ip",
          "value": "{{{aws.securityhub_findings.network.source.ip.v6}}}",
          "if": "ctx.aws?.securityhub_findings?.network?.source?.ip?.v6 != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.Network.SourceMac",
          "target_field": "aws.securityhub_findings.network.source.mac",
          "ignore_missing": true
        }
      },
      {
        "gsub": {
          "field": "aws.securityhub_findings.network.source.mac",
          "pattern": "[-:.]",
          "replacement": "-",
          "ignore_missing": true
        }
      },
      {
        "uppercase": {
          "field": "aws.securityhub_findings.network.source.mac",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "source.mac",
          "copy_from": "aws.securityhub_findings.network.source.mac",
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "json.Network.SourcePort",
          "target_field": "aws.securityhub_findings.network.source.port",
          "if": "ctx.json?.Network?.SourcePort != ''",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "set": {
          "field": "source.port",
          "copy_from": "aws.securityhub_findings.network.source.port",
          "ignore_failure": true
        }
      },
      {
        "foreach": {
          "field": "json.NetworkPath",
          "processor": {
            "rename": {
              "field": "_ingest._value.ComponentId",
              "target_field": "_ingest._value.component.id",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.NetworkPath != null && ctx.json?.NetworkPath instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.NetworkPath",
          "processor": {
            "rename": {
              "field": "_ingest._value.ComponentType",
              "target_field": "_ingest._value.component.type",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.NetworkPath != null && ctx.json?.NetworkPath instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.NetworkPath",
          "processor": {
            "rename": {
              "field": "_ingest._value.Egress.Destination.Address",
              "target_field": "_ingest._value.egress.destination.address",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.NetworkPath != null && ctx.json?.NetworkPath instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.NetworkPath",
          "processor": {
            "foreach": {
              "field": "_ingest._value.Egress.Destination.PortRanges",
              "processor": {
                "convert": {
                  "field": "_ingest._value.Begin",
                  "target_field": "_ingest._value.begin",
                  "type": "long",
                  "ignore_missing": true,
                  "on_failure": [
                    {
                      "append": {
                        "field": "error.message",
                        "value": "{{{_ingest.on_failure_message}}}"
                      }
                    }
                  ]
                }
              },
              "ignore_failure": true,
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.NetworkPath != null && ctx.json?.NetworkPath instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.NetworkPath",
          "processor": {
            "foreach": {
              "field": "_ingest._value.Egress.Destination.PortRanges",
              "processor": {
                "convert": {
                  "field": "_ingest._value.End",
                  "target_field": "_ingest._value.end",
                  "type": "long",
                  "ignore_missing": true,
                  "on_failure": [
                    {
                      "append": {
                        "field": "error.message",
                        "value": "{{{_ingest.on_failure_message}}}"
                      }
                    }
                  ]
                }
              },
              "ignore_failure": true,
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.NetworkPath != null && ctx.json?.NetworkPath instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.NetworkPath",
          "processor": {
            "foreach": {
              "field": "_ingest._value.Egress.Destination.PortRanges",
              "processor": {
                "remove": {
                  "field": [
                    "_ingest._value.Begin",
                    "_ingest._value.End"
                  ],
                  "ignore_missing": true
                }
              },
              "ignore_failure": true,
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.NetworkPath != null && ctx.json?.NetworkPath instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.NetworkPath",
          "processor": {
            "rename": {
              "field": "_ingest._value.Egress.Destination.PortRanges",
              "target_field": "_ingest._value.egress.destination.port_ranges",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.NetworkPath != null && ctx.json?.NetworkPath instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.NetworkPath",
          "processor": {
            "rename": {
              "field": "_ingest._value.Egress.Protocol",
              "target_field": "_ingest._value.egress.protocol",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.NetworkPath != null && ctx.json?.NetworkPath instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.NetworkPath",
          "processor": {
            "rename": {
              "field": "_ingest._value.Egress.Source.Address",
              "target_field": "_ingest._value.egress.source.address",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.NetworkPath != null && ctx.json?.NetworkPath instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.NetworkPath",
          "processor": {
            "foreach": {
              "field": "_ingest._value.Egress.Source.PortRanges",
              "processor": {
                "convert": {
                  "field": "_ingest._value.Begin",
                  "target_field": "_ingest._value.begin",
                  "type": "long",
                  "ignore_missing": true,
                  "on_failure": [
                    {
                      "append": {
                        "field": "error.message",
                        "value": "{{{_ingest.on_failure_message}}}"
                      }
                    }
                  ]
                }
              },
              "ignore_failure": true,
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.NetworkPath != null && ctx.json?.NetworkPath instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.NetworkPath",
          "processor": {
            "foreach": {
              "field": "_ingest._value.Egress.Source.PortRanges",
              "processor": {
                "convert": {
                  "field": "_ingest._value.End",
                  "target_field": "_ingest._value.end",
                  "type": "long",
                  "ignore_missing": true,
                  "on_failure": [
                    {
                      "append": {
                        "field": "error.message",
                        "value": "{{{_ingest.on_failure_message}}}"
                      }
                    }
                  ]
                }
              },
              "ignore_failure": true,
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.NetworkPath != null && ctx.json?.NetworkPath instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.NetworkPath",
          "processor": {
            "foreach": {
              "field": "_ingest._value.Egress.Source.PortRanges",
              "processor": {
                "remove": {
                  "field": [
                    "_ingest._value.Begin",
                    "_ingest._value.End"
                  ],
                  "ignore_missing": true
                }
              },
              "ignore_failure": true,
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.NetworkPath != null && ctx.json?.NetworkPath instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.NetworkPath",
          "processor": {
            "rename": {
              "field": "_ingest._value.Egress.Source.PortRanges",
              "target_field": "_ingest._value.egress.source.port_ranges",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.NetworkPath != null && ctx.json?.NetworkPath instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.NetworkPath",
          "processor": {
            "rename": {
              "field": "_ingest._value.Ingress.Destination.Address",
              "target_field": "_ingest._value.ingress.destination.address",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.NetworkPath != null && ctx.json?.NetworkPath instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.NetworkPath",
          "processor": {
            "foreach": {
              "field": "_ingest._value.Ingress.Destination.PortRanges",
              "processor": {
                "convert": {
                  "field": "_ingest._value.Begin",
                  "target_field": "_ingest._value.begin",
                  "type": "long",
                  "ignore_missing": true,
                  "on_failure": [
                    {
                      "append": {
                        "field": "error.message",
                        "value": "{{{_ingest.on_failure_message}}}"
                      }
                    }
                  ]
                }
              },
              "ignore_failure": true,
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.NetworkPath != null && ctx.json?.NetworkPath instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.NetworkPath",
          "processor": {
            "foreach": {
              "field": "_ingest._value.Ingress.Destination.PortRanges",
              "processor": {
                "convert": {
                  "field": "_ingest._value.End",
                  "target_field": "_ingest._value.end",
                  "type": "long",
                  "ignore_missing": true,
                  "on_failure": [
                    {
                      "append": {
                        "field": "error.message",
                        "value": "{{{_ingest.on_failure_message}}}"
                      }
                    }
                  ]
                }
              },
              "ignore_failure": true,
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.NetworkPath != null && ctx.json?.NetworkPath instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.NetworkPath",
          "processor": {
            "foreach": {
              "field": "_ingest._value.Ingress.Destination.PortRanges",
              "processor": {
                "remove": {
                  "field": [
                    "_ingest._value.Begin",
                    "_ingest._value.End"
                  ],
                  "ignore_missing": true
                }
              },
              "ignore_failure": true,
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.NetworkPath != null && ctx.json?.NetworkPath instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.NetworkPath",
          "processor": {
            "rename": {
              "field": "_ingest._value.Ingress.Destination.PortRanges",
              "target_field": "_ingest._value.ingress.destination.port_ranges",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.NetworkPath != null && ctx.json?.NetworkPath instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.NetworkPath",
          "processor": {
            "rename": {
              "field": "_ingest._value.Ingress.Protocol",
              "target_field": "_ingest._value.ingress.protocol",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.NetworkPath != null && ctx.json?.NetworkPath instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.NetworkPath",
          "processor": {
            "rename": {
              "field": "_ingest._value.Ingress.Source.Address",
              "target_field": "_ingest._value.ingress.source.address",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.NetworkPath != null && ctx.json?.NetworkPath instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.NetworkPath",
          "processor": {
            "foreach": {
              "field": "_ingest._value.Ingress.Source.PortRanges",
              "processor": {
                "convert": {
                  "field": "_ingest._value.Begin",
                  "target_field": "_ingest._value.begin",
                  "type": "long",
                  "ignore_missing": true,
                  "on_failure": [
                    {
                      "append": {
                        "field": "error.message",
                        "value": "{{{_ingest.on_failure_message}}}"
                      }
                    }
                  ],
                  "ignore_failure": true
                }
              },
              "ignore_failure": true,
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.NetworkPath != null && ctx.json?.NetworkPath instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.NetworkPath",
          "processor": {
            "foreach": {
              "field": "_ingest._value.Ingress.Source.PortRanges",
              "processor": {
                "convert": {
                  "field": "_ingest._value.End",
                  "target_field": "_ingest._value.end",
                  "type": "long",
                  "ignore_missing": true,
                  "on_failure": [
                    {
                      "append": {
                        "field": "error.message",
                        "value": "{{{_ingest.on_failure_message}}}"
                      }
                    }
                  ]
                }
              },
              "ignore_failure": true,
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.NetworkPath != null && ctx.json?.NetworkPath instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.NetworkPath",
          "processor": {
            "foreach": {
              "field": "_ingest._value.Ingress.Source.PortRanges",
              "processor": {
                "remove": {
                  "field": [
                    "_ingest._value.Begin",
                    "_ingest._value.End"
                  ],
                  "ignore_missing": true
                }
              },
              "ignore_failure": true,
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.NetworkPath != null && ctx.json?.NetworkPath instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.NetworkPath",
          "processor": {
            "rename": {
              "field": "_ingest._value.Ingress.Source.PortRanges",
              "target_field": "_ingest._value.ingress.source.port_ranges",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.NetworkPath != null && ctx.json?.NetworkPath instanceof List"
        }
      },
      {
        "rename": {
          "field": "json.NetworkPath",
          "target_field": "aws.securityhub_findings.network_path",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Note.Text",
          "target_field": "aws.securityhub_findings.note.text",
          "ignore_missing": true
        }
      },
      {
        "date": {
          "field": "json.Note.UpdatedAt",
          "if": "ctx.json?.Note?.UpdatedAt != null && ctx.json?.Note?.UpdatedAt != ''",
          "target_field": "aws.securityhub_findings.note.updated_at",
          "formats": [
            "ISO8601",
            "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
          ],
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "rename": {
          "field": "json.Note.UpdatedBy",
          "target_field": "aws.securityhub_findings.note.updated_by",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.PatchSummary.FailedCount",
          "target_field": "aws.securityhub_findings.patch_summary.failed.count",
          "if": "ctx.json?.PatchSummary?.FailedCount != ''",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "rename": {
          "field": "json.PatchSummary.Id",
          "target_field": "aws.securityhub_findings.patch_summary.id",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.PatchSummary.InstalledCount",
          "target_field": "aws.securityhub_findings.patch_summary.installed.count",
          "if": "ctx.json?.PatchSummary?.InstalledCount != ''",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "json.PatchSummary.InstalledOtherCount",
          "target_field": "aws.securityhub_findings.patch_summary.installed.other.count",
          "if": "ctx.json?.PatchSummary?.InstalledOtherCount != ''",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "json.PatchSummary.InstalledPendingReboot",
          "target_field": "aws.securityhub_findings.patch_summary.installed.pending_reboot",
          "if": "ctx.json?.PatchSummary?.InstalledPendingReboot != ''",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "json.PatchSummary.InstalledRejectedCount",
          "target_field": "aws.securityhub_findings.patch_summary.installed.rejected.count",
          "if": "ctx.json?.PatchSummary?.InstalledRejectedCount != ''",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "json.PatchSummary.MissingCount",
          "target_field": "aws.securityhub_findings.patch_summary.missing.count",
          "if": "ctx.json?.PatchSummary?.MissingCount != ''",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "rename": {
          "field": "json.PatchSummary.Operation",
          "target_field": "aws.securityhub_findings.patch_summary.operation.type",
          "ignore_missing": true
        }
      },
      {
        "date": {
          "field": "json.PatchSummary.OperationEndTime",
          "if": "ctx.json?.PatchSummary?.OperationEndTime != null && ctx.json?.PatchSummary?.OperationEndTime != ''",
          "target_field": "aws.securityhub_findings.patch_summary.operation.end_time",
          "formats": [
            "ISO8601",
            "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
          ],
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "date": {
          "field": "json.PatchSummary.OperationStartTime",
          "if": "ctx.json?.PatchSummary?.OperationStartTime != null && ctx.json?.PatchSummary?.OperationStartTime != ''",
          "target_field": "aws.securityhub_findings.patch_summary.operation.start_time",
          "formats": [
            "ISO8601",
            "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
          ],
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "rename": {
          "field": "json.PatchSummary.RebootOption",
          "target_field": "aws.securityhub_findings.patch_summary.reboot_option",
          "ignore_missing": true
        }
      },
      {
        "date": {
          "field": "json.Process.LaunchedAt",
          "if": "ctx.json?.Process?.LaunchedAt != null && ctx.json?.Process?.LaunchedAt != ''",
          "target_field": "aws.securityhub_findings.process.launched_at",
          "formats": [
            "ISO8601",
            "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
          ],
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "set": {
          "field": "process.start",
          "copy_from": "aws.securityhub_findings.process.launched_at",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.Process.Name",
          "target_field": "aws.securityhub_findings.process.name",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "process.name",
          "copy_from": "aws.securityhub_findings.process.name",
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "json.Process.ParentPid",
          "target_field": "aws.securityhub_findings.process.parent.pid",
          "if": "ctx.json?.Process?.ParentPid != ''",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "set": {
          "field": "process.parent.pid",
          "copy_from": "aws.securityhub_findings.process.parent.pid",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.Process.Path",
          "target_field": "aws.securityhub_findings.process.path",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "process.executable",
          "copy_from": "aws.securityhub_findings.process.path",
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "json.Process.Pid",
          "target_field": "aws.securityhub_findings.process.pid",
          "if": "ctx.json?.Process?.Pid != ''",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "set": {
          "field": "process.pid",
          "copy_from": "aws.securityhub_findings.process.pid",
          "ignore_failure": true
        }
      },
      {
        "date": {
          "field": "json.Process.TerminatedAt",
          "if": "ctx.json?.Process?.TerminatedAt != null && ctx.json?.Process?.TerminatedAt != ''",
          "target_field": "aws.securityhub_findings.process.terminated_at",
          "formats": [
            "ISO8601",
            "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
          ],
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "set": {
          "field": "process.end",
          "copy_from": "aws.securityhub_findings.process.terminated_at",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.ProductArn",
          "target_field": "aws.securityhub_findings.product.arn",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.ProductFields",
          "target_field": "aws.securityhub_findings.product.fields",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.ProductName",
          "target_field": "aws.securityhub_findings.product.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.RecordState",
          "target_field": "aws.securityhub_findings.record_state",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Region",
          "target_field": "aws.securityhub_findings.region",
          "ignore_missing": true
        }
      },
      {
        "foreach": {
          "field": "json.RelatedFindings",
          "processor": {
            "rename": {
              "field": "_ingest._value.Id",
              "target_field": "_ingest._value.id",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.RelatedFindings != null && ctx.json?.RelatedFindings instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.RelatedFindings",
          "processor": {
            "rename": {
              "field": "_ingest._value.ProductArn",
              "target_field": "_ingest._value.product.arn",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.RelatedFindings != null && ctx.json?.RelatedFindings instanceof List"
        }
      },
      {
        "rename": {
          "field": "json.RelatedFindings",
          "target_field": "aws.securityhub_findings.related_findings",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Remediation.Recommendation.Text",
          "target_field": "aws.securityhub_findings.remediation.recommendation.text",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Remediation.Recommendation.Url",
          "target_field": "aws.securityhub_findings.remediation.recommendation.url",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Resources",
          "target_field": "aws.securityhub_findings.resources",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.Sample",
          "target_field": "aws.securityhub_findings.sample",
          "if": "ctx.json?.Sample != ''",
          "type": "boolean",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "rename": {
          "field": "json.SchemaVersion",
          "target_field": "aws.securityhub_findings.schema.version",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Severity.Label",
          "target_field": "aws.securityhub_findings.severity.label",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.Severity.Normalized",
          "target_field": "aws.securityhub_findings.severity.normalized",
          "if": "ctx.json?.Severity?.Normalized != ''",
          "type": "string",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "rename": {
          "field": "json.Severity.Original",
          "target_field": "aws.securityhub_findings.severity.original",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.Severity.Product",
          "target_field": "aws.securityhub_findings.severity.product",
          "if": "ctx.json?.Severity?.Product != ''",
          "type": "string",
          "ignore_missing": true,
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "rename": {
          "field": "json.SourceUrl",
          "target_field": "aws.securityhub_findings.source_url",
          "ignore_missing": true
        }
      },
      {
        "uri_parts": {
          "field": "aws.securityhub_findings.source_url",
          "if": "ctx.aws?.securityhub_findings?.source_url != '' && ctx.aws?.securityhub_findings?.source_url != null",
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "set": {
          "field": "url.full",
          "value": "{{{url.original}}}",
          "ignore_failure": true
        }
      },
      {
        "foreach": {
          "field": "json.ThreatIntelIndicators",
          "processor": {
            "rename": {
              "field": "_ingest._value.Category",
              "target_field": "_ingest._value.category",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.ThreatIntelIndicators != null && ctx.json?.ThreatIntelIndicators instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.ThreatIntelIndicators",
          "processor": {
            "date": {
              "field": "_ingest._value.LastObservedAt",
              "target_field": "_ingest._value.last_observed_at",
              "formats": [
                "ISO8601",
                "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
              ],
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.ThreatIntelIndicators != null && ctx.json?.ThreatIntelIndicators instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.ThreatIntelIndicators",
          "processor": {
            "remove": {
              "field": [
                "_ingest._value.LastObservedAt"
              ],
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.ThreatIntelIndicators != null && ctx.json?.ThreatIntelIndicators instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.ThreatIntelIndicators",
          "processor": {
            "rename": {
              "field": "_ingest._value.Source",
              "target_field": "_ingest._value.source",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.ThreatIntelIndicators != null && ctx.json?.ThreatIntelIndicators instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.ThreatIntelIndicators",
          "processor": {
            "rename": {
              "field": "_ingest._value.SourceUrl",
              "target_field": "_ingest._value.source_url",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.ThreatIntelIndicators != null && ctx.json?.ThreatIntelIndicators instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.ThreatIntelIndicators",
          "processor": {
            "rename": {
              "field": "_ingest._value.Value",
              "target_field": "_ingest._value.value",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.ThreatIntelIndicators != null && ctx.json?.ThreatIntelIndicators instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.ThreatIntelIndicators",
          "processor": {
            "rename": {
              "field": "_ingest._value.Type",
              "target_field": "_ingest._value.type",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.ThreatIntelIndicators != null && ctx.json?.ThreatIntelIndicators instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.ThreatIntelIndicators",
          "processor": {
            "set": {
              "field": "threat.indicator.last_seen",
              "copy_from": "_ingest._value.last_observed_at",
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.ThreatIntelIndicators != null && ctx.json?.ThreatIntelIndicators instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.ThreatIntelIndicators",
          "processor": {
            "set": {
              "field": "threat.indicator.type",
              "copy_from": "_ingest._value.type",
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.ThreatIntelIndicators != null && ctx.json?.ThreatIntelIndicators instanceof List"
        }
      },
      {
        "rename": {
          "field": "json.ThreatIntelIndicators",
          "target_field": "aws.securityhub_findings.threat_intel_indicators",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Title",
          "target_field": "aws.securityhub_findings.title",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Types",
          "target_field": "aws.securityhub_findings.types",
          "ignore_missing": true
        }
      },
      {
        "date": {
          "field": "json.UpdatedAt",
          "if": "ctx.json?.UpdatedAt != null && ctx.json?.UpdatedAt != ''",
          "target_field": "aws.securityhub_findings.updated_at",
          "formats": [
            "ISO8601",
            "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
          ],
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "rename": {
          "field": "json.UserDefinedFields",
          "target_field": "aws.securityhub_findings.user_defined_fields",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.VerificationState",
          "target_field": "aws.securityhub_findings.verification_state",
          "ignore_missing": true
        }
      },
      {
        "foreach": {
          "field": "json.Vulnerabilities",
          "processor": {
            "foreach": {
              "field": "_ingest._value.Cvss",
              "processor": {
                "foreach": {
                  "field": "_ingest._value.Adjustments",
                  "processor": {
                    "rename": {
                      "field": "_ingest._value.Metric",
                      "target_field": "_ingest._value.metric",
                      "ignore_missing": true
                    }
                  },
                  "ignore_failure": true,
                  "ignore_missing": true
                }
              },
              "ignore_failure": true,
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Vulnerabilities != null && ctx.json?.Vulnerabilities instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Vulnerabilities",
          "processor": {
            "foreach": {
              "field": "_ingest._value.Cvss",
              "processor": {
                "foreach": {
                  "field": "_ingest._value.Adjustments",
                  "processor": {
                    "rename": {
                      "field": "_ingest._value.Reason",
                      "target_field": "_ingest._value.reason",
                      "ignore_missing": true
                    }
                  },
                  "ignore_failure": true,
                  "ignore_missing": true
                }
              },
              "ignore_failure": true,
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Vulnerabilities != null && ctx.json?.Vulnerabilities instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Vulnerabilities",
          "processor": {
            "foreach": {
              "field": "_ingest._value.Cvss",
              "processor": {
                "rename": {
                  "field": "_ingest._value.Adjustments",
                  "target_field": "_ingest._value.adjustments",
                  "ignore_missing": true
                }
              },
              "ignore_failure": true,
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Vulnerabilities != null && ctx.json?.Vulnerabilities instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Vulnerabilities",
          "processor": {
            "foreach": {
              "field": "_ingest._value.Cvss",
              "processor": {
                "convert": {
                  "field": "_ingest._value.BaseScore",
                  "target_field": "_ingest._value.base_score",
                  "type": "double",
                  "ignore_missing": true,
                  "on_failure": [
                    {
                      "append": {
                        "field": "error.message",
                        "value": "{{{_ingest.on_failure_message}}}"
                      }
                    }
                  ]
                }
              },
              "ignore_failure": true,
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Vulnerabilities != null && ctx.json?.Vulnerabilities instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Vulnerabilities",
          "processor": {
            "foreach": {
              "field": "_ingest._value.Cvss",
              "processor": {
                "rename": {
                  "field": "_ingest._value.BaseVector",
                  "target_field": "_ingest._value.base_vector",
                  "ignore_missing": true
                }
              },
              "ignore_failure": true,
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Vulnerabilities != null && ctx.json?.Vulnerabilities instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Vulnerabilities",
          "processor": {
            "foreach": {
              "field": "_ingest._value.Cvss",
              "processor": {
                "rename": {
                  "field": "_ingest._value.Source",
                  "target_field": "_ingest._value.source",
                  "ignore_missing": true
                }
              },
              "ignore_failure": true,
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Vulnerabilities != null && ctx.json?.Vulnerabilities instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Vulnerabilities",
          "processor": {
            "foreach": {
              "field": "_ingest._value.Cvss",
              "processor": {
                "rename": {
                  "field": "_ingest._value.Version",
                  "target_field": "_ingest._value.version",
                  "ignore_missing": true
                }
              },
              "ignore_failure": true,
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Vulnerabilities != null && ctx.json?.Vulnerabilities instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Vulnerabilities",
          "processor": {
            "foreach": {
              "field": "_ingest._value.Cvss",
              "processor": {
                "set": {
                  "field": "vulnerability.score.base",
                  "copy_from": "_ingest._value.base_score",
                  "ignore_failure": true
                }
              },
              "ignore_failure": true,
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Vulnerabilities != null && ctx.json?.Vulnerabilities instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Vulnerabilities",
          "processor": {
            "foreach": {
              "field": "_ingest._value.Cvss",
              "processor": {
                "set": {
                  "field": "vulnerability.score.version",
                  "copy_from": "_ingest._value.version",
                  "ignore_failure": true
                }
              },
              "ignore_failure": true,
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Vulnerabilities != null && ctx.json?.Vulnerabilities instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Vulnerabilities",
          "processor": {
            "foreach": {
              "field": "_ingest._value.Cvss",
              "processor": {
                "remove": {
                  "field": [
                    "_ingest._value.BaseScore"
                  ],
                  "ignore_missing": true
                }
              },
              "ignore_failure": true,
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Vulnerabilities != null && ctx.json?.Vulnerabilities instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Vulnerabilities",
          "processor": {
            "rename": {
              "field": "_ingest._value.Cvss",
              "target_field": "_ingest._value.cvss",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Vulnerabilities != null && ctx.json?.Vulnerabilities instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Vulnerabilities",
          "processor": {
            "rename": {
              "field": "_ingest._value.Id",
              "target_field": "_ingest._value.id",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Vulnerabilities != null && ctx.json?.Vulnerabilities instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Vulnerabilities",
          "processor": {
            "set": {
              "field": "vulnerability.id",
              "copy_from": "_ingest._value.id",
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Vulnerabilities != null && ctx.json?.Vulnerabilities instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Vulnerabilities",
          "processor": {
            "rename": {
              "field": "_ingest._value.ReferenceUrls",
              "target_field": "_ingest._value.reference_urls",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Vulnerabilities != null && ctx.json?.Vulnerabilities instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Vulnerabilities",
          "processor": {
            "set": {
              "field": "vulnerability.reference",
              "copy_from": "_ingest._value.reference_urls",
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Vulnerabilities != null && ctx.json?.Vulnerabilities instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Vulnerabilities",
          "processor": {
            "rename": {
              "field": "_ingest._value.RelatedVulnerabilities",
              "target_field": "_ingest._value.related_vulnerabilities",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Vulnerabilities != null && ctx.json?.Vulnerabilities instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Vulnerabilities",
          "processor": {
            "rename": {
              "field": "_ingest._value.Vendor.Name",
              "target_field": "_ingest._value.vendor.name",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Vulnerabilities != null && ctx.json?.Vulnerabilities instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Vulnerabilities",
          "processor": {
            "set": {
              "field": "vulnerability.scanner.vendor",
              "copy_from": "_ingest._value.vendor.name",
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Vulnerabilities != null && ctx.json?.Vulnerabilities instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Vulnerabilities",
          "processor": {
            "rename": {
              "field": "_ingest._value.Vendor.Url",
              "target_field": "_ingest._value.vendor.url",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Vulnerabilities != null && ctx.json?.Vulnerabilities instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Vulnerabilities",
          "processor": {
            "date": {
              "field": "_ingest._value.Vendor.VendorCreatedAt",
              "target_field": "_ingest._value.vendor.created_at",
              "formats": [
                "ISO8601",
                "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
              ],
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Vulnerabilities != null && ctx.json?.Vulnerabilities instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Vulnerabilities",
          "processor": {
            "rename": {
              "field": "_ingest._value.Vendor.VendorSeverity",
              "target_field": "_ingest._value.vendor.severity",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Vulnerabilities != null && ctx.json?.Vulnerabilities instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Vulnerabilities",
          "processor": {
            "date": {
              "field": "_ingest._value.Vendor.VendorUpdatedAt",
              "target_field": "_ingest._value.vendor.updated_at",
              "formats": [
                "ISO8601",
                "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
              ],
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Vulnerabilities != null && ctx.json?.Vulnerabilities instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Vulnerabilities",
          "processor": {
            "remove": {
              "field": [
                "_ingest._value.Vendor.VendorCreatedAt",
                "_ingest._value.Vendor.VendorUpdatedAt"
              ],
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Vulnerabilities != null && ctx.json?.Vulnerabilities instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Vulnerabilities",
          "processor": {
            "foreach": {
              "field": "_ingest._value.VulnerablePackages",
              "processor": {
                "rename": {
                  "field": "_ingest._value.Category",
                  "target_field": "_ingest._value.category",
                  "ignore_missing": true
                }
              },
              "ignore_failure": true,
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Vulnerabilities != null && ctx.json?.Vulnerabilities instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Vulnerabilities",
          "processor": {
            "foreach": {
              "field": "_ingest._value.VulnerablePackages",
              "processor": {
                "rename": {
                  "field": "_ingest._value.Architecture",
                  "target_field": "_ingest._value.architecture",
                  "ignore_missing": true
                }
              },
              "ignore_failure": true,
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Vulnerabilities != null && ctx.json?.Vulnerabilities instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Vulnerabilities",
          "processor": {
            "foreach": {
              "field": "_ingest._value.VulnerablePackages",
              "processor": {
                "rename": {
                  "field": "_ingest._value.Epoch",
                  "target_field": "_ingest._value.epoch",
                  "ignore_missing": true
                }
              },
              "ignore_failure": true,
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Vulnerabilities != null && ctx.json?.Vulnerabilities instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Vulnerabilities",
          "processor": {
            "foreach": {
              "field": "_ingest._value.VulnerablePackages",
              "processor": {
                "rename": {
                  "field": "_ingest._value.FilePath",
                  "target_field": "_ingest._value.file_path",
                  "ignore_missing": true
                }
              },
              "ignore_failure": true,
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Vulnerabilities != null && ctx.json?.Vulnerabilities instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Vulnerabilities",
          "processor": {
            "foreach": {
              "field": "_ingest._value.VulnerablePackages",
              "processor": {
                "rename": {
                  "field": "_ingest._value.Name",
                  "target_field": "_ingest._value.name",
                  "ignore_missing": true
                }
              },
              "ignore_failure": true,
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Vulnerabilities != null && ctx.json?.Vulnerabilities instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Vulnerabilities",
          "processor": {
            "foreach": {
              "field": "_ingest._value.VulnerablePackages",
              "processor": {
                "rename": {
                  "field": "_ingest._value.PackageManager",
                  "target_field": "_ingest._value.package_manager",
                  "ignore_missing": true
                }
              },
              "ignore_failure": true,
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Vulnerabilities != null && ctx.json?.Vulnerabilities instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Vulnerabilities",
          "processor": {
            "foreach": {
              "field": "_ingest._value.VulnerablePackages",
              "processor": {
                "rename": {
                  "field": "_ingest._value.Release",
                  "target_field": "_ingest._value.release",
                  "ignore_missing": true
                }
              },
              "ignore_failure": true,
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Vulnerabilities != null && ctx.json?.Vulnerabilities instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Vulnerabilities",
          "processor": {
            "foreach": {
              "field": "_ingest._value.VulnerablePackages",
              "processor": {
                "rename": {
                  "field": "_ingest._value.Version",
                  "target_field": "_ingest._value.version",
                  "ignore_missing": true
                }
              },
              "ignore_failure": true,
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Vulnerabilities != null && ctx.json?.Vulnerabilities instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Vulnerabilities",
          "processor": {
            "rename": {
              "field": "_ingest._value.VulnerablePackages",
              "target_field": "_ingest._value.vulnerable_packages",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Vulnerabilities != null && ctx.json?.Vulnerabilities instanceof List"
        }
      },
      {
        "rename": {
          "field": "json.Vulnerabilities",
          "target_field": "aws.securityhub_findings.vulnerabilities",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Workflow.Status",
          "target_field": "aws.securityhub_findings.workflow.status",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.WorkflowState",
          "target_field": "aws.securityhub_findings.workflow.state",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": [
            "json"
          ],
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{aws.securityhub_findings.action.aws_api_call.remote_ip.ip.address_v4}}}",
          "if": "ctx.aws?.securityhub_findings?.action?.aws_api_call?.remote_ip?.ip?.address_v4 != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{aws.securityhub_findings.action.network_connection.remote_ip.ip.address_v4}}}",
          "if": "ctx.aws?.securityhub_findings?.action?.network_connection?.remote_ip?.ip?.address_v4 != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "foreach": {
          "field": "aws.securityhub_findings.action.port_probe.details",
          "processor": {
            "append": {
              "field": "related.ip",
              "value": "{{{_ingest._value.local.ip.address_v4}}}",
              "allow_duplicates": false,
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.aws?.securityhub_findings?.action?.port_probe?.details != null && ctx.aws?.securityhub_findings?.action?.port_probe?.details instanceof List"
        }
      },
      {
        "foreach": {
          "field": "aws.securityhub_findings.action.port_probe.details",
          "processor": {
            "append": {
              "field": "related.ip",
              "value": "{{{_ingest._value.remote_ip.ip.address_v4}}}",
              "allow_duplicates": false,
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.aws?.securityhub_findings?.action?.port_probe?.details != null && ctx.aws?.securityhub_findings?.action?.port_probe?.details instanceof List"
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{aws.securityhub_findings.network.destination.ip.v4}}}",
          "if": "ctx.aws?.securityhub_findings?.network?.destination?.ip?.v4 != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{aws.securityhub_findings.network.destination.ip.v6}}}",
          "if": "ctx.aws?.securityhub_findings?.network?.destination?.ip?.v6 != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{aws.securityhub_findings.network.source.ip.v4}}}",
          "if": "ctx.aws?.securityhub_findings?.network?.source?.ip?.v4 != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{aws.securityhub_findings.network.source.ip.v6}}}",
          "if": "ctx.aws?.securityhub_findings?.network?.source?.ip?.v6 != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "if": "ctx.tags == null || !(ctx.tags.contains('preserve_duplicate_custom_fields'))",
          "field": [
            "aws.securityhub_findings.created_at",
            "aws.securityhub_findings.action.type",
            "aws.securityhub_findings.id",
            "aws.securityhub_findings.network.destination.domain",
            "aws.securityhub_findings.network.destination.ip.v4",
            "aws.securityhub_findings.network.destination.ip.v6",
            "aws.securityhub_findings.network.destination.port",
            "aws.securityhub_findings.network.direction",
            "aws.securityhub_findings.network.protocol",
            "aws.securityhub_findings.network.source.domain",
            "aws.securityhub_findings.network.source.ip.v4",
            "aws.securityhub_findings.network.source.ip.v6",
            "aws.securityhub_findings.network.source.mac",
            "aws.securityhub_findings.network.source.port",
            "aws.securityhub_findings.process.launched_at",
            "aws.securityhub_findings.process.name",
            "aws.securityhub_findings.process.parent.pid",
            "aws.securityhub_findings.process.path",
            "aws.securityhub_findings.process.pid",
            "aws.securityhub_findings.process.terminated_at"
          ],
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "foreach": {
          "field": "aws.securityhub_findings.threat_intel_indicators",
          "processor": {
            "remove": {
              "field": [
                "_ingest._value.last_observed_at",
                "_ingest._value.type"
              ],
              "if": "ctx.tags == null || !(ctx.tags.contains('preserve_duplicate_custom_fields'))",
              "ignore_failure": true,
              "ignore_missing": true
            }
          },
          "ignore_missing": true
        }
      },
      {
        "foreach": {
          "field": "aws.securityhub_findings.vulnerabilities",
          "processor": {
            "remove": {
              "field": [
                "_ingest._value.cvss.base_score",
                "_ingest._value.cvss.version",
                "_ingest._value.id",
                "_ingest._value.reference_urls",
                "_ingest._value.vendor.name"
              ],
              "if": "ctx.tags == null || !(ctx.tags.contains('preserve_duplicate_custom_fields'))",
              "ignore_failure": true,
              "ignore_missing": true
            }
          },
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "script": {
          "description": "Drops null/empty values recursively.",
          "lang": "painless",
          "source": "boolean dropEmptyFields(Object object) { if (object == null || object == \"\") { return true; } else if (object instanceof Map) { ((Map) object).values().removeIf(value -> dropEmptyFields(value)); return (((Map) object).size() == 0); } else if (object instanceof List) { ((List) object).removeIf(value -> dropEmptyFields(value)); return (((List) object).length == 0); } return false; } dropEmptyFields(ctx);"
        }
      },
      {
        "pipeline": {
          "name": "logs-aws.securityhub_findings@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "append": {
          "field": "error.message",
          "value": "{{{ _ingest.on_failure_message }}}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "logs-elastic_agent.osquerybeat-1.3.5": {
    "processors": [
      {
        "pipeline": {
          "name": "logs-elastic_agent.osquerybeat@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "elastic_agent"
      }
    }
  },
  ".fleet_final_pipeline-1": {
    "version": 3,
    "_meta": {
      "managed_by": "fleet",
      "managed": true
    },
    "description": "Final pipeline for processing all incoming Fleet Agent documents.\n",
    "processors": [
      {
        "date": {
          "description": "Add time when event was ingested (and remove sub-seconds to improve storage efficiency)",
          "tag": "truncate-subseconds-event-ingested",
          "field": "_ingest.timestamp",
          "target_field": "event.ingested",
          "formats": [
            "ISO8601"
          ],
          "output_format": "date_time_no_millis",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "description": "Remove any pre-existing untrusted values.",
          "field": [
            "event.agent_id_status",
            "_security"
          ],
          "ignore_missing": true
        }
      },
      {
        "set_security_user": {
          "field": "_security",
          "properties": [
            "authentication_type",
            "username",
            "realm",
            "api_key"
          ]
        }
      },
      {
        "script": {
          "description": "Add event.agent_id_status based on the API key metadata and the agent.id contained in the event.\n",
          "tag": "agent-id-status",
          "source": "boolean is_user_trusted(def ctx, def users) {\n  if (ctx?._security?.username == null) {\n    return false;\n  }\n\n  def user = null;\n  for (def item : users) {\n    if (item?.username == ctx._security.username) {\n      user = item;\n      break;\n    }\n  }\n\n  if (user == null || user?.realm == null || ctx?._security?.realm?.name == null) {\n    return false;\n  }\n\n  if (ctx._security.realm.name != user.realm) {\n    return false;\n  }\n\n  return true;\n}\n\nString verified(def ctx, def params) {\n  // No agent.id field to validate.\n  if (ctx?.agent?.id == null) {\n    return \"missing\";\n  }\n\n  // Check auth metadata from API key.\n  if (ctx?._security?.authentication_type == null\n      // Agents only use API keys.\n      || ctx._security.authentication_type != 'API_KEY'\n      // Verify the API key owner before trusting any metadata it contains.\n      || !is_user_trusted(ctx, params.trusted_users)\n      // Verify the API key has metadata indicating the assigned agent ID.\n      || ctx?._security?.api_key?.metadata?.agent_id == null) {\n    return \"auth_metadata_missing\";\n  }\n\n  // The API key can only be used represent the agent.id it was issued to.\n  if (ctx._security.api_key.metadata.agent_id != ctx.agent.id) {\n    // Potential masquerade attempt.\n    return \"mismatch\";\n  }\n\n  return \"verified\";\n}\n\nif (ctx?.event == null) {\n  ctx.event = [:];\n}\n\nctx.event.agent_id_status = verified(ctx, params);",
          "params": {
            "trusted_users": [
              {
                "username": "elastic/fleet-server",
                "realm": "_service_account"
              },
              {
                "username": "cloud-internal-agent-server",
                "realm": "found"
              },
              {
                "username": "elastic",
                "realm": "reserved"
              }
            ]
          }
        }
      },
      {
        "remove": {
          "field": "_security",
          "ignore_missing": true
        }
      }
    ],
    "on_failure": [
      {
        "remove": {
          "field": "_security",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "append": {
          "field": "error.message",
          "value": [
            "failed in Fleet agent final_pipeline: {{ _ingest.on_failure_message }}"
          ]
        }
      }
    ]
  },
  "logs-dns_debug-default": {
    "description": "Pipeline for `dns_debug` dataset",
    "processors": [
      {
        "grok": {
          "field": "message",
          "patterns": [
            "Msg length = %{DATA} \\(%{DATA:dns.length:int}\\)"
          ],
          "ignore_missing": true,
          "ignore_failure": true,
          "description": "Extract total packet length in bytes"
        }
      },
      {
        "set": {
          "field": "dns.question.class",
          "value": "IN",
          "override": false,
          "ignore_failure": true,
          "description": "Set question class if not already set"
        }
      },
      {
        "geoip": {
          "target_field": "source.geo",
          "ignore_missing": true,
          "field": "source.ip"
        }
      },
      {
        "geoip": {
          "field": "destination.ip",
          "target_field": "destination.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "field": "destination.ip",
          "target_field": "destination.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true,
          "database_file": "GeoLite2-ASN.mmdb"
        }
      },
      {
        "rename": {
          "ignore_missing": true,
          "field": "source.as.asn",
          "target_field": "source.as.number"
        }
      },
      {
        "rename": {
          "field": "source.as.organization_name",
          "target_field": "source.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "destination.as.asn",
          "target_field": "destination.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "destination.as.organization_name",
          "target_field": "destination.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "value": "{{host.name}}",
          "allow_duplicates": false,
          "if": "ctx.host?.name != null && ctx.host?.name != ''",
          "field": "related.hosts"
        }
      }
    ],
    "on_failure": [
      {
        "append": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ]
  },
  "metrics-aws.firewall_metrics-1.25.2": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-aws.firewall_metrics@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "metrics-aws.ec2_metrics-1.25.2": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-aws.ec2_metrics@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "logs-panw.panos-3.1.1": {
    "description": "Pipeline for Palo Alto Networks PAN-OS Logs",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.4.0"
        }
      },
      {
        "set": {
          "field": "observer.vendor",
          "value": "Palo Alto Networks"
        }
      },
      {
        "set": {
          "field": "observer.product",
          "value": "PAN-OS"
        }
      },
      {
        "set": {
          "field": "observer.type",
          "value": "firewall"
        }
      },
      {
        "set": {
          "field": "event.timezone",
          "value": "{{{_conf.tz_offset}}}",
          "if": "ctx._conf?.tz_offset != null && ctx._conf?.tz_offset != 'local'"
        }
      },
      {
        "set": {
          "field": "event.original",
          "copy_from": "message",
          "if": "ctx.event?.original == null"
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "_temp_.message"
        }
      },
      {
        "grok": {
          "field": "_temp_.message",
          "patterns": [
            "^%{DATA},%{TIMESTAMP:event.created},%{FIELD:observer.serial_number},%{FIELD:panw.panos.type},(?:%{FIELD:panw.panos.sub_type})?,%{FIELD:_temp_.config_version},%{TIMESTAMP:_temp_.generated_time},%{GREEDYDATA:message}$"
          ],
          "pattern_definitions": {
            "TIMESTAMP": "%{PANW_DATE}|%{TIMESTAMP_ISO8601}",
            "PANW_DATE": "%{YEAR}/%{MONTHNUM}/%{MONTHDAY} %{TIME}",
            "FIELD": "[^,]*"
          }
        }
      },
      {
        "pipeline": {
          "if": "ctx.panw?.panos?.type == \"TRAFFIC\"",
          "name": "logs-panw.panos-3.1.1-traffic"
        }
      },
      {
        "pipeline": {
          "if": "ctx.panw?.panos?.type == \"THREAT\"",
          "name": "logs-panw.panos-3.1.1-threat"
        }
      },
      {
        "pipeline": {
          "if": "ctx.panw?.panos?.type == \"HIPMATCH\" || ctx.panw?.panos?.type == \"HIP-MATCH\"",
          "name": "logs-panw.panos-3.1.1-hipmatch"
        }
      },
      {
        "pipeline": {
          "if": "ctx.panw?.panos?.type == \"USERID\"",
          "name": "logs-panw.panos-3.1.1-userid"
        }
      },
      {
        "pipeline": {
          "if": "ctx.panw?.panos?.type == \"GLOBALPROTECT\"",
          "name": "logs-panw.panos-3.1.1-globalprotect"
        }
      },
      {
        "pipeline": {
          "if": "ctx.panw?.panos?.type == \"CONFIG\"",
          "name": "logs-panw.panos-3.1.1-config"
        }
      },
      {
        "pipeline": {
          "if": "ctx.panw?.panos?.type == \"DECRYPTION\"",
          "name": "logs-panw.panos-3.1.1-decryption"
        }
      },
      {
        "pipeline": {
          "if": "ctx.panw?.panos?.type == \"SYSTEM\"",
          "name": "logs-panw.panos-3.1.1-system"
        }
      },
      {
        "pipeline": {
          "if": "ctx.panw?.panos?.type == \"AUTHENTICATION\"",
          "name": "logs-panw.panos-3.1.1-authentication"
        }
      },
      {
        "pipeline": {
          "if": "ctx.panw?.panos?.type == \"CORRELATION\"",
          "name": "logs-panw.panos-3.1.1-correlated_event"
        }
      },
      {
        "pipeline": {
          "if": "ctx.panw?.panos?.type == \"GTP\"",
          "name": "logs-panw.panos-3.1.1-gtp"
        }
      },
      {
        "pipeline": {
          "if": "ctx.panw?.panos?.type == \"IPTAG\"",
          "name": "logs-panw.panos-3.1.1-ip_tag"
        }
      },
      {
        "pipeline": {
          "if": "ctx.panw?.panos?.type == \"SCTP\"",
          "name": "logs-panw.panos-3.1.1-sctp"
        }
      },
      {
        "pipeline": {
          "if": "ctx.panw.panos?.type == \"START\" || ctx.panw.panos?.type == \"END\"",
          "name": "logs-panw.panos-3.1.1-tunnel_inspection"
        }
      },
      {
        "set": {
          "field": "panw.panos.observer.serial_number",
          "copy_from": "observer.serial_number",
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "_temp_.srcuser",
          "ignore_missing": true,
          "patterns": [
            "%{HOSTNAME:source.user.domain}\\\\%{USERNAME:source.user.name}",
            "%{USERNAME:source.user.name}@%{HOSTNAME:source.user.domain}",
            "%{USERNAME:source.user.name}"
          ],
          "if": "ctx._temp_?.srcuser != null"
        }
      },
      {
        "date": {
          "if": "ctx.event?.timezone == null",
          "field": "_temp_.generated_time",
          "formats": [
            "yyyy/MM/dd HH:mm:ss",
            "strict_date_optional_time_nanos"
          ],
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{ _ingest.on_failure_message }}"
              }
            }
          ]
        }
      },
      {
        "date": {
          "if": "ctx.event?.timezone != null",
          "field": "_temp_.generated_time",
          "formats": [
            "yyyy/MM/dd HH:mm:ss",
            "strict_date_optional_time_nanos"
          ],
          "timezone": "{{{ event.timezone }}}",
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{ _ingest.on_failure_message }}"
              }
            }
          ]
        }
      },
      {
        "set": {
          "field": "panw.panos.generated_time",
          "copy_from": "@timestamp",
          "ignore_failure": true
        }
      },
      {
        "date": {
          "if": "ctx.event?.timezone == null && ctx.event?.created != null",
          "field": "event.created",
          "target_field": "event.created",
          "formats": [
            "yyyy/MM/dd HH:mm:ss",
            "strict_date_optional_time_nanos"
          ],
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{ _ingest.on_failure_message }}"
              }
            }
          ]
        }
      },
      {
        "date": {
          "if": "ctx.event?.timezone != null && ctx.event?.created != null",
          "field": "event.created",
          "target_field": "event.created",
          "formats": [
            "yyyy/MM/dd HH:mm:ss",
            "strict_date_optional_time_nanos"
          ],
          "timezone": "{{{ event.timezone }}}",
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{ _ingest.on_failure_message }}"
              }
            }
          ]
        }
      },
      {
        "set": {
          "field": "panw.panos.received_time",
          "copy_from": "event.created",
          "ignore_failure": true
        }
      },
      {
        "date": {
          "if": "ctx.event?.timezone == null",
          "field": "_temp_.logged_time",
          "target_field": "panw.panos.logged_time",
          "formats": [
            "yyyy/MM/dd HH:mm:ss",
            "strict_date_optional_time_nanos",
            "ISO8601"
          ],
          "ignore_failure": true
        }
      },
      {
        "date": {
          "if": "ctx.event?.timezone != null",
          "field": "_temp_.logged_time",
          "target_field": "panw.panos.logged_time",
          "formats": [
            "yyyy/MM/dd HH:mm:ss",
            "strict_date_optional_time_nanos",
            "ISO8601"
          ],
          "timezone": "{{{ event.timezone }}}",
          "ignore_failure": true
        }
      },
      {
        "date": {
          "if": "ctx.event?.timezone == null",
          "field": "_temp_.high_res_timestamp",
          "target_field": "panw.panos.high_resolution_timestamp",
          "formats": [
            "yyyy/MM/dd HH:mm:ss",
            "strict_date_optional_time_nanos",
            "ISO8601"
          ],
          "ignore_failure": true
        }
      },
      {
        "date": {
          "if": "ctx.event?.timezone != null",
          "field": "_temp_.high_res_timestamp",
          "target_field": "panw.panos.high_resolution_timestamp",
          "formats": [
            "yyyy/MM/dd HH:mm:ss",
            "strict_date_optional_time_nanos",
            "ISO8601"
          ],
          "timezone": "{{{ event.timezone }}}",
          "ignore_failure": true
        }
      },
      {
        "date": {
          "if": "ctx.event?.timezone == null && ctx.event?.start != null",
          "field": "event.start",
          "target_field": "event.start",
          "ignore_failure": true,
          "formats": [
            "yyyy/MM/dd HH:mm:ss",
            "strict_date_optional_time_nanos",
            "ISO8601"
          ]
        }
      },
      {
        "date": {
          "if": "ctx.event?.timezone != null && ctx.event?.start != null",
          "field": "event.start",
          "target_field": "event.start",
          "timezone": "{{{ event.timezone }}}",
          "ignore_failure": true,
          "formats": [
            "yyyy/MM/dd HH:mm:ss",
            "strict_date_optional_time_nanos",
            "ISO8601"
          ]
        }
      },
      {
        "date": {
          "if": "ctx.event?.timezone == null && ctx.panw?.panos?.start_time != null",
          "field": "panw.panos.start_time",
          "target_field": "panw.panos.start_time",
          "ignore_failure": true,
          "formats": [
            "yyyy/MM/dd HH:mm:ss",
            "strict_date_optional_time_nanos",
            "ISO8601"
          ]
        }
      },
      {
        "date": {
          "if": "ctx.event?.timezone != null && ctx.panw?.panos?.start_time != null",
          "field": "panw.panos.start_time",
          "target_field": "panw.panos.start_time",
          "timezone": "{{{ event.timezone }}}",
          "ignore_failure": true,
          "formats": [
            "yyyy/MM/dd HH:mm:ss",
            "strict_date_optional_time_nanos",
            "ISO8601"
          ]
        }
      },
      {
        "date": {
          "if": "ctx.event?.timezone == null && ctx.panw?.panos?.parent_session?.start_time != null",
          "field": "panw.panos.parent_session.start_time",
          "target_field": "panw.panos.parent_session.start_time",
          "ignore_failure": true,
          "formats": [
            "yyyy/MM/dd HH:mm:ss",
            "strict_date_optional_time_nanos",
            "ISO8601"
          ]
        }
      },
      {
        "date": {
          "if": "ctx.event?.timezone != null && ctx.panw?.panos?.parent_session?.start_time != null",
          "field": "panw.panos.parent_session.start_time",
          "target_field": "panw.panos.parent_session.start_time",
          "ignore_failure": true,
          "timezone": "{{{ event.timezone }}}",
          "formats": [
            "yyyy/MM/dd HH:mm:ss",
            "strict_date_optional_time_nanos",
            "ISO8601"
          ]
        }
      },
      {
        "convert": {
          "field": "source.ip",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "source.ip"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "destination.ip",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "destination.ip"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "source.nat.ip",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "source.nat.ip"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "destination.nat.ip",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "destination.nat.ip"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "host.ip",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "host.ip"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "network.forwarded_ip",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "network.forwarded_ip"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.xff.ip",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.xff.ip"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.source.ip",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.source.ip"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.source.ipv6",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.source.ipv6"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.source.nat.ip",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.source.nat.ip"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.destination.ip",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.destination.ip"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.destination.nat.ip",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.destination.nat.ip"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.forwarded_ip",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.forwarded_ip"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.host.ip",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.host.ip"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.public.ip",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.public.ip"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.private.ip",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.private.ip"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.public.ipv6",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.public.ipv6"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.private.ipv6",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.private.ipv6"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.end_ip_address",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.end_ip_address"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.remote_user.ip",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.remote_user.ip"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "source.bytes",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "source.bytes"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "source.packets",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "source.packets"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "source.port",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "source.port"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.source.port",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.source.port"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.source.nat.port",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.source.nat.port"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "destination.bytes",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "destination.bytes"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "destination.packets",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "destination.packets"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "destination.port",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "destination.port"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.destination.port",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.destination.port"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.destination.nat.port",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.destination.nat.port"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "network.bytes",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "network.bytes"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "network.packets",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "network.packets"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "event.duration",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "event.duration"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "_temp_.labels",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "_temp_.labels"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "source.nat.port",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "source.nat.port"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "destination.nat.port",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "destination.nat.port"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.repeat_count",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.repeat_count"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.sctp.chunks",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.sctp.chunks"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.sctp.chunks_sent",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.sctp.chunks_sent"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.sctp.chunks_received",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.sctp.chunks_received"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.network.bytes",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.network.bytes"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.network.packets",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.network.packets"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.bytes_sent",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.bytes_sent"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.packets_sent",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.packets_sent"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.bytes_received",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.bytes_received"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.packets_received",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.packets_received"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.elapsed_time",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.elapsed_time"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.timeout",
          "type": "integer",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.timeout"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.error_code",
          "type": "integer",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.error_code"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.factorno",
          "type": "integer",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.factorno"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.certificate.size",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.certificate.size"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "tls.client.x509.public_key_size",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "tls.client.x509.public_key_size"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.issuer_common_name.length",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.issuer_common_name.length"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.root_common_name.length",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.root_common_name.length"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.subject_common_name.length",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.subject_common_name.length"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.server_name_indication.length",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.server_name_indication.length"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.link.change_count",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.link.change_count"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.login_duration",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.login_duration"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.link.change_count",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.link.change_count"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.strict_check",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.strict_check"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.tunnel_fragment",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.tunnel_fragment"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.unknown_protocol",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.unknown_protocol"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.sessions.closed",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.sessions.closed"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.sessions.created",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.sessions.created"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.max_encapsulation",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.max_encapsulation"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.application.risk_level",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.application.risk_level"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "panw.panos.response_time",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "panw.panos.response_time"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "gsub": {
          "field": "panw.panos.src.mac",
          "pattern": "[:.]",
          "replacement": "-",
          "ignore_missing": true
        }
      },
      {
        "uppercase": {
          "field": "panw.panos.src.mac",
          "ignore_missing": true
        }
      },
      {
        "gsub": {
          "field": "panw.panos.dst.mac",
          "pattern": "[:.]",
          "replacement": "-",
          "ignore_missing": true
        }
      },
      {
        "uppercase": {
          "field": "panw.panos.dst.mac",
          "ignore_missing": true
        }
      },
      {
        "gsub": {
          "field": "host.mac",
          "pattern": "[:.]",
          "replacement": "-",
          "ignore_missing": true
        }
      },
      {
        "uppercase": {
          "field": "host.mac",
          "ignore_missing": true
        }
      },
      {
        "gsub": {
          "field": "panw.panos.machine.mac_address",
          "pattern": "[:.]",
          "replacement": "-",
          "ignore_missing": true
        }
      },
      {
        "uppercase": {
          "field": "panw.panos.machine.mac_address",
          "ignore_missing": true
        }
      },
      {
        "lowercase": {
          "field": "network.application",
          "ignore_missing": true
        }
      },
      {
        "lowercase": {
          "field": "network.transport",
          "ignore_missing": true
        }
      },
      {
        "lowercase": {
          "field": "network.protocol",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "if": "ctx.panw?.panos?.network?.pcap_id == \"0\"",
          "field": [
            "panw.panos.network.pcap_id"
          ]
        }
      },
      {
        "script": {
          "lang": "painless",
          "if": "ctx._temp_?.labels != null && ctx._temp_.labels != 0",
          "params": {
            "pcap_included": 2147483648,
            "connect_to_destination_host": 1073741824,
            "file_submitted_to_WildFire": 536870912,
            "enterprise_credential_submission": 268435456,
            "source_flow_allow_list": 134217728,
            "ipv6_session": 33554432,
            "ssl_decrypted": 16777216,
            "url_filter_denied": 8388608,
            "nat_translated": 4194304,
            "captive_portal": 2097152,
            "non_standard_port_usage": 1048576,
            "x_forwarded_for": 524288,
            "http_proxy": 262144,
            "client_server_policy_based_forwarding": 131072,
            "server_client_policy_based_forwarding": 65536,
            "container_page": 32768,
            "temporary_match": 8192,
            "symmetric_return": 2048,
            "decrypted_traffic": 1024,
            "payload_outer_tunnel": 256
          },
          "source": "def labels = ctx.labels; if (labels == null) {\n  labels = new HashMap();\n  ctx['labels'] = labels;\n} long value = ctx._temp_.labels; for (entry in params.entrySet()) {\n  def flag = entry.getValue();\n  if (flag instanceof String) {\n      flag = Long.decode(flag);\n  }\n  if ((value & flag) != 0) {\n      labels[entry.getKey()] = true;\n  }\n}\n"
        }
      },
      {
        "script": {
          "lang": "painless",
          "if": "ctx.event?.duration != null",
          "params": {
            "NANOS_IN_A_SECOND": 1000000000
          },
          "source": "long nanos = ctx['event']['duration'] * params.NANOS_IN_A_SECOND; ctx['event']['duration'] = nanos; def start = ctx.event?.start; if (start != null) {\n  ctx.event['end'] = ZonedDateTime.parse(start).plusNanos(nanos);\n}\n"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "allowed",
          "if": "ctx.panw?.panos?.action != null && ['alert', 'allow', 'continue'].contains(ctx.panw.panos.action)"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "denied",
          "if": "ctx.panw?.panos?.action != null && ['deny', 'drop', 'reset-client', 'reset-server', 'reset-both', 'block-url', 'block-ip', 'random-drop', 'sinkhole', 'block'].contains(ctx.panw.panos.action)"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "success"
        }
      },
      {
        "set": {
          "field": "event.action",
          "value": "flow_started",
          "if": "ctx.panw?.panos?.sub_type == \"start\""
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": [
            "start",
            "connection"
          ],
          "if": "ctx.panw?.panos?.sub_type == \"start\""
        }
      },
      {
        "set": {
          "field": "event.action",
          "value": "flow_terminated",
          "if": "ctx.panw?.panos?.sub_type == \"end\""
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": [
            "end",
            "connection"
          ],
          "if": "ctx.panw?.panos?.sub_type == \"end\""
        }
      },
      {
        "set": {
          "field": "event.action",
          "value": "flow_dropped",
          "if": "ctx.panw?.panos?.sub_type == \"drop\""
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": [
            "denied",
            "connection"
          ],
          "if": "ctx.panw?.panos?.sub_type == \"drop\""
        }
      },
      {
        "set": {
          "field": "event.action",
          "value": "flow_denied",
          "if": "ctx.panw?.panos?.sub_type == \"deny\""
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": [
            "denied",
            "connection"
          ],
          "if": "ctx.panw?.panos?.sub_type == \"deny\""
        }
      },
      {
        "set": {
          "field": "event.action",
          "value": "data_match",
          "if": "ctx.panw?.panos?.sub_type == \"data\""
        }
      },
      {
        "set": {
          "field": "event.action",
          "value": "file_match",
          "if": "ctx.panw?.panos?.sub_type == \"file\""
        }
      },
      {
        "set": {
          "field": "event.action",
          "value": "flood_detected",
          "if": "ctx.panw?.panos?.sub_type == \"flood\""
        }
      },
      {
        "set": {
          "field": "event.action",
          "value": "packet_attack",
          "if": "ctx.panw?.panos?.sub_type == \"packet\""
        }
      },
      {
        "set": {
          "field": "event.action",
          "value": "scan_detected",
          "if": "ctx.panw?.panos?.sub_type == \"scan\""
        }
      },
      {
        "set": {
          "field": "event.action",
          "value": "spyware_detected",
          "if": "ctx.panw?.panos?.sub_type == \"spyware\""
        }
      },
      {
        "set": {
          "field": "event.action",
          "value": "url_filtering",
          "if": "ctx.panw?.panos?.sub_type == \"url\""
        }
      },
      {
        "set": {
          "field": "event.action",
          "value": "virus_detected",
          "if": "ctx.panw?.panos?.sub_type == \"virus\""
        }
      },
      {
        "set": {
          "field": "event.action",
          "value": "exploit_detected",
          "if": "ctx.panw?.panos?.sub_type == \"vulnerability\""
        }
      },
      {
        "set": {
          "field": "event.action",
          "value": "wildfire_verdict",
          "if": "ctx.panw?.panos?.sub_type == \"wildfire\""
        }
      },
      {
        "set": {
          "field": "event.action",
          "value": "wildfire_virus_detected",
          "if": "ctx.panw?.panos?.sub_type == \"wildfire-virus\""
        }
      },
      {
        "set": {
          "field": "event.severity",
          "if": "ctx.log?.level == \"critical\"",
          "value": 1
        }
      },
      {
        "set": {
          "field": "event.severity",
          "if": "ctx.log?.level == \"high\"",
          "value": 2
        }
      },
      {
        "set": {
          "field": "event.severity",
          "if": "ctx.log?.level == \"medium\"",
          "value": 3
        }
      },
      {
        "set": {
          "field": "event.severity",
          "if": "ctx.log?.level == \"low\"",
          "value": 4
        }
      },
      {
        "set": {
          "field": "event.severity",
          "if": "ctx.log?.level == \"informational\"",
          "value": 5
        }
      },
      {
        "set": {
          "field": "panw.panos.action",
          "value": "drop-icmp",
          "if": "ctx.panw?.panos?.action == \"drop icmp\" || ctx.panw?.panos?.action == \"drop ICMP\""
        }
      },
      {
        "set": {
          "field": "panw.panos.action",
          "value": "reset-both",
          "if": "ctx.panw?.panos?.action == \"reset both\""
        }
      },
      {
        "set": {
          "field": "panw.panos.action",
          "value": "reset-client",
          "if": "ctx.panw?.panos?.action == \"reset client\""
        }
      },
      {
        "set": {
          "field": "panw.panos.action",
          "value": "reset-server",
          "if": "ctx.panw?.panos?.action == \"reset server\""
        }
      },
      {
        "set": {
          "field": "network.type",
          "value": "ipv4",
          "if": "ctx.network?.type == null && ctx.source?.ip != null && ctx.source?.ip.contains(\".\")"
        }
      },
      {
        "set": {
          "field": "network.type",
          "value": "ipv6",
          "if": "ctx.network?.type == null && ctx.source?.ip != null && ctx.source?.ip.contains(\":\")"
        }
      },
      {
        "append": {
          "if": "ctx.source?.ip != null",
          "field": "related.ip",
          "allow_duplicates": false,
          "value": [
            "{{source.ip}}"
          ]
        }
      },
      {
        "append": {
          "if": "ctx.destination?.ip != null",
          "field": "related.ip",
          "allow_duplicates": false,
          "value": [
            "{{destination.ip}}"
          ]
        }
      },
      {
        "append": {
          "if": "ctx.source?.nat?.ip != null",
          "field": "related.ip",
          "allow_duplicates": false,
          "value": [
            "{{source.nat.ip}}"
          ]
        }
      },
      {
        "append": {
          "if": "ctx.destination?.nat?.ip != null",
          "field": "related.ip",
          "allow_duplicates": false,
          "value": [
            "{{destination.nat.ip}}"
          ]
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{host.ip}}}",
          "if": "ctx.host?.ip != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{panw.panos.xff.ip}}}",
          "if": "ctx.panw?.panos?.xff?.ip != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{network.forwarded_ip}}}",
          "if": "ctx.network?.forwarded_ip != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{panw.panos.remote_user.ip}}}",
          "if": "ctx.panw?.panos?.remote_user?.ip != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{panw.panos.end_ip_address}}}",
          "if": "ctx.panw?.panos?.end_ip_address != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "geoip": {
          "if": "ctx.source?.ip != null",
          "field": "source.ip",
          "target_field": "source.geo"
        }
      },
      {
        "geoip": {
          "if": "ctx.source?.nat?.ip != null && ctx.source?.geo == null",
          "field": "source.nat.ip",
          "target_field": "source.geo"
        }
      },
      {
        "geoip": {
          "if": "ctx.destination?.ip != null",
          "field": "destination.ip",
          "target_field": "destination.geo"
        }
      },
      {
        "geoip": {
          "if": "ctx.destination?.nat?.ip != null && ctx.destination?.geo == null",
          "field": "destination.nat.ip",
          "target_field": "destination.geo"
        }
      },
      {
        "user_agent": {
          "field": "_temp_.user_agent",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.nat.ip",
          "target_field": "source.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true,
          "if": "ctx.source?.nat?.ip != null && ctx.source?.as == null"
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "destination.ip",
          "target_field": "destination.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "destination.nat.ip",
          "target_field": "destination.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true,
          "if": "ctx.destination?.nat?.ip != null && ctx.destination?.as == null"
        }
      },
      {
        "rename": {
          "field": "source.as.asn",
          "target_field": "source.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.organization_name",
          "target_field": "source.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "destination.as.asn",
          "target_field": "destination.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "destination.as.organization_name",
          "target_field": "destination.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "if": "ctx.source?.geo?.name == null",
          "field": "_temp_.srcloc",
          "target_field": "source.geo.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "if": "ctx.destination?.geo?.name == null",
          "field": "_temp_.dstloc",
          "target_field": "destination.geo.name",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "source.port",
          "type": "integer",
          "if": "ctx.source?.port != null"
        }
      },
      {
        "convert": {
          "field": "destination.port",
          "type": "integer",
          "if": "ctx.destination?.port != null"
        }
      },
      {
        "convert": {
          "field": "source.nat.port",
          "type": "integer",
          "if": "ctx.source?.nat?.port != null"
        }
      },
      {
        "convert": {
          "field": "destination.nat.port",
          "type": "integer",
          "if": "ctx.destination?.nat?.port != null"
        }
      },
      {
        "community_id": {
          "target_field": "network.community_id",
          "if": "ctx.source?.port != null && ctx.source?.port != 0 && ctx.destination?.port != null && ctx.destination?.port != 0"
        }
      },
      {
        "community_id": {
          "target_field": "panw.panos.network.nat.community_id",
          "source_ip": "source.nat.ip",
          "source_port": "source.nat.port",
          "destination_ip": "destination.nat.ip",
          "destination_port": "destination.nat.port",
          "if": "ctx.source?.nat?.port != null && ctx.source?.nat?.port != 0 && ctx.destination?.nat?.port != null && ctx.destination?.nat?.port != 0"
        }
      },
      {
        "append": {
          "if": "ctx.panw?.panos?.network?.nat?.community_id != null && ctx.panw.panos.network.nat.community_id != ctx.network?.community_id",
          "field": "network.community_id",
          "value": [
            "{{panw.panos.network.nat.community_id}}"
          ]
        }
      },
      {
        "grok": {
          "if": "ctx.panw?.panos?.threat?.name != null",
          "field": "panw.panos.threat.name",
          "ignore_failure": true,
          "patterns": [
            "%{GREEDYDATA:panw.panos.threat.name}\\(\\s*%{GREEDYDATA:panw.panos.threat.id}\\s*\\)"
          ]
        }
      },
      {
        "set": {
          "field": "panw.panos.threat.name",
          "value": "URL-filtering",
          "if": "ctx.panw?.panos?.threat?.id == \"9999\""
        }
      },
      {
        "set": {
          "field": "rule.name",
          "value": "{{panw.panos.ruleset}}",
          "ignore_empty_value": true,
          "if": "ctx.rule?.name == null"
        }
      },
      {
        "append": {
          "field": "related.user",
          "allow_duplicates": false,
          "value": "{{client.user.name}}",
          "if": "ctx.client?.user?.name != null"
        }
      },
      {
        "append": {
          "field": "related.user",
          "allow_duplicates": false,
          "value": "{{source.user.name}}",
          "if": "ctx.source?.user?.name != null && !(ctx.source?.user?.name instanceof List)"
        }
      },
      {
        "foreach": {
          "if": "ctx.source?.user?.name != null && ctx.source?.user?.name instanceof List",
          "field": "source.user.name",
          "processor": {
            "append": {
              "field": "related.user",
              "value": "{{{_ingest._value}}}",
              "allow_duplicates": false
            }
          }
        }
      },
      {
        "append": {
          "field": "related.user",
          "allow_duplicates": false,
          "value": "{{server.user.name}}",
          "if": "ctx.server?.user?.name != null"
        }
      },
      {
        "append": {
          "field": "related.user",
          "allow_duplicates": false,
          "value": "{{destination.user.name}}",
          "if": "ctx.destination?.user?.name != null"
        }
      },
      {
        "append": {
          "field": "related.hash",
          "allow_duplicates": false,
          "value": "{{panw.panos.file.hash}}",
          "if": "ctx.panw?.panos?.file?.hash != null"
        }
      },
      {
        "append": {
          "field": "related.hash",
          "value": "{{{tls.client.hash.md5}}}",
          "if": "ctx.tls?.client?.hash?.md5 != null && ctx.tls?.client?.hash?.md5 != ''",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "append": {
          "field": "related.hash",
          "value": "{{{tls.client.hash.sha1}}}",
          "if": "ctx.tls?.client?.hash?.sha1 != null && ctx.tls?.client?.hash?.sha1 != ''",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "append": {
          "field": "related.hash",
          "value": "{{{tls.client.hash.sha256}}}",
          "if": "ctx.tls?.client?.hash?.sha256 != null && ctx.tls?.client?.hash?.sha256 != ''",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "append": {
          "field": "related.hosts",
          "value": "{{observer.hostname}}",
          "if": "ctx.observer?.hostname != null && ctx.observer?.hostname != ''",
          "allow_duplicates": false
        }
      },
      {
        "append": {
          "field": "related.hosts",
          "value": "{{host.name}}",
          "if": "ctx.host?.name != null && ctx.host?.name != ''",
          "allow_duplicates": false
        }
      },
      {
        "append": {
          "field": "related.hosts",
          "value": "{{{panw.panos.dst.host}}}",
          "if": "ctx.panw?.panos?.dst?.host != null && ctx.panw?.panos?.dst?.host != ''",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "append": {
          "field": "related.hosts",
          "value": "{{{panw.panos.src.host}}}",
          "if": "ctx.panw?.panos?.src?.host != null && ctx.panw?.panos?.src?.host != ''",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": [
            "_temp_",
            "_conf"
          ],
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": [
            "source.nat.ip",
            "source.nat.port"
          ],
          "if": "ctx.source?.nat?.ip == \"0.0.0.0\" && ctx.source?.nat?.port == 0"
        }
      },
      {
        "remove": {
          "field": [
            "destination.nat.ip",
            "destination.nat.port"
          ],
          "if": "ctx.destination?.nat?.ip == \"0.0.0.0\" && ctx.destination?.nat?.port == 0"
        }
      },
      {
        "remove": {
          "if": "ctx.tags == null || !(ctx.tags.contains('preserve_duplicate_custom_fields'))",
          "field": [
            "panw.panos.bytes_received",
            "panw.panos.bytes_sent",
            "panw.panos.certificate.fingerprint",
            "panw.panos.certificate.not_after",
            "panw.panos.certificate.not_before",
            "panw.panos.certificate.serial_number",
            "panw.panos.certificate.size",
            "panw.panos.certificate.version",
            "panw.panos.client.os",
            "panw.panos.client.os_version",
            "panw.panos.destination.ip",
            "panw.panos.destination.location",
            "panw.panos.destination.nat.ip",
            "panw.panos.destination.nat.port",
            "panw.panos.destination.port",
            "panw.panos.destination.user",
            "panw.panos.destination.zone",
            "panw.panos.device_name",
            "panw.panos.elapsed_time",
            "panw.panos.elliptic_curve",
            "panw.panos.event.id",
            "panw.panos.event.reason",
            "panw.panos.event.status",
            "panw.panos.file.type",
            "panw.panos.forwarded_ip",
            "panw.panos.generated_time",
            "panw.panos.host.id",
            "panw.panos.host.ip",
            "panw.panos.http_method",
            "panw.panos.inbound_interface",
            "panw.panos.location",
            "panw.panos.login_duration",
            "panw.panos.machine.mac_address",
            "panw.panos.machine.name",
            "panw.panos.machine.os",
            "panw.panos.misc",
            "panw.panos.network.application",
            "panw.panos.network.bytes",
            "panw.panos.network.direction",
            "panw.panos.network.packets",
            "panw.panos.normalize_user",
            "panw.panos.observer.serial_number",
            "panw.panos.outbound_interface",
            "panw.panos.packets_received",
            "panw.panos.packets_sent",
            "panw.panos.private.ip",
            "panw.panos.private.ipv6",
            "panw.panos.protocol",
            "panw.panos.public.ip",
            "panw.panos.public.ipv6",
            "panw.panos.received_time",
            "panw.panos.recipient",
            "panw.panos.referrer",
            "panw.panos.rule_uuid",
            "panw.panos.sender",
            "panw.panos.server_name_indication.value",
            "panw.panos.severity",
            "panw.panos.source.ip",
            "panw.panos.source.ipv6",
            "panw.panos.source.location",
            "panw.panos.source.nat.ip",
            "panw.panos.source.nat.port",
            "panw.panos.source.port",
            "panw.panos.source.region",
            "panw.panos.source.user",
            "panw.panos.source.zone",
            "panw.panos.start_time",
            "panw.panos.tls.encryption",
            "panw.panos.tls.version",
            "panw.panos.tunnel_inspection_rule",
            "panw.panos.user",
            "panw.panos.user_agent",
            "panw.panos.user_by_source",
            "panw.panos.subject_common_name.value",
            "panw.panos.issuer_common_name.value",
            "panw.panos.hash"
          ],
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "script": {
          "description": "Drops null/empty values recursively.",
          "lang": "painless",
          "source": "boolean dropEmptyFields(Object object) { if (object == null || object == '') { return true; } else if (object instanceof Map) { ((Map) object).values().removeIf(value -> dropEmptyFields(value)); return (((Map) object).size() == 0); } else if (object instanceof List) { ((List) object).removeIf(value -> dropEmptyFields(value)); return (((List) object).length == 0); } return false; } dropEmptyFields(ctx);"
        }
      },
      {
        "pipeline": {
          "name": "logs-panw.panos@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "append": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }} {{ _ingest.on_failure_processor_type }}"
        }
      },
      {
        "remove": {
          "field": [
            "_temp_",
            "_conf",
            "message"
          ],
          "ignore_missing": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "panw"
      }
    }
  },
  "metrics-kubernetes.pod-1.26.0": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-kubernetes.pod@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "kubernetes"
      }
    }
  },
  "logs-azure.springcloudlogs-1.5.4": {
    "description": "Pipeline for parsing azure spring cloud logs.",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.0.0"
        }
      },
      {
        "rename": {
          "field": "azure",
          "target_field": "azure-eventhub",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "source": "ctx.message = ctx.message.replace(params.empty_field_name, '')",
          "params": {
            "empty_field_name": "\"\":\"\","
          },
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true,
          "if": "ctx.event?.original == null",
          "description": "Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document."
        }
      },
      {
        "remove": {
          "field": "message",
          "ignore_missing": true,
          "if": "ctx.event?.original != null",
          "description": "The `message` field is no longer required if the document has an `event.original` field."
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "azure.springcloudlogs",
          "on_failure": [
            {
              "grok": {
                "field": "event.original",
                "patterns": [
                  "resourceId\": ?\"%{DATA:azure.springcloudlogs.resourceId}\""
                ],
                "ignore_failure": true,
                "ignore_missing": true
              }
            },
            {
              "grok": {
                "field": "event.original",
                "patterns": [
                  "category\": ?\"%{DATA:azure.springcloudlogs.category}\""
                ],
                "ignore_failure": true,
                "ignore_missing": true
              }
            },
            {
              "grok": {
                "field": "event.original",
                "patterns": [
                  "time\": ?\"%{DATA:azure.springcloudlogs.time}\""
                ],
                "ignore_failure": true,
                "ignore_missing": true
              }
            },
            {
              "set": {
                "field": "error.message",
                "value": "Received invalid json from the Azure Cloud platform. Unable to parse the source log message",
                "ignore_failure": true
              }
            }
          ]
        }
      },
      {
        "drop": {
          "if": "ctx.azure.springcloudlogs.category != 'SystemLogs' && ctx.azure.springcloudlogs.category != 'ApplicationConsole'",
          "ignore_failure": true
        }
      },
      {
        "date": {
          "field": "azure.springcloudlogs.time",
          "target_field": "@timestamp",
          "ignore_failure": true,
          "formats": [
            "ISO8601"
          ]
        }
      },
      {
        "date": {
          "field": "azure.springcloudlogs.EventTimeString",
          "target_field": "@timestamp",
          "ignore_failure": true,
          "formats": [
            "ISO8601",
            "M/d/yyyy h:mm:ss a XXX"
          ]
        }
      },
      {
        "remove": {
          "field": "azure.springcloudlogs.time",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.resourceId",
          "target_field": "azure.resource_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.LogFormat",
          "target_field": "azure.springcloudlogs.log_format",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.properties.InstanceName",
          "target_field": "azure.springcloudlogs.properties.instance_name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.properties.Log",
          "target_field": "azure.springcloudlogs.properties.log",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.properties.ServiceName",
          "target_field": "azure.springcloudlogs.properties.service_name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.properties.Stream",
          "target_field": "azure.springcloudlogs.properties.stream",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.properties.AppName",
          "target_field": "azure.springcloudlogs.properties.app_name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.properties.ServiceId",
          "target_field": "azure.springcloudlogs.properties.service_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.properties.Type",
          "target_field": "azure.springcloudlogs.properties.type",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.properties.Level",
          "target_field": "azure.springcloudlogs.level",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.properties.Logger",
          "target_field": "azure.springcloudlogs.properties.logger",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.properties.Stack",
          "target_field": "azure.springcloudlogs.properties.stack",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.properties.Thread",
          "target_field": "azure.springcloudlogs.properties.thread",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.Region",
          "target_field": "cloud.region",
          "ignore_missing": true
        }
      },
      {
        "json": {
          "field": "azure.springcloudlogs.EventProperties",
          "target_field": "azure.springcloudlogs.properties",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "if": "ctx.azure.springcloudlogs.properties != null",
          "field": [
            "azure.springcloudlogs.EventProperties"
          ],
          "ignore_missing": true
        }
      },
      {
        "json": {
          "field": "azure.springcloudlogs.properties.log",
          "target_field": "azure.springcloudlogs.properties.log",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.properties.log",
          "target_field": "message",
          "ignore_missing": true,
          "if": "ctx.azure?.springcloudlogs?.properties?.log != null && ctx.azure?.springcloudlogs?.properties?.log instanceof String"
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.EventName",
          "target_field": "event.action",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "azure.springcloudlogs.callerIpAddress",
          "target_field": "source.ip",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "rename": {
                "field": "azure.springcloudlogs.callerIpAddress",
                "target_field": "source.address",
                "ignore_missing": true,
                "ignore_failure": true
              }
            }
          ]
        }
      },
      {
        "remove": {
          "field": "azure.springcloudlogs.callerIpAddress",
          "if": "ctx.source?.ip != null",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "client.ip",
          "value": "{{source.ip}}",
          "ignore_empty_value": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{source.ip}}",
          "allow_duplicates": false,
          "if": "ctx.source?.ip != null"
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.level",
          "target_field": "log.level",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.durationMs",
          "target_field": "event.duration",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "source": "if (ctx.event.duration!= null) {ctx.event.duration = ctx.event.duration * params.param_nano;}",
          "params": {
            "param_nano": 1000000
          },
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.location",
          "target_field": "geo.name",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "source": "if (ctx?.azure?.springcloudlogs?.properties?.eventCategory != null) {\n  ctx.azure.springcloudlogs.event_category = ctx.azure.springcloudlogs.properties.eventCategory;\n} else if (ctx?.azure?.springcloudlogs?.properties?.policies != null)  {\n  ctx.azure.springcloudlogs.event_category = 'Policy';\n} else {\n  ctx.azure.springcloudlogs.event_category = 'Administrative';\n}",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.resultType",
          "target_field": "azure.springcloudlogs.result_type",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "azure.springcloudlogs.result_type",
          "target_field": "event.outcome",
          "type": "string",
          "if": "ctx?.azure?.springcloudlogs?.result_type != null && ctx.azure.springcloudlogs.result_type instanceof String && (ctx.azure.springcloudlogs.result_type.toLowerCase() == 'success' || ctx.azure.springcloudlogs.result_type.toLowerCase() == 'failure')"
        }
      },
      {
        "convert": {
          "field": "azure.springcloudlogs.properties.result",
          "target_field": "event.outcome",
          "type": "string",
          "if": "ctx?.event?.outcome == null && ctx?.azure?.springcloudlogs?.properties?.result != null && ctx?.azure?.springcloudlogs?.properties?.result instanceof String && ['success', 'failure', 'unknown'].contains(ctx.azure?.springcloudlogs?.properties?.result)"
        }
      },
      {
        "convert": {
          "field": "azure.springcloudlogs.Status",
          "target_field": "event.outcome",
          "type": "string",
          "if": "ctx?.event?.outcome == null && ctx?.azure?.springcloudlogs?.Status != null && ctx?.azure?.springcloudlogs?.Status instanceof String && ['success', 'failure', 'unknown', 'Succeeded', 'Failed'].contains(ctx.azure?.springcloudlogs?.Status)"
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.operationName",
          "target_field": "azure.springcloudlogs.operation_name",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "azure.springcloudlogs.operation_name",
          "target_field": "event.action",
          "type": "string",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.resultSignature",
          "target_field": "azure.springcloudlogs.result_signature",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.correlationId",
          "target_field": "azure.correlation_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.properties.statusCode",
          "target_field": "azure.springcloudlogs.properties.status_code",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.Status",
          "target_field": "azure.springcloudlogs.status",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "geo",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "params": {
            "write": {
              "type": [
                "change"
              ]
            },
            "read": {
              "type": [
                "access"
              ]
            },
            "delete": {
              "type": [
                "deletion"
              ]
            },
            "action": {
              "type": [
                "change"
              ]
            }
          },
          "source": "if (ctx?.azure?.springcloudlogs?.category == null) {\n  return;\n} def category = ctx.azure.springcloudlogs.category.toLowerCase(); if (params.get(category) == null) {\n  return;\n} def hm = new HashMap(params.get(category)); hm.forEach((k, v) -> ctx.event[k] = v);"
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "source.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.asn",
          "target_field": "source.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.organization_name",
          "target_field": "source.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "pipeline": {
          "name": "logs-azure.springcloudlogs-1.5.4-azure-shared-pipeline"
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-azure.springcloudlogs@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "Processor \"{{ _ingest.on_failure_processor_type }}\" with tag \"{{ _ingest.on_failure_processor_tag }}\" in pipeline \"{{ _ingest.on_failure_pipeline }}\" failed with message \"{{ _ingest.on_failure_message }}\""
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "azure"
      }
    }
  },
  "logs-aws.s3access-1.25.2": {
    "description": "Pipeline for s3 server access logs",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.0.0"
        }
      },
      {
        "set": {
          "field": "event.category",
          "value": "web"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "access"
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true,
          "if": "ctx.event?.original == null",
          "description": "Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document."
        }
      },
      {
        "remove": {
          "field": "message",
          "ignore_missing": true,
          "if": "ctx.event?.original != null",
          "description": "The `message` field is no longer required if the document has an `event.original` field."
        }
      },
      {
        "grok": {
          "field": "event.original",
          "patterns": [
            "%{BASE16NUM:aws.s3access.bucket_owner} %{HOSTNAME:aws.s3access.bucket} \\[%{HTTPDATE:_temp_.s3access_time}\\] (?:-|%{IP:aws.s3access.remote_ip}) (?:-|%{S3REQUESTER:aws.s3access.requester}) %{S3REQUESTID:aws.s3access.request_id} %{S3OPERATION:aws.s3access.operation} (?:-|%{S3KEY:aws.s3access.key}) (?:-|\\\"%{DATA:aws.s3access.request_uri}\\\") %{NUMBER:aws.s3access.http_status:long} (?:-|%{WORD:aws.s3access.error_code}) (?:-|%{NUMBER:aws.s3access.bytes_sent:long}) (?:-|%{NUMBER:aws.s3access.object_size:long}) (?:-|%{NUMBER:aws.s3access.total_time:long}) (?:-|%{NUMBER:aws.s3access.turn_around_time:long}) (?:-|\\\"-\\\"|\\\"%{DATA:aws.s3access.referrer}\\\") (?:-|\\\"(-|%{DATA:aws.s3access.user_agent})\\\") (?:-|%{S3KEY:aws.s3access.version_id}) (?:-|%{S3ID:aws.s3access.host_id}) (?:-|%{S3VERSION:aws.s3access.signature_version}) (?:-|%{S3KEY:aws.s3access.cipher_suite}) (?:-|%{WORD:aws.s3access.authentication_type}) (?:-|%{S3ID:aws.s3access.host_header}) (?:-|%{S3VERSION:aws.s3access.tls_version})"
          ],
          "pattern_definitions": {
            "S3REQUESTER": "[a-zA-Z0-9\\/_\\.\\-%:@]+",
            "S3REQUESTID": "[a-zA-Z0-9]+",
            "S3OPERATION": "%{WORD}.%{WORD}.%{WORD}",
            "S3KEY": "[a-zA-Z0-9\\/_\\.\\-%+]+",
            "S3ID": "[a-zA-Z0-9\\/_\\.\\-%+=]+",
            "S3VERSION": "[a-zA-Z0-9.]+"
          }
        }
      },
      {
        "grok": {
          "field": "aws.s3access.host_header",
          "ignore_missing": true,
          "ignore_failure": true,
          "patterns": [
            "^%{DATA}s3\\.%{DATA:cloud.region}\\.%{DATA}$"
          ]
        }
      },
      {
        "script": {
          "description": "Drops null/empty values recursively",
          "lang": "painless",
          "source": "boolean drop(Object o) {\n  if (o == null || o == \"\") {\n    return true;\n  } else if (o instanceof Map) {\n    ((Map) o).values().removeIf(v -> drop(v));\n    return (((Map) o).size() == 0);\n  } else if (o instanceof List) {\n    ((List) o).removeIf(v -> drop(v));\n    return (((List) o).length == 0);\n  }\n  return false;\n}\ndrop(ctx);\n"
        }
      },
      {
        "grok": {
          "field": "aws.s3access.request_uri",
          "ignore_failure": true,
          "patterns": [
            "%{NOTSPACE:http.request.method} %{NOTSPACE:_temp_.url} [hH][tT][tT][pP]/%{NOTSPACE:http.version}"
          ]
        }
      },
      {
        "uri_parts": {
          "field": "_temp_.url",
          "target_field": "url",
          "keep_original": true,
          "if": "ctx._temp_?.url != null"
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{aws.s3access.bucket_owner}}",
          "allow_duplicates": false,
          "if": "ctx?.aws?.s3access?.bucket_owner != null"
        }
      },
      {
        "date": {
          "field": "_temp_.s3access_time'",
          "target_field": "@timestamp",
          "ignore_failure": true,
          "formats": [
            "dd/MMM/yyyy:H:m:s Z"
          ]
        }
      },
      {
        "set": {
          "field": "client.ip",
          "value": "{{aws.s3access.remote_ip}}",
          "ignore_empty_value": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{aws.s3access.remote_ip}}",
          "allow_duplicates": false,
          "if": "ctx?.aws?.s3access?.remote_ip != null"
        }
      },
      {
        "set": {
          "field": "client.address",
          "value": "{{aws.s3access.remote_ip}}",
          "ignore_empty_value": true
        }
      },
      {
        "geoip": {
          "field": "aws.s3access.remote_ip",
          "target_field": "geo",
          "if": "ctx?.aws?.s3access?.remote_ip != null"
        }
      },
      {
        "set": {
          "field": "client.user.id",
          "value": "{{aws.s3access.requester}}",
          "ignore_empty_value": true
        }
      },
      {
        "set": {
          "field": "event.id",
          "value": "{{aws.s3access.request_id}}",
          "ignore_empty_value": true
        }
      },
      {
        "set": {
          "field": "event.action",
          "value": "{{aws.s3access.operation}}",
          "ignore_empty_value": true
        }
      },
      {
        "set": {
          "field": "http.response.status_code",
          "value": "{{aws.s3access.http_status}}",
          "ignore_empty_value": true
        }
      },
      {
        "convert": {
          "field": "http.response.status_code",
          "type": "long",
          "if": "ctx?.http?.response?.status_code != null"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "failure",
          "if": "ctx?.aws?.s3access?.error_code != null"
        }
      },
      {
        "set": {
          "field": "event.code",
          "value": "{{aws.s3access.error_code}}",
          "ignore_empty_value": true
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "success",
          "if": "ctx?.aws?.s3access?.error_code == null"
        }
      },
      {
        "convert": {
          "field": "aws.s3access.bytes_sent",
          "target_field": "http.response.body.bytes",
          "type": "long",
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "aws.s3access.total_time",
          "target_field": "event.duration",
          "type": "long",
          "ignore_failure": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "if": "ctx.event?.duration != null",
          "params": {
            "MS_TO_NS": 1000000
          },
          "source": "ctx.event.duration *= params.MS_TO_NS;"
        }
      },
      {
        "set": {
          "field": "http.request.referrer",
          "value": "{{aws.s3access.referrer}}",
          "ignore_empty_value": true
        }
      },
      {
        "user_agent": {
          "if": "ctx?.aws?.s3access?.user_agent != null",
          "field": "aws.s3access.user_agent"
        }
      },
      {
        "set": {
          "field": "tls.cipher",
          "value": "{{aws.s3access.cipher_suite}}",
          "ignore_empty_value": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "if": "ctx.aws?.s3access?.tls_version != null",
          "source": "def parts = ctx.aws.s3access.tls_version.toLowerCase().splitOnToken(\"v\"); if (parts.length != 2) {\n  return;\n} ctx.tls.version = parts[1]; ctx.tls.version_protocol = parts[0]"
        }
      },
      {
        "set": {
          "field": "cloud.provider",
          "value": "aws"
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "remove": {
          "field": "_temp_",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "description": "This script processor iterates over the whole document to remove fields with null values.",
          "source": "void handleMap(Map map) {\n  for (def x : map.values()) {\n    if (x instanceof Map) {\n        handleMap(x);\n    } else if (x instanceof List) {\n        handleList(x);\n    }\n  }\n  map.values().removeIf(v -> v == null);\n}\nvoid handleList(List list) {\n  for (def x : list) {\n      if (x instanceof Map) {\n          handleMap(x);\n      } else if (x instanceof List) {\n          handleList(x);\n      }\n  }\n}\nhandleMap(ctx);\n"
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-aws.s3access@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "metrics-system.process.summary-1.20.4": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-system.process.summary@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "system"
      }
    }
  },
  "logs-panw.panos-3.1.1-globalprotect": {
    "description": "Pipeline for PanOS Global Protect Logs.",
    "processors": [
      {
        "csv": {
          "field": "message",
          "target_fields": [
            "panw.panos.virtual_sys",
            "panw.panos.event.id",
            "panw.panos.stage",
            "panw.panos.auth_method",
            "panw.panos.tunnel_type",
            "_temp_.srcuser",
            "_temp_.srcloc",
            "panw.panos.machine.name",
            "panw.panos.public.ip",
            "_temp_.public_ipv6",
            "panw.panos.private.ip",
            "_temp_.private_ipv6",
            "panw.panos.host.id",
            "panw.panos.serial_number",
            "panw.panos.client_ver",
            "panw.panos.client.os",
            "panw.panos.client.os_version",
            "panw.panos.repeat_count",
            "panw.panos.event.reason",
            "panw.panos.error_message",
            "panw.panos.description",
            "panw.panos.event.status",
            "panw.panos.location",
            "panw.panos.login_duration",
            "panw.panos.connect_method",
            "panw.panos.error_code",
            "panw.panos.portal",
            "panw.panos.sequence_number",
            "panw.panos.action_flags",
            "_temp_.high_res_timestamp",
            "panw.panos.selection_type",
            "panw.panos.response_time",
            "panw.panos.priority",
            "panw.panos.attempted_gateways",
            "panw.panos.gateway",
            "panw.panos.device_group_hierarchy1",
            "panw.panos.device_group_hierarchy2",
            "panw.panos.device_group_hierarchy3",
            "panw.panos.device_group_hierarchy4",
            "panw.panos.vsys_name",
            "panw.panos.device_name",
            "panw.panos.vsys_id"
          ]
        }
      },
      {
        "set": {
          "field": "source.ip",
          "copy_from": "panw.panos.private.ip",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.ip",
          "value": "{{_temp_.private_ipv6}}",
          "if": "(ctx.source?.ip == null || ctx.source?.ip == \"0.0.0.0\") && ctx._temp_?.private_ipv6 != null && ctx._temp_?.private_ipv6 != \"0.0.0.0\""
        }
      },
      {
        "set": {
          "field": "host.ip",
          "value": "{{source.ip}}",
          "if": "ctx.source?.ip != null"
        }
      },
      {
        "set": {
          "field": "source.nat.ip",
          "copy_from": "panw.panos.public.ip",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.nat.ip",
          "value": "{{_temp_.public_ipv6}}",
          "if": "(ctx.source?.nat?.ip == null || ctx.source?.nat?.ip == \"0.0.0.0\") && ctx._temp_?.public_ipv6 != null && ctx._temp_?.public_ipv6 != \"0.0.0.0\""
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": [
            "network"
          ]
        }
      },
      {
        "set": {
          "field": "event.code",
          "copy_from": "panw.panos.event.id",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "event.duration",
          "copy_from": "panw.panos.login_duration",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "copy_from": "panw.panos.event.status",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "event.reason",
          "copy_from": "panw.panos.event.reason",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "host.id",
          "copy_from": "panw.panos.host.id",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "host.name",
          "copy_from": "panw.panos.machine.name",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "host.os.family",
          "copy_from": "panw.panos.client.os",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "host.os.full",
          "copy_from": "panw.panos.client.os_version",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.geo.name",
          "copy_from": "panw.panos.location",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.hostname",
          "copy_from": "panw.panos.device_name",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "panw.panos.source.region",
          "copy_from": "source.geo.name",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "panw.panos.source.user",
          "copy_from": "_temp_.srcuser",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "panw.panos.public.ipv6",
          "copy_from": "_temp_.public_ipv6",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "panw.panos.private.ipv6",
          "copy_from": "_temp_.private_ipv6",
          "ignore_failure": true
        }
      },
      {
        "pipeline": {
          "name": "logs-panw.panos@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "append": {
          "field": "error.message",
          "value": "error in Global Protect pipeline: error in [{{_ingest.on_failure_processor_type}}] processor{{#_ingest.on_failure_processor_tag}} with tag [{{_ingest.on_failure_processor_tag }}]{{/_ingest.on_failure_processor_tag}} {{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "panw"
      }
    }
  },
  "metrics-elastic_agent.osquerybeat-1.3.5": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-elastic_agent.osquerybeat@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "elastic_agent"
      }
    }
  },
  "metrics-endpoint.metadata-8.4.1": {
    "description": "Pipeline for setting event.ingested",
    "processors": [
      {
        "set": {
          "field": "event.ingested",
          "value": "{{ _ingest.timestamp }}",
          "ignore_failure": true
        }
      },
      {
        "pipeline": {
          "name": "metrics-endpoint.metadata@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "endpoint"
      }
    }
  },
  "logs-aws.cloudfront_logs-1.25.2": {
    "description": "Pipeline for CloudFront standard access logs",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.0.0"
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "set": {
          "field": "event.category",
          "value": "web"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "access"
        }
      },
      {
        "set": {
          "field": "cloud.provider",
          "value": "aws"
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true,
          "if": "ctx.event?.original == null",
          "description": "Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document."
        }
      },
      {
        "remove": {
          "field": "message",
          "ignore_missing": true,
          "if": "ctx.event?.original != null",
          "description": "The `message` field is no longer required if the document has an `event.original` field."
        }
      },
      {
        "grok": {
          "field": "event.original",
          "patterns": [
            "%{TIMESTAMP:_tmp.time}\\s%{EDGE_LOCATION:aws.cloudfront.edge_location}\\s%{INT:http.response.bytes:long}\\s%{IP:source.address}\\s%{WORD:http.request.method}\\s%{HOSTNAME:aws.cloudfront.domain}\\s%{UNIXPATH:url.path}\\s%{INT:http.response.status_code:long}\\s(-|%{DATA:http.request.referrer})\\s%{DATA:_tmp.user_agent}\\s(-|%{DATA:url.query})\\s(-|%{DATA:aws.cloudfront.cookies})\\s%{WORD:aws.cloudfront.edge_result_type}\\s%{DATA:http.request.id}\\s%{HOSTNAME:destination.address}\\s%{WORD:network.protocol}\\s%{INT:http.request.bytes:long}\\s%{NUMBER:_tmp.duration:float}\\s(-|%{IP:network.forwarded_ip})\\s(-|%{TLS:tls.version_protocol}v%{NUMBER:tls.version})\\s(-|%{DATA:tls.cipher})\\s%{WORD:aws.cloudfront.edge_response_result_type}\\s%{DATA:_tmp.protocol}\\s(-|%{WORD:aws.cloudfront.fle_status})\\s(-|%{DATA:aws.cloudfront.fle_encrypted_fields})\\s(-|%{POSINT:source.port:long})\\s(-|%{NUMBER:aws.cloudfront.time_to_first_byte:float})\\s(-|%{WORD:aws.cloudfront.edge_detailed_result_type})\\s%{DATA:aws.cloudfront.content_type}\\s(-|%{INT:http.response.body.bytes:long})\\s(-|%{DATA:aws.cloudfront.range_start})\\s(-|%{DATA:aws.cloudfront.range_end})"
          ],
          "pattern_definitions": {
            "TIMESTAMP": "%{YEAR}-%{MONTHNUM}-%{MONTHDAY}%{SPACE}%{HOUR}:%{MINUTE}:%{SECOND}",
            "TLS": "(TLS|SSL)",
            "EDGE_LOCATION": "[A-Z]{3}\\d+(-[A-Z]+\\d+)?"
          }
        }
      },
      {
        "gsub": {
          "field": "_tmp.time",
          "pattern": "\\t",
          "replacement": " ",
          "ignore_missing": true
        }
      },
      {
        "date": {
          "field": "_tmp.time",
          "target_field": "@timestamp",
          "ignore_failure": true,
          "formats": [
            "yyyy-MM-dd HH:mm:ss"
          ]
        }
      },
      {
        "urldecode": {
          "field": "_tmp.user_agent",
          "ignore_missing": true
        }
      },
      {
        "user_agent": {
          "field": "_tmp.user_agent",
          "target_field": "user_agent",
          "ignore_missing": null
        }
      },
      {
        "dissect": {
          "field": "_tmp.protocol",
          "pattern": "%{}/%{http.version}",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "destination.domain",
          "copy_from": "destination.address",
          "ignore_empty_value": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "description": "This script builds the `url.full` field out of the available `url.*` parts.",
          "source": "def full = \"\";\nif(ctx.network?.protocol != null && ctx.network?.protocol != \"\") {\n    full += ctx.network.protocol+\"://\";\n}\nif(ctx.destination?.domain != null && ctx.destination?.domain != \"\") {\n    full += ctx.destination.domain;\n}\nif(ctx.url?.path != null && ctx.url?.path != \"\") {\n    full += ctx.url.path;\n}\nif(ctx.url?.query != null && ctx.url?.query != \"\") {\n    full += \"?\"+ctx.url.query;\n}\nif(full != \"\") {\n    ctx._tmp.url_full = full\n}\n"
        }
      },
      {
        "uri_parts": {
          "field": "_tmp.url_full",
          "target_field": "url",
          "keep_original": false
        }
      },
      {
        "rename": {
          "field": "_tmp.url_full",
          "target_field": "url.full",
          "ignore_missing": true
        }
      },
      {
        "registered_domain": {
          "field": "url.domain",
          "target_field": "url",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "source.address",
          "target_field": "source.ip",
          "type": "ip",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "network.type",
          "value": "ipv4",
          "if": "ctx.source?.ip != null && ctx.source?.ip.contains(\".\")"
        }
      },
      {
        "set": {
          "field": "network.type",
          "value": "ipv6",
          "if": "ctx.source?.ip != null && ctx.source?.ip.contains(\":\")"
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "source.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.asn",
          "target_field": "source.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.organization_name",
          "target_field": "source.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{source.ip}}",
          "if": "ctx.source?.ip != null"
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{network.forwarded_ip}}",
          "if": "ctx.network?.forwarded_ip != null"
        }
      },
      {
        "append": {
          "field": "related.hosts",
          "value": "{{destination.domain}}",
          "allow_duplicates": false,
          "if": "ctx.destination?.domain != null"
        }
      },
      {
        "append": {
          "field": "related.hosts",
          "value": "{{aws.cloudfront.domain}}",
          "allow_duplicates": false,
          "if": "ctx.aws?.cloudfront.domain != null"
        }
      },
      {
        "set": {
          "field": "event.id",
          "copy_from": "http.request.id",
          "ignore_empty_value": true
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "failure",
          "if": "ctx.http?.response?.status_code >= 400"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "success",
          "if": "ctx.http?.response?.status_code < 400 && ctx.http?.response?.status_code > 000"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "failure",
          "if": "ctx.http?.response?.status_code == 000"
        }
      },
      {
        "script": {
          "lang": "painless",
          "if": "ctx.event?.duration != null",
          "params": {
            "S_TO_NS": 1000000000
          },
          "source": "ctx.event.duration *= params.S_TO_NS;"
        }
      },
      {
        "lowercase": {
          "field": "tls.version_protocol",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "_tmp",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-aws.cloudfront_logs@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "logs-endpoint.events.process-8.4.1": {
    "description": "Pipeline for setting event.ingested",
    "processors": [
      {
        "set": {
          "field": "event.ingested",
          "value": "{{ _ingest.timestamp }}",
          "ignore_failure": true
        }
      },
      {
        "pipeline": {
          "name": "logs-endpoint.events.process@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "endpoint"
      }
    }
  },
  "logs-crowdstrike.falcon-1.7.0-auth_activity_audit": {
    "processors": [
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": [
            "authentication"
          ]
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": [
            "change"
          ]
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.ServiceName",
          "type": "string",
          "target_field": "message",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.UserIp",
          "target_field": "source.ip",
          "type": "string",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.crowdstrike?.event?.UserIp != null && ctx?.crowdstrike?.event?.UserIp != \"\""
        }
      },
      {
        "script": {
          "lang": "painless",
          "source": "def regex = /([a-z0-9])([A-Z])/;\ndef replacement = \"$1_$2\";\ndef action = ctx?.crowdstrike?.event?.OperationName;\nif (action == null || action == \"\") return;\nctx[\"event.action\"] = regex.matcher(action).replaceAll(replacement).toLowerCase();\n"
        }
      },
      {
        "pipeline": {
          "name": "logs-crowdstrike.falcon@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "crowdstrike"
      }
    }
  },
  "logs-azure.firewall_logs-1.5.4": {
    "description": "Pipeline for processing Azure firewall logs.",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.3.0"
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "set": {
          "field": "event.category",
          "value": [
            "network"
          ]
        }
      },
      {
        "set": {
          "field": "event.type",
          "value": [
            "connection"
          ]
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "json",
          "ignore_failure": true
        }
      },
      {
        "date": {
          "field": "json.time",
          "target_field": "@timestamp",
          "ignore_failure": true,
          "formats": [
            "ISO8601"
          ]
        }
      },
      {
        "remove": {
          "field": "json.time",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.resourceId",
          "target_field": "azure.resource_id",
          "ignore_missing": true
        }
      },
      {
        "grok": {
          "field": "json.properties.msg",
          "patterns": [
            "^%{DATA:azure.firewall.proto} request from %{IPORHOST:source.address}:%{NUMBER:source.port:long} to %{IPORHOST:destination.address}:%{NUMBER:destination.port:long}. Action: %{DATA:azure.firewall.action}. $",
            "^%{DATA:azure.firewall.proto} Type=%{DATA:azure.firewall.icmp.request.code} request from %{IPORHOST:source.address} to %{IPORHOST:destination.address}. Action: %{DATA:azure.firewall.action}. $",
            "^%{DATA:azure.firewall.proto} request from %{IPORHOST:source.address}:%{NUMBER:source.port:long} to %{IPORHOST:destination.address}:%{NUMBER:destination.port:long} was DNAT'ed to %{IP:destination.nat.ip}:%{NUMBER:destination.nat.port:long}$",
            "^%{DATA:azure.firewall.proto} request from %{IPORHOST:source.address}:(%{NUMBER:source.port:long})? to %{IPORHOST:destination.address}:(%{NUMBER:destination.port:long})?. Action: %{DATA:azure.firewall.action}. Signature: %{DATA:rule.id}. IDS: %{DATA:rule.name}. Priority: %{NUMBER:event.risk_score:long}. Classification: %{DATA:rule.category}$",
            "^%{DATA:azure.firewall.proto} request from %{IPORHOST:source.address}:%{NUMBER:source.port:long} to %{IPORHOST:destination.address}:%{NUMBER:destination.port:long}. Url: %{HOSTNAME:url.original}. Action: %{DATA:azure.firewall.action}. ThreatIntel: %{DATA:rule.name}$"
          ],
          "if": "ctx?.json?.operationName == 'AzureFirewallNetworkRuleLog' || ctx?.json?.operationName == 'AzureFirewallNatRuleLog'"
        }
      },
      {
        "grok": {
          "field": "json.properties.msg",
          "patterns": [
            "^%{DATA:azure.firewall.proto} request from %{IPORHOST:source.address}:%{NUMBER:source.port:long} to %{IPORHOST:destination.address}:%{NUMBER:destination.port:long}. Action: %{DATA:azure.firewall.action}. Policy: %{DATA:azure.firewall.policy}. Rule Collection Group: %{DATA:azure.firewall.rule_collection_group}. Rule Collection: %{DATA:rule.ruleset}. Rule: %{DATA:rule.name}. Web Category: %{DATA:rule.category}$",
            "^%{DATA:azure.firewall.proto} request from %{IPORHOST:source.address}:%{NUMBER:source.port:long} to %{IPORHOST:destination.address}:%{NUMBER:destination.port:long}. Url: %{DATA:url.original}. Action: %{DATA:azure.firewall.action}. Policy: %{DATA:azure.firewall.policy}. Rule Collection Group: %{DATA:azure.firewall.rule_collection_group}. Rule Collection: %{DATA:rule.ruleset}. Rule: %{DATA:rule.name}$",
            "^%{DATA:azure.firewall.proto} request from %{IPORHOST:source.address}:%{NUMBER:source.port:long} to %{IPORHOST:destination.address}:%{NUMBER:destination.port:long}. Url: %{DATA:url.original}. Action: %{DATA:azure.firewall.action}. %{DATA:event.reason}$",
            "^%{DATA:azure.firewall.proto} request from %{IPORHOST:source.address}:%{NUMBER:source.port:long} to %{IPORHOST:destination.address}:%{NUMBER:destination.port:long}. Action: %{DATA:azure.firewall.action}. Rule Collection: %{DATA:rule.ruleset}. Rule: %{DATA:rule.name}$",
            "^%{DATA:azure.firewall.proto} request from %{IPORHOST:source.address}:%{NUMBER:source.port:long} to %{IPORHOST:destination.address}:%{NUMBER:destination.port:long}. Action: %{DATA:azure.firewall.action}. %{DATA:event.reason}$",
            "^%{DATA:azure.firewall.proto} request from %{IPORHOST:source.address}:%{NUMBER:source.port:long}. Action: %{DATA:azure.firewall.action}. Reason: %{DATA:event.reason}$"
          ],
          "if": "ctx?.json?.operationName == 'AzureFirewallApplicationRuleLog'"
        }
      },
      {
        "grok": {
          "field": "json.properties.msg",
          "patterns": [
            "^DNS Request: %{IPORHOST:source.address}:%{NUMBER:source.port:long} - %{DATA:azure.firewall.event_original_uid} %{DATA:dns.question.type} %{DATA:dns.question.class} %{DATA:dns.question.name}. %{DATA:network.transport} %{NUMBER:source.bytes:long} %{DATA:azure.firewall.dnssec_bool_flag:boolean} %{NUMBER:azure.firewall.dnssec_buffer_size:long} %{DATA:dns.response_code} %{DATA:dns.header_flags} %{NUMBER:destination.bytes:long} %{DATA:azure.firewall.duration}$"
          ],
          "if": "ctx?.json?.operationName == 'AzureFirewallDnsProxyLog'"
        }
      },
      {
        "set": {
          "field": "json.event.alert.action",
          "value": "denied",
          "if": "ctx.azure?.firewall?.action == 'Deny'"
        }
      },
      {
        "set": {
          "field": "json.event.alert.action",
          "value": "allowed",
          "if": "ctx.azure?.firewall?.action == 'Allow'"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "{{json.event.alert.action}}",
          "if": "ctx.json?.event?.alert?.action != null"
        }
      },
      {
        "grok": {
          "field": "source.address",
          "patterns": [
            "%{IP:source.ip}",
            "%{HOSTNAME:source.domain}"
          ],
          "ignore_missing": true
        }
      },
      {
        "grok": {
          "field": "destination.address",
          "patterns": [
            "%{IP:destination.ip}",
            "%{HOSTNAME:destination.domain}"
          ],
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "source.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "field": "destination.ip",
          "target_field": "destination.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "destination.ip",
          "target_field": "destination.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.asn",
          "target_field": "source.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.organization_name",
          "target_field": "source.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "destination.as.asn",
          "target_field": "destination.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "destination.as.organization_name",
          "target_field": "destination.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "if": "ctx?.source?.ip != null",
          "field": "related.ip",
          "value": "{{source.ip}}",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "append": {
          "if": "ctx?.destination?.ip != null",
          "field": "related.ip",
          "value": "{{destination.ip}}",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "append": {
          "if": "ctx?.destination?.nat?.ip != null",
          "field": "related.ip",
          "value": "{{destination.nat.ip}}",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "append": {
          "if": "ctx?.source?.domain != null",
          "field": "related.hosts",
          "value": "{{source.domain}}",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "append": {
          "if": "ctx?.destination?.domain != null",
          "field": "related.hosts",
          "value": "{{destination.domain}}",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "append": {
          "if": "ctx?.dns?.question?.name != null",
          "field": "related.hosts",
          "value": "{{dns.question.name}}",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "lowercase": {
          "field": "azure.firewall.proto",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "network.transport",
          "value": "{{azure.firewall.proto}}",
          "if": "ctx?.azure?.firewall?.proto != null && ['udp', 'tcp', 'icmp'].contains(ctx.azure.firewall.proto)"
        }
      },
      {
        "set": {
          "field": "network.protocol",
          "value": "{{azure.firewall.proto}}",
          "if": "ctx?.network?.transport == null"
        }
      },
      {
        "remove": {
          "field": [
            "azure.firewall.proto"
          ],
          "ignore_missing": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": true,
          "if": "ctx?.network?.transport != null",
          "source": "def transport = ctx.network.transport;\nif (transport == 'udp') {\n    ctx.network.iana_number = '17';\n} else if (transport == 'tcp') {\n    ctx.network.iana_number = '6';\n}\n"
        }
      },
      {
        "uppercase": {
          "field": "dns.header_flags",
          "ignore_missing": true
        }
      },
      {
        "split": {
          "field": "dns.header_flags",
          "separator": ",",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.category",
          "target_field": "azure.firewall.category",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.operationName",
          "target_field": "azure.firewall.operation_name",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "observer.type",
          "value": "firewall"
        }
      },
      {
        "set": {
          "field": "observer.vendor",
          "value": "Azure"
        }
      },
      {
        "set": {
          "field": "observer.product",
          "value": "Network Firewall"
        }
      },
      {
        "remove": {
          "field": [
            "json",
            "azure.firewall.proto"
          ],
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-azure.firewall_logs-1.5.4-azure-shared-pipeline"
        }
      },
      {
        "set": {
          "field": "observer.name",
          "copy_from": "azure.resource.name",
          "ignore_empty_value": true
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "script": {
          "description": "Drops null/empty values recursively.",
          "lang": "painless",
          "source": "boolean dropEmptyFields(Object object) { if (object == null || object == \"\") { return true; } else if (object instanceof Map) { ((Map) object).values().removeIf(value -> dropEmptyFields(value)); return (((Map) object).size() == 0); } else if (object instanceof List) { ((List) object).removeIf(value -> dropEmptyFields(value)); return (((List) object).length == 0); } return false; } dropEmptyFields(ctx);"
        }
      },
      {
        "pipeline": {
          "name": "logs-azure.firewall_logs@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "append": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }} {{ _ingest.on_failure_processor_type }}"
        }
      },
      {
        "remove": {
          "field": [
            "json",
            "_conf",
            "message"
          ],
          "ignore_missing": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "azure"
      }
    }
  },
  "logs-panw.panos-3.1.1-authentication": {
    "description": "Pipeline for PanOS Authentication Logs.",
    "processors": [
      {
        "csv": {
          "field": "message",
          "ignore_failure": true,
          "target_fields": [
            "panw.panos.virtual_sys",
            "panw.panos.source.ip",
            "_temp_.user",
            "panw.panos.normalize_user",
            "panw.panos.object.id",
            "panw.panos.authentication.policy",
            "panw.panos.repeat_count",
            "panw.panos.authentication.id",
            "panw.panos.vendor",
            "panw.panos.log_profile",
            "panw.panos.server_profile",
            "panw.panos.description",
            "panw.panos.client_type",
            "panw.panos.event.result",
            "panw.panos.factorno",
            "panw.panos.sequence_number",
            "panw.panos.action_flags",
            "panw.panos.device_group_hierarchy1",
            "panw.panos.device_group_hierarchy2",
            "panw.panos.device_group_hierarchy3",
            "panw.panos.device_group_hierarchy4",
            "panw.panos.vsys_name",
            "panw.panos.device_name",
            "panw.panos.vsys_id",
            "panw.panos.authentication.protocol",
            "panw.panos.rule_uuid",
            "_temp_.high_res_timestamp",
            "panw.panos.src.category",
            "panw.panos.src.profile",
            "panw.panos.src.model",
            "panw.panos.src.vendor",
            "panw.panos.src.os.family",
            "panw.panos.src.os.version",
            "panw.panos.src.host",
            "panw.panos.src.mac",
            "panw.panos.region",
            "_temp_.future_use3",
            "_temp_.user_agent",
            "panw.panos.flow_id"
          ]
        }
      },
      {
        "append": {
          "field": "source.user.name",
          "value": "{{{_temp_.user}}}",
          "if": "ctx._temp_?.user != null && ctx._temp_?.user != ''",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "append": {
          "field": "source.user.name",
          "value": "{{{panw.panos.normalize_user}}}",
          "if": "ctx.panw?.panos?.normalize_user != null && ctx.panw?.panos?.normalize_user != ''",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": [
            "authentication"
          ]
        }
      },
      {
        "set": {
          "field": "observer.hostname",
          "copy_from": "panw.panos.device_name",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "rule.uuid",
          "copy_from": "panw.panos.rule_uuid",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.ip",
          "copy_from": "panw.panos.source.ip",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "panw.panos.user",
          "copy_from": "_temp_.user",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "panw.panos.user_agent",
          "copy_from": "_temp_.user_agent",
          "ignore_failure": true
        }
      },
      {
        "pipeline": {
          "name": "logs-panw.panos@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "append": {
          "field": "error.message",
          "value": "error in Authentication pipeline: error in [{{{_ingest.on_failure_processor_type}}}] processor{{{#_ingest.on_failure_processor_tag}}} with tag [{{{_ingest.on_failure_processor_tag}}}]{{{/_ingest.on_failure_processor_tag}}} {{{_ingest.on_failure_message}}}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "panw"
      }
    }
  },
  "logs-panw.panos-3.1.1-userid": {
    "description": "Pipeline for PanOS User ID Logs.",
    "processors": [
      {
        "csv": {
          "field": "message",
          "target_fields": [
            "panw.panos.virtual_sys",
            "panw.panos.source.ip",
            "_temp_.srcuser",
            "panw.panos.datasourcename",
            "panw.panos.event.id",
            "panw.panos.repeat_count",
            "panw.panos.timeout",
            "panw.panos.source.port",
            "panw.panos.destination.port",
            "panw.panos.datasource",
            "panw.panos.datasourcetype",
            "panw.panos.sequence_number",
            "panw.panos.action_flags",
            "panw.panos.device_group_hierarchy1",
            "panw.panos.device_group_hierarchy2",
            "panw.panos.device_group_hierarchy3",
            "panw.panos.device_group_hierarchy4",
            "panw.panos.vsys_name",
            "panw.panos.device_name",
            "panw.panos.vsys_id",
            "panw.panos.factortype",
            "panw.panos.factorcompletiontime",
            "panw.panos.factorno",
            "panw.panos.ugflags",
            "panw.panos.user_by_source",
            "panw.panos.tag.name",
            "_temp_.high_res_timestamp"
          ]
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": [
            "network",
            "iam"
          ]
        }
      },
      {
        "set": {
          "field": "destination.port",
          "copy_from": "panw.panos.destination.port",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "event.code",
          "copy_from": "panw.panos.event.id",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "panw.panos.received_time",
          "copy_from": "event.created",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.hostname",
          "copy_from": "panw.panos.device_name",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.ip",
          "copy_from": "panw.panos.source.ip",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.port",
          "copy_from": "panw.panos.source.port",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.user.name",
          "copy_from": "panw.panos.user_by_source",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "panw.panos.source.user",
          "copy_from": "_temp_.srcuser",
          "ignore_failure": true
        }
      },
      {
        "date": {
          "if": "ctx.panw?.panos?.factorcompletiontime != null && ctx.event.timezone == null",
          "field": "panw.panos.factorcompletiontime",
          "target_field": "panw.panos.factorcompletiontime",
          "formats": [
            "yyyy/MM/dd HH:mm:ss"
          ],
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{ _ingest.on_failure_message }}"
              }
            }
          ]
        }
      },
      {
        "date": {
          "if": "ctx.panw?.panos?.factorcompletiontime != null && ctx.event.timezone != null",
          "field": "panw.panos.factorcompletiontime",
          "target_field": "panw.panos.factorcompletiontime",
          "formats": [
            "yyyy/MM/dd HH:mm:ss"
          ],
          "timezone": "{{{ event.timezone }}}",
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{ _ingest.on_failure_message }}"
              }
            }
          ]
        }
      },
      {
        "pipeline": {
          "name": "logs-panw.panos@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "append": {
          "field": "error.message",
          "value": "error in User ID pipeline: error in [{{_ingest.on_failure_processor_type}}] processor{{#_ingest.on_failure_processor_tag}} with tag [{{_ingest.on_failure_processor_tag }}]{{/_ingest.on_failure_processor_tag}} {{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "panw"
      }
    }
  },
  "logs-elastic_agent-1.3.5": {
    "processors": [
      {
        "pipeline": {
          "name": "logs-elastic_agent@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "elastic_agent"
      }
    }
  },
  "metrics-elastic_agent.fleet_server-1.3.5": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-elastic_agent.fleet_server@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "elastic_agent"
      }
    }
  },
  "logs-windows.forwarded-1.15.0-sysmon_operational": {
    "description": "Pipeline for Windows Sysmon Event Logs",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.0.0"
        }
      },
      {
        "rename": {
          "field": "winlog.level",
          "target_field": "log.level",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.level != \"\""
        }
      },
      {
        "date": {
          "field": "winlog.time_created",
          "target_field": "event.created",
          "formats": [
            "ISO8601"
          ],
          "ignore_failure": true,
          "if": "ctx?.winlog?.time_created != null"
        }
      },
      {
        "date": {
          "field": "winlog.event_data.UtcTime",
          "formats": [
            "yyyy-MM-dd HH:mm:ss.SSS"
          ],
          "timezone": "UTC",
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.UtcTime != null"
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "set": {
          "field": "event.code",
          "value": "{{winlog.event_id}}"
        }
      },
      {
        "script": {
          "description": "Set event category and type for all event types.",
          "lang": "painless",
          "params": {
            "1": {
              "category": [
                "process"
              ],
              "type": [
                "start"
              ]
            },
            "2": {
              "category": [
                "file"
              ],
              "type": [
                "change"
              ]
            },
            "3": {
              "category": [
                "network"
              ],
              "type": [
                "start",
                "connection",
                "protocol"
              ]
            },
            "4": {
              "category": [
                "process"
              ],
              "type": [
                "change"
              ]
            },
            "5": {
              "category": [
                "process"
              ],
              "type": [
                "end"
              ]
            },
            "6": {
              "category": [
                "driver"
              ],
              "type": [
                "start"
              ]
            },
            "7": {
              "category": [
                "process"
              ],
              "type": [
                "change"
              ]
            },
            "10": {
              "category": [
                "process"
              ],
              "type": [
                "access"
              ]
            },
            "11": {
              "category": [
                "file"
              ],
              "type": [
                "creation"
              ]
            },
            "12": {
              "category": [
                "configuration",
                "registry"
              ],
              "type": [
                "change"
              ]
            },
            "13": {
              "category": [
                "configuration",
                "registry"
              ],
              "type": [
                "change"
              ]
            },
            "14": {
              "category": [
                "configuration",
                "registry"
              ],
              "type": [
                "change"
              ]
            },
            "15": {
              "category": [
                "file"
              ],
              "type": [
                "access"
              ]
            },
            "16": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ]
            },
            "17": {
              "category": [
                "file"
              ],
              "type": [
                "creation"
              ]
            },
            "18": {
              "category": [
                "file"
              ],
              "type": [
                "access"
              ]
            },
            "22": {
              "category": [
                "network"
              ],
              "type": [
                "connection",
                "protocol",
                "info"
              ]
            },
            "23": {
              "category": [
                "file"
              ],
              "type": [
                "deletion"
              ]
            },
            "24": {
              "type": [
                "change"
              ]
            },
            "25": {
              "category": [
                "process"
              ],
              "type": [
                "change"
              ]
            },
            "26": {
              "category": [
                "file"
              ],
              "type": [
                "deletion"
              ]
            }
          },
          "tag": "Set ECS categorization fields",
          "source": "if (ctx?.event?.code == null || params.get(ctx.event.code) == null) {\n  return;\n}\ndef hm = new HashMap(params[ctx.event.code]);\nhm.forEach((k, v) -> ctx.event[k] = v);"
        }
      },
      {
        "convert": {
          "field": "winlog.record_id",
          "type": "string",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.ID",
          "target_field": "error.code",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx.event.code == \"255\" && ctx.winlog?.event_data?.ID != null && ctx.winlog?.event_data?.ID != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.RuleName",
          "target_field": "rule.name",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.RuleName != null && ctx?.winlog?.event_data?.RuleName != \"\" && ctx?.winlog?.event_data?.RuleName != \"-\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.Type",
          "target_field": "message",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx.event.code == \"25\" && ctx?.winlog?.event_data?.Type != null && ctx?.winlog?.event_data?.Type != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.Hash",
          "target_field": "winlog.event_data.Hashes",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.Hash != null && ctx?.winlog?.event_data?.Hash != \"\""
        }
      },
      {
        "kv": {
          "field": "winlog.event_data.Hashes",
          "target_field": "_temp.hashes",
          "field_split": ",",
          "value_split": "=",
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.Hashes != null"
        }
      },
      {
        "script": {
          "lang": "painless",
          "if": "ctx?._temp?.hashes != null",
          "source": "def hashIsEmpty(String hash) {\n  if (hash == \"\") {\n    return true;\n  }\n  \n  Pattern emptyHashRegex = /^0*$/;\n  def matcher = emptyHashRegex.matcher(hash);\n  \n  return matcher.matches(); \n}\n\ndef hashes = new HashMap();\ndef related = [\n  \"hash\": new ArrayList()\n];\nfor (entry in ctx._temp.hashes.entrySet()) {\n  def key = entry.getKey().toString().toLowerCase();\n  def value = entry.getValue().toString().toLowerCase();\n\n  if (hashIsEmpty(value)) {\n    continue;\n  }\n\n  hashes[key] = value;\n  related.hash.add(value);\n}\n\nctx._temp.hashes = hashes;\nif (related.hash.length > 0) {\n  ctx.related = related;\n}"
        }
      },
      {
        "rename": {
          "field": "_temp.hashes",
          "target_field": "process.hash",
          "if": "ctx?._temp?.hashes != null &&\n[\"1\", \"23\", \"24\", \"25\", \"26\"].contains(ctx.event.code)"
        }
      },
      {
        "rename": {
          "field": "process.hash.imphash",
          "target_field": "process.pe.imphash",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.ProcessGuid",
          "target_field": "process.entity_id",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.ProcessGuid != null && ctx?.winlog?.event_data?.ProcessGuid != \"\""
        }
      },
      {
        "convert": {
          "field": "winlog.event_data.ProcessId",
          "target_field": "process.pid",
          "type": "long",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.ProcessId != null && ctx?.winlog?.event_data?.ProcessId != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.Image",
          "target_field": "process.executable",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.Image != null && ctx?.winlog?.event_data?.Image != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.SourceProcessGuid",
          "target_field": "process.entity_id",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.SourceProcessGuid != null && ctx?.winlog?.event_data?.SourceProcessGuid != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.SourceProcessGUID",
          "target_field": "process.entity_id",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.SourceProcessGUID != null && ctx?.winlog?.event_data?.SourceProcessGUID != \"\""
        }
      },
      {
        "convert": {
          "field": "winlog.event_data.SourceProcessId",
          "target_field": "process.pid",
          "type": "long",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.SourceProcessId != null && ctx?.winlog?.event_data?.SourceProcessId != \"\""
        }
      },
      {
        "convert": {
          "field": "winlog.event_data.SourceThreadId",
          "target_field": "process.thread.id",
          "type": "long",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.SourceThreadId != null && ctx?.winlog?.event_data?.SourceThreadId != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.SourceImage",
          "target_field": "process.executable",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.SourceImage != null && ctx?.winlog?.event_data?.SourceImage != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.Destination",
          "target_field": "process.executable",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.Destination != null && ctx?.winlog?.event_data?.Destination != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.CommandLine",
          "target_field": "process.command_line",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.CommandLine != null && ctx?.winlog?.event_data?.CommandLine != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.CurrentDirectory",
          "target_field": "process.working_directory",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.CurrentDirectory != null && ctx?.winlog?.event_data?.CurrentDirectory != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.ParentProcessGuid",
          "target_field": "process.parent.entity_id",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.ParentProcessGuid != null && ctx?.winlog?.event_data?.ParentProcessGuid != \"\""
        }
      },
      {
        "convert": {
          "field": "winlog.event_data.ParentProcessId",
          "target_field": "process.parent.pid",
          "type": "long",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.ParentProcessId != null && ctx?.winlog?.event_data?.ParentProcessId != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.ParentImage",
          "target_field": "process.parent.executable",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.ParentImage != null && ctx?.winlog?.event_data?.ParentImage != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.ParentCommandLine",
          "target_field": "process.parent.command_line",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.ParentCommandLine != null && ctx?.winlog?.event_data?.ParentCommandLine != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.OriginalFileName",
          "target_field": "process.pe.original_file_name",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx.event.code != \"7\" && ctx?.winlog?.event_data?.OriginalFileName != null && ctx?.winlog?.event_data?.OriginalFileName != \"\""
        }
      },
      {
        "set": {
          "field": "process.pe.company",
          "copy_from": "winlog.event_data.Company",
          "ignore_empty_value": true,
          "ignore_failure": true,
          "if": "ctx.event.code != \"7\""
        }
      },
      {
        "set": {
          "field": "process.pe.description",
          "copy_from": "winlog.event_data.Description",
          "ignore_empty_value": true,
          "ignore_failure": true,
          "if": "ctx.event.code != \"7\""
        }
      },
      {
        "set": {
          "field": "process.pe.file_version",
          "copy_from": "winlog.event_data.FileVersion",
          "ignore_empty_value": true,
          "ignore_failure": true,
          "if": "ctx.event.code != \"7\""
        }
      },
      {
        "set": {
          "field": "process.pe.product",
          "copy_from": "winlog.event_data.Product",
          "ignore_empty_value": true,
          "ignore_failure": true,
          "if": "ctx.event.code != \"7\""
        }
      },
      {
        "script": {
          "description": "Implements Windows-like SplitCommandLine",
          "lang": "painless",
          "if": "(ctx?.process?.command_line != null && ctx.process.command_line != \"\") || \n(ctx?.process?.parent?.command_line != null && ctx.process.parent.command_line != \"\")",
          "source": "// appendBSBytes appends n '\\\\' bytes to b and returns the resulting slice.\ndef appendBSBytes(StringBuilder b, int n) {\n    for (; n > 0; n--) {\n        b.append('\\\\');\n    }\n    return b;\n}\n\n// readNextArg splits command line string cmd into next\n// argument and command line remainder.\ndef readNextArg(String cmd) {\n    def b = new StringBuilder();\n    boolean inquote;\n    int nslash;\n    for (; cmd.length() > 0; cmd = cmd.substring(1)) {\n        def c = cmd.charAt(0);\n        if (c == (char)' ' || c == (char)0x09) {\n            if (!inquote) {\n                return [\n                    \"arg\":  appendBSBytes(b, nslash).toString(),\n                    \"rest\": cmd.substring(1)\n                ];\n            }\n        } else if (c == (char)'\"') {\n            b = appendBSBytes(b, nslash/2);\n            if (nslash%2 == 0) {\n                // use \"Prior to 2008\" rule from\n                // http://daviddeley.com/autohotkey/parameters/parameters.htm\n                // section 5.2 to deal with double double quotes\n                if (inquote && cmd.length() > 1 && cmd.charAt(1) == (char)'\"') {\n                    b.append(c);\n                    cmd = cmd.substring(1);\n                }\n                inquote = !inquote;\n            } else {\n                b.append(c);\n            }\n            nslash = 0;\n            continue;\n        } else if (c == (char)'\\\\') {\n            nslash++;\n            continue;\n        }\n        b = appendBSBytes(b, nslash);\n        nslash = 0;\n        b.append(c);\n    }\n    return [\n        \"arg\":  appendBSBytes(b, nslash).toString(), \n        \"rest\": ''\n    ];\n}\n\n// commandLineToArgv splits a command line into individual argument\n// strings, following the Windows conventions documented\n// at http://daviddeley.com/autohotkey/parameters/parameters.htm#WINARGV\n// Original implementation found at: https://github.com/golang/go/commit/39c8d2b7faed06b0e91a1ad7906231f53aab45d1\ndef commandLineToArgv(String cmd) {\n    def args = new ArrayList();\n    while (cmd.length() > 0) {\n        if (cmd.charAt(0) == (char)' ' || cmd.charAt(0) == (char)0x09) {\n            cmd = cmd.substring(1);\n            continue;\n        }\n        def next = readNextArg(cmd);\n        cmd = next.rest;\n        args.add(next.arg);\n    }\n    return args;\n}\n\ndef cmd = ctx?.process?.command_line;\nif (cmd != null && cmd != \"\") {\n  ctx.process.args = commandLineToArgv(cmd);\n  ctx.process.args_count = ctx.process.args.length;\n}\n\ndef parentCmd = ctx?.process?.parent?.command_line;\nif (parentCmd != null && parentCmd != \"\") {\n  ctx.process.parent.args = commandLineToArgv(parentCmd);\n  ctx.process.parent.args_count = ctx.process.parent.args.length;\n}"
        }
      },
      {
        "script": {
          "description": "Adds process name information.",
          "lang": "painless",
          "if": "(ctx?.process?.executable != null && ctx.process.executable.length() > 1) ||\n(ctx?.process?.parent?.executable != null && ctx.process.parent.executable.length() > 1)",
          "source": "def getProcessName(def path) {\n  def idx = path.lastIndexOf(\"\\\\\");\n  if (idx > -1) {\n      return path.substring(idx+1);\n  }\n  return \"\";\n}\n\ndef cmd = ctx?.process?.executable;\nif (cmd != null && cmd != \"\" && ctx?.process?.name == null) {\n  def name = getProcessName(cmd);\n  if (name != \"\") {\n    ctx.process.name = name;\n  }\n}\n\ndef parentCmd = ctx?.process?.parent?.executable;\nif (parentCmd != null && parentCmd != \"\" && ctx?.process?.parent?.name == null) {\n  def name = getProcessName(parentCmd);\n  if (name != \"\") {\n    ctx.process.parent.name = name;\n  }\n}"
        }
      },
      {
        "rename": {
          "field": "_temp.hashes",
          "target_field": "file.hash",
          "if": "ctx?._temp?.hashes != null &&\n[\"6\", \"7\", \"15\"].contains(ctx.event.code)"
        }
      },
      {
        "rename": {
          "field": "file.hash.imphash",
          "target_field": "file.pe.imphash",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.TargetFilename",
          "target_field": "file.path",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.TargetFilename != null && ctx?.winlog?.event_data?.TargetFilename != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.Device",
          "target_field": "file.path",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.Device != null && ctx?.winlog?.event_data?.Device != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.PipeName",
          "target_field": "file.name",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.PipeName != null && ctx?.winlog?.event_data?.PipeName != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.ImageLoaded",
          "target_field": "file.path",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.ImageLoaded != null && ctx?.winlog?.event_data?.ImageLoaded != \"\""
        }
      },
      {
        "set": {
          "field": "file.code_signature.subject_name",
          "copy_from": "winlog.event_data.Signature",
          "ignore_failure": true,
          "ignore_empty_value": true
        }
      },
      {
        "set": {
          "field": "file.code_signature.status",
          "copy_from": "winlog.event_data.SignatureStatus",
          "ignore_failure": true,
          "ignore_empty_value": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.OriginalFileName",
          "target_field": "file.pe.original_file_name",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx.event.code == \"7\" && ctx?.winlog?.event_data?.OriginalFileName != null && ctx?.winlog?.event_data?.OriginalFileName != \"\""
        }
      },
      {
        "set": {
          "field": "file.pe.company",
          "copy_from": "winlog.event_data.Company",
          "ignore_failure": true,
          "ignore_empty_value": true,
          "if": "ctx.event.code == \"7\""
        }
      },
      {
        "set": {
          "field": "file.pe.description",
          "copy_from": "winlog.event_data.Description",
          "ignore_failure": true,
          "ignore_empty_value": true,
          "if": "ctx.event.code == \"7\""
        }
      },
      {
        "set": {
          "field": "file.pe.file_version",
          "copy_from": "winlog.event_data.FileVersion",
          "ignore_failure": true,
          "ignore_empty_value": true,
          "if": "ctx.event.code == \"7\""
        }
      },
      {
        "set": {
          "field": "file.pe.product",
          "copy_from": "winlog.event_data.Product",
          "ignore_failure": true,
          "ignore_empty_value": true,
          "if": "ctx.event.code == \"7\""
        }
      },
      {
        "set": {
          "field": "file.code_signature.signed",
          "value": true,
          "if": "ctx?.winlog?.event_data?.Signed != null && ctx.winlog.event_data.Signed == true"
        }
      },
      {
        "set": {
          "field": "file.code_signature.valid",
          "value": true,
          "if": "ctx?.winlog?.event_data?.SignatureStatus != null && ctx?.winlog?.event_data?.SignatureStatus == \"Valid\""
        }
      },
      {
        "script": {
          "description": "Adds file information.",
          "lang": "painless",
          "if": "ctx?.file?.path != null && ctx.file.path.length() > 1",
          "source": "def path = ctx.file.path;\ndef idx = path.lastIndexOf(\"\\\\\");\nif (idx > -1) {\n    if (ctx?.file == null) {\n        ctx.file = new HashMap();\n    }\n    ctx.file.name = path.substring(idx+1);\n    ctx.file.directory = path.substring(0, idx);\n\n    def extIdx = path.lastIndexOf(\".\");\n    if (extIdx > -1) {\n        ctx.file.extension = path.substring(extIdx+1);\n    }\n}"
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.Protocol",
          "target_field": "network.transport",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.Protocol != null && ctx?.winlog?.event_data?.Protocol != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.DestinationPortName",
          "target_field": "network.protocol",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx.event.code != \"22\" && ctx?.winlog?.event_data?.DestinationPortName != null && ctx?.winlog?.event_data?.DestinationPortName != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.SourcePortName",
          "target_field": "network.protocol",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx.event.code != \"22\" && ctx?.winlog?.event_data?.SourcePortName != null && ctx?.winlog?.event_data?.SourcePortName != \"\""
        }
      },
      {
        "set": {
          "field": "network.protocol",
          "value": "dns",
          "if": "ctx.event.code == \"22\""
        }
      },
      {
        "convert": {
          "field": "winlog.event_data.SourceIp",
          "target_field": "source.ip",
          "type": "ip",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.SourceIp != null && ctx?.winlog?.event_data?.SourceIp != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.SourceHostname",
          "target_field": "source.domain",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.SourceHostname != null && ctx?.winlog?.event_data?.SourceHostname != \"\""
        }
      },
      {
        "convert": {
          "field": "winlog.event_data.SourcePort",
          "target_field": "source.port",
          "type": "long",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.SourcePort != null && ctx?.winlog?.event_data?.SourcePort != \"\""
        }
      },
      {
        "convert": {
          "field": "winlog.event_data.DestinationIp",
          "target_field": "destination.ip",
          "type": "ip",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.DestinationIp != null && ctx?.winlog?.event_data?.DestinationIp != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.DestinationHostname",
          "target_field": "destination.domain",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.DestinationHostname != null && ctx?.winlog?.event_data?.DestinationHostname != \"\""
        }
      },
      {
        "convert": {
          "field": "winlog.event_data.DestinationPort",
          "target_field": "destination.port",
          "type": "long",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.DestinationPort != null && ctx?.winlog?.event_data?.DestinationPort != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.QueryName",
          "target_field": "dns.question.name",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.QueryName != null && ctx?.winlog?.event_data?.QueryName != \"\""
        }
      },
      {
        "set": {
          "field": "network.direction",
          "value": "egress",
          "if": "ctx?.winlog?.event_data?.Initiated != null && ctx?.winlog?.event_data?.Initiated == \"true\""
        }
      },
      {
        "set": {
          "field": "network.direction",
          "value": "ingress",
          "if": "ctx?.winlog?.event_data?.Initiated != null && ctx?.winlog?.event_data?.Initiated == \"false\""
        }
      },
      {
        "set": {
          "field": "network.type",
          "value": "ipv4",
          "if": "ctx?.winlog?.event_data?.SourceIsIpv6 != null && ctx?.winlog?.event_data?.SourceIsIpv6 == \"false\""
        }
      },
      {
        "set": {
          "field": "network.type",
          "value": "ipv6",
          "if": "ctx?.winlog?.event_data?.SourceIsIpv6 != null && ctx?.winlog?.event_data?.SourceIsIpv6 == \"true\""
        }
      },
      {
        "script": {
          "description": "Splits the QueryResults field that contains the DNS responses.\nExample: \"type:  5 f2.taboola.map.fastly.net;::ffff:151.101.66.2;::ffff:151.101.130.2;::ffff:151.101.194.2;::ffff:151.101.2.2;\"\n",
          "lang": "painless",
          "if": "ctx?.winlog?.event_data?.QueryResults != null && ctx?.winlog?.event_data?.QueryResults != \"\"",
          "params": {
            "1": "A",
            "2": "NS",
            "3": "MD",
            "4": "MF",
            "5": "CNAME",
            "6": "SOA",
            "7": "MB",
            "8": "MG",
            "9": "MR",
            "10": "NULL",
            "11": "WKS",
            "12": "PTR",
            "13": "HINFO",
            "14": "MINFO",
            "15": "MX",
            "16": "TXT",
            "17": "RP",
            "18": "AFSDB",
            "19": "X25",
            "20": "ISDN",
            "21": "RT",
            "22": "NSAP",
            "23": "NSAPPTR",
            "24": "SIG",
            "25": "KEY",
            "26": "PX",
            "27": "GPOS",
            "28": "AAAA",
            "29": "LOC",
            "30": "NXT",
            "31": "EID",
            "32": "NIMLOC",
            "33": "SRV",
            "34": "ATMA",
            "35": "NAPTR",
            "36": "KX",
            "37": "CERT",
            "38": "A6",
            "39": "DNAME",
            "40": "SINK",
            "41": "OPT",
            "43": "DS",
            "46": "RRSIG",
            "47": "NSEC",
            "48": "DNSKEY",
            "49": "DHCID",
            "100": "UINFO",
            "101": "UID",
            "102": "GID",
            "103": "UNSPEC",
            "248": "ADDRS",
            "249": "TKEY",
            "250": "TSIG",
            "251": "IXFR",
            "252": "AXFR",
            "253": "MAILB",
            "254": "MAILA",
            "255": "ANY",
            "65281": "WINS",
            "65282": "WINSR"
          },
          "source": "def results = /;/.split(ctx.winlog.event_data.QueryResults);\ndef answers = new ArrayList();\ndef ips = new ArrayList();\ndef relatedHosts = new ArrayList();\nfor (def i = 0; i < results.length; i++) {\n  def answer = results[i];\n  if (answer == \"\") {\n    continue;\n  }\n\n  if (answer.startsWith(\"type:\")) {\n    def parts = /\\s+/.split(answer);\n    if (parts.length != 3) {\n      throw new Exception(\"unexpected QueryResult format\");\n    }\n\n    answers.add([\n      \"type\": params[parts[1]],\n      \"data\": parts[2]\n    ]);\n    relatedHosts.add(parts[2]);\n  } else {\n    answer = answer.replace(\"::ffff:\", \"\");\n    ips.add(answer);\n  }\n}\n\nif (answers.length > 0) {\n  ctx.dns.answers = answers;\n}\nif (ips.length > 0) {\n  ctx.dns.resolved_ip = ips;\n}\nif (relatedHosts.length > 0) {\n  if (ctx?.related == null) {\n    ctx.related = new HashMap();\n  }\n  ctx.related.hosts = relatedHosts;\n}"
        }
      },
      {
        "foreach": {
          "field": "dns.resolved_ip",
          "ignore_missing": true,
          "processor": {
            "convert": {
              "field": "_ingest._value",
              "type": "ip",
              "on_failure": [
                {
                  "remove": {
                    "field": "_ingest._value"
                  }
                }
              ]
            }
          }
        }
      },
      {
        "script": {
          "description": "Convert V4MAPPED addresses.",
          "lang": "painless",
          "if": "ctx?.dns?.resolved_ip != null",
          "source": "if (ctx.dns.answers == null) {\n  ctx.dns.answers = new ArrayList();\n}\nfor (def i = 0; i < ctx.dns.resolved_ip.length; i++) {\n  def ip = ctx.dns.resolved_ip[i];\n  if (ip == null) {\n    ctx.dns.resolved_ip.remove(i);\n    continue;\n  }\n\n  // Synthesize record type based on IP address type.\n  def type = \"A\";\n  if (ip.indexOf(\":\") != -1) {\n    type = \"AAAA\";\n  }\n  ctx.dns.answers.add([\n    \"type\": type,\n    \"data\": ip\n  ]);\n}"
        }
      },
      {
        "registered_domain": {
          "field": "dns.question.name",
          "target_field": "dns.question",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.hosts",
          "value": "{{dns.question.name}}",
          "allow_duplicates": false,
          "if": "ctx?.dns?.question?.name != null && ctx?.dns?.question?.name != \"\""
        }
      },
      {
        "remove": {
          "description": "Remove dns.question.domain because it is not part of ECS and is redundant with dns.question.name.",
          "field": "dns.question.domain",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "foreach": {
          "field": "dns.resolved_ip",
          "ignore_missing": true,
          "processor": {
            "append": {
              "field": "related.ip",
              "value": "{{_ingest._value}}",
              "allow_duplicates": false
            }
          }
        }
      },
      {
        "community_id": {
          "ignore_failure": true,
          "ignore_missing": false
        }
      },
      {
        "set": {
          "field": "user.id",
          "copy_from": "winlog.user.identifier",
          "ignore_empty_value": true,
          "ignore_failure": true
        }
      },
      {
        "split": {
          "field": "winlog.event_data.User",
          "target_field": "_temp.user_parts",
          "separator": "\\\\",
          "if": "ctx?.winlog?.event_data?.User != null"
        }
      },
      {
        "set": {
          "field": "user.domain",
          "value": "{{_temp.user_parts.0}}",
          "ignore_failure": true,
          "ignore_empty_value": true,
          "if": "ctx?._temp?.user_parts != null && ctx._temp.user_parts.size() == 2"
        }
      },
      {
        "set": {
          "field": "user.name",
          "value": "{{_temp.user_parts.1}}",
          "ignore_failure": true,
          "ignore_empty_value": true,
          "if": "ctx?._temp?.user_parts != null && ctx._temp.user_parts.size() == 2"
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.QueryStatus",
          "target_field": "sysmon.dns.status",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.QueryStatus != null && ctx?.winlog?.event_data?.QueryStatus != \"\""
        }
      },
      {
        "script": {
          "description": "Translate DNS Query status.",
          "lang": "painless",
          "params": {
            "0": "SUCCESS",
            "5": "ERROR_ACCESS_DENIED",
            "8": "ERROR_NOT_ENOUGH_MEMORY",
            "13": "ERROR_INVALID_DATA",
            "14": "ERROR_OUTOFMEMORY",
            "123": "ERROR_INVALID_NAME",
            "1214": "ERROR_INVALID_NETNAME",
            "1223": "ERROR_CANCELLED",
            "1460": "ERROR_TIMEOUT",
            "4312": "ERROR_OBJECT_NOT_FOUND",
            "9001": "DNS_ERROR_RCODE_FORMAT_ERROR",
            "9002": "DNS_ERROR_RCODE_SERVER_FAILURE",
            "9003": "DNS_ERROR_RCODE_NAME_ERROR",
            "9004": "DNS_ERROR_RCODE_NOT_IMPLEMENTED",
            "9005": "DNS_ERROR_RCODE_REFUSED",
            "9006": "DNS_ERROR_RCODE_YXDOMAIN",
            "9007": "DNS_ERROR_RCODE_YXRRSET",
            "9008": "DNS_ERROR_RCODE_NXRRSET",
            "9009": "DNS_ERROR_RCODE_NOTAUTH",
            "9010": "DNS_ERROR_RCODE_NOTZONE",
            "9016": "DNS_ERROR_RCODE_BADSIG",
            "9017": "DNS_ERROR_RCODE_BADKEY",
            "9018": "DNS_ERROR_RCODE_BADTIME",
            "9101": "DNS_ERROR_KEYMASTER_REQUIRED",
            "9102": "DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE",
            "9103": "DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1",
            "9104": "DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS",
            "9105": "DNS_ERROR_UNSUPPORTED_ALGORITHM",
            "9106": "DNS_ERROR_INVALID_KEY_SIZE",
            "9107": "DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE",
            "9108": "DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION",
            "9109": "DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR",
            "9110": "DNS_ERROR_UNEXPECTED_CNG_ERROR",
            "9111": "DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION",
            "9112": "DNS_ERROR_KSP_NOT_ACCESSIBLE",
            "9113": "DNS_ERROR_TOO_MANY_SKDS",
            "9114": "DNS_ERROR_INVALID_ROLLOVER_PERIOD",
            "9115": "DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET",
            "9116": "DNS_ERROR_ROLLOVER_IN_PROGRESS",
            "9117": "DNS_ERROR_STANDBY_KEY_NOT_PRESENT",
            "9118": "DNS_ERROR_NOT_ALLOWED_ON_ZSK",
            "9119": "DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD",
            "9120": "DNS_ERROR_ROLLOVER_ALREADY_QUEUED",
            "9121": "DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE",
            "9122": "DNS_ERROR_BAD_KEYMASTER",
            "9123": "DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD",
            "9124": "DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT",
            "9125": "DNS_ERROR_DNSSEC_IS_DISABLED",
            "9126": "DNS_ERROR_INVALID_XML",
            "9127": "DNS_ERROR_NO_VALID_TRUST_ANCHORS",
            "9128": "DNS_ERROR_ROLLOVER_NOT_POKEABLE",
            "9129": "DNS_ERROR_NSEC3_NAME_COLLISION",
            "9130": "DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1",
            "9501": "DNS_INFO_NO_RECORDS",
            "9502": "DNS_ERROR_BAD_PACKET",
            "9503": "DNS_ERROR_NO_PACKET",
            "9504": "DNS_ERROR_RCODE",
            "9505": "DNS_ERROR_UNSECURE_PACKET",
            "9506": "DNS_REQUEST_PENDING",
            "9551": "DNS_ERROR_INVALID_TYPE",
            "9552": "DNS_ERROR_INVALID_IP_ADDRESS",
            "9553": "DNS_ERROR_INVALID_PROPERTY",
            "9554": "DNS_ERROR_TRY_AGAIN_LATER",
            "9555": "DNS_ERROR_NOT_UNIQUE",
            "9556": "DNS_ERROR_NON_RFC_NAME",
            "9557": "DNS_STATUS_FQDN",
            "9558": "DNS_STATUS_DOTTED_NAME",
            "9559": "DNS_STATUS_SINGLE_PART_NAME",
            "9560": "DNS_ERROR_INVALID_NAME_CHAR",
            "9561": "DNS_ERROR_NUMERIC_NAME",
            "9562": "DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER",
            "9563": "DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION",
            "9564": "DNS_ERROR_CANNOT_FIND_ROOT_HINTS",
            "9565": "DNS_ERROR_INCONSISTENT_ROOT_HINTS",
            "9566": "DNS_ERROR_DWORD_VALUE_TOO_SMALL",
            "9567": "DNS_ERROR_DWORD_VALUE_TOO_LARGE",
            "9568": "DNS_ERROR_BACKGROUND_LOADING",
            "9569": "DNS_ERROR_NOT_ALLOWED_ON_RODC",
            "9570": "DNS_ERROR_NOT_ALLOWED_UNDER_DNAME",
            "9571": "DNS_ERROR_DELEGATION_REQUIRED",
            "9572": "DNS_ERROR_INVALID_POLICY_TABLE",
            "9573": "DNS_ERROR_ADDRESS_REQUIRED",
            "9601": "DNS_ERROR_ZONE_DOES_NOT_EXIST",
            "9602": "DNS_ERROR_NO_ZONE_INFO",
            "9603": "DNS_ERROR_INVALID_ZONE_OPERATION",
            "9604": "DNS_ERROR_ZONE_CONFIGURATION_ERROR",
            "9605": "DNS_ERROR_ZONE_HAS_NO_SOA_RECORD",
            "9606": "DNS_ERROR_ZONE_HAS_NO_NS_RECORDS",
            "9607": "DNS_ERROR_ZONE_LOCKED",
            "9608": "DNS_ERROR_ZONE_CREATION_FAILED",
            "9609": "DNS_ERROR_ZONE_ALREADY_EXISTS",
            "9610": "DNS_ERROR_AUTOZONE_ALREADY_EXISTS",
            "9611": "DNS_ERROR_INVALID_ZONE_TYPE",
            "9612": "DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP",
            "9613": "DNS_ERROR_ZONE_NOT_SECONDARY",
            "9614": "DNS_ERROR_NEED_SECONDARY_ADDRESSES",
            "9615": "DNS_ERROR_WINS_INIT_FAILED",
            "9616": "DNS_ERROR_NEED_WINS_SERVERS",
            "9617": "DNS_ERROR_NBSTAT_INIT_FAILED",
            "9618": "DNS_ERROR_SOA_DELETE_INVALID",
            "9619": "DNS_ERROR_FORWARDER_ALREADY_EXISTS",
            "9620": "DNS_ERROR_ZONE_REQUIRES_MASTER_IP",
            "9621": "DNS_ERROR_ZONE_IS_SHUTDOWN",
            "9622": "DNS_ERROR_ZONE_LOCKED_FOR_SIGNING",
            "9651": "DNS_ERROR_PRIMARY_REQUIRES_DATAFILE",
            "9652": "DNS_ERROR_INVALID_DATAFILE_NAME",
            "9653": "DNS_ERROR_DATAFILE_OPEN_FAILURE",
            "9654": "DNS_ERROR_FILE_WRITEBACK_FAILED",
            "9655": "DNS_ERROR_DATAFILE_PARSING",
            "9701": "DNS_ERROR_RECORD_DOES_NOT_EXIST",
            "9702": "DNS_ERROR_RECORD_FORMAT",
            "9703": "DNS_ERROR_NODE_CREATION_FAILED",
            "9704": "DNS_ERROR_UNKNOWN_RECORD_TYPE",
            "9705": "DNS_ERROR_RECORD_TIMED_OUT",
            "9706": "DNS_ERROR_NAME_NOT_IN_ZONE",
            "9707": "DNS_ERROR_CNAME_LOOP",
            "9708": "DNS_ERROR_NODE_IS_CNAME",
            "9709": "DNS_ERROR_CNAME_COLLISION",
            "9710": "DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT",
            "9711": "DNS_ERROR_RECORD_ALREADY_EXISTS",
            "9712": "DNS_ERROR_SECONDARY_DATA",
            "9713": "DNS_ERROR_NO_CREATE_CACHE_DATA",
            "9714": "DNS_ERROR_NAME_DOES_NOT_EXIST",
            "9715": "DNS_WARNING_PTR_CREATE_FAILED",
            "9716": "DNS_WARNING_DOMAIN_UNDELETED",
            "9717": "DNS_ERROR_DS_UNAVAILABLE",
            "9718": "DNS_ERROR_DS_ZONE_ALREADY_EXISTS",
            "9719": "DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE",
            "9720": "DNS_ERROR_NODE_IS_DNAME",
            "9721": "DNS_ERROR_DNAME_COLLISION",
            "9722": "DNS_ERROR_ALIAS_LOOP",
            "9751": "DNS_INFO_AXFR_COMPLETE",
            "9752": "DNS_ERROR_AXFR",
            "9753": "DNS_INFO_ADDED_LOCAL_WINS",
            "9801": "DNS_STATUS_CONTINUE_NEEDED",
            "9851": "DNS_ERROR_NO_TCPIP",
            "9852": "DNS_ERROR_NO_DNS_SERVERS",
            "9901": "DNS_ERROR_DP_DOES_NOT_EXIST",
            "9902": "DNS_ERROR_DP_ALREADY_EXISTS",
            "9903": "DNS_ERROR_DP_NOT_ENLISTED",
            "9904": "DNS_ERROR_DP_ALREADY_ENLISTED",
            "9905": "DNS_ERROR_DP_NOT_AVAILABLE",
            "9906": "DNS_ERROR_DP_FSMO_ERROR",
            "9911": "DNS_ERROR_RRL_NOT_ENABLED",
            "9912": "DNS_ERROR_RRL_INVALID_WINDOW_SIZE",
            "9913": "DNS_ERROR_RRL_INVALID_IPV4_PREFIX",
            "9914": "DNS_ERROR_RRL_INVALID_IPV6_PREFIX",
            "9915": "DNS_ERROR_RRL_INVALID_TC_RATE",
            "9916": "DNS_ERROR_RRL_INVALID_LEAK_RATE",
            "9917": "DNS_ERROR_RRL_LEAK_RATE_LESSTHAN_TC_RATE",
            "9921": "DNS_ERROR_VIRTUALIZATION_INSTANCE_ALREADY_EXISTS",
            "9922": "DNS_ERROR_VIRTUALIZATION_INSTANCE_DOES_NOT_EXIST",
            "9923": "DNS_ERROR_VIRTUALIZATION_TREE_LOCKED",
            "9924": "DNS_ERROR_INVAILD_VIRTUALIZATION_INSTANCE_NAME",
            "9925": "DNS_ERROR_DEFAULT_VIRTUALIZATION_INSTANCE",
            "9951": "DNS_ERROR_ZONESCOPE_ALREADY_EXISTS",
            "9952": "DNS_ERROR_ZONESCOPE_DOES_NOT_EXIST",
            "9953": "DNS_ERROR_DEFAULT_ZONESCOPE",
            "9954": "DNS_ERROR_INVALID_ZONESCOPE_NAME",
            "9955": "DNS_ERROR_NOT_ALLOWED_WITH_ZONESCOPES",
            "9956": "DNS_ERROR_LOAD_ZONESCOPE_FAILED",
            "9957": "DNS_ERROR_ZONESCOPE_FILE_WRITEBACK_FAILED",
            "9958": "DNS_ERROR_INVALID_SCOPE_NAME",
            "9959": "DNS_ERROR_SCOPE_DOES_NOT_EXIST",
            "9960": "DNS_ERROR_DEFAULT_SCOPE",
            "9961": "DNS_ERROR_INVALID_SCOPE_OPERATION",
            "9962": "DNS_ERROR_SCOPE_LOCKED",
            "9963": "DNS_ERROR_SCOPE_ALREADY_EXISTS",
            "9971": "DNS_ERROR_POLICY_ALREADY_EXISTS",
            "9972": "DNS_ERROR_POLICY_DOES_NOT_EXIST",
            "9973": "DNS_ERROR_POLICY_INVALID_CRITERIA",
            "9974": "DNS_ERROR_POLICY_INVALID_SETTINGS",
            "9975": "DNS_ERROR_CLIENT_SUBNET_IS_ACCESSED",
            "9976": "DNS_ERROR_CLIENT_SUBNET_DOES_NOT_EXIST",
            "9977": "DNS_ERROR_CLIENT_SUBNET_ALREADY_EXISTS",
            "9978": "DNS_ERROR_SUBNET_DOES_NOT_EXIST",
            "9979": "DNS_ERROR_SUBNET_ALREADY_EXISTS",
            "9980": "DNS_ERROR_POLICY_LOCKED",
            "9981": "DNS_ERROR_POLICY_INVALID_WEIGHT",
            "9982": "DNS_ERROR_POLICY_INVALID_NAME",
            "9983": "DNS_ERROR_POLICY_MISSING_CRITERIA",
            "9984": "DNS_ERROR_INVALID_CLIENT_SUBNET_NAME",
            "9985": "DNS_ERROR_POLICY_PROCESSING_ORDER_INVALID",
            "9986": "DNS_ERROR_POLICY_SCOPE_MISSING",
            "9987": "DNS_ERROR_POLICY_SCOPE_NOT_ALLOWED",
            "9988": "DNS_ERROR_SERVERSCOPE_IS_REFERENCED",
            "9989": "DNS_ERROR_ZONESCOPE_IS_REFERENCED",
            "9990": "DNS_ERROR_POLICY_INVALID_CRITERIA_CLIENT_SUBNET",
            "9991": "DNS_ERROR_POLICY_INVALID_CRITERIA_TRANSPORT_PROTOCOL",
            "9992": "DNS_ERROR_POLICY_INVALID_CRITERIA_NETWORK_PROTOCOL",
            "9993": "DNS_ERROR_POLICY_INVALID_CRITERIA_INTERFACE",
            "9994": "DNS_ERROR_POLICY_INVALID_CRITERIA_FQDN",
            "9995": "DNS_ERROR_POLICY_INVALID_CRITERIA_QUERY_TYPE",
            "9996": "DNS_ERROR_POLICY_INVALID_CRITERIA_TIME_OF_DAY",
            "10054": "WSAECONNRESET",
            "10055": "WSAENOBUFS",
            "10060": "WSAETIMEDOUT"
          },
          "if": "ctx?.sysmon?.dns?.status != null && ctx?.sysmon?.dns?.status != \"\"",
          "source": "def status = params[ctx.sysmon.dns.status];\nif (status != null) {\n  ctx.sysmon.dns.status = status;\n}"
        }
      },
      {
        "convert": {
          "field": "winlog.event_data.Archived",
          "target_field": "sysmon.file.archived",
          "type": "boolean",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.Archived != null && ctx?.winlog?.event_data?.Archived != \"\""
        }
      },
      {
        "convert": {
          "field": "winlog.event_data.IsExecutable",
          "target_field": "sysmon.file.is_executable",
          "type": "boolean",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.IsExecutable != null && ctx?.winlog?.event_data?.IsExecutable != \"\""
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{user.name}}",
          "ignore_failure": true,
          "allow_duplicates": false,
          "if": "ctx?.user?.name != null && ctx.user.name != \"\""
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{source.ip}}",
          "ignore_failure": true,
          "allow_duplicates": false,
          "if": "ctx?.source?.ip != null && ctx.source.ip != \"\""
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{destination.ip}}",
          "ignore_failure": true,
          "allow_duplicates": false,
          "if": "ctx?.destination?.ip != null && ctx.destination.ip != \"\""
        }
      },
      {
        "script": {
          "description": "Set registry fields.",
          "lang": "painless",
          "if": "ctx?.winlog?.event_data?.TargetObject != null && ctx?.winlog?.event_data?.TargetObject != \"\" &&\n[\"12\", \"13\", \"14\"].contains(ctx.event.code)",
          "params": {
            "HKEY_CLASSES_ROOT": "HKCR",
            "HKCR": "HKCR",
            "HKEY_CURRENT_CONFIG": "HKCC",
            "HKCC": "HKCC",
            "HKEY_CURRENT_USER": "HKCU",
            "HKCU": "HKCU",
            "HKEY_DYN_DATA": "HKDD",
            "HKDD": "HKDD",
            "HKEY_LOCAL_MACHINE": "HKLM",
            "HKLM": "HKLM",
            "HKEY_PERFORMANCE_DATA": "HKPD",
            "HKPD": "HKPD",
            "HKEY_USERS": "HKU",
            "HKU": "HKU"
          },
          "source": "ctx.registry = new HashMap();\nPattern qwordRegex = /(?i)QWORD \\(((0x\\d{8})-(0x\\d{8}))\\)/;\nPattern dwordRegex = /(?i)DWORD \\((0x\\d{8})\\)/;\n\ndef path = ctx.winlog.event_data.TargetObject;\nctx.registry.path = path;\n\ndef pathTokens = Arrays.asList(/\\\\/.split(path));\ndef hive = params[pathTokens[0]];\nif (hive != null) {\n  ctx.registry.hive = hive;\n  if (pathTokens.length > 1) {\n    ctx.registry.key = pathTokens.subList(1, pathTokens.length).join(\"\\\\\");\n  }\n}\n\ndef value = pathTokens[pathTokens.length - 1];\nctx.registry.value = value;\n\ndef data = ctx?.winlog?.event_data?.Details;\nif (data != null && data != \"\") {\n  def prefixLen = 2; // to remove 0x prefix\n  def dataValue = \"\";\n  def dataType = \"\";\n  def matcher = qwordRegex.matcher(data);\n  if (matcher.matches()) {\n    def parsedHighByte = Long.parseLong(matcher.group(2).substring(prefixLen), 16);\n    def parsedLowByte = Long.parseLong(matcher.group(3).substring(prefixLen), 16);\n    if (!Double.isNaN(parsedHighByte) && !Double.isNaN(parsedLowByte)) {\n      dataType = \"SZ_QWORD\";\n      dataValue = Long.toString(((parsedHighByte << 8) + parsedLowByte));\n    }\n  } else {\n    matcher = dwordRegex.matcher(data);\n    if (matcher.matches()) {\n      def parsedValue = Long.parseLong(matcher.group(1).substring(prefixLen), 16);\n      if (!Double.isNaN(parsedValue)) {\n        dataType = \"SZ_DWORD\";\n        dataValue = matcher.group(1);\n      }\n    }\n  }\n\n  if (dataType != \"\") {\n    ctx.registry.data = [\n      \"strings\": [dataValue],\n      \"type\": dataType\n    ];\n  }\n}"
        }
      },
      {
        "remove": {
          "field": [
            "_temp",
            "winlog.event_data.ProcessId",
            "winlog.event_data.ParentProcessId",
            "winlog.event_data.SourceProcessId",
            "winlog.event_data.SourceThreadId",
            "winlog.event_data.SourceIp",
            "winlog.event_data.SourcePort",
            "winlog.event_data.SourcePortName",
            "winlog.event_data.DestinationIp",
            "winlog.event_data.DestinationPort",
            "winlog.event_data.DestinationPortName",
            "winlog.event_data.RuleName",
            "winlog.event_data.User",
            "winlog.event_data.Initiated",
            "winlog.event_data.SourceIsIpv6",
            "winlog.event_data.DestinationIsIpv6",
            "winlog.event_data.QueryStatus",
            "winlog.event_data.Archived",
            "winlog.event_data.IsExecutable",
            "winlog.event_data.QueryResults",
            "winlog.event_data.UtcTime",
            "winlog.event_data.Hash",
            "winlog.event_data.Hashes",
            "winlog.event_data.TargetObject",
            "winlog.event_data.Details",
            "winlog.time_created",
            "winlog.level"
          ],
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "script": {
          "description": "Remove all empty values from event_data.",
          "lang": "painless",
          "source": "ctx?.winlog?.event_data?.entrySet().removeIf(entry -> entry.getValue() == null || entry.getValue().equals(\"\") || entry.getValue().equals(\"-\"));"
        }
      },
      {
        "remove": {
          "description": "Remove empty event data.",
          "field": "winlog.event_data",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data != null && ctx.winlog.event_data.size() == 0"
        }
      },
      {
        "pipeline": {
          "name": "logs-windows.forwarded@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "Processor \"{{ _ingest.on_failure_processor_type }}\" with tag \"{{ _ingest.on_failure_processor_tag }}\" in pipeline \"{{ _ingest.on_failure_pipeline }}\" failed with message \"{{ _ingest.on_failure_message }}\""
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "windows"
      }
    }
  },
  "logs-aws.route53_resolver_logs-1.25.2": {
    "description": "Pipeline for AWS Route53 Resolver Logs",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.0.0"
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true,
          "if": "ctx.event?.original == null",
          "description": "Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document."
        }
      },
      {
        "remove": {
          "field": "message",
          "ignore_missing": true,
          "if": "ctx.event?.original != null",
          "description": "The `message` field is no longer required if the document has an `event.original` field."
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "json"
        }
      },
      {
        "set": {
          "field": "cloud.provider",
          "value": "aws"
        }
      },
      {
        "rename": {
          "field": "json.account_id",
          "target_field": "cloud.account.id",
          "ignore_missing": true
        }
      },
      {
        "date": {
          "field": "json.query_timestamp",
          "target_field": "@timestamp",
          "ignore_failure": true,
          "formats": [
            "ISO8601"
          ]
        }
      },
      {
        "set": {
          "field": "cloud.region",
          "copy_from": "json.region",
          "ignore_empty_value": true
        }
      },
      {
        "rename": {
          "field": "json.vpc_id",
          "target_field": "aws.vpc_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.srcids.instance",
          "target_field": "aws.instance_id",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "cloud.instance.id",
          "copy_from": "aws.instance_id",
          "ignore_empty_value": true
        }
      },
      {
        "gsub": {
          "field": "json.query_name",
          "pattern": "\\.$",
          "replacement": "",
          "ignore_missing": true
        }
      },
      {
        "registered_domain": {
          "field": "json.query_name",
          "target_field": "dns.question",
          "ignore_missing": true,
          "if": "!ctx.json?.query_name.endsWith(\"in-addr.arpa\") && !ctx.json?.query_name.endsWith(\"ip6.arpa\")"
        }
      },
      {
        "rename": {
          "field": "dns.question.domain",
          "target_field": "dns.question.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.query_name",
          "target_field": "dns.question.name",
          "ignore_missing": true,
          "if": "ctx.dns?.question?.name == null"
        }
      },
      {
        "rename": {
          "field": "json.query_class",
          "target_field": "dns.question.class",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.query_type",
          "target_field": "dns.question.type",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.rcode",
          "target_field": "dns.response_code",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.answers",
          "target_field": "dns.answers",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": true,
          "if": "ctx.dns?.answers != null && ctx.dns?.answers instanceof List",
          "source": "List answers = new ArrayList(); for (answer in ctx.dns.answers) {\n  Map new_answer = new HashMap();\n  if(answer?.Class != null) {\n    new_answer.put(\"class\", answer?.Class);\n  }\n  if(answer?.Type != null) {\n    new_answer.put(\"type\", answer?.Type);\n  }\n  if(answer?.Rdata != null) {\n    new_answer.put(\"data\", answer?.Rdata);\n    if (new_answer?.data != null && new_answer.data.length() > 0 && new_answer.data.substring(new_answer.data.length() - 1) == '.') {\n        new_answer.data = new_answer.data.substring(0, new_answer.data.length() - 1);\n    }\n    if (new_answer?.type != null && new_answer.type == 'CNAME') {\n      new_answer.put(\"name\", new_answer?.data);\n    }\n  }\n  answers.add(new_answer);\n  if(ctx.related == null) {\n    ctx.put('related', new HashMap());\n  }\n  if(ctx.related?.ip == null) {\n    ctx.related.put('ip',new ArrayList());\n  }\n  if(ctx.related?.hosts == null) {\n    ctx.related.put('hosts',new ArrayList());\n  }\n  if(['A','AAAA'].contains(new_answer.type)) {\n    ctx.related.ip.add(new_answer.data);\n  }\n  if(['CNAME', 'PTR'].contains(new_answer.type)) {\n    ctx.related.hosts.add(new_answer.data);\n  }\n} ctx.dns.answers = answers;"
        }
      },
      {
        "rename": {
          "field": "json.transport",
          "target_field": "network.transport",
          "ignore_missing": true
        }
      },
      {
        "lowercase": {
          "field": "network.transport",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "network.iana_number",
          "value": "6",
          "if": "ctx.network?.transport == \"tcp\""
        }
      },
      {
        "set": {
          "field": "network.iana_number",
          "value": "17",
          "if": "ctx.network?.transport == \"udp\""
        }
      },
      {
        "set": {
          "field": "network.protocol",
          "value": "dns"
        }
      },
      {
        "convert": {
          "field": "json.srcport",
          "target_field": "source.port",
          "type": "long",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.srcaddr",
          "target_field": "source.address",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "source.address",
          "target_field": "source.ip",
          "type": "ip",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "source.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.asn",
          "target_field": "source.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.organization_name",
          "target_field": "source.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "network.type",
          "value": "ipv4",
          "if": "ctx.source?.ip != null && ctx.source?.ip.contains(\".\")"
        }
      },
      {
        "set": {
          "field": "network.type",
          "value": "ipv6",
          "if": "ctx.source?.ip != null && ctx.source?.ip.contains(\":\")"
        }
      },
      {
        "rename": {
          "field": "json.firewall_rule_action",
          "target_field": "aws.route53.firewall.action",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.firewall_rule_group_id",
          "target_field": "aws.route53.firewall.rule_group.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.firewall_domain_list_id",
          "target_field": "aws.route53.firewall.domain_list.id",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "network"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "protocol"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "success",
          "if": "ctx.dns?.response_code == \"NOERROR\""
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "failure",
          "if": "ctx.dns?.response_code != \"NOERROR\""
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{source.ip}}",
          "if": "ctx.source?.ip != null"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": true,
          "if": "ctx.dns?.question?.name != null && ctx.dns?.question?.type == \"PTR\"",
          "source": "String ip; if(ctx.dns?.question?.name.contains(\".in-addr.arpa\")) {\n  List reverse_ip = Arrays.asList(ctx.dns?.question?.name.replace(\".in-addr.arpa\", \"\").splitOnToken(\".\"));\n  List ip_arr = new ArrayList();\n  for (int i = reverse_ip.length; i > 0 ; i--) {\n      ip_arr.add(reverse_ip[i-1]);\n  }\n  ip = String.join(\".\",ip_arr);\n} else if (ctx.dns?.question?.name.contains(\".ip6.arpa\")) {\n  List reverse_ip = Arrays.asList(ctx.dns?.question?.name.replace(\".ip6.arpa\", \"\").splitOnToken(\".\"));\n  List ip_arr = new ArrayList();\n  int j = 1;\n  for (int i = reverse_ip.length; i > 0 ; i--) {\n      ip_arr.add(reverse_ip[i-1]);\n      if(j % 4 == 0 && i != 1) {\n        j = 0;\n        ip_arr.add(\":\");\n      }\n      j++;\n  }\n  ip = String.join(\"\",ip_arr);    \n}     if(ctx.related?.ip == null) {\n  ctx.related.put('ip',new ArrayList());\n} if(ip != null && !ctx.related?.ip.contains(ip)) {\n  ctx.related.ip.add(ip);\n}   "
        }
      },
      {
        "append": {
          "field": "related.hosts",
          "value": "{{dns.question.name}}",
          "if": "ctx.dns?.question?.name != null && ctx.dns?.question?.type != \"PTR\""
        }
      },
      {
        "remove": {
          "field": [
            "json"
          ],
          "ignore_missing": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "description": "This script processor iterates over the whole document to remove fields with null values.",
          "source": "void handleMap(Map map) {\n  for (def x : map.values()) {\n    if (x instanceof Map) {\n        handleMap(x);\n    } else if (x instanceof List) {\n        handleList(x);\n    }\n  }\n  map.values().removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));\n}\nvoid handleList(List list) {\n  for (def x : list) {\n      if (x instanceof Map) {\n          handleMap(x);\n      } else if (x instanceof List) {\n          handleList(x);\n      }\n  }\n  list.removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));\n}\nhandleMap(ctx);\n"
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-aws.route53_resolver_logs@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "traces-apm-8.4.2": {
    "description": "Pipeline for ingesting APM trace events.",
    "processors": [
      {
        "grok": {
          "field": "observer.version",
          "pattern_definitions": {
            "DIGITS": "(?:[0-9]+)"
          },
          "patterns": [
            "%{DIGITS:observer.version_major:int}.%{DIGITS:observer.version_minor:int}.%{DIGITS:observer.version_patch:int}(?:[-+].*)?"
          ]
        }
      },
      {
        "fail": {
          "if": "ctx.observer.version_major > 8 || (ctx.observer.version_major == 8 && ctx.observer.version_minor > 4)",
          "message": "Document produced by APM Server v{{{observer.version}}}, which is newer than the installed APM integration (v8.4.2). The APM integration must be upgraded."
        }
      },
      {
        "remove": {
          "field": [
            "observer.version_major",
            "observer.version_minor",
            "observer.version_patch"
          ],
          "ignore_missing": true
        }
      },
      {
        "user_agent": {
          "field": "user_agent.original",
          "ignore_failure": true,
          "ignore_missing": true,
          "target_field": "user_agent"
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-City.mmdb",
          "field": "client.ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "client.ip",
                "ignore_failure": true,
                "ignore_missing": true
              }
            }
          ],
          "target_field": "client.geo"
        }
      },
      {
        "script": {
          "if": "ctx.processor?.event != null && ctx.get(ctx.processor.event) != null && ctx.get(ctx.processor.event)?.duration == null",
          "source": "def durationNanos = ctx.event?.duration ?: 0;\ndef eventType = ctx.processor.event;\nctx.get(ctx.processor.event).duration = [\"us\": (int)(durationNanos/1000)];"
        }
      },
      {
        "remove": {
          "field": "event.duration",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "if": "ctx.processor?.event == 'span'",
          "field": [
            "host",
            "process",
            "user",
            "user_agent",
            "container",
            "kubernetes",
            "service.node",
            "service.version",
            "service.language",
            "service.runtime",
            "service.framework"
          ],
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "pipeline": {
          "name": "traces-apm@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "apm"
      }
    }
  },
  "metrics-kubernetes.state_deployment-1.26.0": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-kubernetes.state_deployment@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "kubernetes"
      }
    }
  },
  "metrics-system.network-1.20.4": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-system.network@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "system"
      }
    }
  },
  "metrics-kubernetes.state_cronjob-1.26.0": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-kubernetes.state_cronjob@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "kubernetes"
      }
    }
  },
  "metrics-kubernetes.scheduler-1.26.0": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-kubernetes.scheduler@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "kubernetes"
      }
    }
  },
  "synthetics-browser-0.10.2": {
    "processors": [
      {
        "pipeline": {
          "name": "synthetics-browser@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "synthetics"
      }
    }
  },
  "logs-crowdstrike.falcon-1.7.0-firewall_match": {
    "processors": [
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": [
            "network"
          ]
        }
      },
      {
        "append": {
          "field": "event.action",
          "value": [
            "firewall_match_event"
          ]
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": [
            "start",
            "connection"
          ]
        }
      },
      {
        "set": {
          "field": "message",
          "value": "Firewall Rule '{{crowdstrike.event.RuleName}}' triggered",
          "if": "ctx?.crowdstrike?.event?.RuleName != null",
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.Ipv",
          "target_field": "network.type",
          "type": "string",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.PID",
          "target_field": "process.pid",
          "ignore_failure": true,
          "ignore_missing": true,
          "type": "long"
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.RuleId",
          "target_field": "rule.id",
          "type": "string",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.RuleName",
          "target_field": "rule.name",
          "type": "string",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.RuleGroupName",
          "target_field": "rule.ruleset",
          "type": "string",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.RuleDescription",
          "target_field": "rule.description",
          "type": "string",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.RuleFamilyID",
          "target_field": "rule.category",
          "type": "string",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.HostName",
          "target_field": "host.name",
          "type": "string",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.Ipv",
          "target_field": "network.type",
          "type": "string",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.EventType",
          "target_field": "event.code",
          "type": "string",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "network.direction",
          "value": "ingress",
          "if": "ctx?.crowdstrike?.event?.ConnectionDirection == \"1\""
        }
      },
      {
        "set": {
          "field": "source.ip",
          "value": "{{crowdstrike.event.RemoteAddress}}",
          "ignore_empty_value": true,
          "if": "ctx?.crowdstrike?.event?.ConnectionDirection == \"1\""
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.RemotePort",
          "target_field": "source.port",
          "type": "long",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.crowdstrike?.event?.ConnectionDirection == \"1\""
        }
      },
      {
        "set": {
          "field": "destination.ip",
          "value": "{{crowdstrike.event.LocalAddress}}",
          "ignore_empty_value": true,
          "if": "ctx?.crowdstrike?.event?.ConnectionDirection == \"1\""
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.LocalPort",
          "target_field": "destination.port",
          "type": "long",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.crowdstrike?.event?.ConnectionDirection == \"1\""
        }
      },
      {
        "set": {
          "field": "network.direction",
          "value": "ingress",
          "if": "ctx?.crowdstrike?.event?.ConnectionDirection != \"1\""
        }
      },
      {
        "set": {
          "field": "destination.ip",
          "value": "{{crowdstrike.event.RemoteAddress}}",
          "ignore_empty_value": true,
          "if": "ctx?.crowdstrike?.event?.ConnectionDirection != \"1\""
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.RemotePort",
          "target_field": "destination.port",
          "type": "long",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.crowdstrike?.event?.ConnectionDirection != \"1\""
        }
      },
      {
        "set": {
          "field": "source.ip",
          "value": "{{crowdstrike.event.LocalAddress}}",
          "ignore_empty_value": true,
          "if": "ctx?.crowdstrike?.event?.ConnectionDirection != \"1\""
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.LocalPort",
          "target_field": "source.port",
          "type": "long",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.crowdstrike?.event?.ConnectionDirection != \"1\""
        }
      },
      {
        "pipeline": {
          "name": "logs-crowdstrike.falcon@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "crowdstrike"
      }
    }
  },
  "logs-cisco_duo.telephony-1.5.1": {
    "description": "Pipeline for parsing cisco_duo telephony logs",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.4.0"
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "json",
          "ignore_failure": true
        }
      },
      {
        "fingerprint": {
          "fields": [
            "json.timestamp",
            "json.phone",
            "json.context",
            "json.type"
          ],
          "target_field": "_id",
          "ignore_missing": true
        }
      },
      {
        "date": {
          "field": "json.timestamp",
          "target_field": "@timestamp",
          "if": "ctx.json?.timestamp != null",
          "formats": [
            "UNIX"
          ],
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "rename": {
          "field": "json.context",
          "target_field": "cisco_duo.telephony.event_type",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.credits",
          "target_field": "cisco_duo.telephony.credits",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.phone",
          "target_field": "cisco_duo.telephony.phone_number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.type",
          "target_field": "cisco_duo.telephony.type",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "json",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-cisco_duo.telephony@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "append": {
          "field": "error.message",
          "value": "{{{_ingest.on_failure_message}}}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "cisco_duo"
      }
    }
  },
  "metrics-system.process-1.20.4": {
    "description": "Pipeline for system.process events.",
    "processors": [
      {
        "rename": {
          "description": "Rename process.ppid from Agent 7.x to process.parent.pid.",
          "field": "process.ppid",
          "target_field": "process.parent.pid",
          "ignore_failure": true
        }
      },
      {
        "pipeline": {
          "name": "metrics-system.process@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "system"
      }
    }
  },
  "logs-zscaler_zia.firewall-2.4.1": {
    "description": "Pipeline for Zscaler firewall logs",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.4.0"
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "resp",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": "json",
          "if": "ctx?.input?.type == 'http_endpoint'",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "resp.event",
          "target_field": "json",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "resp",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "network"
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "info"
        }
      },
      {
        "date": {
          "field": "json.datetime",
          "target_field": "@timestamp",
          "ignore_failure": true,
          "formats": [
            "E MMM dd HH:mm:ss yyyy",
            "E MMM  d HH:mm:ss yyyy",
            "E MMM d HH:mm:ss yyyy",
            "yyyy-mm-dd HH:mm:ss"
          ]
        }
      },
      {
        "date": {
          "field": "json.time",
          "target_field": "@timestamp",
          "ignore_failure": true,
          "formats": [
            "E MMM dd HH:mm:ss yyyy",
            "E MMM  d HH:mm:ss yyyy",
            "E MMM d HH:mm:ss yyyy",
            "yyyy-MM-dd HH:mm:ss"
          ]
        }
      },
      {
        "remove": {
          "field": [
            "json.time",
            "json.datetime"
          ],
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.outbytes",
          "target_field": "source.bytes",
          "type": "long",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": "json.outbytes",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.devicehostname",
          "target_field": "host.hostname",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.nwapp",
          "target_field": "network.application",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.nwsvc",
          "target_field": "network.protocol",
          "ignore_missing": true
        }
      },
      {
        "lowercase": {
          "field": "network.protocol",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.proto",
          "target_field": "network.transport",
          "ignore_missing": true
        }
      },
      {
        "lowercase": {
          "field": "network.transport",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "rule.name",
          "value": "{{{json.rulelabel}}}",
          "if": "ctx?.json?.rulelabel != null",
          "allow_duplicates": false
        }
      },
      {
        "append": {
          "field": "rule.name",
          "value": "{{{json.ipsrulelabel}}}",
          "if": "ctx?.json?.ipsrulelabel != null",
          "allow_duplicates": false
        }
      },
      {
        "urldecode": {
          "field": "rule.name",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": "json.rulelabel",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "json.ipsrulelabel",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.inbytes",
          "target_field": "destination.bytes",
          "type": "long",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": "json.inbytes",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.destcountry",
          "target_field": "destination.geo.country_name",
          "ignore_missing": true
        }
      },
      {
        "urldecode": {
          "field": "json.user",
          "target_field": "user.email",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "json.user",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.deviceowner",
          "target_field": "user.name",
          "ignore_missing": true
        }
      },
      {
        "urldecode": {
          "field": "json.department",
          "target_field": "zscaler_zia.firewall.department",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "json.department",
          "ignore_missing": true
        }
      },
      {
        "urldecode": {
          "field": "json.locationname",
          "target_field": "zscaler_zia.firewall.location.name",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "json.locationname",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.cdport",
          "target_field": "zscaler_zia.firewall.client.destination.port",
          "type": "long",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": "json.cdport",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.csport",
          "target_field": "source.port",
          "type": "long",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": "json.csport",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.sdport",
          "target_field": "destination.port",
          "type": "long",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": "json.sdport",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.ssport",
          "target_field": "zscaler_zia.firewall.server.source.port",
          "type": "long",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": "json.ssport",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{json.csip}}}",
          "if": "ctx?.json?.csip != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.csip",
          "target_field": "source.ip",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{json.cdip}}}",
          "if": "ctx?.json?.cdip != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.cdip",
          "target_field": "zscaler_zia.firewall.client.destination.ip",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{json.ssip}}}",
          "if": "ctx?.json?.ssip != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.ssip",
          "target_field": "zscaler_zia.firewall.server.source.ip",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{json.sdip}}}",
          "if": "ctx?.json?.sdip != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.sdip",
          "target_field": "destination.ip",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{json.tsip}}}",
          "if": "ctx?.json?.tsip != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.tsip",
          "target_field": "zscaler_zia.firewall.tunnel.ip",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.tunsport",
          "target_field": "zscaler_zia.firewall.tunnel.port",
          "type": "long",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": "json.tunsport",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.tuntype",
          "target_field": "zscaler_zia.firewall.tunnel.type",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.action",
          "target_field": "event.action",
          "ignore_missing": true
        }
      },
      {
        "lowercase": {
          "field": "event.action",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.dnat",
          "target_field": "zscaler_zia.firewall.nat",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.stateful",
          "target_field": "zscaler_zia.firewall.stateful",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.aggregate",
          "target_field": "zscaler_zia.firewall.aggregate",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.ipcat",
          "target_field": "zscaler_zia.firewall.ip_category",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.avgduration",
          "type": "long",
          "target_field": "zscaler_zia.firewall.duration.avg",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": [
            "json.avgduration",
            "json.duration"
          ],
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.durationms",
          "target_field": "zscaler_zia.firewall.duration.milliseconds",
          "type": "long",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": "json.durationms",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.numsessions",
          "target_field": "zscaler_zia.firewall.session.count",
          "type": "double",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": "json.numsessions",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.threatcat",
          "target_field": "zscaler_zia.firewall.threat.category",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.threatname",
          "target_field": "zscaler_zia.firewall.threat.name",
          "ignore_missing": true
        }
      },
      {
        "community_id": {
          "source_ip": "source.ip",
          "source_port": "source.port",
          "destination_ip": "destination.ip",
          "destination_port": "destination.port",
          "transport": "network.transport",
          "target_field": "network.community_id",
          "ignore_failure": true
        }
      },
      {
        "script": {
          "description": "Drops null/empty values recursively",
          "lang": "painless",
          "source": "boolean dropEmptyFields(Object object) {\n  if (object == null || object == \"\") {\n    return true;\n  } else if (object instanceof Map) {\n    ((Map) object).values().removeIf(value -> dropEmptyFields(value));\n    return (((Map) object).size() == 0);\n  } else if (object instanceof List) {\n    ((List) object).removeIf(value -> dropEmptyFields(value));\n    return (((List) object).length == 0);\n  }\n  return false;\n}\ndropEmptyFields(ctx);\n"
        }
      },
      {
        "script": {
          "description": "Adds all the remaining fields in fields under zscaler_zia.firewall",
          "lang": "painless",
          "if": "ctx?.json != null",
          "source": "for (Map.Entry m : ctx.json.entrySet()) {\n  ctx.zscaler_zia.firewall[m.getKey()] = m.getValue();\n}\n"
        }
      },
      {
        "script": {
          "lang": "painless",
          "if": "ctx?.zscaler_zia?.firewall?.duration?.milliseconds != null",
          "source": "ctx.event.duration = ctx?.zscaler_zia?.firewall?.duration?.milliseconds * 1000000;\n"
        }
      },
      {
        "remove": {
          "field": "json",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-zscaler_zia.firewall@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{{_ingest.on_failure_message}}}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "zscaler_zia"
      }
    }
  },
  "logs-endpoint.alerts-8.4.1": {
    "description": "Pipeline for setting event.ingested",
    "processors": [
      {
        "set": {
          "field": "event.ingested",
          "value": "{{ _ingest.timestamp }}",
          "ignore_failure": true
        }
      },
      {
        "pipeline": {
          "name": "logs-endpoint.alerts@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "endpoint"
      }
    }
  },
  "logs-endpoint.events.security-8.4.1": {
    "description": "Pipeline for setting event.ingested",
    "processors": [
      {
        "set": {
          "field": "event.ingested",
          "value": "{{ _ingest.timestamp }}",
          "ignore_failure": true
        }
      },
      {
        "pipeline": {
          "name": "logs-endpoint.events.security@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "endpoint"
      }
    }
  },
  "logs-aws.route53_public_logs-1.25.2": {
    "description": "Pipeline for AWS Route53 Logs",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.0.0"
        }
      },
      {
        "set": {
          "field": "cloud.provider",
          "value": "aws"
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "network"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "protocol"
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true,
          "if": "ctx.event?.original == null",
          "description": "Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document."
        }
      },
      {
        "remove": {
          "field": "message",
          "ignore_missing": true,
          "if": "ctx.event?.original != null",
          "description": "The `message` field is no longer required if the document has an `event.original` field."
        }
      },
      {
        "grok": {
          "field": "event.original",
          "patterns": [
            "%{BASE10NUM} %{TIMESTAMP_ISO8601:_tmp.timestamp} %{DATA:aws.route53.hosted_zone_id} %{HOSTNAME:_tmp.question} %{WORD:dns.question.type} %{WORD:dns.response_code} %{WORD:network.transport} %{EDGE_LOCATION:aws.route53.edge_location} %{IP:source.address} (%{SUBNET:aws.route53.edns_client_subnet}|-)"
          ],
          "pattern_definitions": {
            "EDGE_LOCATION": "[A-Z]{3}\\d+(-[A-Z]+\\d+)?",
            "SUBNET": "%{IP}/[0-9]+"
          }
        }
      },
      {
        "date": {
          "field": "_tmp.timestamp",
          "target_field": "@timestamp",
          "ignore_failure": true,
          "formats": [
            "ISO8601"
          ]
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "success",
          "if": "ctx.dns?.response_code == \"NOERROR\""
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "failure",
          "if": "ctx.dns?.response_code != \"NOERROR\""
        }
      },
      {
        "registered_domain": {
          "field": "_tmp.question",
          "target_field": "dns.question",
          "ignore_missing": true,
          "if": "!ctx._tmp?.question.endsWith(\"in-addr.arpa\")"
        }
      },
      {
        "rename": {
          "field": "dns.question.domain",
          "target_field": "dns.question.name",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "source.address",
          "target_field": "source.ip",
          "type": "ip",
          "ignore_missing": true
        }
      },
      {
        "lowercase": {
          "field": "network.transport",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "network.protocol",
          "value": "dns"
        }
      },
      {
        "set": {
          "field": "network.type",
          "value": "ipv4",
          "if": "ctx.source?.ip != null && ctx.source?.ip.contains(\".\")"
        }
      },
      {
        "set": {
          "field": "network.type",
          "value": "ipv6",
          "if": "ctx.source?.ip != null && ctx.source?.ip.contains(\":\")"
        }
      },
      {
        "set": {
          "field": "network.iana_number",
          "value": "6",
          "if": "ctx.network?.transport == \"tcp\""
        }
      },
      {
        "set": {
          "field": "network.iana_number",
          "value": "17",
          "if": "ctx.network?.transport == \"udp\""
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "source.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.asn",
          "target_field": "source.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.organization_name",
          "target_field": "source.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{source.ip}}",
          "if": "ctx.source?.ip != null"
        }
      },
      {
        "append": {
          "field": "related.hosts",
          "value": "{{dns.question.name}}",
          "if": "ctx.dns?.question?.name != null"
        }
      },
      {
        "remove": {
          "field": [
            "_tmp"
          ],
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-aws.route53_public_logs@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "logs-azure.springcloudlogs-1.5.4-azure-shared-pipeline": {
    "description": "Pipeline for parsing Azure shared log fields.",
    "processors": [
      {
        "set": {
          "field": "cloud.provider",
          "value": "azure"
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}/RESOURCEGROUPS/%{GROUPID:azure.resource.group}/PROVIDERS/%{PROVIDERNAME:azure.resource.provider}/NAMESPACES/%{NAMESPACE:azure.resource.namespace}/AUTHORIZATIONRULES/%{RULE:azure.resource.authorization_rule}",
            "/subscriptions/%{SUBID:azure.subscription_id}/resourceGroups/%{GROUPID:azure.resource.group}/providers/%{PROVIDERNAME:azure.resource.provider}/namespaces/%{NAMESPACE:azure.resource.namespace}/authorizationRules/%{RULE:azure.resource.authorization_rule}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "GROUPID": ".+",
            "PROVIDERNAME": ".+",
            "NAMESPACE": ".+",
            "RULE": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}/RESOURCEGROUPS/%{GROUPID:azure.resource.group}/PROVIDERS/%{PROVIDERNAME:azure.resource.provider}/%{NAME:azure.resource.name}",
            "/subscriptions/%{SUBID:azure.subscription_id}/resourceGroups/%{GROUPID:azure.resource.group}/providers/%{PROVIDERNAME:azure.resource.provider}/%{NAME:azure.resource.name}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "GROUPID": ".+",
            "PROVIDERNAME": "([A-Za-z])\\w+.([A-Za-z])\\w+/([A-Za-z])\\w+.",
            "NAME": "((?!AUTHORIZATIONRULES).)*$"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}/RESOURCEGROUPS/%{GROUPID:azure.resource.group}/PROVIDERS/%{PROVIDERNAME:azure.resource.provider}/%{NAME:azure.resource.name}",
            "/subscriptions/%{SUBID:azure.subscription_id}/resourceGroups/%{GROUPID:azure.resource.group}/providers/%{PROVIDERNAME:azure.resource.provider}/%{NAME:azure.resource.name}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "GROUPID": ".+",
            "PROVIDERNAME": "([A-Za-z])\\w+.([A-Za-z])\\w+\\/([A-Za-z][^\\/])\\w+",
            "NAME": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/providers/%{PROVIDER:azure.resource.provider}",
            "/PROVIDERS/%{PROVIDER:azure.resource.provider}"
          ],
          "pattern_definitions": {
            "PROVIDER": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}/PROVIDERS/%{PROVIDERNAME:azure.resource.provider}",
            "/subscriptions/%{SUBID:azure.subscription_id}/providers/%{PROVIDERNAME:azure.resource.provider}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "PROVIDERNAME": "([A-Za-z])\\w+.([A-Za-z])\\w+\\/([A-Za-z][^\\/])\\w+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}/RESOURCEGROUPS/%{GROUPID:azure.resource.group}",
            "/subscriptions/%{SUBID:azure.subscription_id}/resourceGroups/%{GROUPID:azure.resource.group}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "GROUPID": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}",
            "/subscriptions/%{SUBID:azure.subscription_id}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}"
          },
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "azure.resource_id",
          "target_field": "azure.resource.id",
          "ignore_missing": true
        }
      },
      {
        "lowercase": {
          "field": "event.outcome",
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-azure.springcloudlogs@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "azure"
      }
    }
  },
  "logs-crowdstrike.falcon-1.7.0-user_activity_audit": {
    "processors": [
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": [
            "iam"
          ]
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": [
            "change"
          ]
        }
      },
      {
        "set": {
          "field": "event.action",
          "value": "user_activity_audit_event"
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.OperationName",
          "target_field": "message",
          "type": "string",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.UserIp",
          "target_field": "source.ip",
          "type": "string",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.crowdstrike?.event?.UserIp != null && ctx?.crowdstrike?.event?.UserIp != \"\""
        }
      },
      {
        "pipeline": {
          "name": "logs-crowdstrike.falcon@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "crowdstrike"
      }
    }
  },
  "traces-apm-8.4.2-apm_data_stream_migration": {
    "description": "Pipeline for migrating APM events from indices to data streams.\nThis pipeline is not used directly by apmserver; it is installed\nfor manually migrating legacy indices to data streams.\n",
    "processors": [
      {
        "grok": {
          "field": "observer.version",
          "pattern_definitions": {
            "DIGITS": "(?:[0-9]+)"
          },
          "patterns": [
            "%{DIGITS:observer.version_major:int}.%{DIGITS:observer.version_minor:int}.%{DIGITS:observer.version_patch:int}(?:[-+].*)?"
          ]
        }
      },
      {
        "fail": {
          "if": "ctx.observer.version_major > 8 || (ctx.observer.version_major == 8 && ctx.observer.version_minor > 4)",
          "message": "Document produced by APM Server v{{{observer.version}}}, which is newer than the installed APM integration (v8.4.2). The APM integration must be upgraded."
        }
      },
      {
        "remove": {
          "field": [
            "observer.version_major",
            "observer.version_minor",
            "observer.version_patch"
          ],
          "ignore_missing": true
        }
      },
      {
        "script": {
          "if": "ctx.processor?.event == 'span' || ctx.processor?.event == 'transaction'",
          "source": "ctx.data_stream = [\"type\": \"traces\", \"dataset\": \"apm\", \"namespace\": \"migrated\"]\n"
        }
      },
      {
        "script": {
          "if": "ctx.processor?.event == 'error'",
          "source": "ctx.data_stream = [\"type\": \"logs\", \"dataset\": \"apm.error\", \"namespace\": \"migrated\"]\n"
        }
      },
      {
        "script": {
          "if": "ctx.processor?.event == 'metric'",
          "source": "String dataset;\nif (ctx[\"metricset.name\"] != \"app\") {\n  dataset = \"apm.internal\";\n} else {\n  String serviceName = ctx.service.name;\n  serviceName = serviceName.toLowerCase();\n  serviceName = /[\\\\\\/*?\"<>| ,#:-]/.matcher(serviceName).replaceAll('_');\n  dataset = \"apm.app.\" + serviceName;\n}\nctx.data_stream = [\"type\": \"metrics\", \"dataset\": dataset, \"namespace\": \"migrated\"];\n"
        }
      },
      {
        "set": {
          "if": "ctx.data_stream != null",
          "field": "_index",
          "value": "{{data_stream.type}}-{{data_stream.dataset}}-{{data_stream.namespace}}"
        }
      },
      {
        "pipeline": {
          "name": "traces-apm@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "apm"
      }
    }
  },
  "logs-azure.signinlogs-1.5.4": {
    "description": "Pipeline for parsing Azure sign-in logs.",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.0.0"
        }
      },
      {
        "rename": {
          "field": "azure",
          "target_field": "azure-eventhub",
          "ignore_missing": true
        }
      },
      {
        "json": {
          "field": "message",
          "target_field": "azure.signinlogs"
        }
      },
      {
        "script": {
          "description": "Convert Azure JSON keys to snake case.",
          "tag": "azure-json-keys-to-snake-case",
          "lang": "painless",
          "source": "Map keysToSnakeCase(Map m) {\n  def regex = /([a-z])([A-Z]+)/;\n  def out = [:];\n\n  for (entry in m.entrySet()) {\n    def k = entry.getKey();\n    def v = entry.getValue();\n\n    if (v instanceof Map) {\n      v = keysToSnakeCase(v);\n    } else if (v instanceof List) {\n      for (int i = 0; i < v.size(); i++) {\n        def item = v.get(i);\n        if (item instanceof Map) {\n          v.set(i, keysToSnakeCase(item));\n        }\n      }\n    }\n\n    k = regex.matcher(k).replaceAll('$1_$2').toLowerCase();\n    out.put(k, v);\n  }\n\n  return out;\n}\n\nctx.azure['signinlogs'] = keysToSnakeCase(ctx.azure.signinlogs);\n"
        }
      },
      {
        "drop": {
          "description": "Drop non-SignInLogs.",
          "if": "ctx?.azure?.signinlogs?.category == null || !ctx.azure.signinlogs.category.endsWith('SignInLogs')"
        }
      },
      {
        "date": {
          "field": "azure.signinlogs.time",
          "formats": [
            "ISO8601"
          ]
        }
      },
      {
        "remove": {
          "field": "azure.signinlogs.time"
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true,
          "if": "ctx.event?.original == null",
          "description": "Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document."
        }
      },
      {
        "remove": {
          "field": "message",
          "ignore_missing": true,
          "if": "ctx.event?.original != null",
          "description": "The `message` field is no longer required if the document has an `event.original` field."
        }
      },
      {
        "rename": {
          "field": "azure.signinlogs.resource_id",
          "target_field": "azure.resource_id",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "if": "ctx?.source?.address == null",
          "field": "source.address",
          "value": "{{{azure.signinlogs.properties.ipaddress}}}",
          "ignore_empty_value": true
        }
      },
      {
        "set": {
          "if": "ctx?.source?.address == null",
          "field": "source.address",
          "value": "{{{azure.signinlogs.properties.ip_address}}}",
          "ignore_empty_value": true
        }
      },
      {
        "set": {
          "if": "ctx?.source?.address == null",
          "field": "source.address",
          "value": "{{{azure.signinlogs.caller_ip_address}}}",
          "ignore_empty_value": true
        }
      },
      {
        "convert": {
          "field": "source.address",
          "target_field": "source.ip",
          "type": "ip",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": [
            "azure.signinlogs.properties.ipaddress",
            "azure.signinlogs.properties.ip_address",
            "azure.signinlogs.caller_ip_address"
          ],
          "ignore_missing": true
        }
      },
      {
        "append": {
          "if": "ctx?.source?.ip != null",
          "field": "related.ip",
          "value": "{{{source.ip}}}",
          "allow_duplicates": false
        }
      },
      {
        "set": {
          "field": "client.ip",
          "value": "{{{source.ip}}}",
          "ignore_empty_value": true
        }
      },
      {
        "convert": {
          "field": "azure.signinlogs.level",
          "target_field": "log.level",
          "type": "string",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "azure.signinlogs.level",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.signinlogs.duration_ms",
          "target_field": "event.duration",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "if": "ctx?.event?.duration != null",
          "lang": "painless",
          "source": "ctx.event.duration = ctx.event.duration * 1000000"
        }
      },
      {
        "rename": {
          "field": "azure.signinlogs.location",
          "target_field": "geo.country_iso_code",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "azure.signinlogs.operation_name",
          "target_field": "event.action",
          "type": "string",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.signinlogs.tenant_id",
          "target_field": "azure.tenant_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.signinlogs.correlation_id",
          "target_field": "azure.correlation_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.signinlogs.properties.created_date_time",
          "target_field": "azure.signinlogs.properties.created_at",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.signinlogs.properties.processing_time_in_milliseconds",
          "target_field": "azure.signinlogs.properties.processing_time_ms",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.signinlogs.properties.risk_level_during_sign_in",
          "target_field": "azure.signinlogs.properties.risk_level_during_signin",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "description": "Build message field using a combination of failure reason and additional details",
          "source": "String reason = ctx?.azure?.signinlogs?.properties?.status?.failure_reason; String details = ctx?.azure?.signinlogs?.properties?.status?.additional_details; if (reason != null && details != null) { ctx['message'] = reason + ' (' + details + ')'; } else if (reason != null) { ctx['message'] = reason; } else if (details != null) { ctx['message'] = details; }"
        }
      },
      {
        "remove": {
          "field": "azure.signinlogs.properties.status.failure_reason",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "azure.signinlogs.properties.status.additional_details",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.signinlogs.properties.location.city",
          "target_field": "geo.city_name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.signinlogs.properties.location.state",
          "target_field": "geo.country_name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.signinlogs.properties.location.geo_coordinates.latitude",
          "target_field": "geo.location.lat",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.signinlogs.properties.location.geo_coordinates.longitude",
          "target_field": "geo.location.lon",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": [
            "azure.signinlogs.properties.location"
          ],
          "ignore_missing": true
        }
      },
      {
        "foreach": {
          "field": "azure.signinlogs.properties.authentication_processing_details",
          "ignore_missing": true,
          "processor": {
            "set": {
              "field": "_tmp.{{{_ingest._value.key}}}",
              "copy_from": "_ingest._value.value"
            }
          }
        }
      },
      {
        "set": {
          "if": "ctx?._tmp != null",
          "field": "azure.signinlogs.properties.authentication_processing_details",
          "copy_from": "_tmp"
        }
      },
      {
        "remove": {
          "field": "_tmp",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "set": {
          "field": "event.category",
          "value": [
            "authentication"
          ]
        }
      },
      {
        "set": {
          "field": "event.type",
          "value": [
            "info"
          ]
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "success",
          "if": "ctx?.azure?.signinlogs?.properties?.status?.error_code == null || ctx.azure.signinlogs.properties.status.error_code == 0"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "failure",
          "if": "ctx?.azure?.signinlogs?.properties?.status?.error_code != null && ctx.azure.signinlogs.properties.status.error_code > 0"
        }
      },
      {
        "set": {
          "field": "event.id",
          "value": "{{{azure.signinlogs.properties.id}}}",
          "ignore_empty_value": true
        }
      },
      {
        "grok": {
          "field": "azure.signinlogs.properties.user_principal_name",
          "patterns": [
            "%{USERNAME:user.name}@%{HOSTNAME:user.domain}",
            "%{GREEDYDATA:user.name}"
          ],
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "azure.signinlogs.properties.user_display_name",
          "target_field": "user.full_name",
          "ignore_missing": true,
          "type": "string"
        }
      },
      {
        "remove": {
          "description": "Drop user_id field if value is null.",
          "if": "ctx?.azure?.signinlogs?.properties?.user_id == null",
          "field": "azure.signinlogs.properties.user_id",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "azure.signinlogs.properties.user_id",
          "target_field": "user.id",
          "ignore_missing": true,
          "type": "string"
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "source.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.asn",
          "target_field": "source.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.organization_name",
          "target_field": "source.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.signinlogs.properties.user_agent",
          "target_field": "user_agent.original",
          "ignore_missing": true
        }
      },
      {
        "user_agent": {
          "field": "user_agent.original",
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-azure.signinlogs-1.5.4-azure-shared-pipeline"
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-azure.signinlogs@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "azure"
      }
    }
  },
  "logs-panw.panos-3.1.1-threat": {
    "description": "Pipeline for PanOS Threat Logs.",
    "processors": [
      {
        "csv": {
          "field": "message",
          "target_fields": [
            "panw.panos.source.ip",
            "panw.panos.destination.ip",
            "panw.panos.source.nat.ip",
            "panw.panos.destination.nat.ip",
            "panw.panos.ruleset",
            "panw.panos.source.user",
            "panw.panos.destination.user",
            "panw.panos.network.application",
            "panw.panos.virtual_sys",
            "panw.panos.source.zone",
            "panw.panos.destination.zone",
            "panw.panos.inbound_interface",
            "panw.panos.outbound_interface",
            "panw.panos.log_profile",
            "_temp_.logged_time",
            "panw.panos.flow_id",
            "panw.panos.repeat_count",
            "panw.panos.source.port",
            "panw.panos.destination.port",
            "panw.panos.source.nat.port",
            "panw.panos.destination.nat.port",
            "_temp_.labels",
            "panw.panos.protocol",
            "panw.panos.action",
            "panw.panos.misc",
            "panw.panos.threat.name",
            "panw.panos.url.category",
            "panw.panos.severity",
            "_temp_.direction",
            "panw.panos.sequence_number",
            "panw.panos.action_flags",
            "_temp_.srcloc",
            "_temp_.dstloc",
            "_temp_.future_use2",
            "panw.panos.http_content_type",
            "panw.panos.network.pcap_id",
            "panw.panos.file.hash",
            "panw.panos.wildfire.name",
            "panw.panos.url_idx",
            "_temp_.user_agent",
            "panw.panos.file.type",
            "_temp_.forwarded_ip",
            "panw.panos.referrer",
            "panw.panos.sender",
            "panw.panos.subject",
            "panw.panos.recipient",
            "panw.panos.wildfire.report_id",
            "panw.panos.device_group_hierarchy1",
            "panw.panos.device_group_hierarchy2",
            "panw.panos.device_group_hierarchy3",
            "panw.panos.device_group_hierarchy4",
            "panw.panos.vsys_name",
            "panw.panos.device_name",
            "_temp_.future_use3",
            "panw.panos.source_vm_uuid",
            "panw.panos.destination_vm_uuid",
            "panw.panos.http_method",
            "panw.panos.imsi",
            "panw.panos.imei",
            "panw.panos.parent_session.id",
            "panw.panos.parent_session.start_time",
            "panw.panos.tunnel_type",
            "panw.panos.threat_category",
            "panw.panos.content_version",
            "_temp_.future_use4",
            "panw.panos.sctp.assoc_id",
            "panw.panos.payload_protocol_id",
            "panw.panos.http_headers",
            "panw.panos.url_category_list",
            "panw.panos.rule_uuid",
            "panw.panos.http2_connection",
            "panw.panos.dynamic_user.group.name",
            "panw.panos.xff.ip",
            "panw.panos.src.category",
            "panw.panos.src.profile",
            "panw.panos.src.model",
            "panw.panos.src.vendor",
            "panw.panos.src.os.family",
            "panw.panos.src.os.version",
            "panw.panos.src.host",
            "panw.panos.src.mac",
            "panw.panos.dst.category",
            "panw.panos.dst.profile",
            "panw.panos.dst.model",
            "panw.panos.dst.vendor",
            "panw.panos.dst.os.family",
            "panw.panos.dst.os.version",
            "panw.panos.dst.host",
            "panw.panos.dst.mac",
            "panw.panos.container.id",
            "panw.panos.pod.namespace",
            "panw.panos.pod.name",
            "panw.panos.src.external_dynamic_list",
            "panw.panos.dst.external_dynamic_list",
            "panw.panos.host.id",
            "panw.panos.serial_number",
            "panw.panos.domain_edl",
            "panw.panos.src.dynamic_address_group",
            "panw.panos.dst.dynamic_address_group",
            "panw.panos.partial_hash",
            "_temp_.high_res_timestamp",
            "panw.panos.reason",
            "panw.panos.justification",
            "panw.panos.nssai_sst",
            "panw.panos.application.sub_category",
            "panw.panos.application.category",
            "panw.panos.application.technology",
            "panw.panos.application.risk_level",
            "panw.panos.application.characteristics",
            "panw.panos.application.container",
            "panw.panos.application.tunneled",
            "panw.panos.application.is_saas",
            "panw.panos.application.is_sanctioned",
            "panw.panos.cloud_report.id"
          ]
        }
      },
      {
        "set": {
          "field": "http.version",
          "value": "2",
          "if": "ctx.panw?.panos?.http2_connection != null && ctx.panw?.panos?.http2_connection != 0 && ctx.panw?.panos?.http2_connection != \"0\""
        }
      },
      {
        "set": {
          "field": "network.direction",
          "value": "inbound",
          "if": "ctx._temp_?.direction == \"0\" || ctx._temp_?.direction == \"client-to-server\""
        }
      },
      {
        "set": {
          "field": "network.direction",
          "value": "outbound",
          "if": "ctx._temp_?.direction == \"1\" || ctx._temp_?.direction == \"server-to-client\""
        }
      },
      {
        "set": {
          "field": "network.direction",
          "value": "unknown",
          "if": "ctx.network?.direction == null"
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "alert"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": [
            "intrusion_detection",
            "threat",
            "network"
          ]
        }
      },
      {
        "convert": {
          "field": "_temp_.forwarded_ip",
          "target_field": "network.forwarded_ip",
          "type": "ip",
          "on_failure": [
            {
              "rename": {
                "field": "_temp_.forwarded_ip",
                "target_field": "panw.panos.x_forwarded_for",
                "ignore_missing": true
              }
            }
          ]
        }
      },
      {
        "set": {
          "field": "panw.panos.destination.location",
          "copy_from": "_temp_.dstloc",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "destination.ip",
          "copy_from": "panw.panos.destination.ip",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "destination.nat.ip",
          "copy_from": "panw.panos.destination.nat.ip",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "destination.nat.port",
          "copy_from": "panw.panos.destination.nat.port",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "destination.port",
          "copy_from": "panw.panos.destination.port",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "destination.user.email",
          "copy_from": "panw.panos.recipient",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "destination.user.name",
          "copy_from": "panw.panos.destination.user",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "file.type",
          "copy_from": "panw.panos.file.type",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "http.request.method",
          "copy_from": "panw.panos.http_method",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "http.request.referrer",
          "copy_from": "panw.panos.referrer",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "log.level",
          "copy_from": "panw.panos.severity",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "network.application",
          "copy_from": "panw.panos.network.application",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "panw.panos.network.direction",
          "copy_from": "_temp_.direction",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "panw.panos.forwarded_ip",
          "copy_from": "network.forwarded_ip",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "network.transport",
          "copy_from": "panw.panos.protocol",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.egress.interface.name",
          "copy_from": "panw.panos.outbound_interface",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.egress.zone",
          "copy_from": "panw.panos.destination.zone",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.hostname",
          "copy_from": "panw.panos.device_name",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.ingress.interface.name",
          "copy_from": "panw.panos.inbound_interface",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.ingress.zone",
          "copy_from": "panw.panos.source.zone",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "rule.uuid",
          "copy_from": "panw.panos.rule_uuid",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "panw.panos.source.location",
          "copy_from": "_temp_.srcloc",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.ip",
          "copy_from": "panw.panos.source.ip",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.nat.ip",
          "copy_from": "panw.panos.source.nat.ip",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.port",
          "copy_from": "panw.panos.source.port",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.nat.port",
          "copy_from": "panw.panos.source.nat.port",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.user.email",
          "copy_from": "panw.panos.sender",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.user.name",
          "copy_from": "panw.panos.source.user",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "url.original",
          "copy_from": "panw.panos.misc",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "panw.panos.user_agent",
          "copy_from": "_temp_.user_agent",
          "ignore_failure": true
        }
      },
      {
        "pipeline": {
          "name": "logs-panw.panos@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "append": {
          "field": "error.message",
          "value": "error in Threat pipeline: error in [{{_ingest.on_failure_processor_type}}] processor{{#_ingest.on_failure_processor_tag}} with tag [{{_ingest.on_failure_processor_tag }}]{{/_ingest.on_failure_processor_tag}} {{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "panw"
      }
    }
  },
  "logs-azure.identity_protection-1.5.4-azure-shared-pipeline": {
    "description": "Pipeline for parsing Azure shared log fields.",
    "processors": [
      {
        "set": {
          "field": "cloud.provider",
          "value": "azure"
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "patterns": [
            "/TENANTS/%{TENANTID:azure.tenant_id}/PROVIDERS/%{PROVIDERNAME:azure.resource.provider}",
            "/tenants/%{TENANTID:azure.tenant_id}/providers/%{PROVIDERNAME:azure.resource.provider}"
          ],
          "pattern_definitions": {
            "TENANTID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "PROVIDERNAME": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "azure.resource_id",
          "target_field": "azure.resource.id",
          "ignore_missing": true
        }
      },
      {
        "lowercase": {
          "field": "event.outcome",
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-azure.identity_protection@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "azure"
      }
    }
  },
  "logs-apm.error-8.4.2": {
    "description": "Pipeline for ingesting APM error events.",
    "processors": [
      {
        "grok": {
          "field": "observer.version",
          "pattern_definitions": {
            "DIGITS": "(?:[0-9]+)"
          },
          "patterns": [
            "%{DIGITS:observer.version_major:int}.%{DIGITS:observer.version_minor:int}.%{DIGITS:observer.version_patch:int}(?:[-+].*)?"
          ]
        }
      },
      {
        "fail": {
          "if": "ctx.observer.version_major > 8 || (ctx.observer.version_major == 8 && ctx.observer.version_minor > 4)",
          "message": "Document produced by APM Server v{{{observer.version}}}, which is newer than the installed APM integration (v8.4.2). The APM integration must be upgraded."
        }
      },
      {
        "remove": {
          "field": [
            "observer.version_major",
            "observer.version_minor",
            "observer.version_patch"
          ],
          "ignore_missing": true
        }
      },
      {
        "user_agent": {
          "field": "user_agent.original",
          "ignore_failure": true,
          "ignore_missing": true,
          "target_field": "user_agent"
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-City.mmdb",
          "field": "client.ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "client.ip",
                "ignore_failure": true,
                "ignore_missing": true
              }
            }
          ],
          "target_field": "client.geo"
        }
      },
      {
        "script": {
          "if": "ctx.error?.exception?.length != null && ctx.error?.exception?.length > 0",
          "source": "ctx.error.grouping_name = ctx.error.exception[0].message"
        }
      },
      {
        "set": {
          "if": "ctx.error?.log?.message != null",
          "field": "error.grouping_name",
          "copy_from": "error.log.message"
        }
      },
      {
        "pipeline": {
          "name": "logs-apm.error@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "apm"
      }
    }
  },
  "metrics-elastic_agent.filebeat-1.3.5": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-elastic_agent.filebeat@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "elastic_agent"
      }
    }
  },
  "metrics-aws.cloudwatch_metrics-1.25.2": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-aws.cloudwatch_metrics@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "synthetics-tcp-0.10.2": {
    "processors": [
      {
        "pipeline": {
          "name": "synthetics-tcp@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "synthetics"
      }
    }
  },
  "metrics-aws.redshift-1.25.2": {
    "description": "Ingest Pipeline for Amazon Redshift metrics",
    "processors": [
      {
        "rename": {
          "field": "aws.dimensions.service class",
          "target_field": "aws.dimensions.service_class",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": [
            "aws.dimensions.service class"
          ],
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "metrics-aws.redshift@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "logs-panw.panos-3.1.1-gtp": {
    "description": "Pipeline for PanOS GTP Logs.",
    "processors": [
      {
        "csv": {
          "field": "message",
          "ignore_failure": true,
          "target_fields": [
            "panw.panos.source.ip",
            "panw.panos.destination.ip",
            "_temp_.future_use1",
            "_temp_.future_use2",
            "panw.panos.ruleset",
            "_temp_.future_use3",
            "_temp_.future_use4",
            "panw.panos.network.application",
            "panw.panos.virtual_sys",
            "panw.panos.source.zone",
            "panw.panos.destination.zone",
            "panw.panos.inbound_interface",
            "panw.panos.outbound_interface",
            "panw.panos.log_profile",
            "_temp_.future_use5",
            "panw.panos.flow_id",
            "_temp_.future_use6",
            "panw.panos.source.port",
            "panw.panos.destination.port",
            "_temp_.future_use7",
            "_temp_.future_use8",
            "_temp_.future_use9",
            "panw.panos.protocol",
            "panw.panos.action",
            "panw.panos.event_type",
            "panw.panos.msisdn",
            "panw.panos.access_point.name",
            "panw.panos.radio_access_technology_type",
            "panw.panos.message_type",
            "panw.panos.end_ip_address",
            "panw.panos.tunnel_endpoint.identifier1",
            "panw.panos.tunnel_endpoint.identifier2",
            "panw.panos.interface",
            "panw.panos.cause_code",
            "panw.panos.severity",
            "panw.panos.mcc",
            "panw.panos.mnc",
            "panw.panos.area_code",
            "panw.panos.cell.id",
            "panw.panos.event_code",
            "_temp_.future_use10",
            "_temp_.future_use11",
            "_temp_.srcloc",
            "_temp_.dstloc",
            "_temp_.future_use12",
            "_temp_.future_use13",
            "_temp_.future_use14",
            "_temp_.future_use15",
            "_temp_.future_use16",
            "_temp_.future_use17",
            "_temp_.future_use18",
            "panw.panos.imsi",
            "panw.panos.imei",
            "_temp_.future_use19",
            "_temp_.future_use20",
            "_temp_.future_use21",
            "_temp_.future_use22",
            "_temp_.future_use23",
            "_temp_.future_use24",
            "_temp_.future_use25",
            "_temp_.future_use26",
            "_temp_.future_use27",
            "_temp_.future_use28",
            "_temp_.future_use29",
            "_temp_.future_use30",
            "_temp_.future_use31",
            "_temp_.future_use32",
            "_temp_.future_use33",
            "_temp_.future_use34",
            "panw.panos.start_time",
            "panw.panos.elapsed_time",
            "panw.panos.tunnel_inspection_rule",
            "panw.panos.remote_user.ip",
            "panw.panos.remote_user.id",
            "panw.panos.rule_uuid",
            "panw.panos.pcap_id",
            "_temp_.high_res_timestamp",
            "panw.panos.nsdsai_sst",
            "panw.panos.nsdsai_sd",
            "panw.panos.application.sub_category",
            "panw.panos.application.category",
            "panw.panos.application.technology",
            "panw.panos.application.risk_level",
            "panw.panos.application.characteristics",
            "panw.panos.application.container",
            "panw.panos.application.is_saas",
            "panw.panos.application.is_sanctioned"
          ]
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": [
            "network",
            "malware"
          ]
        }
      },
      {
        "set": {
          "field": "panw.panos.destination.location",
          "copy_from": "_temp_.dstloc",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "destination.ip",
          "copy_from": "panw.panos.destination.ip",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "destination.port",
          "copy_from": "panw.panos.destination.port",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "event.duration",
          "copy_from": "panw.panos.elapsed_time",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "event.start",
          "copy_from": "panw.panos.start_time",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "log.level",
          "copy_from": "panw.panos.severity",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "network.application",
          "copy_from": "panw.panos.network.application",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "network.transport",
          "copy_from": "panw.panos.protocol",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.egress.interface.name",
          "copy_from": "panw.panos.outbound_interface",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.egress.zone",
          "copy_from": "panw.panos.destination.zone",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.ingress.interface.name",
          "copy_from": "panw.panos.inbound_interface",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.ingress.zone",
          "copy_from": "panw.panos.source.zone",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "rule.name",
          "copy_from": "panw.panos.tunnel_inspection_rule",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "rule.uuid",
          "copy_from": "panw.panos.rule_uuid",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "panw.panos.source.location",
          "copy_from": "_temp_.srcloc",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.ip",
          "copy_from": "panw.panos.source.ip",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.port",
          "copy_from": "panw.panos.source.port",
          "ignore_failure": true
        }
      },
      {
        "pipeline": {
          "name": "logs-panw.panos@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "append": {
          "field": "error.message",
          "value": "error in GTP pipeline: error in [{{{_ingest.on_failure_processor_type}}}] processor{{{#_ingest.on_failure_processor_tag}}} with tag [{{{_ingest.on_failure_processor_tag}}}]{{{/_ingest.on_failure_processor_tag}}} {{{_ingest.on_failure_message}}}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "panw"
      }
    }
  },
  "metrics-aws.vpn-1.25.2": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-aws.vpn@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "metrics-elastic_agent.elastic_agent-1.3.5": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-elastic_agent.elastic_agent@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "elastic_agent"
      }
    }
  },
  "logs-endpoint.events.registry-8.4.1": {
    "description": "Pipeline for setting event.ingested",
    "processors": [
      {
        "set": {
          "field": "event.ingested",
          "value": "{{ _ingest.timestamp }}",
          "ignore_failure": true
        }
      },
      {
        "pipeline": {
          "name": "logs-endpoint.events.registry@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "endpoint"
      }
    }
  },
  "logs-panw.panos-3.1.1-sctp": {
    "description": "Pipeline for PanOS SCTP Logs.",
    "processors": [
      {
        "csv": {
          "field": "message",
          "ignore_failure": true,
          "target_fields": [
            "panw.panos.source.ip",
            "panw.panos.destination.ip",
            "_temp_.future_use1",
            "_temp_.future_use2",
            "panw.panos.ruleset",
            "_temp_.future_use3",
            "_temp_.future_use4",
            "_temp_.future_use5",
            "panw.panos.virtual_sys",
            "panw.panos.source.zone",
            "panw.panos.destination.zone",
            "panw.panos.inbound_interface",
            "panw.panos.outbound_interface",
            "panw.panos.log_profile",
            "_temp_.future_use6",
            "panw.panos.flow_id",
            "panw.panos.repeat_count",
            "panw.panos.source.port",
            "panw.panos.destination.port",
            "_temp_.future_use7",
            "_temp_.future_use8",
            "_temp_.future_use9",
            "_temp_.future_use10",
            "panw.panos.protocol",
            "panw.panos.action",
            "panw.panos.device_group_hierarchy1",
            "panw.panos.device_group_hierarchy2",
            "panw.panos.device_group_hierarchy3",
            "panw.panos.device_group_hierarchy4",
            "panw.panos.vsys_name",
            "panw.panos.device_name",
            "panw.panos.sequence_number",
            "_temp_.future_use11",
            "panw.panos.sctp.assoc_id",
            "panw.panos.payload_protocol_id",
            "panw.panos.severity",
            "panw.panos.sctp.chunk_type",
            "_temp_.future_use12",
            "panw.panos.sctp.verification.tag_1",
            "panw.panos.sctp.verification.tag_2",
            "panw.panos.sctp.cause_code",
            "panw.panos.diameter_app_id",
            "panw.panos.diameter_cmd_code",
            "panw.panos.diameter_avp_code",
            "panw.panos.sctp.stream_id",
            "panw.panos.sctp.assoc_end_reason",
            "panw.panos.op_code",
            "panw.panos.sccp.calling_ssn",
            "panw.panos.sccp.calling_gt",
            "panw.panos.sctp.filter",
            "panw.panos.sctp.chunks",
            "panw.panos.sctp.chunks_sent",
            "panw.panos.sctp.chunks_received",
            "panw.panos.network.packets",
            "panw.panos.packets_sent",
            "panw.panos.packets_received",
            "panw.panos.rule_uuid",
            "_temp_.high_res_timestamp"
          ]
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": [
            "network"
          ]
        }
      },
      {
        "set": {
          "field": "destination.ip",
          "copy_from": "panw.panos.destination.ip",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "destination.packets",
          "copy_from": "panw.panos.packets_received",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "destination.port",
          "copy_from": "panw.panos.destination.port",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "log.level",
          "copy_from": "panw.panos.severity",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "network.packets",
          "copy_from": "panw.panos.network.packets",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "network.transport",
          "copy_from": "panw.panos.protocol",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.egress.interface.name",
          "copy_from": "panw.panos.outbound_interface",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.egress.zone",
          "copy_from": "panw.panos.destination.zone",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.hostname",
          "copy_from": "panw.panos.device_name",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.ingress.interface.name",
          "copy_from": "panw.panos.inbound_interface",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.ingress.zone",
          "copy_from": "panw.panos.source.zone",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "panw.panos.serial_number",
          "copy_from": "observer.serial_number",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "rule.uuid",
          "copy_from": "panw.panos.rule_uuid",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.ip",
          "copy_from": "panw.panos.source.ip",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.packets",
          "copy_from": "panw.panos.packets_sent",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.port",
          "copy_from": "panw.panos.source.port",
          "ignore_failure": true
        }
      },
      {
        "pipeline": {
          "name": "logs-panw.panos@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "append": {
          "field": "error.message",
          "value": "error in SCTP pipeline: error in [{{{_ingest.on_failure_processor_type}}}] processor{{{#_ingest.on_failure_processor_tag}}} with tag [{{{_ingest.on_failure_processor_tag}}}]{{{/_ingest.on_failure_processor_tag}}} {{{_ingest.on_failure_message}}}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "panw"
      }
    }
  },
  "metrics-endpoint.metrics-8.4.1": {
    "description": "Pipeline for setting event.ingested",
    "processors": [
      {
        "set": {
          "field": "event.ingested",
          "value": "{{ _ingest.timestamp }}",
          "ignore_failure": true
        }
      },
      {
        "pipeline": {
          "name": "metrics-endpoint.metrics@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "endpoint"
      }
    }
  },
  "metrics-kubernetes.state_daemonset-1.26.0": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-kubernetes.state_daemonset@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "kubernetes"
      }
    }
  },
  "logs-azure.auditlogs-1.5.4-azure-shared-pipeline": {
    "description": "Pipeline for parsing Azure shared log fields.",
    "processors": [
      {
        "set": {
          "field": "cloud.provider",
          "value": "azure"
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}/RESOURCEGROUPS/%{GROUPID:azure.resource.group}/PROVIDERS/%{PROVIDERNAME:azure.resource.provider}/NAMESPACES/%{NAMESPACE:azure.resource.namespace}/AUTHORIZATIONRULES/%{RULE:azure.resource.authorization_rule}",
            "/subscriptions/%{SUBID:azure.subscription_id}/resourceGroups/%{GROUPID:azure.resource.group}/providers/%{PROVIDERNAME:azure.resource.provider}/namespaces/%{NAMESPACE:azure.resource.namespace}/authorizationRules/%{RULE:azure.resource.authorization_rule}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "GROUPID": ".+",
            "PROVIDERNAME": ".+",
            "NAMESPACE": ".+",
            "RULE": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}/RESOURCEGROUPS/%{GROUPID:azure.resource.group}/PROVIDERS/%{PROVIDERNAME:azure.resource.provider}/%{NAME:azure.resource.name}",
            "/subscriptions/%{SUBID:azure.subscription_id}/resourceGroups/%{GROUPID:azure.resource.group}/providers/%{PROVIDERNAME:azure.resource.provider}/%{NAME:azure.resource.name}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "GROUPID": ".+",
            "PROVIDERNAME": "([A-Za-z])\\w+.([A-Za-z])\\w+/([A-Za-z])\\w+.",
            "NAME": "((?!AUTHORIZATIONRULES).)*$"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}/RESOURCEGROUPS/%{GROUPID:azure.resource.group}/PROVIDERS/%{PROVIDERNAME:azure.resource.provider}/%{NAME:azure.resource.name}",
            "/subscriptions/%{SUBID:azure.subscription_id}/resourceGroups/%{GROUPID:azure.resource.group}/providers/%{PROVIDERNAME:azure.resource.provider}/%{NAME:azure.resource.name}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "GROUPID": ".+",
            "PROVIDERNAME": "([A-Za-z])\\w+.([A-Za-z])\\w+\\/([A-Za-z][^\\/])\\w+",
            "NAME": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/providers/%{PROVIDER:azure.resource.provider}",
            "/PROVIDERS/%{PROVIDER:azure.resource.provider}"
          ],
          "pattern_definitions": {
            "PROVIDER": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}/PROVIDERS/%{PROVIDERNAME:azure.resource.provider}",
            "/subscriptions/%{SUBID:azure.subscription_id}/providers/%{PROVIDERNAME:azure.resource.provider}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "PROVIDERNAME": "([A-Za-z])\\w+.([A-Za-z])\\w+\\/([A-Za-z][^\\/])\\w+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}/RESOURCEGROUPS/%{GROUPID:azure.resource.group}",
            "/subscriptions/%{SUBID:azure.subscription_id}/resourceGroups/%{GROUPID:azure.resource.group}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "GROUPID": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}",
            "/subscriptions/%{SUBID:azure.subscription_id}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}"
          },
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "azure.resource_id",
          "target_field": "azure.resource.id",
          "ignore_missing": true
        }
      },
      {
        "lowercase": {
          "field": "event.outcome",
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-azure.auditlogs@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "azure"
      }
    }
  },
  "logs-proofpoint_tap.message_delivered-1.1.1": {
    "description": "Pipeline for parsing Proofpoint TAP delivered message logs.",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.4.0"
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "json",
          "ignore_failure": true
        }
      },
      {
        "date": {
          "field": "json.messageTime",
          "formats": [
            "ISO8601"
          ],
          "ignore_failure": true
        }
      },
      {
        "fingerprint": {
          "fields": [
            "json.GUID",
            "json.messageTime"
          ],
          "target_field": "_id",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "email",
          "ignore_failure": true
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "info",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "convert": {
          "field": "json.senderIP",
          "target_field": "source.ip",
          "type": "ip",
          "ignore_failure": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{source.ip}}}",
          "if": "ctx.source?.ip != null && ctx.source?.ip != ''",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "source.geo",
          "ignore_missing": true,
          "if": "ctx.source?.ip != null && ctx.source?.ip != ''"
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true,
          "if": "ctx.source?.ip != null && ctx.source?.ip != ''"
        }
      },
      {
        "rename": {
          "field": "source.as.asn",
          "target_field": "source.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.organization_name",
          "target_field": "source.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "foreach": {
          "field": "json.messageParts",
          "processor": {
            "append": {
              "field": "related.hash",
              "value": "{{{_ingest._value.md5}}}",
              "allow_duplicates": false,
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.messageParts != null && ctx.json?.messageParts instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.messageParts",
          "processor": {
            "append": {
              "field": "related.hash",
              "value": "{{{_ingest._value.sha256}}}",
              "allow_duplicates": false,
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.messageParts != null && ctx.json?.messageParts instanceof List"
        }
      },
      {
        "rename": {
          "field": "json.ccAddresses",
          "target_field": "email.cc.address",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "email.delivery_timestamp",
          "copy_from": "@timestamp",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.fromAddress",
          "target_field": "email.from.address",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.messageID",
          "target_field": "email.message_id",
          "ignore_missing": true
        }
      },
      {
        "gsub": {
          "field": "email.message_id",
          "pattern": "<|>",
          "replacement": "",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.replyToAddress",
          "target_field": "email.reply_to.address",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.sender",
          "target_field": "email.sender.address",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.subject",
          "target_field": "email.subject",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "email.to.address",
          "copy_from": "json.toAddresses",
          "ignore_failure": true
        }
      },
      {
        "foreach": {
          "field": "json.recipient",
          "processor": {
            "append": {
              "field": "email.to.address",
              "value": "{{{_ingest._value}}}",
              "allow_duplicates": false,
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.recipient != null && ctx.json?.recipient instanceof List"
        }
      },
      {
        "rename": {
          "field": "json.xmailer",
          "target_field": "email.x_mailer",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.id",
          "target_field": "event.id",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "email.attachments",
          "copy_from": "json.messageParts",
          "ignore_failure": true
        }
      },
      {
        "foreach": {
          "field": "email.attachments",
          "processor": {
            "remove": {
              "field": [
                "_ingest._value.disposition",
                "_ingest._value.oContentType",
                "_ingest._value.sandboxStatus"
              ],
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.email?.attachments != null && ctx.email?.attachments instanceof List"
        }
      },
      {
        "foreach": {
          "field": "email.attachments",
          "processor": {
            "rename": {
              "field": "_ingest._value.contentType",
              "target_field": "_ingest._value.file.mime_type",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.email?.attachments != null && ctx.email?.attachments instanceof List"
        }
      },
      {
        "foreach": {
          "field": "email.attachments",
          "processor": {
            "rename": {
              "field": "_ingest._value.md5",
              "target_field": "_ingest._value.file.hash.md5",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.email?.attachments != null && ctx.email?.attachments instanceof List"
        }
      },
      {
        "foreach": {
          "field": "email.attachments",
          "processor": {
            "rename": {
              "field": "_ingest._value.sha256",
              "target_field": "_ingest._value.file.hash.sha256",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.email?.attachments != null && ctx.email?.attachments instanceof List"
        }
      },
      {
        "foreach": {
          "field": "email.attachments",
          "processor": {
            "rename": {
              "field": "_ingest._value.filename",
              "target_field": "_ingest._value.file.name",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.email?.attachments != null && ctx.email?.attachments instanceof List"
        }
      },
      {
        "script": {
          "description": "Adding hash in related.hash from artifact field.",
          "lang": "painless",
          "ignore_failure": true,
          "source": "if (ctx.json?.threatsInfoMap instanceof List) {\n    for (artifact in ctx.json?.threatsInfoMap) {\n        def flag = true;\n        def str = artifact.threat.toLowerCase();\n        if (str?.length() == 64) {\n            for (int i = 0; i < str.length(); i++) {\n                def ch = str.charAt(i);\n                if ((ch < (char)'0' || ch > (char)'9') && (ch < (char)'a' || ch > (char)'f')) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag && !ctx[\"related\"][\"hash\"].contains(str)) {\n                ctx[\"related\"][\"hash\"].add(str);\n            }\n        }\n    }\n}\n"
        }
      },
      {
        "rename": {
          "field": "json.toAddresses",
          "target_field": "proofpoint_tap.message_delivered.to_addresses",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.recipient",
          "target_field": "proofpoint_tap.message_delivered.recipient",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.cluster",
          "target_field": "proofpoint_tap.message_delivered.cluster",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.completelyRewritten",
          "target_field": "proofpoint_tap.message_delivered.completely_rewritten",
          "type": "string",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.GUID",
          "target_field": "proofpoint_tap.guid",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.headerFrom",
          "target_field": "proofpoint_tap.message_delivered.header.from",
          "ignore_missing": true
        }
      },
      {
        "gsub": {
          "field": "proofpoint_tap.message_delivered.header.from",
          "pattern": "<|>",
          "replacement": "",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.headerReplyTo",
          "target_field": "proofpoint_tap.message_delivered.header.replyto",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.impostorScore",
          "target_field": "proofpoint_tap.message_delivered.impostor_score",
          "type": "double",
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "json.malwareScore",
          "target_field": "proofpoint_tap.message_delivered.malware_score",
          "type": "long",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.messageParts",
          "target_field": "proofpoint_tap.message_delivered.message_parts",
          "ignore_missing": true
        }
      },
      {
        "foreach": {
          "field": "proofpoint_tap.message_delivered.message_parts",
          "processor": {
            "remove": {
              "field": [
                "_ingest._value.contentType",
                "_ingest._value.filename",
                "_ingest._value.md5",
                "_ingest._value.sha256"
              ],
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.proofpoint_tap?.message_delivered?.message_parts != null && ctx.proofpoint_tap?.message_delivered?.message_parts instanceof List"
        }
      },
      {
        "foreach": {
          "field": "proofpoint_tap.message_delivered.message_parts",
          "processor": {
            "rename": {
              "field": "_ingest._value.oContentType",
              "target_field": "_ingest._value.o_content_type",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.proofpoint_tap?.message_delivered?.message_parts != null && ctx.proofpoint_tap?.message_delivered?.message_parts instanceof List"
        }
      },
      {
        "foreach": {
          "field": "proofpoint_tap.message_delivered.message_parts",
          "processor": {
            "rename": {
              "field": "_ingest._value.sandboxStatus",
              "target_field": "_ingest._value.sandbox_status",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.proofpoint_tap?.message_delivered?.message_parts != null && ctx.proofpoint_tap?.message_delivered?.message_parts instanceof List"
        }
      },
      {
        "convert": {
          "field": "json.messageSize",
          "target_field": "proofpoint_tap.message_delivered.message_size",
          "type": "long",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.modulesRun",
          "target_field": "proofpoint_tap.message_delivered.modules_run",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.phishScore",
          "target_field": "proofpoint_tap.message_delivered.phish_score",
          "type": "long",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.policyRoutes",
          "target_field": "proofpoint_tap.message_delivered.policy_routes",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.QID",
          "target_field": "proofpoint_tap.message_delivered.qid",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.quarantineFolder",
          "target_field": "proofpoint_tap.message_delivered.quarantine.folder",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.quarantineRule",
          "target_field": "proofpoint_tap.message_delivered.quarantine.rule",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.spamScore",
          "target_field": "proofpoint_tap.message_delivered.spam_score",
          "type": "long",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.threatsInfoMap",
          "target_field": "proofpoint_tap.message_delivered.threat_info_map",
          "ignore_missing": true
        }
      },
      {
        "foreach": {
          "field": "proofpoint_tap.message_delivered.threat_info_map",
          "processor": {
            "rename": {
              "field": "_ingest._value.campaignId",
              "target_field": "_ingest._value.campaign_id",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.proofpoint_tap?.message_delivered?.threat_info_map != null && ctx.proofpoint_tap?.message_delivered?.threat_info_map instanceof List"
        }
      },
      {
        "foreach": {
          "field": "proofpoint_tap.message_delivered.threat_info_map",
          "processor": {
            "rename": {
              "field": "_ingest._value.threat",
              "target_field": "_ingest._value.threat.artifact",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.proofpoint_tap?.message_delivered?.threat_info_map != null && ctx.proofpoint_tap?.message_delivered?.threat_info_map instanceof List"
        }
      },
      {
        "foreach": {
          "field": "proofpoint_tap.message_delivered.threat_info_map",
          "processor": {
            "rename": {
              "field": "_ingest._value.threatID",
              "target_field": "_ingest._value.threat.id",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.proofpoint_tap?.message_delivered?.threat_info_map != null && ctx.proofpoint_tap?.message_delivered?.threat_info_map instanceof List"
        }
      },
      {
        "foreach": {
          "field": "proofpoint_tap.message_delivered.threat_info_map",
          "processor": {
            "rename": {
              "field": "_ingest._value.threatStatus",
              "target_field": "_ingest._value.threat.status",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.proofpoint_tap?.message_delivered?.threat_info_map != null && ctx.proofpoint_tap?.message_delivered?.threat_info_map instanceof List"
        }
      },
      {
        "foreach": {
          "field": "proofpoint_tap.message_delivered.threat_info_map",
          "processor": {
            "date": {
              "field": "_ingest._value.threatTime",
              "target_field": "_ingest._value.threat.time",
              "ignore_failure": true,
              "formats": [
                "ISO8601"
              ]
            }
          },
          "ignore_failure": true,
          "if": "ctx.proofpoint_tap?.message_delivered?.threat_info_map != null && ctx.proofpoint_tap?.message_delivered?.threat_info_map instanceof List"
        }
      },
      {
        "foreach": {
          "field": "proofpoint_tap.message_delivered.threat_info_map",
          "processor": {
            "remove": {
              "field": "_ingest._value.threatTime",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.proofpoint_tap?.message_delivered?.threat_info_map != null && ctx.proofpoint_tap?.message_delivered?.threat_info_map instanceof List"
        }
      },
      {
        "foreach": {
          "field": "proofpoint_tap.message_delivered.threat_info_map",
          "processor": {
            "rename": {
              "field": "_ingest._value.threatType",
              "target_field": "_ingest._value.threat.type",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.proofpoint_tap?.message_delivered?.threat_info_map != null && ctx.proofpoint_tap?.message_delivered?.threat_info_map instanceof List"
        }
      },
      {
        "foreach": {
          "field": "proofpoint_tap.message_delivered.threat_info_map",
          "processor": {
            "rename": {
              "field": "_ingest._value.threatUrl",
              "target_field": "_ingest._value.threat.url",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.proofpoint_tap?.message_delivered?.threat_info_map != null && ctx.proofpoint_tap?.message_delivered?.threat_info_map instanceof List"
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": [
            "json"
          ],
          "ignore_missing": true
        }
      },
      {
        "script": {
          "description": "Drops null/empty values recursively.",
          "lang": "painless",
          "source": "boolean dropEmptyFields(Object object) {\n  if (object == null || object == \"\") {\n    return true;\n  } else if (object instanceof Map) {\n    ((Map) object).values().removeIf(value -> dropEmptyFields(value));\n    return (((Map) object).size() == 0);\n  } else if (object instanceof List) {\n    ((List) object).removeIf(value -> dropEmptyFields(value));\n    return (((List) object).length == 0);\n  }\n  return false;\n}\ndropEmptyFields(ctx);\n"
        }
      },
      {
        "pipeline": {
          "name": "logs-proofpoint_tap.message_delivered@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{{_ingest.on_failure_message}}}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "proofpoint_tap"
      }
    }
  },
  "logs-crowdstrike.fdr@custom": {
    "processors": [
      {
        "append": {
          "field": "event.kind",
          "value": [
            "enrichment"
          ],
          "if": "ctx?.crowdstrike?.AgentLoadFlags != null && ctx?.event?.action == null",
          "tag": "append_event_kind"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": [
            "host"
          ],
          "if": "ctx?.crowdstrike?.AgentLoadFlags != null && ctx?.event?.action == null",
          "tag": "append_event_category"
        }
      },
      {
        "enrich": {
          "field": "observer.serial_number",
          "policy_name": "crowdstrike-policy-host-details",
          "target_field": "cs",
          "ignore_missing": true,
          "if": "ctx?.crowdstrike?.AgentLoadFlags == null && ctx?.event?.action != null",
          "tag": "enrich",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "cs.host.name",
          "target_field": "host.name",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "cs.observer.serial_number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "cs.crowdstrike.SensorGroupingTags",
          "target_field": "crowdstrike.SensorGroupingTags",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "cs.crowdstrike.FalconGroupingTags",
          "target_field": "crowdstrike.FalconGroupingTags",
          "ignore_missing": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "Processor {{ _ingest.on_failure_processor_type }} with tag {{ _ingest.on_failure_processor_tag }} in pipeline {{ _ingest.on_failure_pipeline }} failed with message {{ _ingest.on_failure_message }}"
        }
      }
    ]
  },
  "logs-kubernetes.container_logs-1.26.0": {
    "processors": [
      {
        "pipeline": {
          "name": "logs-kubernetes.container_logs@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "kubernetes"
      }
    }
  },
  "logs-azure.platformlogs-1.5.4": {
    "description": "Pipeline for parsing azure platform logs.",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.0.0"
        }
      },
      {
        "rename": {
          "field": "azure",
          "target_field": "azure-eventhub",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "source": "ctx.message = ctx.message.replace(params.empty_field_name, '')",
          "params": {
            "empty_field_name": "\"\":\"\","
          },
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true,
          "if": "ctx.event?.original == null",
          "description": "Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document."
        }
      },
      {
        "remove": {
          "field": "message",
          "ignore_missing": true,
          "if": "ctx.event?.original != null",
          "description": "The `message` field is no longer required if the document has an `event.original` field."
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "azure.platformlogs",
          "on_failure": [
            {
              "grok": {
                "field": "event.original",
                "patterns": [
                  "resourceId\": ?\"%{DATA:azure.platformlogs.resourceId}\""
                ],
                "ignore_failure": true,
                "ignore_missing": true
              }
            },
            {
              "grok": {
                "field": "event.original",
                "patterns": [
                  "category\": ?\"%{DATA:azure.platformlogs.category}\""
                ],
                "ignore_failure": true,
                "ignore_missing": true
              }
            },
            {
              "grok": {
                "field": "event.original",
                "patterns": [
                  "time\": ?\"%{DATA:azure.platformlogs.time}\""
                ],
                "ignore_failure": true,
                "ignore_missing": true
              }
            },
            {
              "set": {
                "field": "error.message",
                "value": "Received invalid json from the Azure Cloud platform. Unable to parse the source log message",
                "ignore_failure": true
              }
            },
            {
              "append": {
                "field": "tags",
                "value": [
                  "preserve_original_event"
                ],
                "ignore_failure": true
              }
            }
          ]
        }
      },
      {
        "date": {
          "field": "azure.platformlogs.time",
          "target_field": "@timestamp",
          "ignore_failure": true,
          "formats": [
            "ISO8601"
          ]
        }
      },
      {
        "date": {
          "field": "azure.platformlogs.EventTimeString",
          "target_field": "@timestamp",
          "ignore_failure": true,
          "formats": [
            "ISO8601",
            "M/d/yyyy h:mm:ss a XXX"
          ]
        }
      },
      {
        "remove": {
          "field": "azure.platformlogs.time",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.platformlogs.resourceId",
          "target_field": "azure.resource_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.platformlogs.Region",
          "target_field": "cloud.region",
          "ignore_missing": true
        }
      },
      {
        "json": {
          "field": "azure.platformlogs.EventProperties",
          "target_field": "azure.platformlogs.properties",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "if": "ctx.azure.platformlogs.properties != null",
          "field": [
            "azure.platformlogs.EventProperties"
          ],
          "ignore_missing": true
        }
      },
      {
        "json": {
          "field": "azure.platformlogs.properties.log",
          "target_field": "azure.platformlogs.properties.log",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "azure.platformlogs.properties.log",
          "target_field": "message",
          "ignore_missing": true,
          "if": "ctx.azure?.platformlogs?.properties?.log != null && ctx.azure?.platformlogs?.properties?.log instanceof String"
        }
      },
      {
        "rename": {
          "field": "azure.platformlogs.EventName",
          "target_field": "event.action",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "azure.platformlogs.callerIpAddress",
          "target_field": "source.ip",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "rename": {
                "field": "azure.platformlogs.callerIpAddress",
                "target_field": "source.address",
                "ignore_missing": true,
                "ignore_failure": true
              }
            }
          ]
        }
      },
      {
        "remove": {
          "field": "azure.platformlogs.callerIpAddress",
          "if": "ctx.source?.ip != null",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "client.ip",
          "value": "{{source.ip}}",
          "ignore_empty_value": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{source.ip}}",
          "allow_duplicates": false,
          "if": "ctx.source?.ip != null"
        }
      },
      {
        "rename": {
          "field": "azure.platformlogs.level",
          "target_field": "log.level",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "azure.platformlogs.durationMs",
          "target_field": "event.duration",
          "type": "integer",
          "ignore_missing": true,
          "if": "ctx?.azure?.platformlogs?.durationMs != null && ctx?.azure?.platformlogs?.durationMs instanceof String"
        }
      },
      {
        "remove": {
          "field": "azure.platformlogs.durationMs",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "source": "if (ctx.event.duration!= null) {ctx.event.duration = ctx.event.duration * params.param_nano;}",
          "params": {
            "param_nano": 1000000
          },
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "azure.platformlogs.location",
          "target_field": "geo.name",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "source": "if (ctx?.azure?.platformlogs?.properties?.eventCategory != null) {\n  ctx.azure.platformlogs.event_category = ctx.azure.platformlogs.properties.eventCategory;\n} else if (ctx?.azure?.platformlogs?.properties?.policies != null)  {\n  ctx.azure.platformlogs.event_category = 'Policy';\n} else {\n  ctx.azure.platformlogs.event_category = 'Administrative';\n}",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "azure.platformlogs.resultType",
          "target_field": "azure.platformlogs.result_type",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "azure.platformlogs.result_type",
          "target_field": "event.outcome",
          "type": "string",
          "if": "ctx?.azure?.platformlogs?.result_type != null && ctx.azure.platformlogs.result_type instanceof String && (ctx.azure.platformlogs.result_type.toLowerCase() == 'success' || ctx.azure.platformlogs.result_type.toLowerCase() == 'failure')"
        }
      },
      {
        "convert": {
          "field": "azure.platformlogs.properties.result",
          "target_field": "event.outcome",
          "type": "string",
          "if": "ctx?.event?.outcome == null && ctx?.azure?.platformlogs?.properties?.result != null && ctx?.azure?.platformlogs?.properties?.result instanceof String && ['success', 'failure', 'unknown'].contains(ctx.azure?.platformlogs?.properties?.result)"
        }
      },
      {
        "convert": {
          "field": "azure.platformlogs.Status",
          "target_field": "event.outcome",
          "type": "string",
          "if": "ctx?.event?.outcome == null && ctx?.azure?.platformlogs?.Status != null && ctx?.azure?.platformlogs?.Status instanceof String && ['success', 'failure', 'unknown', 'Succeeded', 'Failed'].contains(ctx.azure?.platformlogs?.Status)"
        }
      },
      {
        "rename": {
          "field": "azure.platformlogs.operationName",
          "target_field": "azure.platformlogs.operation_name",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "azure.platformlogs.operation_name",
          "target_field": "event.action",
          "type": "string",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.platformlogs.resultSignature",
          "target_field": "azure.platformlogs.result_signature",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.platformlogs.correlationId",
          "target_field": "azure.correlation_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.platformlogs.properties.statusCode",
          "target_field": "azure.platformlogs.properties.status_code",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.platformlogs.Status",
          "target_field": "azure.platformlogs.status",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "geo",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "params": {
            "write": {
              "type": [
                "change"
              ]
            },
            "read": {
              "type": [
                "access"
              ]
            },
            "delete": {
              "type": [
                "deletion"
              ]
            },
            "action": {
              "type": [
                "change"
              ]
            }
          },
          "source": "if (ctx?.azure?.platformlogs?.category == null) {\n  return;\n} def category = ctx.azure.platformlogs.category.toLowerCase(); if (params.get(category) == null) {\n  return;\n} def hm = new HashMap(params.get(category)); hm.forEach((k, v) -> ctx.event[k] = v);"
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "source.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.asn",
          "target_field": "source.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.organization_name",
          "target_field": "source.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "pipeline": {
          "name": "logs-azure.platformlogs-1.5.4-azure-shared-pipeline"
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "if": "ctx?.azure_log_forwarder?.resource_type != null && (ctx?.azure_log_forwarder?.resource_type == 'Microsoft.AppPlatform/Spring'|| ctx?.azure_log_forwarder?.resource_type == 'MICROSOFT.APPPLATFORM/SPRING')",
          "name": "logs-azure.platformlogs-1.5.4-springcloudlogs-inner-pipeline"
        }
      },
      {
        "rename": {
          "field": "azure.platformlogs.resultDescription",
          "target_field": "azure.platformlogs.result_description",
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-azure.platformlogs@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "Processor \"{{ _ingest.on_failure_processor_type }}\" with tag \"{{ _ingest.on_failure_processor_tag }}\" in pipeline \"{{ _ingest.on_failure_pipeline }}\" failed with message \"{{ _ingest.on_failure_message }}\""
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "azure"
      }
    }
  },
  "metrics-system.uptime-1.20.4": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-system.uptime@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "system"
      }
    }
  },
  "logs-system.security-1.20.4-standard": {
    "description": "Pipeline for Windows Security events",
    "processors": [
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Set ECS categorization fields",
          "description": "Set ECS categorization fields",
          "params": {
            "1100": {
              "category": [
                "process"
              ],
              "type": [
                "end"
              ],
              "action": "logging-service-shutdown"
            },
            "1102": {
              "category": [
                "iam"
              ],
              "type": [
                "admin",
                "change"
              ],
              "action": "audit-log-cleared"
            },
            "1104": {
              "category": [
                "iam"
              ],
              "type": [
                "admin"
              ],
              "action": "logging-full"
            },
            "1105": {
              "category": [
                "iam"
              ],
              "type": [
                "admin"
              ],
              "action": "auditlog-archieved"
            },
            "1108": {
              "category": [
                "iam"
              ],
              "type": [
                "admin"
              ],
              "action": "logging-processing-error"
            },
            "4610": {
              "category": [
                "configuration"
              ],
              "type": [
                "access"
              ],
              "action": "authentication-package-loaded"
            },
            "4611": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ],
              "action": "trusted-logon-process-registered"
            },
            "4614": {
              "category": [
                "configuration"
              ],
              "type": [
                "access"
              ],
              "action": "notification-package-loaded"
            },
            "4616": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ],
              "action": "system-time-changed"
            },
            "4622": {
              "category": [
                "configuration"
              ],
              "type": [
                "access"
              ],
              "action": "security-package-loaded"
            },
            "4624": {
              "category": [
                "authentication"
              ],
              "type": [
                "start"
              ],
              "action": "logged-in"
            },
            "4625": {
              "category": [
                "authentication"
              ],
              "type": [
                "start"
              ],
              "action": "logon-failed"
            },
            "4634": {
              "category": [
                "authentication"
              ],
              "type": [
                "end"
              ],
              "action": "logged-out"
            },
            "4647": {
              "category": [
                "authentication"
              ],
              "type": [
                "end"
              ],
              "action": "logged-out"
            },
            "4648": {
              "category": [
                "authentication"
              ],
              "type": [
                "start"
              ],
              "action": "logged-in-explicit"
            },
            "4657": {
              "category": [
                "registry",
                "configuration"
              ],
              "type": [
                "change"
              ],
              "action": "registry-value-modified"
            },
            "4670": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "admin",
                "change"
              ],
              "action": "permissions-changed"
            },
            "4672": {
              "category": [
                "iam"
              ],
              "type": [
                "admin"
              ],
              "action": "logged-in-special"
            },
            "4673": {
              "category": [
                "iam"
              ],
              "type": [
                "admin"
              ],
              "action": "privileged-service-called"
            },
            "4674": {
              "category": [
                "iam"
              ],
              "type": [
                "admin"
              ],
              "action": "privileged-operation"
            },
            "4688": {
              "category": [
                "process"
              ],
              "type": [
                "start"
              ],
              "action": "created-process"
            },
            "4689": {
              "category": [
                "process"
              ],
              "type": [
                "end"
              ],
              "action": "exited-process"
            },
            "4697": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "admin",
                "change"
              ],
              "action": "service-installed"
            },
            "4698": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "creation",
                "admin"
              ],
              "action": "scheduled-task-created"
            },
            "4699": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "deletion",
                "admin"
              ],
              "action": "scheduled-task-deleted"
            },
            "4700": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "change",
                "admin"
              ],
              "action": "scheduled-task-enabled"
            },
            "4701": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "change",
                "admin"
              ],
              "action": "scheduled-task-disabled"
            },
            "4702": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "change",
                "admin"
              ],
              "action": "scheduled-task-updated"
            },
            "4706": {
              "category": [
                "configuration"
              ],
              "type": [
                "creation"
              ],
              "action": "domain-trust-added"
            },
            "4707": {
              "category": [
                "configuration"
              ],
              "type": [
                "deletion"
              ],
              "action": "domain-trust-removed"
            },
            "4713": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ],
              "action": "kerberos-policy-changed"
            },
            "4714": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ],
              "action": "encrypted-data-recovery-policy-changed"
            },
            "4715": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ],
              "action": "object-audit-policy-changed"
            },
            "4716": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ],
              "action": "trusted-domain-information-changed"
            },
            "4717": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "admin",
                "change"
              ],
              "action": "system-security-access-granted"
            },
            "4718": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "admin",
                "deletion"
              ],
              "action": "system-security-access-removed"
            },
            "4719": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "admin",
                "change"
              ],
              "action": "changed-audit-config"
            },
            "4720": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "creation"
              ],
              "action": "added-user-account"
            },
            "4722": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ],
              "action": "enabled-user-account"
            },
            "4723": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ],
              "action": "changed-password"
            },
            "4724": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ],
              "action": "reset-password"
            },
            "4725": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "deletion"
              ],
              "action": "disabled-user-account"
            },
            "4726": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "deletion"
              ],
              "action": "deleted-user-account"
            },
            "4727": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "creation"
              ],
              "action": "added-group-account"
            },
            "4728": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "added-member-to-group"
            },
            "4729": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "removed-member-from-group"
            },
            "4730": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "deletion"
              ],
              "action": "deleted-group-account"
            },
            "4731": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "creation"
              ],
              "action": "added-group-account"
            },
            "4732": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "added-member-to-group"
            },
            "4733": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "removed-member-from-group"
            },
            "4734": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "deletion"
              ],
              "action": "deleted-group-account"
            },
            "4735": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "modified-group-account"
            },
            "4737": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "modified-group-account"
            },
            "4738": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ],
              "action": "modified-user-account"
            },
            "4739": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ],
              "action": "domain-policy-changed"
            },
            "4740": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ],
              "action": "locked-out-user-account"
            },
            "4741": {
              "category": [
                "iam"
              ],
              "type": [
                "creation",
                "admin"
              ],
              "action": "added-computer-account"
            },
            "4742": {
              "category": [
                "iam"
              ],
              "type": [
                "change",
                "admin"
              ],
              "action": "changed-computer-account"
            },
            "4743": {
              "category": [
                "iam"
              ],
              "type": [
                "deletion",
                "admin"
              ],
              "action": "deleted-computer-account"
            },
            "4744": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "creation"
              ],
              "action": "added-distribution-group-account"
            },
            "4745": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "changed-distribution-group-account"
            },
            "4746": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "added-member-to-distribution-group"
            },
            "4747": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "removed-member-from-distribution-group"
            },
            "4748": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "deletion"
              ],
              "action": "deleted-distribution-group-account"
            },
            "4749": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "creation"
              ],
              "action": "added-distribution-group-account"
            },
            "4750": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "changed-distribution-group-account"
            },
            "4751": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "added-member-to-distribution-group"
            },
            "4752": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "removed-member-from-distribution-group"
            },
            "4753": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "deletion"
              ],
              "action": "deleted-distribution-group-account"
            },
            "4754": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "creation"
              ],
              "action": "added-group-account"
            },
            "4755": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "modified-group-account"
            },
            "4756": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "added-member-to-group"
            },
            "4757": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "removed-member-from-group"
            },
            "4758": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "deletion"
              ],
              "action": "deleted-group-account"
            },
            "4759": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "creation"
              ],
              "action": "added-distribution-group-account"
            },
            "4760": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "changed-distribution-group-account"
            },
            "4761": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "added-member-to-distribution-group"
            },
            "4762": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "removed-member-from-distribution-group"
            },
            "4763": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "deletion"
              ],
              "action": "deleted-distribution-group-account"
            },
            "4764": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "type-changed-group-account"
            },
            "4767": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ],
              "action": "unlocked-user-account"
            },
            "4768": {
              "category": [
                "authentication"
              ],
              "type": [
                "start"
              ],
              "action": "kerberos-authentication-ticket-requested"
            },
            "4769": {
              "category": [
                "authentication"
              ],
              "type": [
                "start"
              ],
              "action": "kerberos-service-ticket-requested"
            },
            "4770": {
              "category": [
                "authentication"
              ],
              "type": [
                "start"
              ],
              "action": "kerberos-service-ticket-renewed"
            },
            "4771": {
              "category": [
                "authentication"
              ],
              "type": [
                "start"
              ],
              "action": "kerberos-preauth-failed"
            },
            "4776": {
              "category": [
                "authentication"
              ],
              "type": [
                "start"
              ],
              "action": "credential-validated"
            },
            "4778": {
              "category": [
                "authentication",
                "session"
              ],
              "type": [
                "start"
              ],
              "action": "session-reconnected"
            },
            "4779": {
              "category": [
                "authentication",
                "session"
              ],
              "type": [
                "end"
              ],
              "action": "session-disconnected"
            },
            "4781": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ],
              "action": "renamed-user-account"
            },
            "4798": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "info"
              ],
              "action": "group-membership-enumerated"
            },
            "4799": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "info"
              ],
              "action": "user-member-enumerated"
            },
            "4817": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "admin",
                "change"
              ],
              "action": "object-audit-changed"
            },
            "4902": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "admin",
                "creation"
              ],
              "action": "user-audit-policy-created"
            },
            "4904": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "admin",
                "change"
              ],
              "action": "security-event-source-added"
            },
            "4905": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "admin",
                "deletion"
              ],
              "action": "security-event-source-removed"
            },
            "4906": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "admin",
                "change"
              ],
              "action": "crash-on-audit-changed"
            },
            "4907": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "admin",
                "change"
              ],
              "action": "audit-setting-changed"
            },
            "4908": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "admin",
                "change"
              ],
              "action": "special-group-table-changed"
            },
            "4912": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "admin",
                "change"
              ],
              "action": "per-user-audit-policy-changed"
            },
            "4950": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ],
              "action": "windows-firewall-setting-changed"
            },
            "4954": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ],
              "action": "windows-firewall-group-policy-changed"
            },
            "4964": {
              "category": [
                "iam"
              ],
              "type": [
                "admin",
                "group"
              ],
              "action": "logged-in-special"
            },
            "5024": {
              "category": [
                "process"
              ],
              "type": [
                "start"
              ],
              "action": "windows-firewall-service-started"
            },
            "5025": {
              "category": [
                "process"
              ],
              "type": [
                "end"
              ],
              "action": "windows-firewall-service-stopped"
            },
            "5033": {
              "category": [
                "driver"
              ],
              "type": [
                "start"
              ],
              "action": "windows-firewall-driver-started"
            },
            "5034": {
              "category": [
                "driver"
              ],
              "type": [
                "end"
              ],
              "action": "windows-firewall-driver-stopped"
            },
            "5037": {
              "category": [
                "driver"
              ],
              "type": [
                "end"
              ],
              "action": "windows-firewall-driver-error"
            },
            "5140": {
              "category": [
                "network",
                "file"
              ],
              "type": [
                "info",
                "access"
              ],
              "action": "network-share-object-accessed"
            },
            "5145": {
              "category": [
                "network",
                "file"
              ],
              "type": [
                "info",
                "access"
              ],
              "action": "network-share-object-access-checked"
            }
          },
          "source": "if (ctx?.event?.code == null || params.get(ctx.event.code) == null) {\n  return;\n}\ndef hm = new HashMap(params.get(ctx.event.code));\nhm.forEach((k, v) -> ctx.event[k] = v);"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Set Logon Type",
          "description": "Set Logon Type",
          "params": {
            "2": "Interactive",
            "3": "Network",
            "4": "Batch",
            "5": "Service",
            "7": "Unlock",
            "8": "NetworkCleartext",
            "9": "NewCredentials",
            "10": "RemoteInteractive",
            "11": "CachedInteractive"
          },
          "source": "if (ctx?.winlog?.event_data?.LogonType == null) {\n  return;\n}\ndef t = params.get(ctx.winlog.event_data.LogonType);\nif (t == null) {\n  return;\n}\nif (ctx?.winlog?.logon == null ) {\n  Map map = new HashMap();\n  ctx.winlog.put(\"logon\", map);\n}\nctx.winlog.logon.put(\"type\", t)"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Set User Account Control",
          "description": "Set User Account Control",
          "params": {
            "0x00000001": "SCRIPT",
            "0x00000002": "ACCOUNTDISABLE",
            "0x00000008": "HOMEDIR_REQUIRED",
            "0x00000010": "LOCKOUT",
            "0x00000020": "PASSWD_NOTREQD",
            "0x00000040": "PASSWD_CANT_CHANGE",
            "0x00000080": "ENCRYPTED_TEXT_PWD_ALLOWED",
            "0x00000100": "TEMP_DUPLICATE_ACCOUNT",
            "0x00000200": "NORMAL_ACCOUNT",
            "0x00000800": "INTERDOMAIN_TRUST_ACCOUNT",
            "0x00001000": "WORKSTATION_TRUST_ACCOUNT",
            "0x00002000": "SERVER_TRUST_ACCOUNT",
            "0x00010000": "DONT_EXPIRE_PASSWORD",
            "0x00020000": "MNS_LOGON_ACCOUNT",
            "0x00040000": "SMARTCARD_REQUIRED",
            "0x00080000": "TRUSTED_FOR_DELEGATION",
            "0x00100000": "NOT_DELEGATED",
            "0x00200000": "USE_DES_KEY_ONLY",
            "0x00400000": "DONT_REQ_PREAUTH",
            "0x00800000": "PASSWORD_EXPIRED",
            "0x01000000": "TRUSTED_TO_AUTH_FOR_DELEGATION",
            "0x04000000": "PARTIAL_SECRETS_ACCOUNT"
          },
          "source": "if (ctx.winlog?.event_data == null) {\n  return;\n}\nif (ctx.winlog.event_data.NewUacValue == null || ctx.winlog.event_data.NewUacValue == \"-\") {\n  return;\n}\nLong newUacValue = Long.decode(ctx.winlog.event_data.NewUacValue);\nArrayList uacResult = new ArrayList();\nfor (entry in params.entrySet()) {\n  Long flag = Long.decode(entry.getKey());\n  if ((newUacValue.longValue() & flag.longValue()) == flag.longValue()) {\n    uacResult.add(entry.getValue());\n  }\n}\nif (uacResult.length == 0) {\n  return;\n}\nctx.winlog.event_data.put(\"NewUACList\", uacResult);\nif (ctx.winlog.event_data.UserAccountControl == null || ctx.winlog.event_data.UserAccountControl == \"-\") {\n  return;\n}\nArrayList uac_array = new ArrayList();\nfor (elem in ctx.winlog.event_data.UserAccountControl.splitOnToken(\"%%\")) {\n  if (elem.trim().length() > 0) {\n    uac_array.add(elem.trim());\n  }\n}\nctx.winlog.event_data.UserAccountControl = uac_array;"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Set Kerberos Ticket Options",
          "description": "Set Kerberos Ticket Options",
          "params": {
            "0x40000000": "Forwardable",
            "0x20000000": "Forwarded",
            "0x10000000": "Proxiable",
            "0x08000000": "Proxy",
            "0x04000000": "Allow-postdate",
            "0x02000000": "Postdated",
            "0x01000000": "Invalid",
            "0x00800000": "Renewable",
            "0x00400000": "Initial",
            "0x00200000": "Pre-authent",
            "0x00100000": "Opt-hardware-auth",
            "0x00080000": "Transited-policy-checked",
            "0x00040000": "Ok-as-delegate",
            "0x00020000": "Request-anonymous",
            "0x00010000": "Name-canonicalize",
            "0x00000020": "Disable-transited-check",
            "0x00000010": "Renewable-ok",
            "0x00000008": "Enc-tkt-in-skey",
            "0x00000002": "Renew",
            "0x00000001": "Validate"
          },
          "source": "if (ctx?.winlog?.event_data?.TicketOptions == null) {\n  return;\n}\nLong tOpts = Long.decode(ctx.winlog.event_data.TicketOptions);\nArrayList tDescs = new ArrayList();\nfor (entry in params.entrySet()) {\n  Long flag = Long.decode(entry.getKey());\n  if ((tOpts.longValue() & flag.longValue()) == flag.longValue()) {\n    tDescs.add(entry.getValue());\n  }\n}\nif (tDescs.length == 0) {\n  return;\n}\nctx.winlog.event_data.put(\"TicketOptionsDescription\", tDescs);"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Set Kerberos Encryption Types",
          "description": "Set Kerberos Encryption Types",
          "params": {
            "0x1": "DES-CBC-CRC",
            "0x3": "DES-CBC-MD5",
            "0x11": "AES128-CTS-HMAC-SHA1-96",
            "0x12": "AES256-CTS-HMAC-SHA1-96",
            "0x17": "RC4-HMAC",
            "0x18": "RC4-HMAC-EXP",
            "0xffffffff": "FAIL"
          },
          "source": "if (ctx?.winlog?.event_data?.TicketEncryptionType == null) {\n  return;\n}\nctx.winlog.event_data.put(\"TicketEncryptionTypeDescription\",\n                          params[ctx.winlog.event_data.TicketEncryptionType.toLowerCase()])"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Set Kerberos Ticket Status Codes",
          "description": "Set Kerberos Ticket Status Codes",
          "params": {
            "0x0": "KDC_ERR_NONE",
            "0x1": "KDC_ERR_NAME_EXP",
            "0x2": "KDC_ERR_SERVICE_EXP",
            "0x3": "KDC_ERR_BAD_PVNO",
            "0x4": "KDC_ERR_C_OLD_MAST_KVNO",
            "0x5": "KDC_ERR_S_OLD_MAST_KVNO",
            "0x6": "KDC_ERR_C_PRINCIPAL_UNKNOWN",
            "0x7": "KDC_ERR_S_PRINCIPAL_UNKNOWN",
            "0x8": "KDC_ERR_PRINCIPAL_NOT_UNIQUE",
            "0x9": "KDC_ERR_NULL_KEY",
            "0xA": "KDC_ERR_CANNOT_POSTDATE",
            "0xB": "KDC_ERR_NEVER_VALID",
            "0xC": "KDC_ERR_POLICY",
            "0xD": "KDC_ERR_BADOPTION",
            "0xE": "KDC_ERR_ETYPE_NOTSUPP",
            "0xF": "KDC_ERR_SUMTYPE_NOSUPP",
            "0x10": "KDC_ERR_PADATA_TYPE_NOSUPP",
            "0x11": "KDC_ERR_TRTYPE_NO_SUPP",
            "0x12": "KDC_ERR_CLIENT_REVOKED",
            "0x13": "KDC_ERR_SERVICE_REVOKED",
            "0x14": "KDC_ERR_TGT_REVOKED",
            "0x15": "KDC_ERR_CLIENT_NOTYET",
            "0x16": "KDC_ERR_SERVICE_NOTYET",
            "0x17": "KDC_ERR_KEY_EXPIRED",
            "0x18": "KDC_ERR_PREAUTH_FAILED",
            "0x19": "KDC_ERR_PREAUTH_REQUIRED",
            "0x1A": "KDC_ERR_SERVER_NOMATCH",
            "0x1B": "KDC_ERR_MUST_USE_USER2USER",
            "0x1F": "KRB_AP_ERR_BAD_INTEGRITY",
            "0x20": "KRB_AP_ERR_TKT_EXPIRED",
            "0x21": "KRB_AP_ERR_TKT_NYV",
            "0x22": "KRB_AP_ERR_REPEAT",
            "0x23": "KRB_AP_ERR_NOT_US",
            "0x24": "KRB_AP_ERR_BADMATCH",
            "0x25": "KRB_AP_ERR_SKEW",
            "0x26": "KRB_AP_ERR_BADADDR",
            "0x27": "KRB_AP_ERR_BADVERSION",
            "0x28": "KRB_AP_ERR_MSG_TYPE",
            "0x29": "KRB_AP_ERR_MODIFIED",
            "0x2A": "KRB_AP_ERR_BADORDER",
            "0x2C": "KRB_AP_ERR_BADKEYVER",
            "0x2D": "KRB_AP_ERR_NOKEY",
            "0x2E": "KRB_AP_ERR_MUT_FAIL",
            "0x2F": "KRB_AP_ERR_BADDIRECTION",
            "0x30": "KRB_AP_ERR_METHOD",
            "0x31": "KRB_AP_ERR_BADSEQ",
            "0x32": "KRB_AP_ERR_INAPP_CKSUM",
            "0x33": "KRB_AP_PATH_NOT_ACCEPTED",
            "0x34": "KRB_ERR_RESPONSE_TOO_BIG",
            "0x3C": "KRB_ERR_GENERIC",
            "0x3D": "KRB_ERR_FIELD_TOOLONG",
            "0x3E": "KDC_ERR_CLIENT_NOT_TRUSTED",
            "0x3F": "KDC_ERR_KDC_NOT_TRUSTED",
            "0x40": "KDC_ERR_INVALID_SIG",
            "0x41": "KDC_ERR_KEY_TOO_WEAK",
            "0x42": "KRB_AP_ERR_USER_TO_USER_REQUIRED",
            "0x43": "KRB_AP_ERR_NO_TGT",
            "0x44": "KDC_ERR_WRONG_REALM"
          },
          "source": "if (ctx?.winlog?.event_data?.Status == null ||\n    ctx?.event?.code == null ||\n    ![\"4768\", \"4769\", \"4770\", \"4771\"].contains(ctx.event.code)) {\n  return;\n}\nctx.winlog.event_data.put(\"StatusDescription\", params[ctx.winlog.event_data.Status]);"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Set Service Type and Name",
          "description": "Set Service Type and Name",
          "params": {
            "0x1": "Kernel Driver",
            "0x2": "File System Driver",
            "0x8": "Recognizer Driver",
            "0x10": "Win32 Own Process",
            "0x20": "Win32 Share Process",
            "0x110": "Interactive Own Process",
            "0x120": "Interactive Share Process"
          },
          "source": "if (ctx?.winlog?.event_data?.ServiceName != null) {\n  if (ctx?.service == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"service\", hm);\n  }\n  ctx.service.put(\"name\", ctx.winlog.event_data.ServiceName);\n}\nif (ctx?.winlog.event_data?.ServiceType != null) {\n  if (ctx?.service == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"service\", hm);\n  }\n  ctx.service.put(\"type\", params[ctx.winlog.event_data.ServiceType]);\n}"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Set Audit Information",
          "description": "Set Audit Information",
          "params": {
            "0CCE9210-69AE-11D9-BED3-505054503030": [
              "Security State Change",
              "System"
            ],
            "0CCE9211-69AE-11D9-BED3-505054503030": [
              "Security System Extension",
              "System"
            ],
            "0CCE9212-69AE-11D9-BED3-505054503030": [
              "System Integrity",
              "System"
            ],
            "0CCE9213-69AE-11D9-BED3-505054503030": [
              "IPsec Driver",
              "System"
            ],
            "0CCE9214-69AE-11D9-BED3-505054503030": [
              "Other System Events",
              "System"
            ],
            "0CCE9215-69AE-11D9-BED3-505054503030": [
              "Logon",
              "Logon/Logoff"
            ],
            "0CCE9216-69AE-11D9-BED3-505054503030": [
              "Logoff",
              "Logon/Logoff"
            ],
            "0CCE9217-69AE-11D9-BED3-505054503030": [
              "Account Lockout",
              "Logon/Logoff"
            ],
            "0CCE9218-69AE-11D9-BED3-505054503030": [
              "IPsec Main Mode",
              "Logon/Logoff"
            ],
            "0CCE9219-69AE-11D9-BED3-505054503030": [
              "IPsec Quick Mode",
              "Logon/Logoff"
            ],
            "0CCE921A-69AE-11D9-BED3-505054503030": [
              "IPsec Extended Mode",
              "Logon/Logoff"
            ],
            "0CCE921B-69AE-11D9-BED3-505054503030": [
              "Special Logon",
              "Logon/Logoff"
            ],
            "0CCE921C-69AE-11D9-BED3-505054503030": [
              "Other Logon/Logoff Events",
              "Logon/Logoff"
            ],
            "0CCE9243-69AE-11D9-BED3-505054503030": [
              "Network Policy Server",
              "Logon/Logoff"
            ],
            "0CCE9247-69AE-11D9-BED3-505054503030": [
              "User / Device Claims",
              "Logon/Logoff"
            ],
            "0CCE921D-69AE-11D9-BED3-505054503030": [
              "File System",
              "Object Access"
            ],
            "0CCE921E-69AE-11D9-BED3-505054503030": [
              "Registry",
              "Object Access"
            ],
            "0CCE921F-69AE-11D9-BED3-505054503030": [
              "Kernel Object",
              "Object Access"
            ],
            "0CCE9220-69AE-11D9-BED3-505054503030": [
              "SAM",
              "Object Access"
            ],
            "0CCE9221-69AE-11D9-BED3-505054503030": [
              "Certification Services",
              "Object Access"
            ],
            "0CCE9222-69AE-11D9-BED3-505054503030": [
              "Application Generated",
              "Object Access"
            ],
            "0CCE9223-69AE-11D9-BED3-505054503030": [
              "Handle Manipulation",
              "Object Access"
            ],
            "0CCE9224-69AE-11D9-BED3-505054503030": [
              "File Share",
              "Object Access"
            ],
            "0CCE9225-69AE-11D9-BED3-505054503030": [
              "Filtering Platform Packet Drop",
              "Object Access"
            ],
            "0CCE9226-69AE-11D9-BED3-505054503030": [
              "Filtering Platform Connection ",
              "Object Access"
            ],
            "0CCE9227-69AE-11D9-BED3-505054503030": [
              "Other Object Access Events",
              "Object Access"
            ],
            "0CCE9244-69AE-11D9-BED3-505054503030": [
              "Detailed File Share",
              "Object Access"
            ],
            "0CCE9245-69AE-11D9-BED3-505054503030": [
              "Removable Storage",
              "Object Access"
            ],
            "0CCE9246-69AE-11D9-BED3-505054503030": [
              "Central Policy Staging",
              "Object Access"
            ],
            "0CCE9228-69AE-11D9-BED3-505054503030": [
              "Sensitive Privilege Use",
              "Privilege Use"
            ],
            "0CCE9229-69AE-11D9-BED3-505054503030": [
              "Non Sensitive Privilege Use",
              "Privilege Use"
            ],
            "0CCE922A-69AE-11D9-BED3-505054503030": [
              "Other Privilege Use Events",
              "Privilege Use"
            ],
            "0CCE922B-69AE-11D9-BED3-505054503030": [
              "Process Creation",
              "Detailed Tracking"
            ],
            "0CCE922C-69AE-11D9-BED3-505054503030": [
              "Process Termination",
              "Detailed Tracking"
            ],
            "0CCE922D-69AE-11D9-BED3-505054503030": [
              "DPAPI Activity",
              "Detailed Tracking"
            ],
            "0CCE922E-69AE-11D9-BED3-505054503030": [
              "RPC Events",
              "Detailed Tracking"
            ],
            "0CCE9248-69AE-11D9-BED3-505054503030": [
              "Plug and Play Events",
              "Detailed Tracking"
            ],
            "0CCE922F-69AE-11D9-BED3-505054503030": [
              "Audit Policy Change",
              "Policy Change"
            ],
            "0CCE9230-69AE-11D9-BED3-505054503030": [
              "Authentication Policy Change",
              "Policy Change"
            ],
            "0CCE9231-69AE-11D9-BED3-505054503030": [
              "Authorization Policy Change",
              "Policy Change"
            ],
            "0CCE9232-69AE-11D9-BED3-505054503030": [
              "MPSSVC Rule-Level Policy Change",
              "Policy Change"
            ],
            "0CCE9233-69AE-11D9-BED3-505054503030": [
              "Filtering Platform Policy Change",
              "Policy Change"
            ],
            "0CCE9234-69AE-11D9-BED3-505054503030": [
              "Other Policy Change Events",
              "Policy Change"
            ],
            "0CCE9235-69AE-11D9-BED3-505054503030": [
              "User Account Management",
              "Account Management"
            ],
            "0CCE9236-69AE-11D9-BED3-505054503030": [
              "Computer Account Management",
              "Account Management"
            ],
            "0CCE9237-69AE-11D9-BED3-505054503030": [
              "Security Group Management",
              "Account Management"
            ],
            "0CCE9238-69AE-11D9-BED3-505054503030": [
              "Distribution Group Management",
              "Account Management"
            ],
            "0CCE9239-69AE-11D9-BED3-505054503030": [
              "Application Group Management",
              "Account Management"
            ],
            "0CCE923A-69AE-11D9-BED3-505054503030": [
              "Other Account Management Events",
              "Account Management"
            ],
            "0CCE923B-69AE-11D9-BED3-505054503030": [
              "Directory Service Access",
              "Account Management"
            ],
            "0CCE923C-69AE-11D9-BED3-505054503030": [
              "Directory Service Changes",
              "Account Management"
            ],
            "0CCE923D-69AE-11D9-BED3-505054503030": [
              "Directory Service Replication",
              "Account Management"
            ],
            "0CCE923E-69AE-11D9-BED3-505054503030": [
              "Detailed Directory Service Replication",
              "Account Management"
            ],
            "0CCE923F-69AE-11D9-BED3-505054503030": [
              "Credential Validation",
              "Account Logon"
            ],
            "0CCE9240-69AE-11D9-BED3-505054503030": [
              "Kerberos Service Ticket Operations",
              "Account Logon"
            ],
            "0CCE9241-69AE-11D9-BED3-505054503030": [
              "Other Account Logon Events",
              "Account Logon"
            ],
            "0CCE9242-69AE-11D9-BED3-505054503030": [
              "Kerberos Authentication Service",
              "Account Logon"
            ]
          },
          "source": "if (ctx?.winlog?.event_data?.SubcategoryGuid == null) {\n  return;\n}\ndef subCatGuid = ctx.winlog.event_data.SubcategoryGuid.replace(\"{\",\"\").replace(\"}\",\"\").toUpperCase();\nif (!params.containsKey(subCatGuid)) {\n  return;\n}\nctx.winlog.event_data.put(\"Category\", params[subCatGuid][1]);\nctx.winlog.event_data.put(\"SubCategory\", params[subCatGuid][0]);"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Decode message table",
          "description": "Decode message table",
          "params": {
            "descriptions": {
              "279": "Undefined Access (no effect) Bit 7",
              "1536": "Unused message ID",
              "1537": "DELETE",
              "1538": "READ_CONTROL",
              "1539": "WRITE_DAC",
              "1540": "WRITE_OWNER",
              "1541": "SYNCHRONIZE",
              "1542": "ACCESS_SYS_SEC",
              "1543": "MAX_ALLOWED",
              "1552": "Unknown specific access (bit 0)",
              "1553": "Unknown specific access (bit 1)",
              "1554": "Unknown specific access (bit 2)",
              "1555": "Unknown specific access (bit 3)",
              "1556": "Unknown specific access (bit 4)",
              "1557": "Unknown specific access (bit 5)",
              "1558": "Unknown specific access (bit 6)",
              "1559": "Unknown specific access (bit 7)",
              "1560": "Unknown specific access (bit 8)",
              "1561": "Unknown specific access (bit 9)",
              "1562": "Unknown specific access (bit 10)",
              "1563": "Unknown specific access (bit 11)",
              "1564": "Unknown specific access (bit 12)",
              "1565": "Unknown specific access (bit 13)",
              "1566": "Unknown specific access (bit 14)",
              "1567": "Unknown specific access (bit 15)",
              "1601": "Not used",
              "1603": "Assign Primary Token Privilege",
              "1604": "Lock Memory Privilege",
              "1605": "Increase Memory Quota Privilege",
              "1606": "Unsolicited Input Privilege",
              "1607": "Trusted Computer Base Privilege",
              "1608": "Security Privilege",
              "1609": "Take Ownership Privilege",
              "1610": "Load/Unload Driver Privilege",
              "1611": "Profile System Privilege",
              "1612": "Set System Time Privilege",
              "1613": "Profile Single Process Privilege",
              "1614": "Increment Base Priority Privilege",
              "1615": "Create Pagefile Privilege",
              "1616": "Create Permanent Object Privilege",
              "1617": "Backup Privilege",
              "1618": "Restore From Backup Privilege",
              "1619": "Shutdown System Privilege",
              "1620": "Debug Privilege",
              "1621": "View or Change Audit Log Privilege",
              "1622": "Change Hardware Environment Privilege",
              "1623": "Change Notify (and Traverse) Privilege",
              "1624": "Remotely Shut System Down Privilege",
              "1792": "<value changed",
              "1793": "<value not set>",
              "1794": "<never>",
              "1795": "Enabled",
              "1796": "Disabled",
              "1797": "All",
              "1798": "None",
              "1799": "Audit Policy query/set API Operation",
              "1800": "<Value change auditing for this registry type is not supported>",
              "1801": "Granted by",
              "1802": "Denied by",
              "1803": "Denied by Integrity Policy check",
              "1804": "Granted by Ownership",
              "1805": "Not granted",
              "1806": "Granted by NULL DACL",
              "1807": "Denied by Empty DACL",
              "1808": "Granted by NULL Security Descriptor",
              "1809": "Unknown or unchecked",
              "1810": "Not granted due to missing",
              "1811": "Granted by ACE on parent folder",
              "1812": "Denied by ACE on parent folder",
              "1813": "Granted by Central Access Rule",
              "1814": "NOT Granted by Central Access Rule",
              "1815": "Granted by parent folder's Central Access Rule",
              "1816": "NOT Granted by parent folder's Central Access Rule",
              "1817": "Unknown Type",
              "1818": "String",
              "1819": "Unsigned 64-bit Integer",
              "1820": "64-bit Integer",
              "1821": "FQBN",
              "1822": "Blob",
              "1823": "Sid",
              "1824": "Boolean",
              "1825": "TRUE",
              "1826": "FALSE",
              "1827": "Invalid",
              "1828": "an ACE too long to display",
              "1829": "a Security Descriptor too long to display",
              "1830": "Not granted to AppContainers",
              "1831": "...",
              "1832": "Identification",
              "1833": "Impersonation",
              "1840": "Delegation",
              "1841": "Denied by Process Trust Label ACE",
              "1842": "Yes",
              "1843": "No",
              "1844": "System",
              "1845": "Not Available",
              "1846": "Default",
              "1847": "DisallowMmConfig",
              "1848": "Off",
              "1849": "Auto",
              "1872": "REG_NONE",
              "1873": "REG_SZ",
              "1874": "REG_EXPAND_SZ",
              "1875": "REG_BINARY",
              "1876": "REG_DWORD",
              "1877": "REG_DWORD_BIG_ENDIAN",
              "1878": "REG_LINK",
              "1879": "REG_MULTI_SZ (New lines are replaced with *. A * is replaced with **)",
              "1880": "REG_RESOURCE_LIST",
              "1881": "REG_FULL_RESOURCE_DESCRIPTOR",
              "1882": "REG_RESOURCE_REQUIREMENTS_LIST",
              "1883": "REG_QWORD",
              "1904": "New registry value created",
              "1905": "Existing registry value modified",
              "1906": "Registry value deleted",
              "1920": "Sunday",
              "1921": "Monday",
              "1922": "Tuesday",
              "1923": "Wednesday",
              "1924": "Thursday",
              "1925": "Friday",
              "1926": "Saturday",
              "1936": "TokenElevationTypeDefault (1)",
              "1937": "TokenElevationTypeFull (2)",
              "1938": "TokenElevationTypeLimited (3)",
              "2048": "Account Enabled",
              "2049": "Home Directory Required' - Disabled",
              "2050": "Password Not Required' - Disabled",
              "2051": "Temp Duplicate Account' - Disabled",
              "2052": "Normal Account' - Disabled",
              "2053": "MNS Logon Account' - Disabled",
              "2054": "Interdomain Trust Account' - Disabled",
              "2055": "Workstation Trust Account' - Disabled",
              "2056": "Server Trust Account' - Disabled",
              "2057": "Don't Expire Password' - Disabled",
              "2058": "Account Unlocked",
              "2059": "Encrypted Text Password Allowed' - Disabled",
              "2060": "Smartcard Required' - Disabled",
              "2061": "Trusted For Delegation' - Disabled",
              "2062": "Not Delegated' - Disabled",
              "2063": "Use DES Key Only' - Disabled",
              "2064": "Don't Require Preauth' - Disabled",
              "2065": "Password Expired' - Disabled",
              "2066": "Trusted To Authenticate For Delegation' - Disabled",
              "2067": "Exclude Authorization Information' - Disabled",
              "2068": "Undefined UserAccountControl Bit 20' - Disabled",
              "2069": "Protect Kerberos Service Tickets with AES Keys' - Disabled",
              "2070": "Undefined UserAccountControl Bit 22' - Disabled",
              "2071": "Undefined UserAccountControl Bit 23' - Disabled",
              "2072": "Undefined UserAccountControl Bit 24' - Disabled",
              "2073": "Undefined UserAccountControl Bit 25' - Disabled",
              "2074": "Undefined UserAccountControl Bit 26' - Disabled",
              "2075": "Undefined UserAccountControl Bit 27' - Disabled",
              "2076": "Undefined UserAccountControl Bit 28' - Disabled",
              "2077": "Undefined UserAccountControl Bit 29' - Disabled",
              "2078": "Undefined UserAccountControl Bit 30' - Disabled",
              "2079": "Undefined UserAccountControl Bit 31' - Disabled",
              "2080": "Account Disabled",
              "2081": "Home Directory Required' - Enabled",
              "2082": "Password Not Required' - Enabled",
              "2083": "Temp Duplicate Account' - Enabled",
              "2084": "Normal Account' - Enabled",
              "2085": "MNS Logon Account' - Enabled",
              "2086": "Interdomain Trust Account' - Enabled",
              "2087": "Workstation Trust Account' - Enabled",
              "2088": "Server Trust Account' - Enabled",
              "2089": "Don't Expire Password' - Enabled",
              "2090": "Account Locked",
              "2091": "Encrypted Text Password Allowed' - Enabled",
              "2092": "Smartcard Required' - Enabled",
              "2093": "Trusted For Delegation' - Enabled",
              "2094": "Not Delegated' - Enabled",
              "2095": "Use DES Key Only' - Enabled",
              "2096": "Don't Require Preauth' - Enabled",
              "2097": "Password Expired' - Enabled",
              "2098": "Trusted To Authenticate For Delegation' - Enabled",
              "2099": "Exclude Authorization Information' - Enabled",
              "2100": "Undefined UserAccountControl Bit 20' - Enabled",
              "2101": "Protect Kerberos Service Tickets with AES Keys' - Enabled",
              "2102": "Undefined UserAccountControl Bit 22' - Enabled",
              "2103": "Undefined UserAccountControl Bit 23' - Enabled",
              "2104": "Undefined UserAccountControl Bit 24' - Enabled",
              "2105": "Undefined UserAccountControl Bit 25' - Enabled",
              "2106": "Undefined UserAccountControl Bit 26' - Enabled",
              "2107": "Undefined UserAccountControl Bit 27' - Enabled",
              "2108": "Undefined UserAccountControl Bit 28' - Enabled",
              "2109": "Undefined UserAccountControl Bit 29' - Enabled",
              "2110": "Undefined UserAccountControl Bit 30' - Enabled",
              "2111": "Undefined UserAccountControl Bit 31' - Enabled",
              "2304": "An Error occured during Logon.",
              "2305": "The specified user account has expired.",
              "2306": "The NetLogon component is not active.",
              "2307": "Account locked out.",
              "2308": "The user has not been granted the requested logon type at this machine.",
              "2309": "The specified account's password has expired.",
              "2310": "Account currently disabled.",
              "2311": "Account logon time restriction violation.",
              "2312": "User not allowed to logon at this computer.",
              "2313": "Unknown user name or bad password.",
              "2314": "Domain sid inconsistent.",
              "2315": "Smartcard logon is required and was not used.",
              "2432": "Not Available.",
              "2436": "Random number generator failure.",
              "2437": "Random number generation failed FIPS-140 pre-hash check.",
              "2438": "Failed to zero secret data.",
              "2439": "Key failed pair wise consistency check.",
              "2448": "Failed to unprotect persistent cryptographic key.",
              "2449": "Key export checks failed.",
              "2450": "Validation of public key failed.",
              "2451": "Signature verification failed.",
              "2456": "Open key file.",
              "2457": "Delete key file.",
              "2458": "Read persisted key from file.",
              "2459": "Write persisted key to file.",
              "2464": "Export of persistent cryptographic key.",
              "2465": "Import of persistent cryptographic key.",
              "2480": "Open Key.",
              "2481": "Create Key.",
              "2482": "Delete Key.",
              "2483": "Encrypt.",
              "2484": "Decrypt.",
              "2485": "Sign hash.",
              "2486": "Secret agreement.",
              "2487": "Domain settings",
              "2488": "Local settings",
              "2489": "Add provider.",
              "2490": "Remove provider.",
              "2491": "Add context.",
              "2492": "Remove context.",
              "2493": "Add function.",
              "2494": "Remove function.",
              "2495": "Add function provider.",
              "2496": "Remove function provider.",
              "2497": "Add function property.",
              "2498": "Remove function property.",
              "2499": "Machine key.",
              "2500": "User key.",
              "2501": "Key Derivation.",
              "4352": "Device Access Bit 0",
              "4353": "Device Access Bit 1",
              "4354": "Device Access Bit 2",
              "4355": "Device Access Bit 3",
              "4356": "Device Access Bit 4",
              "4357": "Device Access Bit 5",
              "4358": "Device Access Bit 6",
              "4359": "Device Access Bit 7",
              "4360": "Device Access Bit 8",
              "4361": "Undefined Access (no effect) Bit 9",
              "4362": "Undefined Access (no effect) Bit 10",
              "4363": "Undefined Access (no effect) Bit 11",
              "4364": "Undefined Access (no effect) Bit 12",
              "4365": "Undefined Access (no effect) Bit 13",
              "4366": "Undefined Access (no effect) Bit 14",
              "4367": "Undefined Access (no effect) Bit 15",
              "4368": "Query directory",
              "4369": "Traverse",
              "4370": "Create object in directory",
              "4371": "Create sub-directory",
              "4372": "Undefined Access (no effect) Bit 4",
              "4373": "Undefined Access (no effect) Bit 5",
              "4374": "Undefined Access (no effect) Bit 6",
              "4375": "Undefined Access (no effect) Bit 7",
              "4376": "Undefined Access (no effect) Bit 8",
              "4377": "Undefined Access (no effect) Bit 9",
              "4378": "Undefined Access (no effect) Bit 10",
              "4379": "Undefined Access (no effect) Bit 11",
              "4380": "Undefined Access (no effect) Bit 12",
              "4381": "Undefined Access (no effect) Bit 13",
              "4382": "Undefined Access (no effect) Bit 14",
              "4383": "Undefined Access (no effect) Bit 15",
              "4384": "Query event state",
              "4385": "Modify event state",
              "4386": "Undefined Access (no effect) Bit 2",
              "4387": "Undefined Access (no effect) Bit 3",
              "4388": "Undefined Access (no effect) Bit 4",
              "4389": "Undefined Access (no effect) Bit 5",
              "4390": "Undefined Access (no effect) Bit 6",
              "4391": "Undefined Access (no effect) Bit 7",
              "4392": "Undefined Access (no effect) Bit 8",
              "4393": "Undefined Access (no effect) Bit 9",
              "4394": "Undefined Access (no effect) Bit 10",
              "4395": "Undefined Access (no effect) Bit 11",
              "4396": "Undefined Access (no effect) Bit 12",
              "4397": "Undefined Access (no effect) Bit 13",
              "4398": "Undefined Access (no effect) Bit 14",
              "4399": "Undefined Access (no effect) Bit 15",
              "4416": "ReadData (or ListDirectory)",
              "4417": "WriteData (or AddFile)",
              "4418": "AppendData (or AddSubdirectory or CreatePipeInstance)",
              "4419": "ReadEA",
              "4420": "WriteEA",
              "4421": "Execute/Traverse",
              "4422": "DeleteChild",
              "4423": "ReadAttributes",
              "4424": "WriteAttributes",
              "4425": "Undefined Access (no effect) Bit 9",
              "4426": "Undefined Access (no effect) Bit 10",
              "4427": "Undefined Access (no effect) Bit 11",
              "4428": "Undefined Access (no effect) Bit 12",
              "4429": "Undefined Access (no effect) Bit 13",
              "4430": "Undefined Access (no effect) Bit 14",
              "4431": "Undefined Access (no effect) Bit 15",
              "4432": "Query key value",
              "4433": "Set key value",
              "4434": "Create sub-key",
              "4435": "Enumerate sub-keys",
              "4436": "Notify about changes to keys",
              "4437": "Create Link",
              "4438": "Undefined Access (no effect) Bit 6",
              "4439": "Undefined Access (no effect) Bit 7",
              "4440": "Enable 64(or 32) bit application to open 64 bit key",
              "4441": "Enable 64(or 32) bit application to open 32 bit key",
              "4442": "Undefined Access (no effect) Bit 10",
              "4443": "Undefined Access (no effect) Bit 11",
              "4444": "Undefined Access (no effect) Bit 12",
              "4445": "Undefined Access (no effect) Bit 13",
              "4446": "Undefined Access (no effect) Bit 14",
              "4447": "Undefined Access (no effect) Bit 15",
              "4448": "Query mutant state",
              "4449": "Undefined Access (no effect) Bit 1",
              "4450": "Undefined Access (no effect) Bit 2",
              "4451": "Undefined Access (no effect) Bit 3",
              "4452": "Undefined Access (no effect) Bit 4",
              "4453": "Undefined Access (no effect) Bit 5",
              "4454": "Undefined Access (no effect) Bit 6",
              "4455": "Undefined Access (no effect) Bit 7",
              "4456": "Undefined Access (no effect) Bit 8",
              "4457": "Undefined Access (no effect) Bit 9",
              "4458": "Undefined Access (no effect) Bit 10",
              "4459": "Undefined Access (no effect) Bit 11",
              "4460": "Undefined Access (no effect) Bit 12",
              "4461": "Undefined Access (no effect) Bit 13",
              "4462": "Undefined Access (no effect) Bit 14",
              "4463": "Undefined Access (no effect) Bit 15",
              "4464": "Communicate using port",
              "4465": "Undefined Access (no effect) Bit 1",
              "4466": "Undefined Access (no effect) Bit 2",
              "4467": "Undefined Access (no effect) Bit 3",
              "4468": "Undefined Access (no effect) Bit 4",
              "4469": "Undefined Access (no effect) Bit 5",
              "4470": "Undefined Access (no effect) Bit 6",
              "4471": "Undefined Access (no effect) Bit 7",
              "4472": "Undefined Access (no effect) Bit 8",
              "4473": "Undefined Access (no effect) Bit 9",
              "4474": "Undefined Access (no effect) Bit 10",
              "4475": "Undefined Access (no effect) Bit 11",
              "4476": "Undefined Access (no effect) Bit 12",
              "4477": "Undefined Access (no effect) Bit 13",
              "4478": "Undefined Access (no effect) Bit 14",
              "4479": "Undefined Access (no effect) Bit 15",
              "4480": "Force process termination",
              "4481": "Create new thread in process",
              "4482": "Set process session ID",
              "4483": "Perform virtual memory operation",
              "4484": "Read from process memory",
              "4485": "Write to process memory",
              "4486": "Duplicate handle into or out of process",
              "4487": "Create a subprocess of process",
              "4488": "Set process quotas",
              "4489": "Set process information",
              "4490": "Query process information",
              "4491": "Set process termination port",
              "4492": "Undefined Access (no effect) Bit 12",
              "4493": "Undefined Access (no effect) Bit 13",
              "4494": "Undefined Access (no effect) Bit 14",
              "4495": "Undefined Access (no effect) Bit 15",
              "4496": "Control profile",
              "4497": "Undefined Access (no effect) Bit 1",
              "4498": "Undefined Access (no effect) Bit 2",
              "4499": "Undefined Access (no effect) Bit 3",
              "4500": "Undefined Access (no effect) Bit 4",
              "4501": "Undefined Access (no effect) Bit 5",
              "4502": "Undefined Access (no effect) Bit 6",
              "4503": "Undefined Access (no effect) Bit 7",
              "4504": "Undefined Access (no effect) Bit 8",
              "4505": "Undefined Access (no effect) Bit 9",
              "4506": "Undefined Access (no effect) Bit 10",
              "4507": "Undefined Access (no effect) Bit 11",
              "4508": "Undefined Access (no effect) Bit 12",
              "4509": "Undefined Access (no effect) Bit 13",
              "4510": "Undefined Access (no effect) Bit 14",
              "4511": "Undefined Access (no effect) Bit 15",
              "4512": "Query section state",
              "4513": "Map section for write",
              "4514": "Map section for read",
              "4515": "Map section for execute",
              "4516": "Extend size",
              "4517": "Undefined Access (no effect) Bit 5",
              "4518": "Undefined Access (no effect) Bit 6",
              "4519": "Undefined Access (no effect) Bit 7",
              "4520": "Undefined Access (no effect) Bit 8",
              "4521": "Undefined Access (no effect) Bit 9",
              "4522": "Undefined Access (no effect) Bit 10",
              "4523": "Undefined Access (no effect) Bit 11",
              "4524": "Undefined Access (no effect) Bit 12",
              "4525": "Undefined Access (no effect) Bit 13",
              "4526": "Undefined Access (no effect) Bit 14",
              "4527": "Undefined Access (no effect) Bit 15",
              "4528": "Query semaphore state",
              "4529": "Modify semaphore state",
              "4530": "Undefined Access (no effect) Bit 2",
              "4531": "Undefined Access (no effect) Bit 3",
              "4532": "Undefined Access (no effect) Bit 4",
              "4533": "Undefined Access (no effect) Bit 5",
              "4534": "Undefined Access (no effect) Bit 6",
              "4535": "Undefined Access (no effect) Bit 7",
              "4536": "Undefined Access (no effect) Bit 8",
              "4537": "Undefined Access (no effect) Bit 9",
              "4538": "Undefined Access (no effect) Bit 10",
              "4539": "Undefined Access (no effect) Bit 11",
              "4540": "Undefined Access (no effect) Bit 12",
              "4541": "Undefined Access (no effect) Bit 13",
              "4542": "Undefined Access (no effect) Bit 14",
              "4543": "Undefined Access (no effect) Bit 15",
              "4544": "Use symbolic link",
              "4545": "Undefined Access (no effect) Bit 1",
              "4546": "Undefined Access (no effect) Bit 2",
              "4547": "Undefined Access (no effect) Bit 3",
              "4548": "Undefined Access (no effect) Bit 4",
              "4549": "Undefined Access (no effect) Bit 5",
              "4550": "Undefined Access (no effect) Bit 6",
              "4551": "Undefined Access (no effect) Bit 7",
              "4552": "Undefined Access (no effect) Bit 8",
              "4553": "Undefined Access (no effect) Bit 9",
              "4554": "Undefined Access (no effect) Bit 10",
              "4555": "Undefined Access (no effect) Bit 11",
              "4556": "Undefined Access (no effect) Bit 12",
              "4557": "Undefined Access (no effect) Bit 13",
              "4558": "Undefined Access (no effect) Bit 14",
              "4559": "Undefined Access (no effect) Bit 15",
              "4560": "Force thread termination",
              "4561": "Suspend or resume thread",
              "4562": "Send an alert to thread",
              "4563": "Get thread context",
              "4564": "Set thread context",
              "4565": "Set thread information",
              "4566": "Query thread information",
              "4567": "Assign a token to the thread",
              "4568": "Cause thread to directly impersonate another thread",
              "4569": "Directly impersonate this thread",
              "4570": "Undefined Access (no effect) Bit 10",
              "4571": "Undefined Access (no effect) Bit 11",
              "4572": "Undefined Access (no effect) Bit 12",
              "4573": "Undefined Access (no effect) Bit 13",
              "4574": "Undefined Access (no effect) Bit 14",
              "4575": "Undefined Access (no effect) Bit 15",
              "4576": "Query timer state",
              "4577": "Modify timer state",
              "4578": "Undefined Access (no effect) Bit 2",
              "4579": "Undefined Access (no effect) Bit 3",
              "4580": "Undefined Access (no effect) Bit 4",
              "4581": "Undefined Access (no effect) Bit 5",
              "4582": "Undefined Access (no effect) Bit 6",
              "4584": "Undefined Access (no effect) Bit 8",
              "4585": "Undefined Access (no effect) Bit 9",
              "4586": "Undefined Access (no effect) Bit 10",
              "4587": "Undefined Access (no effect) Bit 11",
              "4588": "Undefined Access (no effect) Bit 12",
              "4589": "Undefined Access (no effect) Bit 13",
              "4590": "Undefined Access (no effect) Bit 14",
              "4591": "Undefined Access (no effect) Bit 15",
              "4592": "AssignAsPrimary",
              "4593": "Duplicate",
              "4594": "Impersonate",
              "4595": "Query",
              "4596": "QuerySource",
              "4597": "AdjustPrivileges",
              "4598": "AdjustGroups",
              "4599": "AdjustDefaultDacl",
              "4600": "AdjustSessionID",
              "4601": "Undefined Access (no effect) Bit 9",
              "4602": "Undefined Access (no effect) Bit 10",
              "4603": "Undefined Access (no effect) Bit 11",
              "4604": "Undefined Access (no effect) Bit 12",
              "4605": "Undefined Access (no effect) Bit 13",
              "4606": "Undefined Access (no effect) Bit 14",
              "4607": "Undefined Access (no effect) Bit 15",
              "4608": "Create instance of object type",
              "4609": "Undefined Access (no effect) Bit 1",
              "4610": "Undefined Access (no effect) Bit 2",
              "4611": "Undefined Access (no effect) Bit 3",
              "4612": "Undefined Access (no effect) Bit 4",
              "4613": "Undefined Access (no effect) Bit 5",
              "4614": "Undefined Access (no effect) Bit 6",
              "4615": "Undefined Access (no effect) Bit 7",
              "4616": "Undefined Access (no effect) Bit 8",
              "4617": "Undefined Access (no effect) Bit 9",
              "4618": "Undefined Access (no effect) Bit 10",
              "4619": "Undefined Access (no effect) Bit 11",
              "4620": "Undefined Access (no effect) Bit 12",
              "4621": "Undefined Access (no effect) Bit 13",
              "4622": "Undefined Access (no effect) Bit 14",
              "4623": "Undefined Access (no effect) Bit 15",
              "4864": "Query State",
              "4865": "Modify State",
              "5120": "Channel read message",
              "5121": "Channel write message",
              "5122": "Channel query information",
              "5123": "Channel set information",
              "5124": "Undefined Access (no effect) Bit 4",
              "5125": "Undefined Access (no effect) Bit 5",
              "5126": "Undefined Access (no effect) Bit 6",
              "5127": "Undefined Access (no effect) Bit 7",
              "5128": "Undefined Access (no effect) Bit 8",
              "5129": "Undefined Access (no effect) Bit 9",
              "5130": "Undefined Access (no effect) Bit 10",
              "5131": "Undefined Access (no effect) Bit 11",
              "5132": "Undefined Access (no effect) Bit 12",
              "5133": "Undefined Access (no effect) Bit 13",
              "5134": "Undefined Access (no effect) Bit 14",
              "5135": "Undefined Access (no effect) Bit 15",
              "5136": "Assign process",
              "5137": "Set Attributes",
              "5138": "Query Attributes",
              "5139": "Terminate Job",
              "5140": "Set Security Attributes",
              "5141": "Undefined Access (no effect) Bit 5",
              "5142": "Undefined Access (no effect) Bit 6",
              "5143": "Undefined Access (no effect) Bit 7",
              "5144": "Undefined Access (no effect) Bit 8",
              "5145": "Undefined Access (no effect) Bit 9",
              "5146": "Undefined Access (no effect) Bit 10",
              "5147": "Undefined Access (no effect) Bit 11",
              "5148": "Undefined Access (no effect) Bit 12",
              "5149": "Undefined Access (no effect) Bit 13",
              "5150": "Undefined Access (no effect) Bit 14",
              "5151": "Undefined Access (no effect) Bit 15",
              "5376": "ConnectToServer",
              "5377": "ShutdownServer",
              "5378": "InitializeServer",
              "5379": "CreateDomain",
              "5380": "EnumerateDomains",
              "5381": "LookupDomain",
              "5382": "Undefined Access (no effect) Bit 6",
              "5383": "Undefined Access (no effect) Bit 7",
              "5384": "Undefined Access (no effect) Bit 8",
              "5385": "Undefined Access (no effect) Bit 9",
              "5386": "Undefined Access (no effect) Bit 10",
              "5387": "Undefined Access (no effect) Bit 11",
              "5388": "Undefined Access (no effect) Bit 12",
              "5389": "Undefined Access (no effect) Bit 13",
              "5390": "Undefined Access (no effect) Bit 14",
              "5391": "Undefined Access (no effect) Bit 15",
              "5392": "ReadPasswordParameters",
              "5393": "WritePasswordParameters",
              "5394": "ReadOtherParameters",
              "5395": "WriteOtherParameters",
              "5396": "CreateUser",
              "5397": "CreateGlobalGroup",
              "5398": "CreateLocalGroup",
              "5399": "GetLocalGroupMembership",
              "5400": "ListAccounts",
              "5401": "LookupIDs",
              "5402": "AdministerServer",
              "5403": "Undefined Access (no effect) Bit 11",
              "5404": "Undefined Access (no effect) Bit 12",
              "5405": "Undefined Access (no effect) Bit 13",
              "5406": "Undefined Access (no effect) Bit 14",
              "5407": "Undefined Access (no effect) Bit 15",
              "5408": "ReadInformation",
              "5409": "WriteAccount",
              "5410": "AddMember",
              "5411": "RemoveMember",
              "5412": "ListMembers",
              "5413": "Undefined Access (no effect) Bit 5",
              "5414": "Undefined Access (no effect) Bit 6",
              "5415": "Undefined Access (no effect) Bit 7",
              "5416": "Undefined Access (no effect) Bit 8",
              "5417": "Undefined Access (no effect) Bit 9",
              "5418": "Undefined Access (no effect) Bit 10",
              "5419": "Undefined Access (no effect) Bit 11",
              "5420": "Undefined Access (no effect) Bit 12",
              "5421": "Undefined Access (no effect) Bit 13",
              "5422": "Undefined Access (no effect) Bit 14",
              "5423": "Undefined Access (no effect) Bit 15",
              "5424": "AddMember",
              "5425": "RemoveMember",
              "5426": "ListMembers",
              "5427": "ReadInformation",
              "5428": "WriteAccount",
              "5429": "Undefined Access (no effect) Bit 5",
              "5430": "Undefined Access (no effect) Bit 6",
              "5431": "Undefined Access (no effect) Bit 7",
              "5432": "Undefined Access (no effect) Bit 8",
              "5433": "Undefined Access (no effect) Bit 9",
              "5434": "Undefined Access (no effect) Bit 10",
              "5435": "Undefined Access (no effect) Bit 11",
              "5436": "Undefined Access (no effect) Bit 12",
              "5437": "Undefined Access (no effect) Bit 13",
              "5438": "Undefined Access (no effect) Bit 14",
              "5439": "Undefined Access (no effect) Bit 15",
              "5440": "ReadGeneralInformation",
              "5441": "ReadPreferences",
              "5442": "WritePreferences",
              "5443": "ReadLogon",
              "5444": "ReadAccount",
              "5445": "WriteAccount",
              "5446": "ChangePassword (with knowledge of old password)",
              "5447": "SetPassword (without knowledge of old password)",
              "5448": "ListGroups",
              "5449": "ReadGroupMembership",
              "5450": "ChangeGroupMembership",
              "5451": "Undefined Access (no effect) Bit 11",
              "5452": "Undefined Access (no effect) Bit 12",
              "5453": "Undefined Access (no effect) Bit 13",
              "5454": "Undefined Access (no effect) Bit 14",
              "5455": "Undefined Access (no effect) Bit 15",
              "5632": "View non-sensitive policy information",
              "5633": "View system audit requirements",
              "5634": "Get sensitive policy information",
              "5635": "Modify domain trust relationships",
              "5636": "Create special accounts (for assignment of user rights)",
              "5637": "Create a secret object",
              "5638": "Create a privilege",
              "5639": "Set default quota limits",
              "5640": "Change system audit requirements",
              "5641": "Administer audit log attributes",
              "5642": "Enable/Disable LSA",
              "5643": "Lookup Names/SIDs",
              "5648": "Change secret value",
              "5649": "Query secret value",
              "5650": "Undefined Access (no effect) Bit 2",
              "5651": "Undefined Access (no effect) Bit 3",
              "5652": "Undefined Access (no effect) Bit 4",
              "5653": "Undefined Access (no effect) Bit 5",
              "5654": "Undefined Access (no effect) Bit 6",
              "5655": "Undefined Access (no effect) Bit 7",
              "5656": "Undefined Access (no effect) Bit 8",
              "5657": "Undefined Access (no effect) Bit 9",
              "5658": "Undefined Access (no effect) Bit 10",
              "5659": "Undefined Access (no effect) Bit 11",
              "5660": "Undefined Access (no effect) Bit 12",
              "5661": "Undefined Access (no effect) Bit 13",
              "5662": "Undefined Access (no effect) Bit 14",
              "5663": "Undefined Access (no effect) Bit 15",
              "5664": "Query trusted domain name/SID",
              "5665": "Retrieve the controllers in the trusted domain",
              "5666": "Change the controllers in the trusted domain",
              "5667": "Query the Posix ID offset assigned to the trusted domain",
              "5668": "Change the Posix ID offset assigned to the trusted domain",
              "5669": "Undefined Access (no effect) Bit 5",
              "5670": "Undefined Access (no effect) Bit 6",
              "5671": "Undefined Access (no effect) Bit 7",
              "5672": "Undefined Access (no effect) Bit 8",
              "5673": "Undefined Access (no effect) Bit 9",
              "5674": "Undefined Access (no effect) Bit 10",
              "5675": "Undefined Access (no effect) Bit 11",
              "5676": "Undefined Access (no effect) Bit 12",
              "5677": "Undefined Access (no effect) Bit 13",
              "5678": "Undefined Access (no effect) Bit 14",
              "5679": "Undefined Access (no effect) Bit 15",
              "5680": "Query account information",
              "5681": "Change privileges assigned to account",
              "5682": "Change quotas assigned to account",
              "5683": "Change logon capabilities assigned to account",
              "5684": "Change the Posix ID offset assigned to the accounted domain",
              "5685": "Undefined Access (no effect) Bit 5",
              "5686": "Undefined Access (no effect) Bit 6",
              "5687": "Undefined Access (no effect) Bit 7",
              "5688": "Undefined Access (no effect) Bit 8",
              "5689": "Undefined Access (no effect) Bit 9",
              "5690": "Undefined Access (no effect) Bit 10",
              "5691": "Undefined Access (no effect) Bit 11",
              "5692": "Undefined Access (no effect) Bit 12",
              "5693": "Undefined Access (no effect) Bit 13",
              "5694": "Undefined Access (no effect) Bit 14",
              "5695": "Undefined Access (no effect) Bit 15",
              "5696": "KeyedEvent Wait",
              "5697": "KeyedEvent Wake",
              "5698": "Undefined Access (no effect) Bit 2",
              "5699": "Undefined Access (no effect) Bit 3",
              "5700": "Undefined Access (no effect) Bit 4",
              "5701": "Undefined Access (no effect) Bit 5",
              "5702": "Undefined Access (no effect) Bit 6",
              "5703": "Undefined Access (no effect) Bit 7",
              "5704": "Undefined Access (no effect) Bit 8",
              "5705": "Undefined Access (no effect) Bit 9",
              "5706": "Undefined Access (no effect) Bit 10",
              "5707": "Undefined Access (no effect) Bit 11",
              "5708": "Undefined Access (no effect) Bit 12",
              "5709": "Undefined Access (no effect) Bit 13",
              "5710": "Undefined Access (no effect) Bit 14",
              "5711": "Undefined Access (no effect) Bit 15",
              "6656": "Enumerate desktops",
              "6657": "Read attributes",
              "6658": "Access Clipboard",
              "6659": "Create desktop",
              "6660": "Write attributes",
              "6661": "Access global atoms",
              "6662": "Exit windows",
              "6663": "Unused Access Flag",
              "6664": "Include this windowstation in enumerations",
              "6665": "Read screen",
              "6672": "Read Objects",
              "6673": "Create window",
              "6674": "Create menu",
              "6675": "Hook control",
              "6676": "Journal (record)",
              "6677": "Journal (playback)",
              "6678": "Include this desktop in enumerations",
              "6679": "Write objects",
              "6680": "Switch to this desktop",
              "6912": "Administer print server",
              "6913": "Enumerate printers",
              "6930": "Full Control",
              "6931": "Print",
              "6948": "Administer Document",
              "7168": "Connect to service controller",
              "7169": "Create a new service",
              "7170": "Enumerate services",
              "7171": "Lock service database for exclusive access",
              "7172": "Query service database lock state",
              "7173": "Set last-known-good state of service database",
              "7184": "Query service configuration information",
              "7185": "Set service configuration information",
              "7186": "Query status of service",
              "7187": "Enumerate dependencies of service",
              "7188": "Start the service",
              "7189": "Stop the service",
              "7190": "Pause or continue the service",
              "7191": "Query information from service",
              "7192": "Issue service-specific control commands",
              "7424": "DDE Share Read",
              "7425": "DDE Share Write",
              "7426": "DDE Share Initiate Static",
              "7427": "DDE Share Initiate Link",
              "7428": "DDE Share Request",
              "7429": "DDE Share Advise",
              "7430": "DDE Share Poke",
              "7431": "DDE Share Execute",
              "7432": "DDE Share Add Items",
              "7433": "DDE Share List Items",
              "7680": "Create Child",
              "7681": "Delete Child",
              "7682": "List Contents",
              "7683": "Write Self",
              "7684": "Read Property",
              "7685": "Write Property",
              "7686": "Delete Tree",
              "7687": "List Object",
              "7688": "Control Access",
              "7689": "Undefined Access (no effect) Bit 9",
              "7690": "Undefined Access (no effect) Bit 10",
              "7691": "Undefined Access (no effect) Bit 11",
              "7692": "Undefined Access (no effect) Bit 12",
              "7693": "Undefined Access (no effect) Bit 13",
              "7694": "Undefined Access (no effect) Bit 14",
              "7695": "Undefined Access (no effect) Bit 15",
              "7936": "Audit Set System Policy",
              "7937": "Audit Query System Policy",
              "7938": "Audit Set Per User Policy",
              "7939": "Audit Query Per User Policy",
              "7940": "Audit Enumerate Users",
              "7941": "Audit Set Options",
              "7942": "Audit Query Options",
              "8064": "Port sharing (read)",
              "8065": "Port sharing (write)",
              "8096": "Default credentials",
              "8097": "Credentials manager",
              "8098": "Fresh credentials",
              "8192": "Kerberos",
              "8193": "Preshared key",
              "8194": "Unknown authentication",
              "8195": "DES",
              "8196": "3DES",
              "8197": "MD5",
              "8198": "SHA1",
              "8199": "Local computer",
              "8200": "Remote computer",
              "8201": "No state",
              "8202": "Sent first (SA) payload",
              "8203": "Sent second (KE) payload",
              "8204": "Sent third (ID) payload",
              "8205": "Initiator",
              "8206": "Responder",
              "8207": "No state",
              "8208": "Sent first (SA) payload",
              "8209": "Sent final payload",
              "8210": "Complete",
              "8211": "Unknown",
              "8212": "Transport",
              "8213": "Tunnel",
              "8214": "IKE/AuthIP DoS prevention mode started",
              "8215": "IKE/AuthIP DoS prevention mode stopped",
              "8216": "Enabled",
              "8217": "Not enabled",
              "8218": "No state",
              "8219": "Sent first (EM attributes) payload",
              "8220": "Sent second (SSPI) payload",
              "8221": "Sent third (hash) payload",
              "8222": "IKEv1",
              "8223": "AuthIP",
              "8224": "Anonymous",
              "8225": "NTLM V2",
              "8226": "CGA",
              "8227": "Certificate",
              "8228": "SSL",
              "8229": "None",
              "8230": "DH group 1",
              "8231": "DH group 2",
              "8232": "DH group 14",
              "8233": "DH group ECP 256",
              "8234": "DH group ECP 384",
              "8235": "AES-128",
              "8236": "AES-192",
              "8237": "AES-256",
              "8238": "Certificate ECDSA P256",
              "8239": "Certificate ECDSA P384",
              "8240": "SSL ECDSA P256",
              "8241": "SSL ECDSA P384",
              "8242": "SHA 256",
              "8243": "SHA 384",
              "8244": "IKEv2",
              "8245": "EAP payload sent",
              "8246": "Authentication payload sent",
              "8247": "EAP",
              "8248": "DH group 24",
              "8272": "System",
              "8273": "Logon/Logoff",
              "8274": "Object Access",
              "8275": "Privilege Use",
              "8276": "Detailed Tracking",
              "8277": "Policy Change",
              "8278": "Account Management",
              "8279": "DS Access",
              "8280": "Account Logon",
              "8448": "Success removed",
              "8449": "Success Added",
              "8450": "Failure removed",
              "8451": "Failure Added",
              "8452": "Success include removed",
              "8453": "Success include added",
              "8454": "Success exclude removed",
              "8455": "Success exclude added",
              "8456": "Failure include removed",
              "8457": "Failure include added",
              "8458": "Failure exclude removed",
              "8459": "Failure exclude added",
              "12288": "Security State Change",
              "12289": "Security System Extension",
              "12290": "System Integrity",
              "12291": "IPsec Driver",
              "12292": "Other System Events",
              "12544": "Logon",
              "12545": "Logoff",
              "12546": "Account Lockout",
              "12547": "IPsec Main Mode",
              "12548": "Special Logon",
              "12549": "IPsec Quick Mode",
              "12550": "IPsec Extended Mode",
              "12551": "Other Logon/Logoff Events",
              "12552": "Network Policy Server",
              "12553": "User / Device Claims",
              "12554": "Group Membership",
              "12800": "File System",
              "12801": "Registry",
              "12802": "Kernel Object",
              "12803": "SAM",
              "12804": "Other Object Access Events",
              "12805": "Certification Services",
              "12806": "Application Generated",
              "12807": "Handle Manipulation",
              "12808": "File Share",
              "12809": "Filtering Platform Packet Drop",
              "12810": "Filtering Platform Connection",
              "12811": "Detailed File Share",
              "12812": "Removable Storage",
              "12813": "Central Policy Staging",
              "13056": "Sensitive Privilege Use",
              "13057": "Non Sensitive Privilege Use",
              "13058": "Other Privilege Use Events",
              "13312": "Process Creation",
              "13313": "Process Termination",
              "13314": "DPAPI Activity",
              "13315": "RPC Events",
              "13316": "Plug and Play Events",
              "13317": "Token Right Adjusted Events",
              "13568": "Audit Policy Change",
              "13569": "Authentication Policy Change",
              "13570": "Authorization Policy Change",
              "13571": "MPSSVC Rule-Level Policy Change",
              "13572": "Filtering Platform Policy Change",
              "13573": "Other Policy Change Events",
              "13824": "User Account Management",
              "13825": "Computer Account Management",
              "13826": "Security Group Management",
              "13827": "Distribution Group Management",
              "13828": "Application Group Management",
              "13829": "Other Account Management Events",
              "14080": "Directory Service Access",
              "14081": "Directory Service Changes",
              "14082": "Directory Service Replication",
              "14083": "Detailed Directory Service Replication",
              "14336": "Credential Validation",
              "14337": "Kerberos Service Ticket Operations",
              "14338": "Other Account Logon Events",
              "14339": "Kerberos Authentication Service",
              "14592": "Inbound",
              "14593": "Outbound",
              "14594": "Forward",
              "14595": "Bidirectional",
              "14596": "IP Packet",
              "14597": "Transport",
              "14598": "Forward",
              "14599": "Stream",
              "14600": "Datagram Data",
              "14601": "ICMP Error",
              "14602": "MAC 802.3",
              "14603": "MAC Native",
              "14604": "vSwitch",
              "14608": "Resource Assignment",
              "14609": "Listen",
              "14610": "Receive/Accept",
              "14611": "Connect",
              "14612": "Flow Established",
              "14614": "Resource Release",
              "14615": "Endpoint Closure",
              "14616": "Connect Redirect",
              "14617": "Bind Redirect",
              "14624": "Stream Packet",
              "14640": "ICMP Echo-Request",
              "14641": "vSwitch Ingress",
              "14642": "vSwitch Egress",
              "14672": "<Binary>",
              "14673": "[NULL]",
              "14674": "Value Added",
              "14675": "Value Deleted",
              "14676": "Active Directory Domain Services",
              "14677": "Active Directory Lightweight Directory Services",
              "14678": "Yes",
              "14679": "No",
              "14680": "Value Added With Expiration Time",
              "14681": "Value Deleted With Expiration Time",
              "14688": "Value Auto Deleted With Expiration Time",
              "16384": "Add",
              "16385": "Delete",
              "16386": "Boot-time",
              "16387": "Persistent",
              "16388": "Not persistent",
              "16389": "Block",
              "16390": "Permit",
              "16391": "Callout",
              "16392": "MD5",
              "16393": "SHA-1",
              "16394": "SHA-256",
              "16395": "AES-GCM 128",
              "16396": "AES-GCM 192",
              "16397": "AES-GCM 256",
              "16398": "DES",
              "16399": "3DES",
              "16400": "AES-128",
              "16401": "AES-192",
              "16402": "AES-256",
              "16403": "Transport",
              "16404": "Tunnel",
              "16405": "Responder",
              "16406": "Initiator",
              "16407": "AES-GMAC 128",
              "16408": "AES-GMAC 192",
              "16409": "AES-GMAC 256",
              "16416": "AuthNoEncap Transport",
              "16896": "Enable WMI Account",
              "16897": "Execute Method",
              "16898": "Full Write",
              "16899": "Partial Write",
              "16900": "Provider Write",
              "16901": "Remote Access",
              "16902": "Subscribe",
              "16903": "Publish"
            },
            "AccessMaskDescriptions": {
              "0x00000001": "Create Child",
              "0x00000002": "Delete Child",
              "0x00000004": "List Contents",
              "0x00000008": "SELF",
              "0x00000010": "Read Property",
              "0x00000020": "Write Property",
              "0x00000040": "Delete Treee",
              "0x00000080": "List Object",
              "0x00000100": "Control Access",
              "0x00010000": "DELETE",
              "0x00020000": "READ_CONTROL",
              "0x00040000": "WRITE_DAC",
              "0x00080000": "WRITE_OWNER",
              "0x00100000": "SYNCHRONIZE",
              "0x00F00000": "STANDARD_RIGHTS_REQUIRED",
              "0x001F0000": "STANDARD_RIGHTS_ALL",
              "0x0000FFFF": "SPECIFIC_RIGHTS_ALL",
              "0x01000000": "ADS_RIGHT_ACCESS_SYSTEM_SECURITY",
              "0x10000000": "ADS_RIGHT_GENERIC_ALL",
              "0x20000000": "ADS_RIGHT_GENERIC_EXECUTE",
              "0x40000000": "ADS_RIGHT_GENERIC_WRITE",
              "0x80000000": "ADS_RIGHT_GENERIC_READ"
            }
          },
          "source": "def split(String s) {\n  def f = new ArrayList();\n  int last = 0;\n  for (; last < s.length() && Character.isWhitespace(s.charAt(last)); last++) {}\n  for (def i = last; i < s.length(); i++) {\n    if (!Character.isWhitespace(s.charAt(i))) {\n      continue;\n    }\n    f.add(s.substring(last, i));\n    for (; i < s.length() && Character.isWhitespace(s.charAt(i)); i++) {}\n    last = i;\n  }\n  f.add(s.substring(last));\n  return f;\n}\nif (ctx?.winlog?.event_data?.FailureReason != null) {\n  def code = ctx.winlog.event_data.FailureReason.replace(\"%%\",\"\");\n  if (params.descriptions.containsKey(code)) {\n    if (ctx?.winlog?.logon == null ) {\n      HashMap hm = new HashMap();\n      ctx.winlog.put(\"logon\", hm);\n    }\n    if (ctx?.winlog?.logon?.failure == null) {\n      HashMap hm = new HashMap();\n      ctx.winlog.logon.put(\"failure\", hm);\n    }\n    ctx.winlog.logon.failure.put(\"reason\", params.descriptions[code]);\n  }\n}\nif (ctx?.winlog?.event_data?.AuditPolicyChanges != null) {\n  ArrayList results = new ArrayList();\n  for (elem in ctx.winlog.event_data.AuditPolicyChanges.splitOnToken(\",\")) {\n    def code = elem.replace(\"%%\",\"\").trim();\n    if (params.descriptions.containsKey(code)) {\n      results.add(params.descriptions[code]);\n    }\n  }\n  if (results.length > 0) {\n    ctx.winlog.event_data.put(\"AuditPolicyChangesDescription\", results);\n  }\n}\nif (ctx?.winlog?.event_data?.AccessList != null) {\n  ArrayList results = new ArrayList();\n  for (elem in ctx.winlog.event_data.AccessList.splitOnToken(\" \")) {\n    def code = elem.replace(\"%%\",\"\").trim();\n    if (params.descriptions.containsKey(code)) {\n      results.add(params.descriptions[code]);\n    }\n  }\n  if (results.length > 0) {\n    ctx.winlog.event_data.put(\"AccessListDescription\", results);\n  }\n}\nif (ctx?.winlog?.event_data?.AccessMask != null) {\n  ArrayList results = new ArrayList();\n  for (elem in split(ctx.winlog.event_data.AccessMask)) {\n    def mask = elem.replace(\"%%\",\"\").trim();\n    if (mask == \"\") {\n      continue;\n    }\n    Long accessMask = Long.decode(mask);\n    for (entry in params.AccessMaskDescriptions.entrySet()) {\n      Long accessFlag = Long.decode(entry.getKey());\n      if ((accessMask.longValue() & accessFlag.longValue()) == accessFlag.longValue()) {\n        results.add(entry.getValue());\n      }\n    }\n  }\n  if (results.length > 0) {\n    ctx.winlog.event_data.put(\"_AccessMaskDescription\", results);\n  }\n}"
        }
      },
      {
        "foreach": {
          "field": "winlog.event_data._AccessMaskDescription",
          "processor": {
            "append": {
              "field": "winlog.event_data.AccessMaskDescription",
              "value": "{{{_ingest._value}}}",
              "allow_duplicates": false,
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.winlog?.event_data?._AccessMaskDescription != null && ctx.winlog.event_data._AccessMaskDescription instanceof List"
        }
      },
      {
        "remove": {
          "field": "winlog.event_data._AccessMaskDescription",
          "ignore_failure": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "4625 and 4776 Set Status and SubStatus",
          "description": "4625 and 4776 Set Status and SubStatus",
          "params": {
            "0xc000005e": "There are currently no logon servers available to service the logon request.",
            "0xc0000064": "User logon with misspelled or bad user account",
            "0xc000006a": "User logon with misspelled or bad password",
            "0xc000006d": "This is either due to a bad username or authentication information",
            "0xc000006e": "Unknown user name or bad password.",
            "0xc000006f": "User logon outside authorized hours",
            "0xc0000070": "User logon from unauthorized workstation",
            "0xc0000071": "User logon with expired password",
            "0xc0000072": "User logon to account disabled by administrator",
            "0xc00000dc": "Indicates the Sam Server was in the wrong state to perform the desired operation.",
            "0xc0000133": "Clocks between DC and other computer too far out of sync",
            "0xc000015b": "The user has not been granted the requested logon type (aka logon right) at this machine",
            "0xc000018c": "The logon request failed because the trust relationship between the primary domain and the trusted domain failed.",
            "0xc0000192": "An attempt was made to logon, but the Netlogon service was not started.",
            "0xc0000193": "User logon with expired account",
            "0xc0000224": "User is required to change password at next logon",
            "0xc0000225": "Evidently a bug in Windows and not a risk",
            "0xc0000234": "User logon with account locked",
            "0xc00002ee": "Failure Reason: An Error occurred during Logon",
            "0xc0000413": "Logon Failure: The machine you are logging onto is protected by an authentication firewall. The specified account is not allowed to authenticate to the machine.",
            "0xc0000371": "The local account store does not contain secret material for the specified account",
            "0x0": "Status OK."
          },
          "source": "if (ctx?.winlog?.event_data?.Status == null ||\n    ctx?.event?.code == null ||\n    ![\"4625\", \"4776\"].contains(ctx.event.code)) {\n  return;\n}\nif (params.containsKey(ctx.winlog.event_data.Status)) {\n  if (ctx?.winlog?.logon == null ) {\n      HashMap hm = new HashMap();\n      ctx.winlog.put(\"logon\", hm);\n  }\n  if (ctx?.winlog?.logon?.failure == null) {\n      HashMap hm = new HashMap();\n      ctx.winlog.logon.put(\"failure\", hm);\n  }\n  ctx.winlog.logon.failure.put(\"status\", params[ctx.winlog.event_data.Status]);\n}\nif (ctx?.winlog?.event_data?.SubStatus == null || !params.containsKey(ctx.winlog.event_data.SubStatus)) {\n  return;\n}\nif (ctx?.winlog?.logon == null ) {\n  HashMap hm = new HashMap();\n  ctx.winlog.put(\"logon\", hm);\n}\nif (ctx?.winlog?.logon?.failure == null) {\n  HashMap hm = new HashMap();\n  ctx.winlog.logon.put(\"failure\", hm);\n}\nctx.winlog.logon.failure.put(\"sub_status\", params[ctx.winlog.event_data.SubStatus]);"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Set Trust Type",
          "description": "Set Trust Type",
          "params": {
            "1": "TRUST_TYPE_DOWNLEVEL",
            "2": "TRUST_TYPE_UPLEVEL",
            "3": "TRUST_TYPE_MIT",
            "4": "TRUST_TYPE_DCE"
          },
          "source": "if (ctx?.winlog?.event_data?.TdoType == null) {\n  return;\n}\nif (!params.containsKey(ctx.winlog.event_data.TdoType)) {\n  return;\n}\nctx.winlog.put(\"trustType\", params[ctx.winlog.event_data.TdoType]);"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Set Trust Direction",
          "description": "Set Trust Direction",
          "params": {
            "0": "TRUST_DIRECTION_DISABLED",
            "1": "TRUST_DIRECTION_INBOUND",
            "2": "TRUST_DIRECTION_OUTBOUND",
            "3": "TRUST_DIRECTION_BIDIRECTIONAL"
          },
          "source": "if (ctx?.winlog?.event_data?.TdoDirection == null) {\n  return;\n}\nif (!params.containsKey(ctx.winlog.event_data.TdoDirection)) {\n  return;\n}\nctx.winlog.put(\"trustDirection\", params[ctx.winlog.event_data.TdoDirection]);"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Set Trust Attributes",
          "description": "Set Trust Attributes",
          "params": {
            "0": "UNDEFINED",
            "1": "TRUST_ATTRIBUTE_NON_TRANSITIVE",
            "2": "TRUST_ATTRIBUTE_UPLEVEL_ONLY",
            "4": "TRUST_ATTRIBUTE_QUARANTINED_DOMAIN",
            "8": "TRUST_ATTRIBUTE_FOREST_TRANSITIVE",
            "16": "TRUST_ATTRIBUTE_CROSS_ORGANIZATION",
            "32": "TRUST_ATTRIBUTE_WITHIN_FOREST",
            "64": "TRUST_ATTRIBUTE_TREAT_AS_EXTERNAL",
            "128": "TRUST_ATTRIBUTE_USES_RC4_ENCRYPTION",
            "512": "TRUST_ATTRIBUTE_CROSS_ORGANIZATION_NO_TGT_DELEGATION",
            "1024": "TRUST_ATTRIBUTE_PIM_TRUST"
          },
          "source": "if (ctx?.winlog?.event_data?.TdoAttributes == null) {\n  return;\n}\nif (!params.containsKey(ctx.winlog.event_data.TdoAttributes)) {\n  return;\n}\nctx.winlog.put(\"trustAttribute\", params[ctx.winlog.event_data.TdoAttributes]);"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Add Session Events",
          "description": "Add Session Events",
          "source": "if (ctx?.event?.code == null ||\n    ![\"4778\", \"4779\"].contains(ctx.event.code)) {\n  return;\n}\n//AccountName to user.name and related.user\nif (ctx?.winlog?.event_data?.AccountName != null) {\n  if (ctx?.user == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"user\", hm);\n  }\n  if (ctx?.related == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"related\", hm);\n  }\n  if (ctx?.related?.user == null) {\n    ArrayList al = new ArrayList();\n    ctx.related.put(\"user\", al);\n  }\n  ctx.user.put(\"name\", ctx.winlog.event_data.AccountName);\n  if (!ctx.related.user.contains(ctx.winlog.event_data.AccountName)) {\n    ctx.related.user.add(ctx.winlog.event_data.AccountName);\n  }\n}\n\n//AccountDomain to user.domain\nif (ctx?.winlog?.event_data?.AccountDomain != null) {\n  if (ctx?.user == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"user\", hm);\n  }\n  ctx.user.put(\"domain\", ctx.winlog.event_data.AccountDomain);\n}\n\n//ClientAddress to source.ip and related.ip\nif (ctx?.winlog?.event_data?.ClientAddress != null &&\n    ctx.winlog.event_data.ClientAddress != \"-\") {\n  if (ctx?.source == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"source\", hm);\n  }\n  if (ctx?.related == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"related\", hm);\n  }\n  if (ctx?.related?.ip == null) {\n    ArrayList al = new ArrayList();\n    ctx.related.put(\"ip\", al);\n  }\n  ctx.source.put(\"ip\", ctx.winlog.event_data.ClientAddress);\n  if (!ctx.related.ip.contains(ctx.winlog.event_data.ClientAddress)) {\n    ctx.related.ip.add(ctx.winlog.event_data.ClientAddress);\n  }\n}\n\n//ClientName to source.domain\nif (ctx?.winlog?.event_data?.ClientName != null) {\n  if (ctx?.source == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"source\", hm);\n  }\n  ctx.source.put(\"domain\", ctx.winlog.event_data.ClientName);\n}\n\n//LogonID to winlog.logon.id\nif (ctx?.winlog?.event_data?.LogonID != null) {\n  if (ctx?.winlog?.logon == null) {\n    HashMap hm = new HashMap();\n    ctx.winlog.put(\"logon\", hm);\n  }\n  ctx.winlog.logon.put(\"id\", ctx.winlog.event_data.LogonID);\n}"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Copy Target User",
          "description": "Copy Target User",
          "source": "if (ctx?.event?.code == null ||\n    ![\"4624\", \"4625\", \"4634\", \"4647\", \"4648\", \"4768\", \"4769\", \"4770\",\n      \"4771\", \"4776\", \"4964\"].contains(ctx.event.code)) {\n  return;\n}\n\ndef targetUserId = ctx?.winlog?.event_data?.TargetUserSid;\nif (targetUserId == null) {\n  targetUserId = ctx?.winlog?.event_data?.TargetSid;\n}\n\n//TargetUserSid to user.id or user.target.id\nif (targetUserId != null) {\n  if (ctx?.user == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"user\", hm);\n  }\n  if (ctx?.user?.id == null) {\n    ctx.user.put(\"id\", targetUserId);\n  } else {\n    if (ctx?.user?.target == null) {\n      HashMap hm = new HashMap();\n      ctx.user.put(\"target\", hm);\n    }\n    ctx.user.target.put(\"id\", targetUserId);\n  }\n}\n\n//TargetUserName to related.user and user.name or user.target.name\nif (ctx?.winlog?.event_data?.TargetUserName != null) {\n  def tun = ctx.winlog.event_data.TargetUserName.splitOnToken(\"@\");\n  if (ctx?.user == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"user\", hm);\n  }\n  if (ctx?.user?.name == null) {\n    ctx.user.put(\"name\", tun[0]);\n  } else {\n    if (ctx?.user?.target == null) {\n      HashMap hm = new HashMap();\n      ctx.user.put(\"target\", hm);\n    }\n    ctx.user.target.put(\"name\", tun[0]);\n  }\n  if (ctx?.related == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"related\", hm);\n  }\n  if (ctx?.related?.user == null) {\n    ArrayList al = new ArrayList();\n    ctx.related.put(\"user\", al);\n  }\n  if (!ctx.related.user.contains(tun[0])) {\n    ctx.related.user.add(tun[0]);\n  }\n}\n//TargetUserDomain to user.domain or user.target.domain\nif (ctx?.winlog?.event_data?.TargetDomainName != null) {\n  if (ctx?.user == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"user\", hm);\n  }\n  if (ctx?.user?.domain == null) {\n    ctx.user.put(\"domain\", ctx.winlog.event_data.TargetDomainName);\n  } else {\n    if (ctx?.user?.target == null){\n      HashMap hm = new HashMap();\n      ctx.user.put(\"target\", hm);\n    }\n    ctx.user.target.put(\"domain\", ctx.winlog.event_data.TargetDomainName);\n  }\n}"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Copy MemberName to User and User to Group",
          "description": "Copy MemberName to User and User to Group",
          "source": "if (ctx?.event?.code == null ||\n    ![\"4727\", \"4728\", \"4729\", \"4730\", \"4731\", \"4732\", \"4733\", \"4734\", \"4735\",\n      \"4737\", \"4744\", \"4745\", \"4746\", \"4747\", \"4748\", \"4749\", \"4750\", \"4751\",\n      \"4752\", \"4753\", \"4754\", \"4755\", \"4756\", \"4757\", \"4758\", \"4759\", \"4760\",\n      \"4761\", \"4762\", \"4763\", \"4764\", \"4799\"].contains(ctx.event.code)) {\n  return;\n}\nif (ctx?.winlog?.event_data?.MemberName != null) {\n  def memberNameParts = ctx.winlog.event_data.MemberName.splitOnToken(\",\");\n  def memberName = memberNameParts[0].replace(\"CN=\",\"\").replace(\"cn=\",\"\");\n  if (ctx?.related == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"related\", hm);\n  }\n  if (ctx?.related?.user == null) {\n    ArrayList al = new ArrayList();\n    ctx.related.put(\"user\", al);\n  }\n  if (ctx?.user == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"user\", hm);\n  }\n  if (ctx?.user?.target == null){\n    HashMap hm = new HashMap();\n    ctx.user.put(\"target\", hm);\n  }\n  ctx.user.target.put(\"name\", memberName);\n  if (!ctx.related.user.contains(memberName)) {\n    ctx.related.user.add(memberName);\n  }\n  if (memberNameParts.length >= 4) {\n    def domain = memberNameParts[3].replace(\"DC=\", \"\").replace(\"dc=\", \"\");\n    ctx.user.target.put(\"domain\", domain);\n  }\n}\nif (ctx?.winlog?.event_data?.TargetUserSid != null) {\n  if (ctx?.group == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"group\", hm);\n  }\n  ctx.group.put(\"id\", ctx.winlog.event_data.TargetUserSid);\n}\nif (ctx?.winlog?.event_data?.TargetSid != null) {\n  if (ctx?.group == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"group\", hm);\n  }\n  ctx.group.put(\"id\", ctx.winlog.event_data.TargetSid);\n}\nif (ctx?.winlog?.event_data?.TargetUserName != null) {\n  if (ctx?.group == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"group\", hm);\n  }\n  ctx.group.put(\"name\", ctx.winlog.event_data.TargetUserName);\n}\nif (ctx?.winlog?.event_data?.TargetDomainName != null) {\n  if (ctx?.group == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"group\", hm);\n  }\n  def domain = ctx.winlog.event_data.TargetDomainName.replace(\"DC=\", \"\").replace(\"dc=\", \"\");\n  ctx.group.put(\"domain\", domain);\n}\nif (ctx?.user?.target != null) {\n  if (ctx?.user?.target?.group == null) {\n    HashMap hm = new HashMap();\n    ctx.user.target.put(\"group\", hm);\n  }\n  if (ctx?.group?.id != null) {\n    ctx.user.target.group.put(\"id\", ctx.group.id);\n  } \n  if (ctx?.group?.name != null) {\n    ctx.user.target.group.put(\"name\", ctx.group.name);\n  } \n  if (ctx?.group?.domain != null) {\n    ctx.user.target.group.put(\"domain\", ctx.group.domain);\n  }\n}"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Copy Target User to Computer Object",
          "description": "Copy Target User to Computer Object",
          "source": "if (ctx?.event?.code == null ||\n    ![\"4741\", \"4742\", \"4743\"].contains(ctx.event.code)) {\n  return;\n}\nif (ctx?.winlog?.event_data?.TargetSid != null) {\n  if (ctx?.winlog?.computerObject == null) {\n    HashMap hm = new HashMap();\n    ctx.winlog.put(\"computerObject\", hm);\n  }\n  ctx.winlog.computerObject.put(\"id\", ctx.winlog.event_data.TargetSid);\n}\nif (ctx?.winlog?.event_data?.TargetUserName != null) {\n  if (ctx?.winlog?.computerObject == null) {\n    HashMap hm = new HashMap();\n    ctx.winlog.put(\"computerObject\", hm);\n  }\n  ctx.winlog.computerObject.put(\"name\", ctx.winlog.event_data.TargetUserName);\n}\nif (ctx?.winlog?.event_data?.TargetDomainName != null) {\n  if (ctx?.winlog?.computerObject == null) {\n    HashMap hm = new HashMap();\n    ctx.winlog.put(\"computerObject\", hm);\n  }\n  ctx.winlog.computerObject.put(\"domain\", ctx.winlog.event_data.TargetDomainName);\n}"
        }
      },
      {
        "set": {
          "field": "winlog.logon.id",
          "copy_from": "winlog.event_data.TargetLogonId",
          "ignore_failure": false,
          "if": "ctx?.event?.code != null && [\"4634\", \"4647\", \"4964\"].contains(ctx.event.code)"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Copy Subject User from Event Data",
          "description": "Copy Subject User from Event Data",
          "source": "if (ctx?.event?.code == null ||\n    ![\"4657\", \"4670\", \"4672\", \"4673\", \"4674\", \"4688\", \"4689\", \"4697\",\n      \"4698\", \"4699\", \"4700\", \"4701\", \"4702\", \"4706\", \"4707\", \"4713\",\n      \"4716\", \"4717\", \"4718\", \"4719\", \"4720\", \"4722\", \"4723\", \"4724\",\n      \"4725\", \"4726\", \"4727\", \"4728\", \"4729\", \"4730\", \"4731\", \"4732\",\n      \"4733\", \"4734\", \"4735\", \"4737\", \"4738\", \"4739\", \"4740\", \"4741\",\n      \"4742\", \"4743\", \"4744\", \"4745\", \"4746\", \"4747\", \"4748\", \"4749\",\n      \"4750\", \"4751\", \"4752\", \"4753\", \"4754\", \"4755\", \"4756\", \"4757\",\n      \"4758\", \"4759\", \"4760\", \"4761\", \"4762\", \"4763\", \"4764\", \"4767\",\n      \"4781\", \"4798\", \"4799\", \"4817\", \"4904\", \"4905\", \"4907\", \"4912\",\n      \"4648\", \"5140\", \"5145\"].contains(ctx.event.code)) {\n  return;\n}\nif (ctx?.winlog?.event_data?.SubjectUserSid != null) {\n  if (ctx?.user == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"user\", hm);\n  }\n  ctx.user.put(\"id\", ctx.winlog.event_data.SubjectUserSid);\n}\nif (ctx?.winlog?.event_data?.SubjectUserName != null) {\n  if (ctx?.user == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"user\", hm);\n  }\n  if (ctx?.related == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"related\", hm);\n  }\n  if (ctx?.related?.user == null) {\n    ArrayList al = new ArrayList();\n    ctx.related.put(\"user\", al);\n  }\n  ctx.user.put(\"name\", ctx.winlog.event_data.SubjectUserName);\n  if (!ctx.related.user.contains(ctx.winlog.event_data.SubjectUserName)) {\n    ctx.related.user.add(ctx.winlog.event_data.SubjectUserName);\n  }\n}\nif (ctx?.winlog?.event_data?.SubjectDomainName != null) {\n  if (ctx?.user == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"user\", hm);\n  }\n  ctx.user.put(\"domain\", ctx.winlog.event_data.SubjectDomainName);\n}"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Copy Target User to Target",
          "description": "Copy Target User to Target",
          "source": "if (ctx?.event?.code == null ||\n    ![\"4670\", \"4720\", \"4722\", \"4723\", \"4724\", \"4725\",\n      \"4726\", \"4738\", \"4740\", \"4767\", \"4798\", \"4817\",\n      \"4907\"].contains(ctx.event.code)) {\n  return;\n}\nif (ctx?.user == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"user\", hm);\n}\nif (ctx?.user?.target == null) {\n    HashMap hm = new HashMap();\n    ctx.user.put(\"target\", hm);\n}\ndef userId = ctx?.winlog?.event_data?.TargetSid;\nif (userId != null && userId != \"\" && userId != \"-\") ctx.user.target.id = userId;\ndef userName = ctx?.winlog?.event_data?.TargetUserName;\nif (userName != null && userName != \"\" && userName != \"-\") {\n  ctx.user.target.name = userName;\n  def parts = userName.splitOnToken(\"@\");\n  if (parts.length > 1) {\n    ctx.user.target.name = parts[0];\n  }\n  if (ctx?.related?.user == null) {\n    ArrayList al = new ArrayList();\n    ctx.related.put(\"user\", al);\n  }\n  if (!ctx.related.user.contains(ctx.user.target.name)) {\n    ctx.related.user.add(ctx.user.target.name);\n  }\n}\ndef userDomain = ctx?.winlog?.event_data?.TargetDomainName;\nif (userDomain != null && userDomain != \"\" && userDomain != \"-\") ctx.user.target.domain = userDomain;\nif (ctx.user?.target != null && ctx.user.target.size() == 0) ctx.user.remove(\"target\");"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Copy Target User to Effective",
          "description": "Copy Target User to Effective",
          "source": "if (ctx?.event?.code == null ||\n    ![\"4648\", \"4688\"].contains(ctx.event.code)) {\n  return;\n}\nif (ctx?.user == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"user\", hm);\n}\nif (ctx?.user?.effective == null) {\n    HashMap hm = new HashMap();\n    ctx.user.put(\"effective\", hm);\n}\ndef userId = ctx?.winlog?.event_data?.TargetUserSid;\nif (userId != null && userId != \"\" && userId != \"-\") ctx.user.effective.id = userId;\ndef userName = ctx?.winlog?.event_data?.TargetUserName;\nif (userName != null && userName != \"\" && userName != \"-\") {\n  ctx.user.effective.name = userName;\n  def parts = userName.splitOnToken(\"@\");\n  if (parts.length > 1) {\n    ctx.user.effective.name = parts[0];\n  }\n  if (ctx?.related?.user == null) {\n    ArrayList al = new ArrayList();\n    ctx.related.put(\"user\", al);\n  }\n  if (!ctx.related.user.contains(ctx.user.effective.name)) {\n    ctx.related.user.add(ctx.user.effective.name);\n  }\n}\ndef userDomain = ctx?.winlog?.event_data?.TargetDomainName;\nif (userDomain != null && userDomain != \"\" && userDomain != \"-\") ctx.user.effective.domain = userDomain;\nif (ctx.user?.effective != null && ctx.user.effective.size() == 0) ctx.user.remove(\"effective\");"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Copy Subject User from user_data",
          "description": "Copy Subject User from user_data",
          "source": "if (ctx?.event?.code == null ||\n    ![\"1102\"].contains(ctx.event.code)) {\n  return;\n}\nif (ctx?.winlog?.user_data?.SubjectUserSid != null) {\n  if (ctx?.user == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"user\", hm);\n  }\n  ctx.user.put(\"id\", ctx.winlog.user_data.SubjectUserSid);\n}\nif (ctx?.winlog?.user_data?.SubjectUserName != null) {\n  if (ctx?.user == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"user\", hm);\n  }\n  if (ctx?.related == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"related\", hm);\n  }\n  if (ctx?.related?.user == null) {\n    ArrayList al = new ArrayList();\n    ctx.related.put(\"user\", al);\n  }\n  ctx.user.put(\"name\", ctx.winlog.user_data.SubjectUserName);\n  if (!ctx.related.user.contains(ctx.winlog.user_data.SubjectUserName)) {\n    ctx.related.user.add(ctx.winlog.user_data.SubjectUserName);\n  }\n}\nif (ctx?.winlog?.user_data?.SubjectDomainName != null) {\n  if (ctx?.user == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"user\", hm);\n  }\n  ctx.user.put(\"domain\", ctx.winlog.user_data.SubjectDomainName);\n}"
        }
      },
      {
        "set": {
          "field": "winlog.logon.id",
          "copy_from": "winlog.event_data.SubjectLogonId",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "winlog.logon.id",
          "copy_from": "winlog.user_data.SubjectLogonId",
          "ignore_failure": true,
          "if": "ctx?.event?.code != null &&\n[\"1102\"].contains(ctx.event.code)"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Rename Common Auth Fields",
          "description": "Rename Common Auth Fields",
          "source": "if (ctx?.event?.code == null ||\n    ![\"1100\", \"1102\", \"1104\", \"1105\", \"1108\", \"4624\", \"4648\", \"4625\",\n      \"4670\", \"4673\", \"4674\", \"4689\", \"4697\", \"4719\", \"4720\", \"4722\",\n      \"4723\", \"4724\", \"4725\", \"4726\", \"4727\", \"4728\", \"4729\", \"4730\",\n      \"4731\", \"4732\", \"4733\", \"4734\", \"4735\", \"4737\", \"4738\", \"4740\",\n      \"4741\", \"4742\", \"4743\", \"4744\", \"4745\", \"4746\", \"4747\", \"4748\",\n      \"4749\", \"4750\", \"4751\", \"4752\", \"4753\", \"4754\", \"4755\", \"4756\",\n      \"4757\", \"4758\", \"4759\", \"4760\", \"4761\", \"4762\", \"4763\", \"4764\",\n      \"4767\", \"4768\", \"4769\", \"4770\", \"4771\", \"4798\", \"4799\", \"4817\",\n      \"4904\", \"4905\", \"4907\", \"4912\", \"5140\", \"5145\"].contains(ctx.event.code)) {\n  return;\n}\nif (ctx?.winlog?.event_data?.ProcessId != null) {\n  if (ctx?.process == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"process\", hm);\n  }\n  if (ctx.winlog.event_data.ProcessId instanceof String) {\n    Long pid = Long.decode(ctx.winlog.event_data.ProcessId);\n    ctx.process.put(\"pid\", pid.longValue());\n  } else {\n    ctx.process.put(\"pid\", ctx.winlog.event_data.ProcessId);\n  }\n  ctx.winlog.event_data.remove(\"ProcessId\");\n}\nif (ctx?.winlog?.event_data?.ProcessName != null) {\n  if (ctx?.process == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"process\", hm);\n  }\n  ctx.process.put(\"executable\", ctx.winlog.event_data.ProcessName);\n  ctx.winlog.event_data.remove(\"ProcessName\");\n}\nif (ctx?.winlog?.event_data?.IpAddress != null &&\n    ctx.winlog.event_data.IpAddress != \"-\") {\n  if (ctx?.source == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"source\", hm);\n  }\n  ctx.source.put(\"ip\", ctx.winlog.event_data.IpAddress);\n  ctx.winlog.event_data.remove(\"IpAddress\");\n}\nif (ctx?.winlog?.event_data?.IpPort != null && ctx.winlog.event_data.IpPort != \"-\") {\n  if (ctx?.source == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"source\", hm);\n  }\n  ctx.source.put(\"port\", Long.decode(ctx.winlog.event_data.IpPort));\n  ctx.winlog.event_data.remove(\"IpPort\");\n}\nif (ctx?.winlog?.event_data?.WorkstationName != null) {\n  if (ctx?.source == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"source\", hm);\n  }\n  ctx.source.put(\"domain\", ctx.winlog.event_data.WorkstationName);\n  ctx.winlog.event_data.remove(\"WorkstationName\");\n}\nif (ctx?.winlog?.event_data?.ClientAddress != null &&\n    ctx.winlog.event_data.ClientAddress != \"-\") {\n  if (ctx?.related == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"related\", hm);\n  }\n  ctx.related.put(\"ip\", ctx.winlog.event_data.ClientAddress);\n  ctx.winlog.event_data.remove(\"ClientAddress\");\n}\nif (ctx?.process?.name == null && ctx?.process?.executable != null) {\n  def parts = ctx.process.executable.splitOnToken(\"\\\\\");\n  ctx.process.put(\"name\", parts[-1]);\n}"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Process Event 4688",
          "description": "Process Event 4688",
          "source": "if (ctx?.event?.code == null ||\n    ![\"4688\"].contains(ctx.event.code)) {\n  return;\n}\nif (ctx?.winlog?.event_data?.NewProcessId != null) {\n  if (ctx?.process == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"process\", hm);\n  }\n  if (ctx.winlog.event_data.NewProcessId instanceof String) {\n    Long pid = Long.decode(ctx.winlog.event_data.NewProcessId);\n    ctx.process.put(\"pid\", pid.longValue());\n  } else {\n    ctx.process.put(\"pid\", ctx.winlog.event_data.NewProcessId);\n  }\n  ctx.winlog.event_data.remove(\"NewProcessId\");\n}\nif (ctx?.winlog?.event_data?.NewProcessName != null) {\n  if (ctx?.process == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"process\", hm);\n  }\n  ctx.process.put(\"executable\", ctx.winlog.event_data.NewProcessName);\n  ctx.winlog.event_data.remove(\"NewProcessName\");\n}\nif (ctx?.winlog?.event_data?.ParentProcessName != null) {\n  if (ctx?.process == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"process\", hm);\n  }\n  if (ctx?.process?.parent == null) {\n    HashMap hm = new HashMap();\n    ctx.process.put(\"parent\", hm);\n  }\n  ctx.process.parent.put(\"executable\", ctx.winlog.event_data.ParentProcessName);\n  ctx.winlog.event_data.remove(\"ParentProcessName\");\n}\nif (ctx?.process?.name == null && ctx?.process?.executable != null) {\n  def parts = ctx.process.executable.splitOnToken(\"\\\\\");\n  ctx.process.put(\"name\", parts[-1]);\n}\nif (ctx?.process?.parent?.name == null && ctx?.process?.parent?.executable != null) {\n  def parts = ctx.process.parent.executable.splitOnToken(\"\\\\\");\n  ctx.process.parent.put(\"name\", parts[-1]);\n}\nif (ctx?.winlog?.event_data?.ProcessId != null) {\n  if (ctx?.process == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"process\", hm);\n  }\n  if (ctx?.process?.parent == null) {\n    HashMap hm = new HashMap();\n    ctx.process.put(\"parent\", hm);\n  }\n  if (ctx.winlog.event_data.ProcessId instanceof String) {\n    Long pid = Long.decode(ctx.winlog.event_data.ProcessId);\n    ctx.process.parent.put(\"pid\", pid.longValue());\n  } else {\n    ctx.process.parent.put(\"pid\", ctx.winlog.event_data.ProcessId);\n  }\n}\nif (ctx?.winlog?.event_data?.CommandLine != null) {\n  int start = 0;\n  int end = 0;\n  boolean in_quote = false;\n  ArrayList al = new ArrayList();          \n  for (int i = 0; i < ctx.winlog.event_data.CommandLine.length(); i++) {\n    end = i;\n    if (Character.compare(ctx.winlog.event_data.CommandLine.charAt(i), \"\\\"\".charAt(0)) == 0) {\n      if (in_quote) {\n        in_quote = false;\n      } else {\n        in_quote = true;\n      }\n    }\n    if (Character.isWhitespace(ctx.winlog.event_data.CommandLine.charAt(i)) && !in_quote) {\n      al.add(ctx.winlog.event_data.CommandLine.substring(start, end));\n      start = i + 1;\n    }\n    if (i == ctx.winlog.event_data.CommandLine.length() - 1) {\n      al.add(ctx.winlog.event_data.CommandLine.substring(start, end + 1));\n    }\n  }\n  if (ctx?.process == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"process\", hm);\n  }\n  ctx.process.put(\"args\", al);\n  ctx.process.put(\"command_line\", ctx.winlog.event_data.CommandLine);\n}\nif ((ctx?.winlog?.event_data?.TargetUserName != null) &&\n    (!ctx.winlog.event_data.TargetUserName.equals(\"-\"))) {\n  if (ctx?.related == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"related\", hm);\n  }\n  if (ctx?.related?.user == null) {\n    ArrayList al = new ArrayList();\n    ctx.related.put(\"user\", al);\n  }\n  if (!ctx.related.user.contains(ctx.winlog.event_data.TargetUserName)) {\n    ctx.related.user.add(ctx.winlog.event_data.TargetUserName);\n  }\n}"
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{winlog.event_data.SubjectUserName}}",
          "allow_duplicates": false,
          "if": "ctx?.event?.code != null &&\n[\"4624\", \"4648\"].contains(ctx.event.code) &&\nctx?.winlog?.event_data?.SubjectUserName != null &&\nctx.winlog.event_data.SubjectUserName != \"-\""
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{winlog.event_data.TargetUserName}}",
          "allow_duplicates": false,
          "if": "ctx?.event?.code != null &&\n[\"4688\", \"4720\", \"4722\", \"4723\", \"4724\", \"4725\", \"4726\", \"4738\",\n \"4740\", \"4767\", \"4798\"].contains(ctx.event.code) &&\nctx?.winlog?.event_data?.TargetUserName != null &&\nctx.winlog.event_data.TargetUserName != \"-\""
        }
      },
      {
        "split": {
          "field": "winlog.event_data.PrivilegeList",
          "separator": "\\s+",
          "if": "ctx?.event?.code != null &&\n[\"4672\", \"4673\", \"4674\", \"4741\", \"4742\", \"4743\"].contains(ctx.event.code) &&\nctx?.winlog?.event_data?.PrivilegeList != null"
        }
      },
      {
        "set": {
          "field": "user.target.name",
          "copy_from": "winlog.event_data.OldTargetUserName",
          "ignore_empty_value": true
        }
      },
      {
        "set": {
          "field": "user.changes.name",
          "copy_from": "winlog.event_data.NewTargetUserName",
          "ignore_empty_value": true
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{winlog.event_data.NewTargetUserName}}",
          "allow_duplicates": false,
          "if": "ctx?.winlog?.event_data?.NewTargetUserName != null &&\nctx.winlog.event_data.NewTargetUserName != \"-\""
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{winlog.event_data.OldTargetUserName}}",
          "allow_duplicates": false,
          "if": "ctx?.winlog?.event_data?.OldTargetUserName != null &&\nctx.winlog.event_data.OldTargetUserName != \"-\""
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Object Policy Change and SidListDesc",
          "description": "Object Policy Change and SidListDesc",
          "params": {
            "AccountSIDDescription": {
              "AO": "Account operators",
              "RU": "Alias to allow previous Windows 2000",
              "AN": "Anonymous logon",
              "AU": "Authenticated users",
              "BA": "Built-in administrators",
              "BG": "Built-in guests",
              "BO": "Backup operators",
              "BU": "Built-in users",
              "CA": "Certificate server administrators",
              "CG": "Creator group",
              "CO": "Creator owner",
              "DA": "Domain administrators",
              "DC": "Domain computers",
              "DD": "Domain controllers",
              "DG": "Domain guests",
              "DU": "Domain users",
              "EA": "Enterprise administrators",
              "ED": "Enterprise domain controllers",
              "WD": "Everyone",
              "PA": "Group Policy administrators",
              "IU": "Interactively logged-on user",
              "LA": "Local administrator",
              "LG": "Local guest",
              "LS": "Local service account",
              "SY": "Local system",
              "NU": "Network logon user",
              "NO": "Network configuration operators",
              "NS": "Network service account",
              "PO": "Printer operators",
              "PS": "Personal self",
              "PU": "Power users",
              "RS": "RAS servers group",
              "RD": "Terminal server users",
              "RE": "Replicator",
              "RC": "Restricted code",
              "SA": "Schema administrators",
              "SO": "Server operators",
              "SU": "Service logon user",
              "S-1-0": "Null Authority",
              "S-1-0-0": "Nobody",
              "S-1-1": "World Authority",
              "S-1-1-0": "Everyone",
              "S-1-16-0": "Untrusted Mandatory Level",
              "S-1-16-12288": "High Mandatory Level",
              "S-1-16-16384": "System Mandatory Level",
              "S-1-16-20480": "Protected Process Mandatory Level",
              "S-1-16-28672": "Secure Process Mandatory Level",
              "S-1-16-4096": "Low Mandatory Level",
              "S-1-16-8192": "Medium Mandatory Level",
              "S-1-16-8448": "Medium Plus Mandatory Level",
              "S-1-2": "Local Authority",
              "S-1-2-0": "Local",
              "S-1-2-1": "Console Logon",
              "S-1-3": "Creator Authority",
              "S-1-3-0": "Creator Owner",
              "S-1-3-1": "Creator Group",
              "S-1-3-2": "Creator Owner Server",
              "S-1-3-3": "Creator Group Server",
              "S-1-3-4": "Owner Rights",
              "S-1-4": "Non-unique Authority",
              "S-1-5": "NT Authority",
              "S-1-5-1": "Dialup",
              "S-1-5-10": "Principal Self",
              "S-1-5-11": "Authenticated Users",
              "S-1-5-12": "Restricted Code",
              "S-1-5-13": "Terminal Server Users",
              "S-1-5-14": "Remote Interactive Logon",
              "S-1-5-15": "This Organization",
              "S-1-5-17": "This Organization",
              "S-1-5-18": "Local System",
              "S-1-5-19": "NT Authority",
              "S-1-5-2": "Network",
              "S-1-5-20": "NT Authority",
              "S-1-5-3": "Batch",
              "S-1-5-32-544": "Administrators",
              "S-1-5-32-545": "Users",
              "S-1-5-32-546": "Guests",
              "S-1-5-32-547": "Power Users",
              "S-1-5-32-548": "Account Operators",
              "S-1-5-32-549": "Server Operators",
              "S-1-5-32-550": "Print Operators",
              "S-1-5-32-551": "Backup Operators",
              "S-1-5-32-552": "Replicators",
              "S-1-5-32-554": "Builtin\\Pre-Windows 2000 Compatible Access",
              "S-1-5-32-555": "Builtin\\Remote Desktop Users",
              "S-1-5-32-556": "Builtin\\Network Configuration Operators",
              "S-1-5-32-557": "Builtin\\Incoming Forest Trust Builders",
              "S-1-5-32-558": "Builtin\\Performance Monitor Users",
              "S-1-5-32-559": "Builtin\\Performance Log Users",
              "S-1-5-32-560": "Builtin\\Windows Authorization Access Group",
              "S-1-5-32-561": "Builtin\\Terminal Server License Servers",
              "S-1-5-32-562": "Builtin\\Distributed COM Users",
              "S-1-5-32-569": "Builtin\\Cryptographic Operators",
              "S-1-5-32-573": "Builtin\\Event Log Readers",
              "S-1-5-32-574": "Builtin\\Certificate Service DCOM Access",
              "S-1-5-32-575": "Builtin\\RDS Remote Access Servers",
              "S-1-5-32-576": "Builtin\\RDS Endpoint Servers",
              "S-1-5-32-577": "Builtin\\RDS Management Servers",
              "S-1-5-32-578": "Builtin\\Hyper-V Administrators",
              "S-1-5-32-579": "Builtin\\Access Control Assistance Operators",
              "S-1-5-32-580": "Builtin\\Remote Management Users",
              "S-1-5-32-582": "Storage Replica Administrators",
              "S-1-5-4": "Interactive",
              "S-1-5-5-X-Y": "Logon Session",
              "S-1-5-6": "Service",
              "S-1-5-64-10": "NTLM Authentication",
              "S-1-5-64-14": "SChannel Authentication",
              "S-1-5-64-21": "Digest Authentication",
              "S-1-5-7": "Anonymous",
              "S-1-5-8": "Proxy",
              "S-1-5-80": "NT Service",
              "S-1-5-80-0": "All Services",
              "S-1-5-83-0": "NT Virtual Machine\\Virtual Machines",
              "S-1-5-9": "Enterprise Domain Controllers",
              "S-1-5-90-0": "Windows Manager\\Windows Manager Group"
            },
            "AceTypes": {
              "A": "Access Allowed",
              "D": "Access Denied",
              "OA": "Object Access Allowed",
              "OD": "Object Access Denied",
              "AU": "System Audit",
              "AL": "System Alarm",
              "OU": "System Object Audit",
              "OL": "System Object Alarm",
              "ML": "System Mandatory Label",
              "SP": "Central Policy ID"
            },
            "DomainSpecificSID": {
              "498": "Enterprise Read-only Domain Controllers",
              "500": "Administrator",
              "501": "Guest",
              "502": "KRBTGT",
              "512": "Domain Admins",
              "513": "Domain Users",
              "514": "Domain Guests",
              "515": "Domain Computers",
              "516": "Domain Controllers",
              "517": "Cert Publishers",
              "518": "Schema Admins",
              "519": "Enterprise Admins",
              "520": "Group Policy Creator Owners",
              "521": "Read-only Domain Controllers",
              "522": "Cloneable Domain Controllers",
              "526": "Key Admins",
              "527": "Enterprise Key Admins",
              "553": "RAS and IAS Servers",
              "571": "Allowed RODC Password Replication Group",
              "572": "Denied RODC Password Replication Group"
            },
            "PermissionDescription": {
              "GA": "Generic All",
              "GR": "Generic Read",
              "GW": "Generic Write",
              "GX": "Generic Execute",
              "RC": "Read Permissions",
              "SD": "Delete",
              "WD": "Modify Permissions",
              "WO": "Modify Owner",
              "RP": "Read All Properties",
              "WP": "Write All Properties",
              "CC": "Create All Child Objects",
              "DC": "Delete All Child Objects",
              "LC": "List Contents",
              "SW": "All Validated",
              "LO": "List Object",
              "DT": "Delete Subtree",
              "CR": "All Extended Rights",
              "FA": "File All Access",
              "FR": "File Generic Read",
              "FX": "FILE GENERIC EXECUTE",
              "FW": "FILE GENERIC WRITE",
              "KA": "KEY ALL ACCESS",
              "KR": "KEY READ",
              "KW": "KEY WRITE",
              "KX": "KEY EXECUTE"
            },
            "PermsFlags": {
              "0x80000000": "Generic Read",
              "0x4000000": "Generic Write",
              "0x20000000": "Generic Execute",
              "0x10000000": "Generic All",
              "0x02000000": "Maximum Allowed",
              "0x01000000": "Access System Security",
              "0x00100000": "Syncronize",
              "0x00080000": "Write Owner",
              "0x00040000": "Write DACL",
              "0x00020000": "Read Control",
              "0x00010000": "Delete"
            }
          },
          "source": "ArrayList translatePermissionMask(def mask, def params) {\n  ArrayList al = new ArrayList();\n  Long permCode = Long.decode(mask);\n  for (entry in params.PermsFlags.entrySet()) {\n    Long permFlag = Long.decode(entry.getKey());\n    if ((permCode.longValue() & permFlag.longValue()) == permFlag.longValue()) {\n      al.add(entry.getValue());\n    }\n  }\n  if (al.length == 0) {\n    al.add(mask);\n  }\n  return al;\n}\n\nHashMap translateACL(def dacl, def params) {\n  def aceArray = dacl.splitOnToken(\";\");\n  HashMap hm = new HashMap();\n  \n  if (aceArray.length >= 6 ) {\n    hm.put(\"grantee\", translateSID(aceArray[5], params));\n  }\n\n  if (aceArray.length >= 1) {\n    hm.put(\"type\", params.AceTypes[aceArray[0]]);\n  }\n\n  if (aceArray.length >= 3) {\n    if (aceArray[2].startsWith(\"0x\")) {\n      hm.put(\"perms\", translatePermissionMask(aceArray[2], params));\n    } else {\n      ArrayList al = new ArrayList();\n      Pattern permPattern = /.{1,2}/;\n      Matcher permMatcher = permPattern.matcher(aceArray[2]);\n      while (permMatcher.find()) {\n        al.add(params.PermissionDescription[permMatcher.group(0)]);\n      }\n      hm.put(\"perms\", al);\n    }\n  }\n  return hm; \n}\nString translateSID(def sid, def params) {\n  if (!params.AccountSIDDescription.containsKey(sid)) {\n    if (sid.startsWith(\"S-1-5-21\")) {\n      Pattern uidPattern = /[0-9]{1,5}$/;\n      Matcher uidMatcher = uidPattern.matcher(sid);\n      if (uidMatcher.find()) {\n        return params.DomainSpecificSID[uidMatcher.group(0)];\n      }\n      return sid;\n    }\n    return sid;\n  }\n  return params.AccountSIDDescription[sid];\n}\n  \n\nvoid enrichSDDL(def sddlStr, def Sd, def params, def ctx) {\n  Pattern sdOwnerPattern = /^O\\:[A-Z]{2}/;\n  Matcher sdOwnerMatcher = sdOwnerPattern.matcher(sddlStr);\n  if (sdOwnerMatcher.find()) {\n    ctx.winlog.event_data.put(Sd + \"Owner\", translateSID(sdOwnerMatcher.group(0), params));\n  }\n\n  Pattern sdGroupPattern = /^G\\:[A-Z]{2}/;\n  Matcher sdGroupMatcher = sdGroupPattern.matcher(sddlStr);\n  if (sdGroupMatcher.find()) {\n    ctx.winlog.event_data.put(Sd + \"Group\", translateSID(sdGroupMatcher.group(0), params));\n  }\n\n  Pattern sdDaclPattern = /(D:([A-Z]*(\\(.*\\))*))/;\n  Matcher sdDaclMatcher = sdDaclPattern.matcher(sddlStr);\n  if (sdDaclMatcher.find()) {\n    Pattern dacListPattern = /\\([^*\\)]*\\)/;\n    Matcher dacListMatcher = dacListPattern.matcher(sdDaclMatcher.group(1));\n    for (def i = 0; dacListMatcher.find(); i++) {\n      def newDacl = translateACL(dacListMatcher.group(0).replace(\"(\",\"\").replace(\")\",\"\"), params);\n      ctx.winlog.event_data.put(Sd + \"Dacl\" + i.toString(), newDacl['grantee'] + \" :\" + newDacl['type'] + \" (\" + newDacl['perms'] + \")\");\n      if ([\"Administrator\", \"Guest\", \"KRBTGT\"].contains(newDacl['grantee'])) {\n        if (ctx?.related == null) {\n          HashMap hm = new HashMap();\n          ctx.put(\"related\", hm);\n        }\n        if (ctx?.related?.user == null) {\n          ArrayList al = new ArrayList();\n          ctx.related.put(\"user\", al);\n        }\n        if (!ctx.related.user.contains(newDacl['grantee'])) {\n          ctx.related.user.add(newDacl['grantee']);\n        }\n      }\n    }\n  }\n\n  Pattern sdSaclPattern = /(S:([A-Z]*(\\(.*\\))*))?$/;\n  Matcher sdSaclMatcher = sdSaclPattern.matcher(sddlStr);\n  if (sdSaclMatcher.find()) {\n    Pattern sacListPattern = /\\([^*\\)]*\\)/;\n    Matcher sacListMatcher = sacListPattern.matcher(sdSaclMatcher.group(0));\n    for (def i = 0; sacListMatcher.find(); i++) {\n      def newSacl = translateACL(sacListMatcher.group(0).replace(\"(\",\"\").replace(\")\",\"\"), params);\n      ctx.winlog.event_data.put(Sd + \"Sacl\" + i.toString(), newSacl['grantee'] + \" :\" + newSacl['type'] + \" (\" + newSacl['perms'] + \")\");\n      if ([\"Administrator\", \"Guest\", \"KRBTGT\"].contains(newSacl['grantee'])) {\n        if (ctx?.related == null) {\n          HashMap hm = new HashMap();\n          ctx.put(\"related\", hm);\n        }\n        if (ctx?.related?.user == null) {\n          ArrayList al = new ArrayList();\n          ctx.related.put(\"user\", al);\n        }\n        if (!ctx.related.user.contains(newSacl['grantee'])) {\n          ctx.related.user.add(newSacl['grantee']);\n        }\n      }\n    }\n  }\n}\n\nvoid splitSidList(def sids, def params, def ctx) {\n  ArrayList al = new ArrayList();\n  def sidList = sids.splitOnToken(\" \");\n  ctx.winlog.event_data.put(\"SidList\", sidList);\n  for (def i = 0; i < sidList.length; i++ ) {\n    al.add(translateSID(sidList[i].replace(\"%\", \"\").replace(\"{\", \"\").replace(\"}\", \"\").replace(\" \",\"\"), params));\n  }\n  ctx.winlog.event_data.put(\"SidListDesc\", al);\n}\n\nif (ctx?.event?.code == null ||\n    ![\"4670\", \"4817\", \"4907\", \"4908\"].contains(ctx.event.code)) {\n  return;\n}\nif (ctx?.winlog?.event_data?.OldSd != null) {\n  enrichSDDL(ctx.winlog.event_data.OldSd, \"OldSd\", params, ctx);\n}\nif (ctx?.winlog?.event_data?.NewSd != null) {\n  enrichSDDL(ctx.winlog.event_data.NewSd, \"NewSd\", params, ctx);\n}\nif (ctx?.winlog?.event_data?.SidList != null) {\n  splitSidList(ctx.winlog.event_data.SidList, params, ctx);\n}"
        }
      },
      {
        "set": {
          "field": "file.name",
          "copy_from": "winlog.event_data.RelativeTargetName",
          "if": "ctx.event?.code != null &&\n[\"5140\", \"5145\"].contains(ctx.event.code) &&\nctx.winlog?.event_data?.RelativeTargetName != null &&\nctx.winlog?.event_data?.RelativeTargetName != \"\""
        }
      },
      {
        "set": {
          "field": "file.directory",
          "copy_from": "winlog.event_data.ShareLocalPath",
          "if": "ctx.event?.code != null &&\n[\"5140\", \"5145\"].contains(ctx.event.code) &&\nctx.winlog?.event_data?.ShareLocalPath != null &&\nctx.winlog?.event_data?.ShareLocalPath != \"\""
        }
      },
      {
        "set": {
          "field": "file.path",
          "value": "{{file.directory}}\\{{file.name}}",
          "if": "ctx.file?.name != null && ctx.file?.directory != null"
        }
      },
      {
        "set": {
          "field": "file.directory",
          "copy_from": "winlog.event_data.ShareLocalPath",
          "if": "ctx.event?.code != null &&\n[\"5140\", \"5145\"].contains(ctx.event.code) &&\nctx.winlog?.event_data?.ShareLocalPath != null &&\nctx.winlog?.event_data?.ShareLocalPath != \"\""
        }
      },
      {
        "set": {
          "field": "file.target_path",
          "value": "{{winlog.event_data.ShareName}}\\{{file.name}}",
          "if": "ctx.event?.code != null &&\n[\"5140\", \"5145\"].contains(ctx.event.code) &&\nctx.winlog?.event_data?.ShareName != null &&\nctx.winlog?.event_data?.ShareName != \"\" &&\nctx.file?.name != null"
        }
      },
      {
        "script": {
          "description": "Adds file information.",
          "lang": "painless",
          "if": "ctx.file?.name != null",
          "source": "def extIdx = ctx.file.name.lastIndexOf(\".\");\nif (extIdx > -1) {\n    ctx.file.extension = ctx.file.name.substring(extIdx+1);\n}"
        }
      },
      {
        "pipeline": {
          "name": "logs-system.security@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "Processor \"{{ _ingest.on_failure_processor_type }}\" with tag \"{{ _ingest.on_failure_processor_tag }}\" in pipeline \"{{ _ingest.on_failure_pipeline }}\" failed with message \"{{ _ingest.on_failure_message }}\""
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "system"
      }
    }
  },
  "metrics-kubernetes.apiserver-1.26.0": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-kubernetes.apiserver@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "kubernetes"
      }
    }
  },
  "metrics-kubernetes.state_job-1.26.0": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-kubernetes.state_job@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "kubernetes"
      }
    }
  },
  "logs-crowdstrike.falcon-1.7.0-remote_response_session_end": {
    "processors": [
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": [
            "network",
            "session"
          ]
        }
      },
      {
        "append": {
          "field": "event.action",
          "value": [
            "remote_response_session_end_event"
          ]
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": [
            "end"
          ]
        }
      },
      {
        "set": {
          "field": "message",
          "value": "Remote response session ended."
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.HostnameField",
          "target_field": "host.name",
          "type": "string",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-crowdstrike.falcon@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "crowdstrike"
      }
    }
  },
  "logs-azure.firewall_logs-1.5.4-azure-shared-pipeline": {
    "description": "Pipeline for parsing Azure shared log fields.",
    "processors": [
      {
        "set": {
          "field": "cloud.provider",
          "value": "azure"
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "patterns": [
            "(?i)/subscriptions/%{SUBID:azure.subscription_id}/resourceGroups/%{GROUPID:azure.resource.group}/providers/%{PROVIDERNAME:azure.resource.provider}/namespaces/%{NAMESPACE:azure.resource.namespace}/authorizationRules/%{RULE:azure.resource.authorization_rule}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "GROUPID": ".+",
            "PROVIDERNAME": ".+",
            "NAMESPACE": ".+",
            "RULE": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "(?i)/subscriptions/%{SUBID:azure.subscription_id}/resourceGroups/%{GROUPID:azure.resource.group}/providers/%{PROVIDERNAME:azure.resource.provider}/%{NAME:azure.resource.name}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "GROUPID": ".+",
            "PROVIDERNAME": "([A-Za-z])\\w+.([A-Za-z])\\w+/([A-Za-z])\\w+.",
            "NAME": "((?!AUTHORIZATIONRULES).)*$"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "(?i)/subscriptions/%{SUBID:azure.subscription_id}/resourceGroups/%{GROUPID:azure.resource.group}/providers/%{PROVIDERNAME:azure.resource.provider}/%{NAME:azure.resource.name}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "GROUPID": ".+",
            "PROVIDERNAME": "([A-Za-z])\\w+.([A-Za-z])\\w+\\/([A-Za-z][^\\/])\\w+",
            "NAME": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "(?i)/providers/%{PROVIDER:azure.resource.provider}"
          ],
          "pattern_definitions": {
            "PROVIDER": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "(?i)/subscriptions/%{SUBID:azure.subscription_id}/providers/%{PROVIDERNAME:azure.resource.provider}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "PROVIDERNAME": "([A-Za-z])\\w+.([A-Za-z])\\w+\\/([A-Za-z][^\\/])\\w+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "(?i)/subscriptions/%{SUBID:azure.subscription_id}/resourceGroups/%{GROUPID:azure.resource.group}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "GROUPID": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "(?i)/subscriptions/%{SUBID:azure.subscription_id}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}"
          },
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "azure.resource_id",
          "target_field": "azure.resource.id",
          "ignore_missing": true
        }
      },
      {
        "lowercase": {
          "field": "event.outcome",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "cloud.account.id",
          "copy_from": "azure.subscription_id",
          "ignore_empty_value": true
        }
      },
      {
        "pipeline": {
          "name": "logs-azure.firewall_logs@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "azure"
      }
    }
  },
  "metrics-kubernetes.state_pod-1.26.0": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-kubernetes.state_pod@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "kubernetes"
      }
    }
  },
  "synthetics-browser.network-0.10.2": {
    "processors": [
      {
        "pipeline": {
          "name": "synthetics-browser.network@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "synthetics"
      }
    }
  },
  "logs-crowdstrike.falcon-1.7.0": {
    "description": "Ingest pipeline for normalizing CrowdStrike Falcon logs",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.4.0"
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "crowdstrike"
        }
      },
      {
        "remove": {
          "field": [
            "host.name"
          ],
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "crowdstrike.event.ProcessStartTime",
          "ignore_missing": true,
          "if": "ctx?.crowdstrike?.event?.ProcessStartTime == 0"
        }
      },
      {
        "date": {
          "field": "crowdstrike.event.ProcessStartTime",
          "target_field": "crowdstrike.event.ProcessStartTime",
          "timezone": "UTC",
          "formats": [
            "UNIX_MS"
          ],
          "ignore_failure": true,
          "if": "ctx?.crowdstrike?.event?.ProcessStartTime != null &&\n!(ctx.crowdstrike.event.ProcessStartTime instanceof String) &&\n(int)(Math.log10(ctx.crowdstrike.event.ProcessStartTime) + 1) >= 12\n"
        }
      },
      {
        "remove": {
          "field": "crowdstrike.event.ProcessEndTime",
          "ignore_missing": true,
          "if": "ctx?.crowdstrike?.event?.ProcessEndTime == 0"
        }
      },
      {
        "date": {
          "field": "crowdstrike.event.ProcessEndTime",
          "target_field": "crowdstrike.event.ProcessEndTime",
          "timezone": "UTC",
          "formats": [
            "UNIX_MS"
          ],
          "ignore_failure": true,
          "if": "ctx?.crowdstrike?.event?.ProcessEndTime != null &&\n!(ctx.crowdstrike.event.ProcessEndTime instanceof String) &&\n(int)(Math.log10(ctx.crowdstrike.event.ProcessEndTime) + 1) >= 12\n"
        }
      },
      {
        "remove": {
          "field": "crowdstrike.event.IncidentStartTime",
          "ignore_missing": true,
          "if": "ctx?.crowdstrike?.event?.IncidentStartTime == 0"
        }
      },
      {
        "date": {
          "field": "crowdstrike.event.IncidentStartTime",
          "target_field": "crowdstrike.event.IncidentStartTime",
          "timezone": "UTC",
          "formats": [
            "UNIX_MS"
          ],
          "ignore_failure": true,
          "if": "ctx?.crowdstrike?.event?.IncidentStartTime != null &&\n!(ctx.crowdstrike.event.IncidentStartTime instanceof String) &&\n(int)(Math.log10(ctx.crowdstrike.event.IncidentStartTime) + 1) >= 12\n"
        }
      },
      {
        "remove": {
          "field": "crowdstrike.event.IncidentEndTime",
          "ignore_missing": true,
          "if": "ctx?.crowdstrike?.event?.IncidentEndTime == 0"
        }
      },
      {
        "date": {
          "field": "crowdstrike.event.IncidentEndTime",
          "target_field": "crowdstrike.event.IncidentEndTime",
          "timezone": "UTC",
          "formats": [
            "UNIX_MS"
          ],
          "ignore_failure": true,
          "if": "ctx?.crowdstrike?.event?.IncidentEndTime != null &&\n!(ctx.crowdstrike.event.IncidentEndTime instanceof String) &&\n(int)(Math.log10(ctx.crowdstrike.event.IncidentEndTime) + 1) >= 12\n"
        }
      },
      {
        "remove": {
          "field": "crowdstrike.event.StartTimestamp",
          "ignore_missing": true,
          "if": "ctx?.crowdstrike?.event?.StartTimestamp == 0"
        }
      },
      {
        "date": {
          "field": "crowdstrike.event.StartTimestamp",
          "target_field": "crowdstrike.event.StartTimestamp",
          "timezone": "UTC",
          "formats": [
            "UNIX_MS"
          ],
          "ignore_failure": true,
          "if": "ctx?.crowdstrike?.event?.StartTimestamp != null &&\n!(ctx.crowdstrike.event.StartTimestamp instanceof String) &&\n(int)(Math.log10(ctx.crowdstrike.event.StartTimestamp) + 1) >= 12\n"
        }
      },
      {
        "remove": {
          "field": "crowdstrike.event.EndTimestamp",
          "ignore_missing": true,
          "if": "ctx?.crowdstrike?.event?.EndTimestamp == 0"
        }
      },
      {
        "date": {
          "field": "crowdstrike.event.EndTimestamp",
          "target_field": "crowdstrike.event.EndTimestamp",
          "timezone": "UTC",
          "formats": [
            "UNIX_MS"
          ],
          "ignore_failure": true,
          "if": "ctx?.crowdstrike?.event?.EndTimestamp != null &&\n!(ctx.crowdstrike.event.EndTimestamp instanceof String) &&\n(int)(Math.log10(ctx.crowdstrike.event.EndTimestamp) + 1) >= 12\n"
        }
      },
      {
        "remove": {
          "field": "crowdstrike.event.UTCTimestamp",
          "ignore_missing": true,
          "if": "ctx?.crowdstrike?.event?.UTCTimestamp == 0"
        }
      },
      {
        "date": {
          "field": "crowdstrike.event.UTCTimestamp",
          "target_field": "crowdstrike.event.UTCTimestamp",
          "timezone": "UTC",
          "formats": [
            "UNIX_MS"
          ],
          "ignore_failure": true,
          "if": "ctx?.crowdstrike?.event?.UTCTimestamp != null &&\n!(ctx.crowdstrike.event.UTCTimestamp instanceof String) &&\n(int)(Math.log10(ctx.crowdstrike.event.UTCTimestamp) + 1) >= 12\n"
        }
      },
      {
        "remove": {
          "field": "crowdstrike.metadata.eventCreationTime",
          "ignore_missing": true,
          "if": "ctx?.crowdstrike?.metadata?.eventCreationTime == 0"
        }
      },
      {
        "date": {
          "field": "crowdstrike.metadata.eventCreationTime",
          "target_field": "crowdstrike.metadata.eventCreationTime",
          "timezone": "UTC",
          "formats": [
            "UNIX_MS"
          ],
          "ignore_failure": true,
          "if": "ctx?.crowdstrike?.metadata?.eventCreationTime != null &&\n!(ctx.crowdstrike.metadata.eventCreationTime instanceof String) &&\n(int)(Math.log10(ctx.crowdstrike.metadata.eventCreationTime) + 1) >= 12\n"
        }
      },
      {
        "date": {
          "field": "crowdstrike.event.ProcessStartTime",
          "target_field": "crowdstrike.event.ProcessStartTime",
          "timezone": "UTC",
          "formats": [
            "UNIX"
          ],
          "ignore_failure": true,
          "if": "ctx?.crowdstrike?.event?.ProcessStartTime != null &&\n!(ctx.crowdstrike.event.ProcessStartTime instanceof String) &&\n(int)(Math.log10(ctx.crowdstrike.event.ProcessStartTime) + 1) < 12\n"
        }
      },
      {
        "date": {
          "field": "crowdstrike.event.ProcessEndTime",
          "target_field": "crowdstrike.event.ProcessEndTime",
          "timezone": "UTC",
          "formats": [
            "UNIX"
          ],
          "ignore_failure": true,
          "if": "ctx?.crowdstrike?.event?.ProcessEndTime != null &&\n!(ctx.crowdstrike.event.ProcessEndTime instanceof String) &&\n(int)(Math.log10(ctx.crowdstrike.event.ProcessEndTime) + 1) < 12\n"
        }
      },
      {
        "date": {
          "field": "crowdstrike.event.IncidentStartTime",
          "target_field": "crowdstrike.event.IncidentStartTime",
          "timezone": "UTC",
          "formats": [
            "UNIX"
          ],
          "ignore_failure": true,
          "if": "ctx?.crowdstrike?.event?.IncidentStartTime != null &&\n!(ctx.crowdstrike.event.IncidentStartTime instanceof String) &&\n(int)(Math.log10(ctx.crowdstrike.event.IncidentStartTime) + 1) < 12\n"
        }
      },
      {
        "date": {
          "field": "crowdstrike.event.IncidentEndTime",
          "target_field": "crowdstrike.event.IncidentEndTime",
          "timezone": "UTC",
          "formats": [
            "UNIX"
          ],
          "ignore_failure": true,
          "if": "ctx?.crowdstrike?.event?.IncidentEndTime != null &&\n!(ctx.crowdstrike.event.IncidentEndTime instanceof String) &&\n(int)(Math.log10(ctx.crowdstrike.event.IncidentEndTime) + 1) < 12\n"
        }
      },
      {
        "date": {
          "field": "crowdstrike.event.StartTimestamp",
          "target_field": "crowdstrike.event.StartTimestamp",
          "timezone": "UTC",
          "formats": [
            "UNIX"
          ],
          "ignore_failure": true,
          "if": "ctx?.crowdstrike?.event?.StartTimestamp != null &&\n!(ctx.crowdstrike.event.StartTimestamp instanceof String) &&\n(int)(Math.log10(ctx.crowdstrike.event.StartTimestamp) + 1) < 12\n"
        }
      },
      {
        "date": {
          "field": "crowdstrike.event.EndTimestamp",
          "target_field": "crowdstrike.event.EndTimestamp",
          "timezone": "UTC",
          "formats": [
            "UNIX"
          ],
          "ignore_failure": true,
          "if": "ctx?.crowdstrike?.event?.EndTimestamp != null &&\n!(ctx.crowdstrike.event.EndTimestamp instanceof String) &&\n(int)(Math.log10(ctx.crowdstrike.event.EndTimestamp) + 1) < 12\n"
        }
      },
      {
        "date": {
          "field": "crowdstrike.event.UTCTimestamp",
          "target_field": "crowdstrike.event.UTCTimestamp",
          "timezone": "UTC",
          "formats": [
            "UNIX"
          ],
          "ignore_failure": true,
          "if": "ctx?.crowdstrike?.event?.UTCTimestamp != null &&\n!(ctx.crowdstrike.event.UTCTimestamp instanceof String) &&\n(int)(Math.log10(ctx.crowdstrike.event.UTCTimestamp) + 1) < 12\n"
        }
      },
      {
        "date": {
          "field": "crowdstrike.metadata.eventCreationTime",
          "target_field": "crowdstrike.metadata.eventCreationTime",
          "timezone": "UTC",
          "formats": [
            "UNIX"
          ],
          "ignore_failure": true,
          "if": "ctx?.crowdstrike?.metadata?.eventCreationTime != null &&\n!(ctx.crowdstrike.metadata.eventCreationTime instanceof String) &&\n(int)(Math.log10(ctx.crowdstrike.metadata.eventCreationTime) + 1) < 12\n"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "success",
          "if": "ctx?.crowdstrike?.event?.Success == true"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "failure",
          "if": "ctx?.crowdstrike?.event?.Success == false"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "unknown",
          "if": "ctx?.event?.outcome == null"
        }
      },
      {
        "convert": {
          "field": "crowdstrike.metadata.eventCreationTime",
          "target_field": "@timestamp",
          "type": "string",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.LateralMovement",
          "type": "long",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.LocalPort",
          "type": "long",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.MatchCount",
          "type": "long",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.MatchCountSinceLastReport",
          "type": "long",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.PID",
          "type": "long",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.RemotePort",
          "type": "long",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "source.port",
          "type": "long",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "destination.port",
          "type": "long",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.UserName",
          "target_field": "user.name",
          "type": "string",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.UserId",
          "target_field": "user.name",
          "type": "string",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.user?.name == null || ctx?.user?.name == \"\""
        }
      },
      {
        "set": {
          "field": "user.email",
          "value": "{{user.name}}",
          "ignore_empty_value": true,
          "ignore_failure": true,
          "if": "ctx?.user?.name != null && /@/.split(ctx.user.name).length == 2"
        }
      },
      {
        "script": {
          "lang": "painless",
          "source": "def commandLine = ctx?.crowdstrike?.event?.CommandLine;\nif (commandLine != null) {\n\n  commandLine = commandLine.trim();\n\n  if (commandLine != \"\") {\n    def args = Arrays.asList(/ /.split(commandLine));\n    args.removeIf(arg -> arg == \"\");\n\n    ctx[\"process.command_line\"] = commandLine;\n    ctx[\"process.args\"] = args;\n    ctx[\"process.executable\"] = args.get(0);\n  }\n}\n"
        }
      },
      {
        "pipeline": {
          "name": "logs-crowdstrike.falcon-1.7.0-detection_summary",
          "if": "ctx?.crowdstrike?.metadata?.eventType == \"DetectionSummaryEvent\""
        }
      },
      {
        "pipeline": {
          "name": "logs-crowdstrike.falcon-1.7.0-incident_summary",
          "if": "ctx?.crowdstrike?.metadata?.eventType == \"IncidentSummaryEvent\""
        }
      },
      {
        "pipeline": {
          "name": "logs-crowdstrike.falcon-1.7.0-user_activity_audit",
          "if": "ctx?.crowdstrike?.metadata?.eventType == \"UserActivityAuditEvent\""
        }
      },
      {
        "pipeline": {
          "name": "logs-crowdstrike.falcon-1.7.0-auth_activity_audit",
          "if": "ctx?.crowdstrike?.metadata?.eventType == \"AuthActivityAuditEvent\""
        }
      },
      {
        "pipeline": {
          "name": "logs-crowdstrike.falcon-1.7.0-firewall_match",
          "if": "ctx?.crowdstrike?.metadata?.eventType == \"FirewallMatchEvent\""
        }
      },
      {
        "pipeline": {
          "name": "logs-crowdstrike.falcon-1.7.0-remote_response_session_start",
          "if": "ctx?.crowdstrike?.metadata?.eventType == \"RemoteResponseSessionStartEvent\""
        }
      },
      {
        "pipeline": {
          "name": "logs-crowdstrike.falcon-1.7.0-remote_response_session_end",
          "if": "ctx?.crowdstrike?.metadata?.eventType == \"RemoteResponseSessionEndEvent\""
        }
      },
      {
        "script": {
          "lang": "painless",
          "if": "ctx?.crowdstrike?.event != null",
          "params": {
            "values": [
              null,
              "",
              "-",
              "N/A",
              "NA",
              0
            ]
          },
          "source": "ctx.crowdstrike.event.entrySet().removeIf(entry -> params.values.contains(entry.getValue()));\n"
        }
      },
      {
        "script": {
          "lang": "painless",
          "if": "ctx?.crowdstrike?.metadata != null",
          "params": {
            "values": [
              null,
              "",
              "-",
              "N/A",
              "NA"
            ]
          },
          "source": "ctx.crowdstrike.metadata.entrySet().removeIf(entry -> params.values.contains(entry.getValue()));\n"
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{user.name}}",
          "allow_duplicates": false,
          "ignore_failure": true,
          "if": "ctx?.user?.name != null && ctx?.user?.name != \"\""
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{source.ip}}",
          "ignore_failure": true,
          "allow_duplicates": false,
          "if": "ctx?.source?.ip != null && ctx?.source?.ip != \"\""
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{destination.ip}}",
          "ignore_failure": true,
          "allow_duplicates": false,
          "if": "ctx?.destination?.ip != null && ctx?.destination?.ip != \"\""
        }
      },
      {
        "append": {
          "field": "related.hosts",
          "value": "{{host.name}}",
          "ignore_failure": true,
          "allow_duplicates": false,
          "if": "ctx?.host?.name != null && ctx?.host?.name != \"\""
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "description": "This script processor iterates over the whole document to remove fields with null values.",
          "source": "void handleMap(Map map) {\n  for (def x : map.values()) {\n    if (x instanceof Map) {\n        handleMap(x);\n    } else if (x instanceof List) {\n        handleList(x);\n    }\n  }\n  map.values().removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));\n}\nvoid handleList(List list) {\n  for (def x : list) {\n      if (x instanceof Map) {\n          handleMap(x);\n      } else if (x instanceof List) {\n          handleList(x);\n      }\n  }\n  list.removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));\n}\nhandleMap(ctx);\n"
        }
      },
      {
        "pipeline": {
          "name": "logs-crowdstrike.falcon@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "crowdstrike"
      }
    }
  },
  "logs-winlog.winlog-1.7.0": {
    "processors": [
      {
        "pipeline": {
          "name": "logs-winlog.winlog@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "winlog"
      }
    }
  },
  "metrics-windows.perfmon-1.15.0": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-windows.perfmon@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "windows"
      }
    }
  },
  "traces-apm.sampled-8.4.2": {
    "processors": [
      {
        "pipeline": {
          "name": "traces-apm.sampled@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "apm"
      }
    }
  },
  "logs-azure.provisioning-1.5.4-azure-shared-pipeline": {
    "description": "Pipeline for parsing Azure shared log fields.",
    "processors": [
      {
        "set": {
          "field": "cloud.provider",
          "value": "azure"
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "patterns": [
            "/TENANTS/%{TENANTID:azure.tenant_id}/PROVIDERS/%{PROVIDERNAME:azure.resource.provider}",
            "/tenants/%{TENANTID:azure.tenant_id}/providers/%{PROVIDERNAME:azure.resource.provider}"
          ],
          "pattern_definitions": {
            "TENANTID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "PROVIDERNAME": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "azure.resource_id",
          "target_field": "azure.resource.id",
          "ignore_missing": true
        }
      },
      {
        "lowercase": {
          "field": "event.outcome",
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-azure.provisioning@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "azure"
      }
    }
  },
  "metrics-system.filesystem-1.20.4": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-system.filesystem@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "system"
      }
    }
  },
  "metrics-elastic_agent.cloudbeat-1.3.5": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-elastic_agent.cloudbeat@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "elastic_agent"
      }
    }
  },
  "logs-cisco_duo.admin-1.5.1": {
    "description": "Pipeline for parsing cisco_duo administrator logs",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.4.0"
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "json",
          "ignore_failure": true
        }
      },
      {
        "fingerprint": {
          "fields": [
            "json.timestamp",
            "json.action",
            "json.description",
            "json.object",
            "json.username"
          ],
          "target_field": "_id",
          "ignore_missing": true
        }
      },
      {
        "date": {
          "field": "json.timestamp",
          "target_field": "@timestamp",
          "if": "ctx.json?.timestamp != null",
          "formats": [
            "UNIX"
          ],
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "set": {
          "field": "event.category",
          "value": "iam",
          "if": "ctx?.json?.action instanceof String && ['admin_2fa_error','admin_account_switch','admin_activation_create','admin_activation_delete','admin_activate_duo_push','admin_create','admin_delete','admin_factor_restrictions_update','admin_login','admin_login_error','admin_reactivates_duo_push','admin_reset_password','admin_self_activate','admin_send_reset_password_email','admin_update','adminapi_request_ip_denied','bypass_create','bypass_delete','bypass_view','phone_associate','phone_create','phone_delete','phone_disassociate','phone_update','group_create','group_delete','group_update','user_bulk_activate','user_bulk_enroll','user_create','user_delete','user_import','user_pending_delete','user_restore','user_update'].contains(ctx?.json?.action)"
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "success"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "failure",
          "if": "ctx?.json?.action instanceof String && ['ad_sync_failed','admin_2fa_error','admin_login_error','azure_sync_fail','openldap_sync_failed'].contains(ctx?.json?.action)"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "admin",
          "if": "ctx?.json?.action instanceof String && ['activation_create_link','activation_delete_link','activation_send_link','admin_2fa_error','admin_account_switch','admin_activation_create','admin_activation_delete','admin_activate_duo_push','admin_create','admin_delete','admin_factor_restrictions_update','admin_login','admin_login_error','admin_reactivates_duo_push','admin_reset_password','admin_self_activate','admin_send_reset_password_email','admin_update','adminapi_request_ip_denied'].contains(ctx?.json?.action)"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "group",
          "if": "ctx?.json?.action instanceof String && ['group_create','group_delete','group_update','integration_group_policy_add','integration_group_policy_remove','policy_create','policy_delete','policy_update'].contains(ctx?.json?.action)"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "user",
          "if": "ctx?.json?.action instanceof String && ['ad_sync_by_user_begin','ad_sync_by_user_finish','azure_sync_by_user_begin','azure_sync_by_user_finish','bypass_create','bypass_delete','bypass_view','openldap_sync_begin','openldap_sync_by_user_begin','phone_associate','phone_create','phone_delete','phone_disassociate','phone_update','user_bulk_activate','user_bulk_enroll','user_create','user_delete','user_import','user_pending_delete','user_restore','user_update'].contains(ctx?.json?.action)"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "info",
          "if": "ctx?.json?.action instanceof String && ['ad_sync_begin','ad_sync_failed','ad_sync_finish','azure_directory_create','azure_directory_update','azure_directory_delete','azure_sync_begin','azure_sync_finish','azure_sync_fail','create_child_customer','credits_update','customer_update','delete_child_customer','directory_create','directory_delete','directory_groups_update','directory_sync_pause','directory_sync_resume','directory_update','edition_update','feature_add','feature_delete','hardtoken_create','hardtoken_delete','hardtoken_resync','hardtoken_update','integration_create','integration_delete','integration_policy_assign','integration_policy_unassign','integration_skey_view','integration_update','openldap_sync_by_user_finish','openldap_sync_config_download','openldap_sync_failed','openldap_sync_finish','regen_mobile','regen_sms','resend_enroll_codes','send_enroll_code'].contains(ctx?.json?.action)"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "creation",
          "if": "ctx?.json?.action instanceof String && ctx?.json?.action?.contains(\"create\")"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "change",
          "if": "ctx?.json?.action instanceof String && ctx?.json?.action?.contains(\"update\")"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "deletion",
          "if": "ctx?.json?.action instanceof String && ctx?.json?.action?.contains(\"delete\")"
        }
      },
      {
        "set": {
          "field": "message",
          "copy_from": "json.description",
          "if": "ctx?.json?.description != null"
        }
      },
      {
        "json": {
          "field": "json.description",
          "target_field": "cisco_duo.admin.flattened",
          "if": "ctx?.json?.description != null",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "event.reason",
          "value": "{{{message}}}"
        }
      },
      {
        "set": {
          "field": "event.action",
          "copy_from": "json.action",
          "if": "ctx?.json?.action != null"
        }
      },
      {
        "set": {
          "field": "user.name",
          "copy_from": "json.username",
          "if": "ctx?.json?.username != null"
        }
      },
      {
        "set": {
          "field": "user.email",
          "copy_from": "cisco_duo.admin.flattened.email",
          "if": "ctx?.event?.action == \"admin_self_activate\"",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "user.changes.name",
          "copy_from": "cisco_duo.admin.flattened.realname",
          "if": "ctx?.event?.action == \"user_update\"",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "user.changes.email",
          "copy_from": "cisco_duo.admin.flattened.email",
          "if": "ctx?.event?.action == \"user_update\"",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "user.target.name",
          "copy_from": "json.object",
          "if": "ctx?.json?.object != null"
        }
      },
      {
        "rename": {
          "field": "json.action",
          "target_field": "cisco_duo.admin.action",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.username",
          "target_field": "cisco_duo.admin.user.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.object",
          "target_field": "cisco_duo.admin.action_performed_on",
          "if": "ctx?.json?.object != null"
        }
      },
      {
        "remove": {
          "field": [
            "message",
            "event.reason"
          ],
          "if": "ctx?.cisco_duo?.admin?.flattened != null"
        }
      },
      {
        "remove": {
          "field": "json"
        }
      },
      {
        "script": {
          "description": "Drops null/empty values recursively",
          "lang": "painless",
          "source": "boolean drop(Object o) {\n  if (o == null || o == \"\") {\n    return true;\n  } else if (o instanceof Map) {\n    ((Map) o).values().removeIf(v -> drop(v));\n    return (((Map) o).size() == 0);\n  } else if (o instanceof List) {\n    ((List) o).removeIf(v -> drop(v));\n    return (((List) o).length == 0);\n  }\n  return false;\n}\ndrop(ctx);\n"
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-cisco_duo.admin@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "append": {
          "field": "error.message",
          "value": "{{{_ingest.on_failure_message}}}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "cisco_duo"
      }
    }
  },
  "logs-system.security-1.20.4": {
    "description": "Pipeline for Security events",
    "processors": [
      {
        "convert": {
          "field": "event.code",
          "type": "string",
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-system.security-1.20.4-standard",
          "if": "ctx?.winlog?.provider_name != null && [\"Microsoft-Windows-Eventlog\", \"Microsoft-Windows-Security-Auditing\"].contains(ctx.winlog.provider_name)"
        }
      },
      {
        "gsub": {
          "field": "source.ip",
          "pattern": "::ffff:",
          "replacement": "",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "source.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.asn",
          "target_field": "source.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.organization_name",
          "target_field": "source.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{source.ip}}",
          "allow_duplicates": false,
          "if": "ctx?.source?.ip != null &&\nctx.source.ip != \"-\""
        }
      },
      {
        "convert": {
          "field": "winlog.record_id",
          "type": "string",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "winlog.event_id",
          "type": "string",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "ecs.version",
          "value": "8.0.0"
        }
      },
      {
        "set": {
          "field": "log.level",
          "copy_from": "winlog.level",
          "ignore_empty_value": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.level != \"\""
        }
      },
      {
        "date": {
          "field": "winlog.time_created",
          "formats": [
            "ISO8601"
          ],
          "ignore_failure": true,
          "if": "ctx?.winlog?.time_created != null"
        }
      },
      {
        "pipeline": {
          "name": "logs-system.security@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "Processor \"{{ _ingest.on_failure_processor_type }}\" with tag \"{{ _ingest.on_failure_processor_tag }}\" in pipeline \"{{ _ingest.on_failure_pipeline }}\" failed with message \"{{ _ingest.on_failure_message }}\""
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "system"
      }
    }
  },
  "logs-azure.platformlogs-1.5.4-springcloudlogs-inner-pipeline": {
    "description": "Pipeline for parsing azure spring cloud logs.",
    "processors": [
      {
        "script": {
          "source": "ctx['_index'] = ctx['_index'].replace('platformlogs', 'springcloudlogs')",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "azure.platformlogs",
          "target_field": "azure.springcloudlogs",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "event.dataset",
          "value": "azure.springcloudlogs",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "data_stream.dataset",
          "value": "azure.springcloudlogs",
          "ignore_failure": true
        }
      },
      {
        "drop": {
          "if": "ctx.azure.springcloudlogs.category != 'SystemLogs' && ctx.azure.springcloudlogs.category != 'ApplicationConsole'",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.LogFormat",
          "target_field": "azure.springcloudlogs.log_format",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.properties.InstanceName",
          "target_field": "azure.springcloudlogs.properties.instance_name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.properties.Log",
          "target_field": "azure.springcloudlogs.properties.log",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.properties.ServiceName",
          "target_field": "azure.springcloudlogs.properties.service_name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.properties.Stream",
          "target_field": "azure.springcloudlogs.properties.stream",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.properties.AppName",
          "target_field": "azure.springcloudlogs.properties.app_name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.properties.ServiceId",
          "target_field": "azure.springcloudlogs.properties.service_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.properties.Type",
          "target_field": "azure.springcloudlogs.properties.type",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.properties.Level",
          "target_field": "azure.springcloudlogs.level",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.properties.Logger",
          "target_field": "azure.springcloudlogs.properties.logger",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.properties.Stack",
          "target_field": "azure.springcloudlogs.properties.stack",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.properties.Thread",
          "target_field": "azure.springcloudlogs.properties.thread",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.level",
          "target_field": "log.level",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.springcloudlogs.operationName",
          "target_field": "azure.springcloudlogs.operation_name",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "azure.springcloudlogs.operation_name",
          "target_field": "event.action",
          "type": "string",
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-azure.platformlogs@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "azure"
      }
    }
  },
  "metrics-aws.s3_daily_storage-1.25.2": {
    "description": "Pipeline for S3 daily storage metrics",
    "processors": [
      {
        "rename": {
          "field": "aws.s3.metrics.NumberOfObjects.avg",
          "target_field": "aws.s3_daily_storage.number_of_objects",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.s3.metrics.BucketSizeBytes.avg",
          "target_field": "aws.s3_daily_storage.bucket.size.bytes",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.dimensions.BucketName",
          "target_field": "aws.s3.bucket.name",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": [
            "aws.s3.metrics"
          ],
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "metrics-aws.s3_daily_storage@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "metrics-apm.internal-8.4.2": {
    "description": "Pipeline for ingesting APM internal metrics.",
    "processors": [
      {
        "grok": {
          "field": "observer.version",
          "pattern_definitions": {
            "DIGITS": "(?:[0-9]+)"
          },
          "patterns": [
            "%{DIGITS:observer.version_major:int}.%{DIGITS:observer.version_minor:int}.%{DIGITS:observer.version_patch:int}(?:[-+].*)?"
          ]
        }
      },
      {
        "fail": {
          "if": "ctx.observer.version_major > 8 || (ctx.observer.version_major == 8 && ctx.observer.version_minor > 4)",
          "message": "Document produced by APM Server v{{{observer.version}}}, which is newer than the installed APM integration (v8.4.2). The APM integration must be upgraded."
        }
      },
      {
        "remove": {
          "field": [
            "observer.version_major",
            "observer.version_minor",
            "observer.version_patch"
          ],
          "ignore_missing": true
        }
      },
      {
        "user_agent": {
          "field": "user_agent.original",
          "ignore_failure": true,
          "ignore_missing": true,
          "target_field": "user_agent"
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-City.mmdb",
          "field": "client.ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "client.ip",
                "ignore_failure": true,
                "ignore_missing": true
              }
            }
          ],
          "target_field": "client.geo"
        }
      },
      {
        "pipeline": {
          "name": "metrics-apm.internal@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "apm"
      }
    }
  },
  "logs-azure.activitylogs-1.5.4-azure-shared-pipeline": {
    "description": "Pipeline for parsing Azure shared log fields.",
    "processors": [
      {
        "set": {
          "field": "cloud.provider",
          "value": "azure"
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}/RESOURCEGROUPS/%{GROUPID:azure.resource.group}/PROVIDERS/%{PROVIDERNAME:azure.resource.provider}/NAMESPACES/%{NAMESPACE:azure.resource.namespace}/AUTHORIZATIONRULES/%{RULE:azure.resource.authorization_rule}",
            "/subscriptions/%{SUBID:azure.subscription_id}/resourceGroups/%{GROUPID:azure.resource.group}/providers/%{PROVIDERNAME:azure.resource.provider}/namespaces/%{NAMESPACE:azure.resource.namespace}/authorizationRules/%{RULE:azure.resource.authorization_rule}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "GROUPID": ".+",
            "PROVIDERNAME": ".+",
            "NAMESPACE": ".+",
            "RULE": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}/RESOURCEGROUPS/%{GROUPID:azure.resource.group}/PROVIDERS/%{PROVIDERNAME:azure.resource.provider}/%{NAME:azure.resource.name}",
            "/subscriptions/%{SUBID:azure.subscription_id}/resourceGroups/%{GROUPID:azure.resource.group}/providers/%{PROVIDERNAME:azure.resource.provider}/%{NAME:azure.resource.name}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "GROUPID": ".+",
            "PROVIDERNAME": "([A-Za-z])\\w+.([A-Za-z])\\w+/([A-Za-z])\\w+.",
            "NAME": "((?!AUTHORIZATIONRULES).)*$"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}/RESOURCEGROUPS/%{GROUPID:azure.resource.group}/PROVIDERS/%{PROVIDERNAME:azure.resource.provider}/%{NAME:azure.resource.name}",
            "/subscriptions/%{SUBID:azure.subscription_id}/resourceGroups/%{GROUPID:azure.resource.group}/providers/%{PROVIDERNAME:azure.resource.provider}/%{NAME:azure.resource.name}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "GROUPID": ".+",
            "PROVIDERNAME": "([A-Za-z])\\w+.([A-Za-z])\\w+\\/([A-Za-z][^\\/])\\w+",
            "NAME": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/providers/%{PROVIDER:azure.resource.provider}",
            "/PROVIDERS/%{PROVIDER:azure.resource.provider}"
          ],
          "pattern_definitions": {
            "PROVIDER": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}/PROVIDERS/%{PROVIDERNAME:azure.resource.provider}",
            "/subscriptions/%{SUBID:azure.subscription_id}/providers/%{PROVIDERNAME:azure.resource.provider}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "PROVIDERNAME": "([A-Za-z])\\w+.([A-Za-z])\\w+\\/([A-Za-z][^\\/])\\w+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}/RESOURCEGROUPS/%{GROUPID:azure.resource.group}",
            "/subscriptions/%{SUBID:azure.subscription_id}/resourceGroups/%{GROUPID:azure.resource.group}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "GROUPID": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}",
            "/subscriptions/%{SUBID:azure.subscription_id}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}"
          },
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "azure.resource_id",
          "target_field": "azure.resource.id",
          "ignore_missing": true
        }
      },
      {
        "lowercase": {
          "field": "event.outcome",
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-azure.activitylogs@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "azure"
      }
    }
  },
  "metrics-aws.billing-1.25.2": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-aws.billing@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "logs-crowdstrike.falcon-1.7.0-incident_summary": {
    "processors": [
      {
        "set": {
          "field": "event.kind",
          "value": "alert"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": [
            "malware"
          ]
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": [
            "info"
          ]
        }
      },
      {
        "set": {
          "field": "event.action",
          "value": "incident"
        }
      },
      {
        "set": {
          "field": "agent.type",
          "value": "falcon"
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.FalconHostLink",
          "target_field": "event.url",
          "type": "string",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "message",
          "value": "Incident score {{crowdstrike.event.FineScore}}",
          "if": "ctx?.crowdstrike?.event?.FineScore != null"
        }
      },
      {
        "pipeline": {
          "name": "logs-crowdstrike.falcon@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "crowdstrike"
      }
    }
  },
  "metrics-elastic_agent.metricbeat-1.3.5": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-elastic_agent.metricbeat@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "elastic_agent"
      }
    }
  },
  "logs-aws.cloudwatch_logs-1.25.2": {
    "description": "Pipeline for logs ingested from CloudWatch",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.0.0"
        }
      },
      {
        "set": {
          "field": "event.original",
          "copy_from": "message",
          "override": false
        }
      },
      {
        "set": {
          "field": "cloud.provider",
          "value": "aws"
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "pipeline": {
          "name": "logs-aws.cloudwatch_logs@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "logs-crowdstrike.fdr-1.7.0": {
    "description": "Pipeline for processing sample logs",
    "processors": [
      {
        "rename": {
          "tag": "message-to-original",
          "field": "message",
          "target_field": "event.original"
        }
      },
      {
        "json": {
          "tag": "json-decoding",
          "description": "Decodes original JSON into `crowdstrike` field.",
          "field": "event.original",
          "target_field": "crowdstrike"
        }
      },
      {
        "date": {
          "tag": "date-timestamp-utc",
          "description": "Parse timestamp from event.",
          "field": "crowdstrike.UTCTimestamp",
          "target_field": "event.created",
          "formats": [
            "UNIX_MS",
            "ISO8601"
          ],
          "ignore_failure": true,
          "if": "ctx.event?.created == null"
        }
      },
      {
        "date": {
          "tag": "date-timestamp",
          "description": "Parse timestamp from event.",
          "field": "crowdstrike.timestamp",
          "target_field": "event.created",
          "formats": [
            "UNIX_MS",
            "ISO8601"
          ],
          "ignore_failure": true,
          "if": "ctx.event?.created == null"
        }
      },
      {
        "date": {
          "tag": "date-event-created",
          "description": "Parse timestamp from event.",
          "field": "crowdstrike.CreationTimeStamp",
          "target_field": "event.created",
          "formats": [
            "UNIX",
            "ISO8601"
          ],
          "ignore_failure": true,
          "if": "ctx.event?.created == null"
        }
      },
      {
        "date": {
          "tag": "date-agent-local-time",
          "description": "Parse timestamp from event.",
          "field": "crowdstrike.AgentLocalTime",
          "target_field": "event.created",
          "formats": [
            "ISO8601",
            "UNIX"
          ],
          "ignore_failure": true,
          "if": "ctx.event?.created == null"
        }
      },
      {
        "set": {
          "tag": "set-timestamp",
          "field": "@timestamp",
          "copy_from": "event.created",
          "if": "ctx.event?.created != null && (ctx.crowdstrike?.ContextTimeStamp == null || ctx.crowdstrike?.ContextTimeStamp == \"\")"
        }
      },
      {
        "set": {
          "tag": "set-timestamp-ingest",
          "field": "@timestamp",
          "copy_from": "_ingest.timestamp",
          "if": "ctx[\"@timestamp\"] == null"
        }
      },
      {
        "date": {
          "tag": "date-context-timestamp",
          "if": "ctx.crowdstrike?.ContextTimeStamp != null",
          "field": "crowdstrike.ContextTimeStamp",
          "formats": [
            "UNIX"
          ],
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "tag": "rename-message",
          "field": "crowdstrike.message",
          "target_field": "message",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "ecs.version",
          "value": "8.4.0"
        }
      },
      {
        "script": {
          "tag": "script-categorize-events",
          "description": "Categorize events.",
          "lang": "painless",
          "params": {
            "AcUninstallConfirmation": {
              "category": [
                "package"
              ],
              "type": [
                "deletion"
              ],
              "kind": "state",
              "outcome": "success"
            },
            "AcUnloadConfirmation": {
              "category": [
                "package"
              ],
              "type": [
                "deletion"
              ],
              "kind": "state",
              "outcome": "success"
            },
            "AgentConnect": {
              "category": [
                "network",
                "session"
              ],
              "type": [
                "connection",
                "info"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "AgentOnline": {
              "category": [
                "configuration",
                "package",
                "host"
              ],
              "type": [
                "change",
                "installation",
                "start"
              ],
              "kind": "state",
              "outcome": "success"
            },
            "AmsiRegistrationStatus": {
              "category": [
                "host"
              ],
              "type": [
                "info"
              ],
              "kind": "state",
              "outcome": "success"
            },
            "AsepFileChange": {
              "category": [
                "file"
              ],
              "type": [
                "creation",
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "AsepKeyUpdate": {
              "category": [
                "registry"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "AsepValueUpdate": {
              "category": [
                "registry"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "AssociateIndicator": {
              "category": [
                "malware"
              ],
              "type": [
                "info"
              ],
              "kind": "alert",
              "outcome": "unknown"
            },
            "AssociateTreeIdWithRoot": {
              "category": [
                "malware"
              ],
              "type": [
                "info"
              ],
              "kind": "alert",
              "outcome": "success"
            },
            "BITSJobCreated": {
              "category": [
                "network",
                "file"
              ],
              "type": [
                "connection",
                "creation"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "BZip2FileWritten": {
              "category": [
                "file"
              ],
              "type": [
                "creation"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "BehaviorWhitelisted": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "BrowserInjectedThread": {
              "category": [
                "process"
              ],
              "type": [
                "access",
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "CloudAssociateTreeIdWithRoot": {
              "category": [
                "malware"
              ],
              "type": [
                "deletion"
              ],
              "kind": "alert",
              "outcome": "success"
            },
            "CommandHistory": {
              "category": [
                "process"
              ],
              "type": [
                "end",
                "info"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "ConfigStateUpdate": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "CrashNotification": {
              "category": [
                "host"
              ],
              "type": [
                "info"
              ],
              "kind": "event",
              "outcome": "failure"
            },
            "CreateProcessArgs": {
              "category": [
                "process"
              ],
              "type": [
                "start"
              ],
              "kind": "state",
              "outcome": "success"
            },
            "CreateService": {
              "category": [
                "host"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "CreateThreadNoStartImage": {
              "category": [
                "process"
              ],
              "type": [
                "start"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "CreateThreadReflectiveDll": {
              "category": [
                "process"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "CriticalEnvironmentVariableChanged": {
              "category": [
                "configuration",
                "host"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "CriticalFileAccessed": {
              "category": [
                "file"
              ],
              "type": [
                "access"
              ],
              "kind": "alert",
              "outcome": "success"
            },
            "CriticalFileModified": {
              "category": [
                "file"
              ],
              "type": [
                "change"
              ],
              "kind": "alert",
              "outcome": "success"
            },
            "CurrentSystemTags": {
              "category": [
                "host"
              ],
              "type": [
                "info"
              ],
              "kind": "state",
              "outcome": "success"
            },
            "CustomIOABasicProcessDetectionInfoEvent": {
              "category": [
                "malware"
              ],
              "type": [
                "info"
              ],
              "kind": "alert",
              "outcome": "unknown"
            },
            "DCSyncAttempted": {
              "category": [
                "configuration",
                "iam"
              ],
              "type": [
                "access"
              ],
              "kind": "event",
              "outcome": "unknown"
            },
            "DcOffline": {
              "category": [
                "iam"
              ],
              "type": [
                "info"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "DcOnline": {
              "category": [
                "iam"
              ],
              "type": [
                "info"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "DcStatus": {
              "category": [
                "iam"
              ],
              "type": [
                "info"
              ],
              "kind": "state",
              "outcome": "success"
            },
            "DetectAnalysis": {
              "category": [
                "malware"
              ],
              "type": [
                "info"
              ],
              "kind": "alert",
              "outcome": "success"
            },
            "DetectionExcluded": {
              "category": [
                "configuration",
                "malware"
              ],
              "type": [
                "change",
                "info"
              ],
              "kind": "alert",
              "outcome": "success"
            },
            "DirectoryCreate": {
              "category": [
                "file"
              ],
              "type": [
                "creation"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "DllInjection": {
              "category": [
                "process"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "DmpFileWritten": {
              "category": [
                "file"
              ],
              "type": [
                "creation"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "DnsRequest": {
              "category": [
                "network"
              ],
              "type": [
                "protocol"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "DocumentProgramInjectedThread": {
              "category": [
                "process"
              ],
              "type": [
                "access",
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "DriverLoad": {
              "category": [
                "driver"
              ],
              "type": [
                "start"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "DwgFileWritten": {
              "category": [
                "file"
              ],
              "type": [
                "creation"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "EarlyExploitPivotDetect": {
              "category": [
                "malware"
              ],
              "type": [
                "info"
              ],
              "kind": "event",
              "outcome": "unknown"
            },
            "EndOfProcess": {
              "category": [
                "process"
              ],
              "type": [
                "end"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "ErrorEvent": {
              "category": [
                "package"
              ],
              "type": [
                "info"
              ],
              "kind": "alert",
              "outcome": "failure"
            },
            "EtwErrorEvent": {
              "category": [
                "package",
                "host"
              ],
              "type": [
                "info"
              ],
              "kind": "event",
              "outcome": "failure"
            },
            "ExecutableDeleted": {
              "category": [
                "file"
              ],
              "type": [
                "deletion"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "FalconHostRegTamperingInfo": {
              "category": [
                "registry"
              ],
              "type": [
                "change"
              ],
              "kind": "alert",
              "outcome": "unknown"
            },
            "FalconServiceStatus": {
              "category": [
                "package"
              ],
              "type": [
                "info"
              ],
              "kind": "state",
              "outcome": "unknown"
            },
            "FileCreateInfo": {
              "category": [
                "file"
              ],
              "type": [
                "creation"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "FileDeleteInfo": {
              "category": [
                "file"
              ],
              "type": [
                "deletion"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "FileDetectInfo": {
              "category": [
                "file"
              ],
              "type": [
                "info"
              ],
              "kind": "alert",
              "outcome": "unknown"
            },
            "FileInfo": {
              "category": [
                "file"
              ],
              "type": [
                "info"
              ],
              "kind": "event",
              "outcome": "unknown"
            },
            "FileOpenInfo": {
              "category": [
                "file"
              ],
              "type": [
                "access"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "FileRenameInfo": {
              "category": [
                "file"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "FileSystemOperationBlocked": {
              "category": [
                "file"
              ],
              "type": [
                "change",
                "deletion"
              ],
              "kind": "event",
              "outcome": "failure"
            },
            "FileSystemOperationDetectInfo": {
              "category": [
                "file"
              ],
              "type": [
                "change",
                "deletion"
              ],
              "kind": "alert",
              "outcome": "unknown"
            },
            "FileTimestampsModified": {
              "category": [
                "file"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "FirewallChangeOption": {
              "category": [
                "configuration",
                "host"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "FirewallDeleteRule": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "FirewallDeleteRuleIP4": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "FirewallDeleteRuleIP6": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "FirewallDisabled": {
              "category": [
                "configuration",
                "host"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "FirewallEnabled": {
              "category": [
                "configuration",
                "host"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "FirewallSetRule": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "FirewallSetRuleIP4": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "FirewallSetRuleIP6": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "FirmwareAnalysisErrorEvent": {
              "category": [
                "host"
              ],
              "type": [
                "info"
              ],
              "kind": "state",
              "outcome": "failure"
            },
            "FirmwareAnalysisHardwareData": {
              "category": [
                "host"
              ],
              "type": [
                "info"
              ],
              "kind": "state",
              "outcome": "success"
            },
            "FirmwareAnalysisStatus": {
              "category": [
                "host"
              ],
              "type": [
                "info"
              ],
              "kind": "state",
              "outcome": "success"
            },
            "FlashThreadCreateProcess": {
              "category": [
                "process"
              ],
              "type": [
                "start"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "FsPostOpenSnapshotFile": {
              "category": [
                "file"
              ],
              "type": [
                "access"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "FsVolumeMounted": {
              "category": [
                "host"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "FsVolumeUnmounted": {
              "category": [
                "host"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "HostInfo": {
              "category": [
                "host"
              ],
              "type": [
                "info"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "HostedServiceStarted": {
              "category": [
                "package"
              ],
              "type": [
                "start"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "HostedServiceStopped": {
              "category": [
                "package"
              ],
              "type": [
                "end"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "HostnameChanged": {
              "category": [
                "host"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "HttpRequestDetect": {
              "category": [
                "network",
                "session"
              ],
              "type": [
                "connection",
                "start"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "HttpVisibilityStatus": {
              "category": [
                "session"
              ],
              "type": [
                "info"
              ],
              "kind": "state",
              "outcome": "unknown"
            },
            "IOServiceRegister": {
              "category": [
                "package"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "ImageHash": {
              "category": [
                "process"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "InjectedThread": {
              "category": [
                "process"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "InjectedThreadFromUnsignedModule": {
              "category": [
                "process"
              ],
              "type": [
                "change"
              ],
              "kind": "alert",
              "outcome": "success"
            },
            "InstallBundleDownloadComplete": {
              "category": [
                "file"
              ],
              "type": [
                "creation"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "InstallServiceDownloadComplete": {
              "category": [
                "file"
              ],
              "type": [
                "creation"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "InstalledApplication": {
              "category": [
                "package"
              ],
              "type": [
                "installation"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "InstalledUpdates": {
              "category": [
                "host",
                "package"
              ],
              "type": [
                "change",
                "installation"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "InstanceMetadata": {
              "category": [
                "host"
              ],
              "type": [
                "info"
              ],
              "kind": "state",
              "outcome": "unknown"
            },
            "IoSessionConnected": {
              "category": [
                "session"
              ],
              "type": [
                "start"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "IoSessionLoggedOn": {
              "category": [
                "session"
              ],
              "type": [
                "end"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "JarFileWritten": {
              "category": [
                "file"
              ],
              "type": [
                "creation"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "JavaClassFileWritten": {
              "category": [
                "file"
              ],
              "type": [
                "creation"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "JavaInjectedThread": {
              "category": [
                "process"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "KernelModeLoadImage": {
              "category": [
                "driver"
              ],
              "type": [
                "start"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "KextLoad": {
              "category": [
                "driver"
              ],
              "type": [
                "start"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "KextUnload": {
              "category": [
                "driver"
              ],
              "type": [
                "end"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "LFODownloadConfirmation": {
              "category": [
                "file"
              ],
              "type": [
                "creation"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "LfoUploadDataComplete": {
              "category": [
                "file"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "LfoUploadDataFailed": {
              "category": [
                "file"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "failure"
            },
            "LfoUploadDataUnneeded": {
              "category": [
                "file"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "failure"
            },
            "LocalIpAddressIP4": {
              "category": [
                "configuration",
                "host"
              ],
              "type": [
                "change"
              ],
              "kind": "state",
              "outcome": "success"
            },
            "LocalIpAddressIP6": {
              "category": [
                "configuration",
                "host"
              ],
              "type": [
                "change"
              ],
              "kind": "state",
              "outcome": "success"
            },
            "LocalIpAddressRemovedIP4": {
              "category": [
                "configuration",
                "host"
              ],
              "type": [
                "change"
              ],
              "kind": "state",
              "outcome": "success"
            },
            "LocalIpAddressRemovedIP6": {
              "category": [
                "configuration",
                "host"
              ],
              "type": [
                "change"
              ],
              "kind": "state",
              "outcome": "success"
            },
            "LsassHandleFromUnsignedModule": {
              "category": [
                "process"
              ],
              "type": [
                "change"
              ],
              "kind": "alert",
              "outcome": "unknown"
            },
            "MachOFileWritten": {
              "category": [
                "file"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "ManifestDownloadComplete": {
              "category": [
                "configuration",
                "file"
              ],
              "type": [
                "change",
                "creation"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "ModifyServiceBinary": {
              "category": [
                "file"
              ],
              "type": [
                "change"
              ],
              "kind": "alert",
              "outcome": "unknown"
            },
            "ModuleBlockedEvent": {
              "category": [
                "process",
                "malware"
              ],
              "type": [
                "info",
                "denied"
              ],
              "kind": "alert",
              "outcome": "success"
            },
            "ModuleBlockedEventWithPatternId": {
              "category": [
                "process",
                "malware"
              ],
              "type": [
                "info"
              ],
              "kind": "event",
              "outcome": "unknown"
            },
            "ModuleDetectInfo": {
              "category": [
                "process",
                "malware"
              ],
              "type": [
                "info"
              ],
              "kind": "event",
              "outcome": "unknown"
            },
            "NeighborListIP4": {
              "category": [
                "host",
                "network"
              ],
              "type": [
                "info"
              ],
              "kind": "state",
              "outcome": "unknown"
            },
            "NeighborListIP6": {
              "category": [
                "host",
                "network"
              ],
              "type": [
                "info"
              ],
              "kind": "state",
              "outcome": "unknown"
            },
            "NetShareAdd": {
              "category": [
                "host"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "NetShareDelete": {
              "category": [
                "host"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "NetShareSecurityModify": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "NetworkCloseIP4": {
              "category": [
                "network"
              ],
              "type": [
                "end",
                "connection"
              ],
              "kind": "event",
              "outcome": "unknown"
            },
            "NetworkCloseIP6": {
              "category": [
                "network"
              ],
              "type": [
                "end",
                "connection"
              ],
              "kind": "event",
              "outcome": "unknown"
            },
            "NetworkConnectIP4": {
              "category": [
                "network"
              ],
              "type": [
                "start",
                "connection"
              ],
              "kind": "event",
              "outcome": "unknown"
            },
            "NetworkConnectIP6": {
              "category": [
                "network"
              ],
              "type": [
                "start",
                "connection"
              ],
              "kind": "event",
              "outcome": "unknown"
            },
            "NetworkListenIP4": {
              "category": [
                "network"
              ],
              "type": [
                "start"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "NetworkListenIP6": {
              "category": [
                "network"
              ],
              "type": [
                "start"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "NetworkReceiveAcceptIP4": {
              "category": [
                "network"
              ],
              "type": [
                "allowed",
                "access",
                "connection"
              ],
              "kind": "event",
              "outcome": "unknown"
            },
            "NetworkReceiveAcceptIP6": {
              "category": [
                "network"
              ],
              "type": [
                "allowed",
                "access",
                "connection"
              ],
              "kind": "event",
              "outcome": "unknown"
            },
            "NewExecutableRenamed": {
              "category": [
                "file"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "NewExecutableWritten": {
              "category": [
                "file"
              ],
              "type": [
                "creation"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "NewScriptWritten": {
              "category": [
                "file"
              ],
              "type": [
                "creation"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "OciContainerTelemetry": {
              "category": [
                "host"
              ],
              "type": [
                "info"
              ],
              "kind": "state",
              "outcome": "unknown"
            },
            "OleFileWritten": {
              "category": [
                "file"
              ],
              "type": [
                "creation"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "OoxmlFileWritten": {
              "category": [
                "file"
              ],
              "type": [
                "creation"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "OsVersionInfo": {
              "category": [
                "host"
              ],
              "type": [
                "info"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "PackedExecutableWritten": {
              "category": [
                "file"
              ],
              "type": [
                "creation"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "PdfFileWritten": {
              "category": [
                "file"
              ],
              "type": [
                "creation"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "PeFileWritten": {
              "category": [
                "file"
              ],
              "type": [
                "creation"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "PeVersionInfo": {
              "category": [
                "file"
              ],
              "type": [
                "info"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "PrivilegedProcessHandleFromUnsignedModule": {
              "category": [
                "process"
              ],
              "type": [
                "access"
              ],
              "kind": "alert",
              "outcome": "success"
            },
            "ProcessBlocked": {
              "category": [
                "process"
              ],
              "type": [
                "access"
              ],
              "kind": "alert",
              "outcome": "failure"
            },
            "ProcessExecOnPackedExecutable": {
              "category": [
                "process",
                "file"
              ],
              "type": [
                "access"
              ],
              "kind": "alert",
              "outcome": "success"
            },
            "ProcessExecOnSMBFile": {
              "category": [
                "process",
                "file",
                "network"
              ],
              "type": [
                "access"
              ],
              "kind": "alert",
              "outcome": "success"
            },
            "ProcessHandleOpDetectInfo": {
              "category": [
                "process",
                "malware"
              ],
              "type": [
                "info"
              ],
              "kind": "alert",
              "outcome": "success"
            },
            "ProcessInjection": {
              "category": [
                "process"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "ProcessRollup2": {
              "category": [
                "process"
              ],
              "type": [
                "start"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "ProcessRollup2Stats": {
              "category": [
                "process"
              ],
              "type": [
                "info"
              ],
              "kind": "state",
              "outcome": "unknown"
            },
            "ProcessSelfDeleted": {
              "category": [
                "process"
              ],
              "type": [
                "end"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "PromiscuousBindIP4": {
              "category": [
                "host"
              ],
              "type": [
                "change"
              ],
              "kind": "state",
              "outcome": "success"
            },
            "PtyCreated": {
              "category": [
                "file"
              ],
              "type": [
                "creation"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "QuarantineActionResult": {
              "category": [
                "file"
              ],
              "type": [
                "info"
              ],
              "kind": "alert",
              "outcome": "unknown"
            },
            "QuarantinedFile": {
              "category": [
                "file"
              ],
              "type": [
                "change"
              ],
              "kind": "alert",
              "outcome": "unknown"
            },
            "QuarantinedFileState": {
              "category": [
                "file"
              ],
              "type": [
                "info"
              ],
              "kind": "alert",
              "outcome": "unknown"
            },
            "QueueApcEtw": {
              "category": [
                "file"
              ],
              "type": [
                "creation"
              ],
              "kind": "alert",
              "outcome": "success"
            },
            "RansomwareCreateFile": {
              "category": [
                "file"
              ],
              "type": [
                "creation"
              ],
              "kind": "alert",
              "outcome": "success"
            },
            "RansomwareFileAccessPattern": {
              "category": [
                "file"
              ],
              "type": [
                "access"
              ],
              "kind": "alert",
              "outcome": "success"
            },
            "RansomwareOpenFile": {
              "category": [
                "file"
              ],
              "type": [
                "access"
              ],
              "kind": "alert",
              "outcome": "success"
            },
            "RarFileWritten": {
              "category": [
                "file"
              ],
              "type": [
                "creation"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "RawBindIP4": {
              "category": [
                "network"
              ],
              "type": [
                "start",
                "connection"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "RawBindIP6": {
              "category": [
                "network"
              ],
              "type": [
                "start",
                "connection"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "ReflectiveDllOpenProcess": {
              "category": [
                "process"
              ],
              "type": [
                "access"
              ],
              "kind": "alert",
              "outcome": "success"
            },
            "RegGenericValueUpdate": {
              "category": [
                "registry"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "RegSystemConfigValueUpdate": {
              "category": [
                "registry",
                "host",
                "configuration"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "RegisterRawInputDevicesEtw": {
              "category": [
                "host",
                "configuration"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "RegistryOperationDetectInfo": {
              "category": [
                "malware",
                "registry"
              ],
              "type": [
                "info"
              ],
              "kind": "alert",
              "outcome": "success"
            },
            "RemoteBruteForceDetectInfo": {
              "category": [
                "malware",
                "authentication"
              ],
              "type": [
                "info"
              ],
              "kind": "alert",
              "outcome": "success"
            },
            "RemovableDiskModuleLoadAttempt": {
              "category": [
                "configuration",
                "host"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "RemovableMediaVolumeMounted": {
              "category": [
                "configuration",
                "host"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "RtfFileWritten": {
              "category": [
                "file"
              ],
              "type": [
                "creation"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "SAMHashDumpFromUnsignedModule": {
              "category": [
                "registry",
                "file"
              ],
              "type": [
                "access",
                "creation"
              ],
              "kind": "alert",
              "outcome": "success"
            },
            "ScheduledTaskDeleted": {
              "category": [
                "configuration"
              ],
              "type": [
                "deletion"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "ScheduledTaskModified": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "ScheduledTaskRegistered": {
              "category": [
                "configuration"
              ],
              "type": [
                "creation"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "ScreenshotTakenEtw": {
              "category": [
                "process"
              ],
              "type": [
                "access"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "ScriptControlBlocked": {
              "category": [
                "malware",
                "file"
              ],
              "type": [
                "info"
              ],
              "kind": "alert",
              "outcome": "success"
            },
            "ScriptControlDetectInfo": {
              "category": [
                "malware",
                "file"
              ],
              "type": [
                "info"
              ],
              "kind": "alert",
              "outcome": "success"
            },
            "ScriptControlErrorEvent": {
              "category": [
                "malware",
                "file"
              ],
              "type": [
                "info"
              ],
              "kind": "alert",
              "outcome": "failure"
            },
            "ScriptControlScanInfo": {
              "category": [
                "malware",
                "file"
              ],
              "type": [
                "info"
              ],
              "kind": "state",
              "outcome": "success"
            },
            "ScriptControlScanTelemetry": {
              "category": [
                "malware",
                "file"
              ],
              "type": [
                "info"
              ],
              "kind": "state",
              "outcome": "success"
            },
            "SensitiveWmiQuery": {
              "category": [
                "malware",
                "process"
              ],
              "type": [
                "info"
              ],
              "kind": "alert",
              "outcome": "success"
            },
            "SensorHeartbeat": {
              "category": [
                "package"
              ],
              "type": [
                "info"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "ServiceStarted": {
              "category": [
                "process"
              ],
              "type": [
                "start"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "SetWinEventHookEtw": {
              "category": [
                "host",
                "configuration"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "SevenZipFileWritten": {
              "category": [
                "file"
              ],
              "type": [
                "creation"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "SignInfoError": {
              "category": [
                "file"
              ],
              "type": [
                "info"
              ],
              "kind": "state",
              "outcome": "failure"
            },
            "SignInfoWithCertAndContext": {
              "category": [
                "file"
              ],
              "type": [
                "info"
              ],
              "kind": "state",
              "outcome": "unknown"
            },
            "SignInfoWithContext": {
              "category": [
                "file"
              ],
              "type": [
                "info"
              ],
              "kind": "state",
              "outcome": "unknown"
            },
            "SmbClientNamedPipeConnectEtw": {
              "category": [
                "network"
              ],
              "type": [
                "connection"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "SmbClientShareClosedEtw": {
              "category": [
                "network"
              ],
              "type": [
                "connection",
                "end"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "SmbClientShareOpenedEtw": {
              "category": [
                "network"
              ],
              "type": [
                "connection",
                "start"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "SmbServerShareOpenedEtw": {
              "category": [
                "network"
              ],
              "type": [
                "connection",
                "start"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "SmbServerV1AuditEtw": {
              "category": [
                "network"
              ],
              "type": [
                "connection"
              ],
              "kind": "state",
              "outcome": "unknown"
            },
            "SnapshotVolumeMounted": {
              "category": [
                "host",
                "configuration"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "SuspiciousCreateSymbolicLink": {
              "category": [
                "malware",
                "file"
              ],
              "type": [
                "creation",
                "info"
              ],
              "kind": "alert",
              "outcome": "success"
            },
            "SuspiciousDnsRequest": {
              "category": [
                "network"
              ],
              "type": [
                "start",
                "protocol"
              ],
              "kind": "alert",
              "outcome": "success"
            },
            "SuspiciousEseFileWritten": {
              "category": [
                "malware",
                "file"
              ],
              "type": [
                "creation",
                "info"
              ],
              "kind": "alert",
              "outcome": "success"
            },
            "SuspiciousRegAsepUpdate": {
              "category": [
                "malware",
                "registry",
                "configuration"
              ],
              "type": [
                "change",
                "info"
              ],
              "kind": "alert",
              "outcome": "success"
            },
            "SuspiciousUserRemoteAPCAttempt": {
              "category": [
                "malware",
                "process"
              ],
              "type": [
                "info"
              ],
              "kind": "alert",
              "outcome": "success"
            },
            "SyntheticProcessRollup2": {
              "category": [
                "process"
              ],
              "type": [
                "start"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "SystemCapacity": {
              "category": [
                "host"
              ],
              "type": [
                "info"
              ],
              "kind": "state",
              "outcome": "success"
            },
            "TarFileWritten": {
              "category": [
                "file"
              ],
              "type": [
                "creation"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "TelemetryCounters2": {
              "category": [
                "host"
              ],
              "type": [
                "info"
              ],
              "kind": "state",
              "outcome": "success"
            },
            "TelemetryNetworkConnections": {
              "category": [
                "network"
              ],
              "type": [
                "connection"
              ],
              "kind": "state",
              "outcome": "success"
            },
            "TelemetryStats": {
              "category": [
                "host"
              ],
              "type": [
                "info"
              ],
              "kind": "state",
              "outcome": "success"
            },
            "TerminateProcess": {
              "category": [
                "process"
              ],
              "type": [
                "end"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "TokenImpersonated": {
              "category": [
                "process",
                "authentication"
              ],
              "type": [
                "info",
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "UACCOMElevation": {
              "category": [
                "process",
                "authentication"
              ],
              "type": [
                "info",
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "UACExeElevation": {
              "category": [
                "process",
                "authentication"
              ],
              "type": [
                "info",
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "UACMSIElevation": {
              "category": [
                "process",
                "authentication"
              ],
              "type": [
                "info",
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "UmppaErrorEvent": {
              "category": [
                "package"
              ],
              "type": [
                "info"
              ],
              "kind": "event",
              "outcome": "failure"
            },
            "UnsignedModuleLoad": {
              "category": [
                "process"
              ],
              "type": [
                "change"
              ],
              "kind": "alert",
              "outcome": "success"
            },
            "UpdateManifestDownloadComplete": {
              "category": [
                "file"
              ],
              "type": [
                "creation"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "UserAccountAddedToGroup": {
              "category": [
                "configuration",
                "iam"
              ],
              "type": [
                "change",
                "group"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "UserAccountCreated": {
              "category": [
                "configuration",
                "iam"
              ],
              "type": [
                "creation"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "UserAccountDeleted": {
              "category": [
                "configuration",
                "iam"
              ],
              "type": [
                "deletion"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "UserExceptionDEP": {
              "category": [
                "process",
                "malware"
              ],
              "type": [
                "info"
              ],
              "kind": "alert",
              "outcome": "success"
            },
            "UserFontLoad": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "UserIdentity": {
              "category": [
                "authentication",
                "iam"
              ],
              "type": [
                "info",
                "user"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "UserLogoff": {
              "category": [
                "authentication"
              ],
              "type": [
                "end"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "UserLogon": {
              "category": [
                "authentication"
              ],
              "type": [
                "start"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "UserLogonFailed": {
              "category": [
                "authentication"
              ],
              "type": [
                "start"
              ],
              "kind": "event",
              "outcome": "failure"
            },
            "UserLogonFailed2": {
              "category": [
                "authentication"
              ],
              "type": [
                "start"
              ],
              "kind": "event",
              "outcome": "failure"
            },
            "VolumeSnapshotCreated": {
              "category": [
                "file"
              ],
              "type": [
                "creation"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "VolumeSnapshotDeleted": {
              "category": [
                "file"
              ],
              "type": [
                "deletion"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "WfpFilterTamperingFilterAdded": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "WfpFilterTamperingFilterDeleted": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "WmiCreateProcess": {
              "category": [
                "process"
              ],
              "type": [
                "start"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "WmiFilterConsumerBindingEtw": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "WmiProviderRegistrationEtw": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "WroteExeAndGeneratedServiceEvent": {
              "category": [
                "process"
              ],
              "type": [
                "access"
              ],
              "kind": "alert",
              "outcome": "success"
            },
            "XarFileWritten": {
              "category": [
                "file"
              ],
              "type": [
                "creation"
              ],
              "kind": "event",
              "outcome": "success"
            },
            "ZipFileWritten": {
              "category": [
                "file"
              ],
              "type": [
                "creation"
              ],
              "kind": "event",
              "outcome": "success"
            }
          },
          "source": "def m = params.get(ctx.crowdstrike?.event_simpleName);\nif (m != null) {\n  m.forEach((k, v) -> {\n    if (v instanceof List) {\n      ctx.event[k] = new ArrayList(v);\n    } else {\n      ctx.event[k] = v;\n    }\n  });\n}"
        }
      },
      {
        "rename": {
          "field": "crowdstrike.id",
          "target_field": "event.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.event_simpleName",
          "target_field": "event.action",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "tag": "convert-count-fields-to-long",
          "description": "Convert all count fields to number.",
          "lang": "painless",
          "source": "for (entry in ctx.crowdstrike.entrySet()) {\n  def key = entry.getKey().toString();\n  if (key.contains(\"Count\") || key.contains(\"Port\")) {\n    try {\n      ctx.crowdstrike[key] = Long.parseLong(entry.getValue().toString());\n    } catch (Exception e) {\n    }\n  }\n}"
        }
      },
      {
        "script": {
          "tag": "remove-empty-hashes",
          "description": "Remove all 0's hashes.",
          "lang": "painless",
          "params": {
            "MD5HashData": "md5",
            "SHA1HashData": "sha1",
            "SHA256HashData": "sha256"
          },
          "source": "def hashIsEmpty(String hash) {\n  if (hash == null || hash == \"\") {\n    return true;\n  }\n  \n  Pattern emptyHashRegex = /^0*$/;\n  def matcher = emptyHashRegex.matcher(hash);\n  \n  return matcher.matches(); \n}\n\ndef hashes = new HashMap();\ndef related = [\n  \"hash\": new ArrayList()\n];\nfor (entry in params.entrySet()) {\n  def key = entry.getKey().toString();\n  def value = ctx.crowdstrike[key];\n  ctx.crowdstrike.remove(key);\n  if (hashIsEmpty(value)) {\n    continue;\n  }\n\n  hashes[entry.getValue().toString()] = value;\n  related.hash.add(value);\n}\n\nctx._temp = new HashMap();\nctx._temp.hashes = hashes;\nif (related.hash.length > 0) {\n  ctx.related = related;\n}"
        }
      },
      {
        "rename": {
          "field": "crowdstrike.aid",
          "target_field": "observer.serial_number",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.aip",
          "type": "ip",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.aip",
          "target_field": "observer.ip",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.address",
          "copy_from": "observer.ip",
          "ignore_empty_value": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.AgentVersion",
          "target_field": "observer.version",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.ConfigBuild",
          "target_field": "observer.version",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.vendor",
          "value": "crowdstrike"
        }
      },
      {
        "set": {
          "field": "observer.type",
          "value": "agent"
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{observer.ip}}}",
          "allow_duplicates": false,
          "if": "ctx.observer?.ip != null && ctx.observer.ip != \"\""
        }
      },
      {
        "append": {
          "field": "related.hosts",
          "value": "{{{observer.ip}}}",
          "allow_duplicates": false,
          "if": "ctx.observer?.ip != null && ctx.observer.ip != \"\""
        }
      },
      {
        "rename": {
          "field": "crowdstrike.ComputerName",
          "target_field": "host.hostname",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "host.name",
          "copy_from": "host.hostname",
          "ignore_empty_value": true,
          "ignore_failure": true
        }
      },
      {
        "append": {
          "field": "related.hosts",
          "value": "{{{host.name}}}",
          "allow_duplicates": false,
          "if": "ctx.host?.name != null"
        }
      },
      {
        "rename": {
          "field": "crowdstrike.City",
          "target_field": "host.geo.city_name",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.Continent",
          "target_field": "host.geo.continent_name",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.Country",
          "target_field": "host.geo.country_name",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.Timezone",
          "target_field": "host.geo.timezone",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.MachineDomain",
          "target_field": "host.domain",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "source.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "field": "destination.ip",
          "target_field": "destination.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "destination.ip",
          "target_field": "destination.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.asn",
          "target_field": "source.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.organization_name",
          "target_field": "source.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "destination.as.asn",
          "target_field": "destination.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "destination.as.organization_name",
          "target_field": "destination.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "os.type",
          "value": "linux",
          "if": "ctx.crowdstrike?.event_platform != null && ctx.crowdstrike?.event_platform == \"Lin\""
        }
      },
      {
        "set": {
          "field": "os.type",
          "value": "macos",
          "if": "ctx.crowdstrike?.event_platform != null && ctx.crowdstrike?.event_platform == \"Mac\""
        }
      },
      {
        "set": {
          "field": "os.type",
          "value": "windows",
          "if": "ctx.crowdstrike?.event_platform != null && ctx.crowdstrike?.event_platform == \"Win\""
        }
      },
      {
        "rename": {
          "field": "crowdstrike.OSVersionString",
          "target_field": "os.version",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.Version",
          "target_field": "os.version",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.CommandLine",
          "target_field": "process.command_line",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "tag": "split-command-line",
          "description": "Implements Windows-like SplitCommandLine",
          "lang": "painless",
          "if": "ctx.process?.command_line != null && ctx.process.command_line != \"\" && ctx.os?.type != null",
          "source": "// appendBSBytes appends n '\\\\' bytes to b and returns the resulting slice.\ndef appendBSBytes(StringBuilder b, int n) {\n    for (; n > 0; n--) {\n        b.append('\\\\');\n    }\n    return b;\n}\n\n// readNextArg splits command line string cmd into next\n// argument and command line remainder.\ndef readNextArg(String cmd) {\n    def b = new StringBuilder();\n    boolean inquote;\n    int nslash;\n    for (; cmd.length() > 0; cmd = cmd.substring(1)) {\n        def c = cmd.charAt(0);\n        if (c == (char)' ' || c == (char)0x09) {\n            if (!inquote) {\n                return [\n                    \"arg\":  appendBSBytes(b, nslash).toString(),\n                    \"rest\": cmd.substring(1)\n                ];\n            }\n        } else if (c == (char)'\"') {\n            b = appendBSBytes(b, nslash/2);\n            if (nslash%2 == 0) {\n                // use \"Prior to 2008\" rule from\n                // http://daviddeley.com/autohotkey/parameters/parameters.htm\n                // section 5.2 to deal with double double quotes\n                if (inquote && cmd.length() > 1 && cmd.charAt(1) == (char)'\"') {\n                    b.append(c);\n                    cmd = cmd.substring(1);\n                }\n                inquote = !inquote;\n            } else {\n                b.append(c);\n            }\n            nslash = 0;\n            continue;\n        } else if (c == (char)'\\\\') {\n            nslash++;\n            continue;\n        }\n        b = appendBSBytes(b, nslash);\n        nslash = 0;\n        b.append(c);\n    }\n    return [\n        \"arg\":  appendBSBytes(b, nslash).toString(), \n        \"rest\": ''\n    ];\n}\n\n// commandLineToArgv splits a command line into individual argument\n// strings, following the Windows conventions documented\n// at http://daviddeley.com/autohotkey/parameters/parameters.htm#WINARGV\n// Original implementation found at: https://github.com/golang/go/commit/39c8d2b7faed06b0e91a1ad7906231f53aab45d1\ndef commandLineToArgv(String cmd) {\n    def args = new ArrayList();\n    while (cmd.length() > 0) {\n        if (cmd.charAt(0) == (char)' ' || cmd.charAt(0) == (char)0x09) {\n            cmd = cmd.substring(1);\n            continue;\n        }\n        def next = readNextArg(cmd);\n        cmd = next.rest;\n        args.add(next.arg);\n    }\n    return args;\n}\n\nctx.process.args = commandLineToArgv(ctx.process.command_line);\nctx.process.args_count = ctx.process.args.length;"
        }
      },
      {
        "rename": {
          "field": "crowdstrike.ImageFileName",
          "target_field": "process.executable",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "tag": "process-name",
          "lang": "painless",
          "description": "Calculate process.name",
          "source": "def executable = ctx.process.executable;\ndef exe_arr = [];\ndef name = executable;\nif(executable.substring(0,1) == \"\\\\\") {\n  name = executable.splitOnToken(\"\\\\\")[-1];\n} else if(executable.substring(0,1) == \"/\") {\n  name = executable.splitOnToken(\"/\")[-1];\n}\nctx.process.put(\"name\", name);",
          "if": "ctx.process?.executable != null && ctx.process.executable != \"\""
        }
      },
      {
        "convert": {
          "field": "crowdstrike.ExitCode",
          "type": "long",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.ExitCode",
          "target_field": "process.exit_code",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "tag": "process-uptime",
          "lang": "painless",
          "description": "Calculate process.uptime",
          "source": "def d1 = Float.parseFloat(ctx.crowdstrike?.ProcessStartTime);\ndef d2 = Float.parseFloat(ctx.crowdstrike?.ProcessEndTime);\nif (ctx.process == null) {\n  ctx.process = [];\n}\nctx.process.uptime = (long) ((d2-d1)/1000);",
          "if": "ctx.crowdstrike?.ProcessStartTime != null && ctx.crowdstrike?.ProcessStartTime != \"\" && ctx.crowdstrike?.ProcessEndTime != null && ctx.crowdstrike?.ProcessEndTime != \"\""
        }
      },
      {
        "date": {
          "field": "crowdstrike.ProcessStartTime",
          "target_field": "crowdstrike.ProcessStartTime",
          "formats": [
            "UNIX"
          ],
          "if": "ctx.crowdstrike?.ProcessStartTime != null && ctx.crowdstrike?.ProcessStartTime != \"\""
        }
      },
      {
        "rename": {
          "field": "crowdstrike.ProcessStartTime",
          "target_field": "process.start",
          "ignore_missing": true,
          "if": "ctx.crowdstrike?.ProcessStartTime != \"\""
        }
      },
      {
        "date": {
          "field": "crowdstrike.ProcessEndTime",
          "target_field": "crowdstrike.ProcessEndTime",
          "formats": [
            "UNIX"
          ],
          "if": "ctx.crowdstrike?.ProcessEndTime != null && ctx.crowdstrike?.ProcessEndTime != \"\""
        }
      },
      {
        "rename": {
          "field": "crowdstrike.ProcessEndTime",
          "target_field": "process.end",
          "ignore_missing": true,
          "if": "ctx.crowdstrike?.ProcessEndTime != \"\""
        }
      },
      {
        "convert": {
          "field": "crowdstrike.RawProcessId",
          "type": "long",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.RawProcessId",
          "target_field": "process.pid",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.TargetProcessId",
          "target_field": "process.entity_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.ParentProcessId",
          "target_field": "process.parent.entity_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.ParentBaseFileName",
          "target_field": "process.parent.name",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.ProcessGroupId",
          "type": "long",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.ProcessGroupId",
          "target_field": "process.pgid",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.ContextProcessId",
          "target_field": "process.entity_id",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx.process?.entity_id == null"
        }
      },
      {
        "convert": {
          "field": "crowdstrike.ContextThreadId",
          "type": "long",
          "ignore_missing": true,
          "if": "ctx.process?.thread?.id == null"
        }
      },
      {
        "rename": {
          "field": "crowdstrike.ContextThreadId",
          "target_field": "process.thread.id",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx.process?.thread?.id == null"
        }
      },
      {
        "convert": {
          "field": "crowdstrike.EtwRawProcessId",
          "type": "long",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.EtwRawProcessId",
          "target_field": "process.pid",
          "ignore_missing": true,
          "if": "ctx.process?.pid == null"
        }
      },
      {
        "convert": {
          "field": "crowdstrike.EtwRawThreadId",
          "type": "long",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.EtwRawThreadId",
          "target_field": "process.thread.id",
          "ignore_missing": true,
          "if": "ctx.process?.thread?.id == null"
        }
      },
      {
        "rename": {
          "field": "crowdstrike.ServiceDisplayName",
          "target_field": "process.title",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.hashes",
          "target_field": "process.hash",
          "if": "ctx.event?.action != null && (ctx.event.action.contains(\"Process\") || ctx.event.action.contains(\"Service\")) && ctx._temp?.hashes != null && ctx._temp?.hashes.size() > 0"
        }
      },
      {
        "rename": {
          "field": "crowdstrike.UID",
          "target_field": "user.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.GID",
          "target_field": "user.group.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.UserSid",
          "target_field": "user.id",
          "ignore_missing": true,
          "if": "ctx.user?.id == null || ctx.user.id == \"\""
        }
      },
      {
        "append": {
          "field": "user.roles",
          "value": "admin",
          "if": "ctx.crowdstrike?.UserIsAdmin == \"1\""
        }
      },
      {
        "rename": {
          "field": "crowdstrike.UserName",
          "target_field": "user.name",
          "ignore_missing": true
        }
      },
      {
        "split": {
          "field": "crowdstrike.UserPrincipal",
          "target_field": "_temp.user_parts",
          "separator": "@",
          "if": "ctx.crowdstrike?.UserPrincipal != null"
        }
      },
      {
        "rename": {
          "field": "crowdstrike.UserPrincipal",
          "target_field": "user.email",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "user.domain",
          "value": "{{{_temp.user_parts.1}}}",
          "ignore_failure": true,
          "ignore_empty_value": true,
          "if": "ctx._temp?.user_parts != null && ctx._temp.user_parts.size() == 2"
        }
      },
      {
        "set": {
          "field": "user.full_name",
          "value": "{{{_temp.user_parts.0}}}",
          "ignore_failure": true,
          "ignore_empty_value": true,
          "if": "ctx._temp?.user_parts != null && ctx._temp.user_parts.size() == 2"
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{{user.name}}}",
          "ignore_failure": true,
          "allow_duplicates": false,
          "if": "ctx.user?.name != null"
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{{user.full_name}}}",
          "ignore_failure": true,
          "allow_duplicates": false,
          "if": "ctx.user?.full_name != null"
        }
      },
      {
        "convert": {
          "field": "crowdstrike.LocalAddressIP4",
          "type": "ip",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.LocalAddressIP4",
          "target_field": "source.ip",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "source.address",
          "copy_from": "source.ip",
          "ignore_empty_value": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.LocalAddressIP6",
          "type": "ip",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.LocalAddressIP6",
          "target_field": "source.ip",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "source.address",
          "copy_from": "source.ip",
          "ignore_empty_value": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.LocalPort",
          "target_field": "source.port",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.RemoteAddressIP4",
          "type": "ip",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.RemoteAddressIP4",
          "target_field": "destination.ip",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "destination.address",
          "copy_from": "destination.ip",
          "ignore_empty_value": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.RemoteAddressIP6",
          "type": "ip",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.RemoteAddressIP6",
          "target_field": "destination.ip",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "destination.address",
          "copy_from": "destination.ip",
          "ignore_empty_value": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.RemotePort",
          "target_field": "destination.port",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.Protocol",
          "target_field": "network.iana_number",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "tag": "network-transport-lookup",
          "lang": "painless",
          "ignore_failure": true,
          "if": "ctx.network?.iana_number != null",
          "source": "def iana_number = ctx.network.iana_number;\nif (iana_number == '0') {\n    ctx.network.transport = 'hopopt';\n} else if (iana_number == '1') {\n    ctx.network.transport = 'icmp';\n} else if (iana_number == '2') {\n    ctx.network.transport = 'igmp';\n} else if (iana_number == '6') {\n    ctx.network.transport = 'tcp';\n} else if (iana_number == '8') {\n    ctx.network.transport = 'egp';\n} else if (iana_number == '17') {\n    ctx.network.transport = 'udp';\n} else if (iana_number == '47') {\n    ctx.network.transport = 'gre';\n} else if (iana_number == '50') {\n    ctx.network.transport = 'esp';\n} else if (iana_number == '58') {\n    ctx.network.transport = 'ipv6-icmp';\n} else if (iana_number == '112') {\n    ctx.network.transport = 'vrrp';\n} else if (iana_number == '132') {\n    ctx.network.transport = 'sctp';\n}\n"
        }
      },
      {
        "set": {
          "field": "network.direction",
          "value": "outbound",
          "if": "ctx.crowdstrike?.ConnectionDirection == \"0\""
        }
      },
      {
        "set": {
          "field": "network.direction",
          "value": "inbound",
          "if": "ctx.crowdstrike?.ConnectionDirection == \"1\""
        }
      },
      {
        "set": {
          "field": "network.direction",
          "value": "unknown",
          "if": "ctx.network?.direction == null && ctx.crowdstrike?.ConnectionDirection != null && ctx.crowdstrike.ConnectionDirection != \"\""
        }
      },
      {
        "community_id": {
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{source.ip}}}",
          "allow_duplicates": false,
          "if": "ctx.source?.ip != null && ctx.source.ip != \"\""
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{destination.ip}}}",
          "allow_duplicates": false,
          "if": "ctx.destination?.ip != null && ctx.destination.ip != \"\""
        }
      },
      {
        "append": {
          "field": "related.hosts",
          "value": "{{{source.ip}}}",
          "allow_duplicates": false,
          "if": "ctx.source?.ip != null && ctx.source.ip != \"\""
        }
      },
      {
        "append": {
          "field": "related.hosts",
          "value": "{{{destination.ip}}}",
          "allow_duplicates": false,
          "if": "ctx.destination?.ip != null && ctx.destination.ip != \"\""
        }
      },
      {
        "rename": {
          "field": "crowdstrike.PhysicalAddress",
          "target_field": "source.mac",
          "ignore_missing": true
        }
      },
      {
        "uppercase": {
          "field": "source.mac",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.DownloadServer",
          "target_field": "server.address",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.DownloadPath",
          "target_field": "url.path",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "url.path",
          "value": "/{{url.path}}",
          "if": "ctx.url?.path != null && !ctx.url.path.startsWith(\"/\")"
        }
      },
      {
        "registered_domain": {
          "field": "server.address",
          "target_field": "server",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "url.scheme",
          "value": "https",
          "if": "ctx.crowdstrike?.DownloadPort == 443"
        }
      },
      {
        "set": {
          "field": "url.scheme",
          "value": "http",
          "if": "ctx.crowdstrike?.DownloadPort != 443"
        }
      },
      {
        "set": {
          "field": "url.full",
          "value": "{{{url.scheme}}}://{{{server.address}}}{{{url.path}}}",
          "if": "ctx.url?.scheme != null && ctx.server?.address != null && ctx.url?.path != null"
        }
      },
      {
        "uri_parts": {
          "field": "url.full",
          "ignore_failure": true,
          "if": "ctx.url?.full != null"
        }
      },
      {
        "registered_domain": {
          "field": "url.domain",
          "target_field": "url",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "geoip": {
          "field": "observer.ip",
          "target_field": "observer.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "source.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "field": "destination.ip",
          "target_field": "destination.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "destination.ip",
          "target_field": "destination.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.asn",
          "target_field": "source.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.organization_name",
          "target_field": "source.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "destination.as.asn",
          "target_field": "destination.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "destination.as.organization_name",
          "target_field": "destination.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "dns.type",
          "value": "query",
          "if": "ctx.event?.action == \"DnsRequest\""
        }
      },
      {
        "registered_domain": {
          "field": "crowdstrike.DomainName",
          "target_field": "dns.question",
          "ignore_missing": true,
          "if": "ctx.event?.action == \"DnsRequest\""
        }
      },
      {
        "rename": {
          "field": "dns.question.domain",
          "target_field": "dns.question.name",
          "ignore_missing": true,
          "if": "ctx.event?.action == \"DnsRequest\""
        }
      },
      {
        "script": {
          "tag": "dns-request-type-to-name",
          "description": "Map decimal DNS request type to its name.",
          "lang": "painless",
          "params": {
            "1": "A",
            "2": "NS",
            "5": "CNAME",
            "6": "SOA",
            "12": "PTR",
            "13": "HINFO",
            "15": "MX",
            "16": "TXT",
            "17": "RP",
            "18": "AFSDB",
            "24": "SIG",
            "25": "KEY",
            "28": "AAAA",
            "29": "LOC",
            "33": "SRV",
            "35": "NAPTR",
            "36": "KX",
            "37": "CERT",
            "39": "DNAME",
            "42": "APL",
            "43": "DS",
            "44": "SSHFP",
            "45": "IPSECKEY",
            "46": "RRSIG",
            "47": "NSEC",
            "48": "DNSKEY",
            "49": "DHCID",
            "50": "NSEC3",
            "51": "NSEC3PARAM",
            "52": "TLSA",
            "53": "SMIMEA",
            "55": "HIP",
            "59": "CDS",
            "60": "CDNSKEY",
            "61": "OPENPGPKEY",
            "62": "CSYNC",
            "63": "ZONEMD",
            "64": "SVCB",
            "65": "HTTPS",
            "108": "EUI48",
            "109": "EUI64",
            "249": "TKEY",
            "250": "TSIG",
            "256": "URI",
            "257": "CAA",
            "32768": "TA",
            "32769": "DLV"
          },
          "if": "ctx.event?.action == \"DnsRequest\" && ctx.crowdstrike?.RequestType != null && !ctx.crowdstrike.RequestType.isEmpty()",
          "source": "def t = params[ctx.crowdstrike.RequestType];\nif (t != null) {\n  if (ctx.dns?.question == null) {\n    ctx.dns.question = new HashMap();\n  }\n  ctx.dns.question.type = t;\n  ctx.crowdstrike.remove(\"RequestType\");\n}"
        }
      },
      {
        "convert": {
          "field": "crowdstrike.Size",
          "type": "long",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.Size",
          "target_field": "file.size",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.FileIdentifier",
          "target_field": "file.inode",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.SourceFileName",
          "target_field": "file.path",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.TargetFileName",
          "target_field": "file.path",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "crowdstrike.DiskParentDeviceInstanceId",
          "target_field": "file.device",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "file.type",
          "value": "file",
          "if": "ctx.file?.path != null && !ctx.event.action.contains(\"Directory\")"
        }
      },
      {
        "set": {
          "field": "file.type",
          "value": "dir",
          "if": "ctx.file?.path != null && (ctx.event.action.contains(\"Directory\") || ctx.file.path.endsWith(\"\\\\\") || ctx.file.path.endsWith(\"/\"))"
        }
      },
      {
        "script": {
          "tag": "parse-file-path",
          "description": "Adds file information.",
          "lang": "painless",
          "if": "ctx.file?.path != null && ctx.file.path.length() > 1",
          "source": "def removeSuffix(String s, String suffix) {\n  if (s != null && suffix != null && s.endsWith(suffix)) {\n    return s.substring(0, s.length() - suffix.length());\n  }\n  return s;\n}\n\ndef path = removeSuffix(ctx.file.path, \"/\");\npath = removeSuffix(path, \"\\\\\");\ndef idx = path.lastIndexOf(\"\\\\\");\nif (idx == -1) {\n  idx = path.lastIndexOf(\"/\");\n}\nif (idx > -1) {\n    if (ctx.file == null) {\n        ctx.file = new HashMap();\n    }\n    ctx.file.name = path.substring(idx+1);\n    ctx.file.directory = path.substring(0, idx);\n\n    def extIdx = ctx.file.name.lastIndexOf(\".\");\n    if (extIdx > -1 && ctx.file.type == \"file\") {\n        ctx.file.extension = ctx.file.name.substring(extIdx+1);\n    }\n}\nif (path.charAt(1) == \":\") {\n  ctx.file.drive_letter = path.charAt(0).toUpperCase();\n}"
        }
      },
      {
        "rename": {
          "field": "_temp.hashes",
          "target_field": "file.hash",
          "if": "ctx.event?.action != null && (ctx.event.action.contains(\"File\") || ctx.event.action.contains(\"Directory\") || ctx.event.action.contains(\"Executable\")) && ctx._temp?.hashes != null && ctx._temp?.hashes.size() > 0"
        }
      },
      {
        "split": {
          "field": "crowdstrike.FalconGroupingTags",
          "separator": ",\\s?",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "split": {
          "field": "crowdstrike.SensorGroupingTags",
          "separator": ",\\s?",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "split": {
          "field": "crowdstrike.Tags",
          "separator": ",\\s?",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "split": {
          "field": "crowdstrike.CallStackModuleNames",
          "separator": "\\|",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.UserTime",
          "type": "long",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.KernelTime",
          "type": "long",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.CycleTime",
          "type": "long",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.hash",
          "value": "{{{crowdstrike.ConfigStateHash}}}",
          "ignore_failure": true,
          "allow_duplicates": false,
          "if": "ctx.crowdstrike?.ConfigStateHash != null && ctx.crowdstrike.ConfigStateHash != \"\""
        }
      },
      {
        "trim": {
          "field": "crowdstrike.BootArgs",
          "ignore_missing": true
        }
      },
      {
        "split": {
          "field": "crowdstrike.BootArgs",
          "separator": "\\s+",
          "ignore_missing": true
        }
      },
      {
        "date": {
          "field": "crowdstrike.LogonTime",
          "target_field": "crowdstrike.LogonTime",
          "formats": [
            "UNIX"
          ],
          "if": "ctx.crowdstrike?.LogonTime != null && ctx.crowdstrike?.LogonTime != \"\""
        }
      },
      {
        "date": {
          "field": "crowdstrike.LogoffTime",
          "target_field": "crowdstrike.LogoffTime",
          "formats": [
            "UNIX"
          ],
          "if": "ctx.crowdstrike?.LogoffTime != null && ctx.crowdstrike?.LogoffTime != \"\""
        }
      },
      {
        "date": {
          "field": "crowdstrike.ConnectTime",
          "target_field": "crowdstrike.ConnectTime",
          "formats": [
            "UNIX"
          ],
          "if": "ctx.crowdstrike?.ConnectTime != null && ctx.crowdstrike?.ConnectTime != \"\""
        }
      },
      {
        "date": {
          "field": "crowdstrike.PreviousConnectTime",
          "target_field": "crowdstrike.PreviousConnectTime",
          "formats": [
            "UNIX"
          ],
          "if": "ctx.crowdstrike?.PreviousConnectTime != null && ctx.crowdstrike?.PreviousConnectTime != \"\""
        }
      },
      {
        "date": {
          "field": "crowdstrike.AgentLocalTime",
          "target_field": "crowdstrike.AgentLocalTime",
          "formats": [
            "UNIX"
          ],
          "if": "ctx.crowdstrike?.AgentLocalTime != null && ctx.crowdstrike?.AgentLocalTime != \"\""
        }
      },
      {
        "date": {
          "field": "crowdstrike.FirstSeen",
          "target_field": "crowdstrike.FirstSeen",
          "formats": [
            "UNIX"
          ],
          "if": "ctx.crowdstrike?.FirstSeen != null && ctx.crowdstrike?.FirstSeen != \"\""
        }
      },
      {
        "date": {
          "field": "crowdstrike.Time",
          "target_field": "crowdstrike.Time",
          "formats": [
            "UNIX"
          ],
          "if": "ctx.crowdstrike?.Time != null && ctx.crowdstrike?.Time != \"\""
        }
      },
      {
        "date": {
          "field": "crowdstrike.BiosReleaseDate",
          "target_field": "crowdstrike.BiosReleaseDate",
          "formats": [
            "MM/dd/yyyy",
            "strict_date_optional_time"
          ],
          "if": "ctx.crowdstrike?.BiosReleaseDate != null && ctx.crowdstrike?.BiosReleaseDate != \"\""
        }
      },
      {
        "convert": {
          "field": "crowdstrike.AgentTimeOffset",
          "target_field": "crowdstrike.AgentTimeOffset",
          "type": "float",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.Timeout",
          "type": "long",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.PhysicalAddressLength",
          "type": "long",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.InterfaceIndex",
          "type": "long",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.NetLuidIndex",
          "type": "long",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.AttemptNumber",
          "type": "long",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.SystemTableIndex",
          "type": "long",
          "ignore_missing": true
        }
      },
      {
        "split": {
          "field": "crowdstrike.NeighborList",
          "separator": "\\|",
          "ignore_missing": true
        }
      },
      {
        "split": {
          "field": "crowdstrike.ConfigStateData",
          "separator": "\\|",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.hosts",
          "value": "{{{crowdstrike.LogonServer}}}",
          "allow_duplicates": false,
          "if": "ctx.crowdstrike?.LogonServer != null"
        }
      },
      {
        "append": {
          "field": "related.hosts",
          "value": "{{{crowdstrike.ClientComputerName}}}",
          "allow_duplicates": false,
          "if": "ctx.crowdstrike?.ClientComputerName != null"
        }
      },
      {
        "remove": {
          "field": "crowdstrike.event_platform",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx.os?.type != null"
        }
      },
      {
        "remove": {
          "field": [
            "_temp",
            "crowdstrike.timestamp",
            "crowdstrike._time",
            "crowdstrike.ContextTimeStamp",
            "crowdstrike.CreationTimeStamp",
            "crowdstrike.DomainName",
            "crowdstrike.ConnectionDirection",
            "crowdstrike.UserIsAdmin",
            "crowdstrike.UTCTimestamp",
            "crowdstrike.TargetDirectoryName"
          ],
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "script": {
          "tag": "remove-nulls",
          "lang": "painless",
          "description": "This script processor iterates over the whole document to remove fields with null values.",
          "source": "void handleMap(Map map) {\n  for (def x : map.values()) {\n    if (x instanceof Map) {\n        handleMap(x);\n    } else if (x instanceof List) {\n        handleList(x);\n    }\n  }\n  map.values().removeIf(v -> v == null || v == '' || v == '-' || v == 'none' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));\n}\nvoid handleList(List list) {\n  for (def x : list) {\n      if (x instanceof Map) {\n          handleMap(x);\n      } else if (x instanceof List) {\n          handleList(x);\n      }\n  }\n  list.removeIf(v -> v == null || v == '' || v == '-' || v == 'none' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));\n}\nhandleMap(ctx);\n"
        }
      },
      {
        "pipeline": {
          "name": "logs-crowdstrike.fdr@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "Processor '{{ _ingest.on_failure_processor_type }}' with tag '{{ _ingest.on_failure_processor_tag }}' failed with message {{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "crowdstrike"
      }
    }
  },
  "metrics-kubernetes.state_node-1.26.0": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-kubernetes.state_node@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "kubernetes"
      }
    }
  },
  "logs-endpoint.actions-8.4.1": {
    "description": "Pipeline for setting event.ingested",
    "processors": [
      {
        "set": {
          "field": "event.ingested",
          "value": "{{ _ingest.timestamp }}",
          "ignore_failure": true
        }
      },
      {
        "pipeline": {
          "name": "logs-endpoint.actions@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "endpoint"
      }
    }
  },
  "logs-microsoft_dhcp.log-1.7.0-dhcpv6": {
    "description": "Pipeline for processing Microsoft DHCPv6 Server logs.",
    "processors": [
      {
        "csv": {
          "field": "event.original",
          "target_fields": [
            "event.code",
            "_tmp_.date",
            "_tmp_.time",
            "message",
            "host.ip",
            "host.name",
            "microsoft.dhcp.error_code",
            "microsoft.dhcp.duid.length",
            "microsoft.dhcp.duid.hex",
            "microsoft.dhcp.user.string",
            "microsoft.dhcp.dhc_id",
            "microsoft.dhcp.subnet_prefix"
          ],
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "host.name",
          "if": "ctx.host?.name != null && ctx.host.name.contains(\".\")",
          "patterns": [
            "%{HOSTNAME}\\.%{GREEDYDATA:host.domain}"
          ],
          "pattern_definitions": {
            "HOSTNAME": "[^.]+"
          },
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "_tmp_.timestamp",
          "value": "{{{_tmp_.date}}} {{{_tmp_.time}}}"
        }
      },
      {
        "date": {
          "field": "_tmp_.timestamp",
          "formats": [
            "MM/dd/yy HH:mm:ss"
          ],
          "timezone": "{{{event.timezone}}}"
        }
      },
      {
        "script": {
          "description": "Set event action, category, outcome, and type for all known event types.",
          "lang": "painless",
          "tag": "Add ECS categorization fields",
          "params": {
            "11000": {
              "action": "dhcpv6-solicit",
              "category": [
                "network"
              ],
              "type": [
                "connection",
                "protocol"
              ]
            },
            "11001": {
              "action": "dhcpv6-advertise",
              "category": [
                "network"
              ],
              "type": [
                "connection",
                "protocol"
              ]
            },
            "11002": {
              "action": "dhcpv6-request",
              "category": [
                "network"
              ],
              "type": [
                "connection",
                "protocol"
              ]
            },
            "11003": {
              "action": "dhcpv6-confirm",
              "category": [
                "network"
              ],
              "type": [
                "connection",
                "protocol"
              ]
            },
            "11004": {
              "action": "dhcpv6-renew",
              "category": [
                "network"
              ],
              "type": [
                "connection",
                "protocol"
              ]
            },
            "11005": {
              "action": "dhcpv6-rebind",
              "category": [
                "network"
              ],
              "type": [
                "connection",
                "protocol"
              ]
            },
            "11006": {
              "action": "dhcpv6-decline",
              "category": [
                "network"
              ],
              "type": [
                "connection",
                "protocol"
              ],
              "outcome": "failure"
            },
            "11007": {
              "action": "dhcpv6-release",
              "category": [
                "network"
              ],
              "type": [
                "connection"
              ]
            },
            "11008": {
              "action": "dhcpv6-info-request",
              "category": [
                "network"
              ],
              "type": [
                "connection"
              ]
            },
            "11009": {
              "action": "dhcpv6-scope-full",
              "category": [
                "network"
              ],
              "type": [
                "connection"
              ]
            },
            "11010": {
              "action": "log-start",
              "category": [
                "process"
              ],
              "type": [
                "start"
              ]
            },
            "11011": {
              "action": "log-stop",
              "category": [
                "process"
              ],
              "type": [
                "end"
              ]
            },
            "11012": {
              "action": "log-pause",
              "category": [
                "process"
              ],
              "type": [
                "change"
              ]
            },
            "11013": {
              "action": "log-file",
              "category": [
                "process"
              ],
              "type": [
                "info"
              ]
            },
            "11014": {
              "action": "dhcpv6-bad-address",
              "category": [
                "network"
              ],
              "type": [
                "connection"
              ],
              "outcome": "failure"
            },
            "11015": {
              "action": "dhcpv6-address-in-use",
              "category": [
                "network"
              ],
              "type": [
                "connection"
              ]
            },
            "11016": {
              "action": "dhcpv6-client-deleted",
              "category": [
                "network"
              ],
              "type": [
                "connection"
              ]
            },
            "11017": {
              "action": "ipv6-dns-record-not-deleted",
              "category": [
                "network"
              ],
              "type": [
                "connection"
              ]
            },
            "11018": {
              "action": "dhcpv6-expired",
              "category": [
                "network"
              ],
              "type": [
                "connection"
              ]
            },
            "11019": {
              "action": "dhcpv6-lease-expired-deleted",
              "category": [
                "network"
              ],
              "type": [
                "connection"
              ]
            },
            "11020": {
              "action": "dhcpv6-cleanup-start",
              "category": [
                "process"
              ],
              "type": [
                "start"
              ]
            },
            "11021": {
              "action": "dhcpv6-cleanup-end",
              "category": [
                "process"
              ],
              "type": [
                "end"
              ]
            },
            "11022": {
              "action": "ipv6-dns-update-request",
              "category": [
                "network"
              ],
              "type": [
                "connection",
                "start"
              ]
            },
            "11023": {
              "action": "ipv6-dns-update-failed",
              "category": [
                "network"
              ],
              "type": [
                "connection",
                "end"
              ],
              "outcome": "failure"
            },
            "11024": {
              "action": "ipv6-dns-update-successful",
              "category": [
                "network"
              ],
              "type": [
                "connection",
                "end"
              ]
            },
            "11028": {
              "action": "ipv6-dns-update-request-queue-exceeded",
              "category": [
                "network"
              ],
              "type": [
                "connection",
                "end"
              ],
              "outcome": "failure"
            },
            "11029": {
              "action": "ipv6-dns-update-request-failed",
              "category": [
                "network"
              ],
              "type": [
                "connection",
                "end"
              ],
              "outcome": "failure"
            },
            "11030": {
              "action": "dhcpv6-stateless-clients-pruged",
              "category": [
                "process"
              ],
              "type": [
                "change"
              ]
            },
            "11031": {
              "action": "dhcpv6-stateless-clients-expired",
              "category": [
                "process"
              ],
              "type": [
                "change"
              ]
            },
            "11032": {
              "action": "dhcpv6-stateless-client-info-request",
              "category": [
                "network"
              ],
              "type": [
                "info"
              ]
            }
          },
          "source": "if (ctx?.event?.code == null || params.get(ctx.event.code) == null) {\n  return;\n}\ndef hm = new HashMap(params[ctx.event.code]);\nhm.forEach((k, v) -> ctx.event[k] = v);"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "success",
          "if": "ctx?.event?.outcome == null"
        }
      },
      {
        "pipeline": {
          "name": "logs-microsoft_dhcp.log@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "Processor \"{{ _ingest.on_failure_processor_type }}\" with tag \"{{ _ingest.on_failure_processor_tag }}\" in pipeline \"{{ _ingest.on_failure_pipeline }}\" failed with message \"{{ _ingest.on_failure_message }}\""
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "microsoft_dhcp"
      }
    }
  },
  "logs-proofpoint_tap.message_blocked-1.1.1": {
    "description": "Pipeline for parsing Proofpoint TAP blocked message logs.",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.4.0"
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "json",
          "ignore_failure": true
        }
      },
      {
        "date": {
          "field": "json.messageTime",
          "formats": [
            "ISO8601"
          ],
          "ignore_failure": true
        }
      },
      {
        "fingerprint": {
          "fields": [
            "json.GUID",
            "json.messageTime"
          ],
          "target_field": "_id",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "email",
          "ignore_failure": true
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "denied",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "convert": {
          "field": "json.senderIP",
          "target_field": "source.ip",
          "type": "ip",
          "ignore_failure": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{source.ip}}}",
          "if": "ctx.source?.ip != null && ctx.source?.ip != ''",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "source.geo",
          "ignore_missing": true,
          "if": "ctx.source?.ip != null && ctx.source?.ip != ''"
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true,
          "if": "ctx.source?.ip != null && ctx.source?.ip != ''"
        }
      },
      {
        "rename": {
          "field": "source.as.asn",
          "target_field": "source.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.organization_name",
          "target_field": "source.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "foreach": {
          "field": "json.messageParts",
          "processor": {
            "append": {
              "field": "related.hash",
              "value": "{{{_ingest._value.md5}}}",
              "allow_duplicates": false,
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.messageParts != null && ctx.json?.messageParts instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.messageParts",
          "processor": {
            "append": {
              "field": "related.hash",
              "value": "{{{_ingest._value.sha256}}}",
              "allow_duplicates": false,
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.messageParts != null && ctx.json?.messageParts instanceof List"
        }
      },
      {
        "rename": {
          "field": "json.ccAddresses",
          "target_field": "email.cc.address",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "email.delivery_timestamp",
          "copy_from": "@timestamp",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.fromAddress",
          "target_field": "email.from.address",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.messageID",
          "target_field": "email.message_id",
          "ignore_missing": true
        }
      },
      {
        "gsub": {
          "field": "email.message_id",
          "pattern": "<|>",
          "replacement": "",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.replyToAddress",
          "target_field": "email.reply_to.address",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.sender",
          "target_field": "email.sender.address",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.subject",
          "target_field": "email.subject",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "email.to.address",
          "copy_from": "json.toAddresses",
          "ignore_failure": true
        }
      },
      {
        "foreach": {
          "field": "json.recipient",
          "processor": {
            "append": {
              "field": "email.to.address",
              "value": "{{{_ingest._value}}}",
              "allow_duplicates": false,
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.recipient != null && ctx.json?.recipient instanceof List"
        }
      },
      {
        "rename": {
          "field": "json.xmailer",
          "target_field": "email.x_mailer",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.id",
          "target_field": "event.id",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "email.attachments",
          "copy_from": "json.messageParts",
          "ignore_failure": true
        }
      },
      {
        "foreach": {
          "field": "email.attachments",
          "processor": {
            "remove": {
              "field": [
                "_ingest._value.disposition",
                "_ingest._value.oContentType",
                "_ingest._value.sandboxStatus"
              ],
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.email?.attachments != null && ctx.email?.attachments instanceof List"
        }
      },
      {
        "foreach": {
          "field": "email.attachments",
          "processor": {
            "rename": {
              "field": "_ingest._value.contentType",
              "target_field": "_ingest._value.file.mime_type",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.email?.attachments != null && ctx.email?.attachments instanceof List"
        }
      },
      {
        "foreach": {
          "field": "email.attachments",
          "processor": {
            "rename": {
              "field": "_ingest._value.md5",
              "target_field": "_ingest._value.file.hash.md5",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.email?.attachments != null && ctx.email?.attachments instanceof List"
        }
      },
      {
        "foreach": {
          "field": "email.attachments",
          "processor": {
            "rename": {
              "field": "_ingest._value.sha256",
              "target_field": "_ingest._value.file.hash.sha256",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.email?.attachments != null && ctx.email?.attachments instanceof List"
        }
      },
      {
        "foreach": {
          "field": "email.attachments",
          "processor": {
            "rename": {
              "field": "_ingest._value.filename",
              "target_field": "_ingest._value.file.name",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.email?.attachments != null && ctx.email?.attachments instanceof List"
        }
      },
      {
        "script": {
          "description": "Adding hash in related.hash from artifact field.",
          "lang": "painless",
          "ignore_failure": true,
          "source": "if (ctx.json?.threatsInfoMap instanceof List) {\n    for (artifact in ctx.json?.threatsInfoMap) {\n        def flag = true;\n        def str = artifact.threat.toLowerCase();\n        if (str?.length() == 64) {\n            for (int i = 0; i < str.length(); i++) {\n                def ch = str.charAt(i);\n                if ((ch < (char)'0' || ch > (char)'9') && (ch < (char)'a' || ch > (char)'f')) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag && !ctx[\"related\"][\"hash\"].contains(str)) {\n                ctx[\"related\"][\"hash\"].add(str);\n            }\n        }\n    }\n}\n"
        }
      },
      {
        "rename": {
          "field": "json.toAddresses",
          "target_field": "proofpoint_tap.message_blocked.to_addresses",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.recipient",
          "target_field": "proofpoint_tap.message_blocked.recipient",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.cluster",
          "target_field": "proofpoint_tap.message_blocked.cluster",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.completelyRewritten",
          "target_field": "proofpoint_tap.message_blocked.completely_rewritten",
          "type": "string",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.GUID",
          "target_field": "proofpoint_tap.guid",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.headerCC",
          "target_field": "proofpoint_tap.message_blocked.header.cc",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.headerFrom",
          "target_field": "proofpoint_tap.message_blocked.header.from",
          "ignore_missing": true
        }
      },
      {
        "gsub": {
          "field": "proofpoint_tap.message_blocked.header.from",
          "pattern": "<|>",
          "replacement": "",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.headerReplyTo",
          "target_field": "proofpoint_tap.message_blocked.header.replyto",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.headerTo",
          "target_field": "proofpoint_tap.message_blocked.header.to",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.impostorScore",
          "target_field": "proofpoint_tap.message_blocked.impostor_score",
          "type": "double",
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "json.malwareScore",
          "target_field": "proofpoint_tap.message_blocked.malware_score",
          "type": "long",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.messageParts",
          "target_field": "proofpoint_tap.message_blocked.message_parts",
          "ignore_missing": true
        }
      },
      {
        "foreach": {
          "field": "proofpoint_tap.message_blocked.message_parts",
          "processor": {
            "remove": {
              "field": [
                "_ingest._value.contentType",
                "_ingest._value.filename",
                "_ingest._value.md5",
                "_ingest._value.sha256"
              ],
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.proofpoint_tap?.message_blocked?.message_parts != null && ctx.proofpoint_tap?.message_blocked?.message_parts instanceof List"
        }
      },
      {
        "foreach": {
          "field": "proofpoint_tap.message_blocked.message_parts",
          "processor": {
            "rename": {
              "field": "_ingest._value.oContentType",
              "target_field": "_ingest._value.o_content_type",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.proofpoint_tap?.message_blocked?.message_parts != null && ctx.proofpoint_tap?.message_blocked?.message_parts instanceof List"
        }
      },
      {
        "foreach": {
          "field": "proofpoint_tap.message_blocked.message_parts",
          "processor": {
            "rename": {
              "field": "_ingest._value.sandboxStatus",
              "target_field": "_ingest._value.sandbox_status",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.proofpoint_tap?.message_blocked?.message_parts != null && ctx.proofpoint_tap?.message_blocked?.message_parts instanceof List"
        }
      },
      {
        "convert": {
          "field": "json.messageSize",
          "target_field": "proofpoint_tap.message_blocked.message_size",
          "type": "long",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.modulesRun",
          "target_field": "proofpoint_tap.message_blocked.modules_run",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.phishScore",
          "target_field": "proofpoint_tap.message_blocked.phish_score",
          "type": "long",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.policyRoutes",
          "target_field": "proofpoint_tap.message_blocked.policy_routes",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.QID",
          "target_field": "proofpoint_tap.message_blocked.qid",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.quarantineFolder",
          "target_field": "proofpoint_tap.message_blocked.quarantine.folder",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.quarantineRule",
          "target_field": "proofpoint_tap.message_blocked.quarantine.rule",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.spamScore",
          "target_field": "proofpoint_tap.message_blocked.spam_score",
          "type": "long",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.threatsInfoMap",
          "target_field": "proofpoint_tap.message_blocked.threat_info_map",
          "ignore_missing": true
        }
      },
      {
        "foreach": {
          "field": "proofpoint_tap.message_blocked.threat_info_map",
          "processor": {
            "rename": {
              "field": "_ingest._value.campaignId",
              "target_field": "_ingest._value.campaign_id",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.proofpoint_tap?.message_blocked?.threat_info_map != null && ctx.proofpoint_tap?.message_blocked?.threat_info_map instanceof List"
        }
      },
      {
        "foreach": {
          "field": "proofpoint_tap.message_blocked.threat_info_map",
          "processor": {
            "rename": {
              "field": "_ingest._value.threat",
              "target_field": "_ingest._value.threat.artifact",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.proofpoint_tap?.message_blocked?.threat_info_map != null && ctx.proofpoint_tap?.message_blocked?.threat_info_map instanceof List"
        }
      },
      {
        "foreach": {
          "field": "proofpoint_tap.message_blocked.threat_info_map",
          "processor": {
            "rename": {
              "field": "_ingest._value.threatID",
              "target_field": "_ingest._value.threat.id",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.proofpoint_tap?.message_blocked?.threat_info_map != null && ctx.proofpoint_tap?.message_blocked?.threat_info_map instanceof List"
        }
      },
      {
        "foreach": {
          "field": "proofpoint_tap.message_blocked.threat_info_map",
          "processor": {
            "rename": {
              "field": "_ingest._value.threatStatus",
              "target_field": "_ingest._value.threat.status",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.proofpoint_tap?.message_blocked?.threat_info_map != null && ctx.proofpoint_tap?.message_blocked?.threat_info_map instanceof List"
        }
      },
      {
        "foreach": {
          "field": "proofpoint_tap.message_blocked.threat_info_map",
          "processor": {
            "date": {
              "field": "_ingest._value.threatTime",
              "target_field": "_ingest._value.threat.time",
              "ignore_failure": true,
              "formats": [
                "ISO8601"
              ]
            }
          },
          "ignore_failure": true,
          "if": "ctx.proofpoint_tap?.message_blocked?.threat_info_map != null && ctx.proofpoint_tap?.message_blocked?.threat_info_map instanceof List"
        }
      },
      {
        "foreach": {
          "field": "proofpoint_tap.message_blocked.threat_info_map",
          "processor": {
            "remove": {
              "field": "_ingest._value.threatTime",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.proofpoint_tap?.message_blocked?.threat_info_map != null && ctx.proofpoint_tap?.message_blocked?.threat_info_map instanceof List"
        }
      },
      {
        "foreach": {
          "field": "proofpoint_tap.message_blocked.threat_info_map",
          "processor": {
            "rename": {
              "field": "_ingest._value.threatType",
              "target_field": "_ingest._value.threat.type",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.proofpoint_tap?.message_blocked?.threat_info_map != null && ctx.proofpoint_tap?.message_blocked?.threat_info_map instanceof List"
        }
      },
      {
        "foreach": {
          "field": "proofpoint_tap.message_blocked.threat_info_map",
          "processor": {
            "rename": {
              "field": "_ingest._value.threatUrl",
              "target_field": "_ingest._value.threat.url",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.proofpoint_tap?.message_blocked?.threat_info_map != null && ctx.proofpoint_tap?.message_blocked?.threat_info_map instanceof List"
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": [
            "json"
          ],
          "ignore_missing": true
        }
      },
      {
        "script": {
          "description": "Drops null/empty values recursively.",
          "lang": "painless",
          "source": "boolean dropEmptyFields(Object object) {\n  if (object == null || object == \"\") {\n    return true;\n  } else if (object instanceof Map) {\n    ((Map) object).values().removeIf(value -> dropEmptyFields(value));\n    return (((Map) object).size() == 0);\n  } else if (object instanceof List) {\n    ((List) object).removeIf(value -> dropEmptyFields(value));\n    return (((List) object).length == 0);\n  }\n  return false;\n}\ndropEmptyFields(ctx);\n"
        }
      },
      {
        "pipeline": {
          "name": "logs-proofpoint_tap.message_blocked@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{{_ingest.on_failure_message}}}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "proofpoint_tap"
      }
    }
  },
  "logs-o365.audit-1.8.2": {
    "description": "Pipeline for Office 365 Audit logs",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.4.0"
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "info"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "web"
        }
      },
      {
        "date": {
          "field": "o365audit.CreationTime",
          "formats": [
            "ISO8601"
          ]
        }
      },
      {
        "rename": {
          "field": "o365audit.Id",
          "target_field": "event.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "o365audit.ClientIPAddress",
          "target_field": "client._temp",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "o365audit.ClientIP",
          "target_field": "client._temp",
          "ignore_missing": true,
          "if": "ctx.client?._temp == null"
        }
      },
      {
        "rename": {
          "field": "o365audit.ActorIpAddress",
          "target_field": "client._temp",
          "ignore_missing": true,
          "if": "ctx.client?._temp == null"
        }
      },
      {
        "convert": {
          "field": "o365audit.UserId",
          "target_field": "user.id",
          "type": "string",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "o365audit.Workload",
          "target_field": "event.provider",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "o365audit.Operation",
          "target_field": "event.action",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "o365audit.OrganizationId",
          "target_field": "organization.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "o365audit.UserAgent",
          "target_field": "user_agent.original",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "if": "ctx.o365audit?.RecordType != null",
          "lang": "painless",
          "params": {
            "1": "ExchangeAdmin",
            "2": "ExchangeItem",
            "3": "ExchangeItemGroup",
            "4": "SharePoint",
            "6": "SharePointFileOperation",
            "7": "OneDrive",
            "8": "AzureActiveDirectory",
            "9": "AzureActiveDirectoryAccountLogon",
            "10": "DataCenterSecurityCmdlet",
            "11": "ComplianceDLPSharePoint",
            "12": "Sway",
            "13": "ComplianceDLPExchange",
            "14": "SharePointSharingOperation",
            "15": "AzureActiveDirectoryStsLogon",
            "16": "SkypeForBusinessPSTNUsage",
            "17": "SkypeForBusinessUsersBlocked",
            "18": "SecurityComplianceCenterEOPCmdlet",
            "19": "ExchangeAggregatedOperation",
            "20": "PowerBIAudit",
            "21": "CRM",
            "22": "Yammer",
            "23": "SkypeForBusinessCmdlets",
            "24": "Discovery",
            "25": "MicrosoftTeams",
            "28": "ThreatIntelligence",
            "29": "MailSubmission",
            "30": "MicrosoftFlow",
            "31": "AeD",
            "32": "MicrosoftStream",
            "33": "ComplianceDLPSharePointClassification",
            "34": "ThreatFinder",
            "35": "Project",
            "36": "SharePointListOperation",
            "37": "SharePointCommentOperation",
            "38": "DataGovernance",
            "39": "Kaizala",
            "40": "SecurityComplianceAlerts",
            "41": "ThreatIntelligenceUrl",
            "42": "SecurityComplianceInsights",
            "43": "MIPLabel",
            "44": "WorkplaceAnalytics",
            "45": "PowerAppsApp",
            "46": "PowerAppsPlan",
            "47": "ThreatIntelligenceAtpContent",
            "48": "LabelContentExplorer",
            "49": "TeamsHealthcare",
            "50": "ExchangeItemAggregated",
            "51": "HygieneEvent",
            "52": "DataInsightsRestApiAudit",
            "53": "InformationBarrierPolicyApplication",
            "54": "SharePointListItemOperation",
            "55": "SharePointContentTypeOperation",
            "56": "SharePointFieldOperation",
            "57": "MicrosoftTeamsAdmin",
            "58": "HRSignal",
            "59": "MicrosoftTeamsDevice",
            "60": "MicrosoftTeamsAnalytics",
            "61": "InformationWorkerProtection",
            "62": "Campaign",
            "63": "DLPEndpoint",
            "64": "AirInvestigation",
            "65": "Quarantine",
            "66": "MicrosoftForms",
            "67": "ApplicationAudit",
            "68": "ComplianceSupervisionExchange",
            "69": "CustomerKeyServiceEncryption",
            "70": "OfficeNative",
            "71": "MipAutoLabelSharePointItem",
            "72": "MipAutoLabelSharePointPolicyLocation",
            "73": "MicrosoftTeamsShifts",
            "75": "MipAutoLabelExchangeItem",
            "76": "CortanaBriefing",
            "78": "WDATPAlerts",
            "82": "SensitivityLabelPolicyMatch",
            "83": "SensitivityLabelAction",
            "84": "SensitivityLabeledFileAction",
            "85": "AttackSim",
            "86": "AirManualInvestigation",
            "87": "SecurityComplianceRBAC",
            "88": "UserTraining",
            "89": "AirAdminActionInvestigation",
            "90": "MSTIC",
            "91": "PhysicalBadgingSignal",
            "93": "AipDiscover",
            "94": "AipSensitivityLabelAction",
            "95": "AipProtectionAction",
            "96": "AipFileDeleted",
            "97": "AipHeartBeat",
            "98": "MCASAlerts",
            "99": "OnPremisesFileShareScannerDlp",
            "100": "OnPremisesSharePointScannerDlp",
            "101": "ExchangeSearch",
            "102": "SharePointSearch",
            "103": "PrivacyInsights",
            "105": "MyAnalyticsSettings",
            "106": "SecurityComplianceUserChange",
            "107": "ComplianceDLPExchangeClassification",
            "109": "MipExactDataMatch",
            "113": "MS365DCustomDetection",
            "147": "CoreReportingSettings",
            "148": "ComplianceConnector",
            "174": "DataShareOperation",
            "181": "EduDataLakeDownloadOperation"
          },
          "source": "def schemaId = ctx.o365audit.RecordType.toString(); def schema = params[schemaId]; if (schema != null) {\n  if (ctx.event == null) {\n    ctx.event = new HashMap();\n  }\n  ctx.event.code = schema;\n}\n"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "success",
          "if": "ctx.o365audit?.ResultStatus != null && [\"succeeded\", \"success\", \"partiallysucceeded\", \"true\"].contains(ctx.o365audit?.ResultStatus.toLowerCase())"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "failure",
          "if": "ctx.o365audit?.ResultStatus != null && [\"failed\", \"false\"].contains(ctx.o365audit?.ResultStatus.toLowerCase())"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "success",
          "if": "ctx.event?.outcome == null"
        }
      },
      {
        "script": {
          "lang": "painless",
          "if": "ctx.o365audit?.Parameters != null && ctx.o365audit?.Parameters instanceof List",
          "source": "def newparams = new HashMap();  def oldparams = ctx.o365audit.Parameters; for (int i = 0; i < oldparams.length; ++i) {\n  if (oldparams[i][\"Value\"] != null) {\n    newparams[oldparams[i][\"Name\"]] = oldparams[i][\"Value\"];\n  }\n} ctx.o365audit.Parameters = newparams;\n"
        }
      },
      {
        "rename": {
          "field": "o365audit.Parameters",
          "target_field": "o365audit.Parameters._raw",
          "if": "ctx.o365audit?.Parameters != null && ctx.o365audit?.Parameters instanceof String"
        }
      },
      {
        "script": {
          "lang": "painless",
          "if": "ctx.o365audit?.ExtendedProperties != null && ctx.o365audit?.ExtendedProperties instanceof List",
          "source": "def newparams = new HashMap();  def oldparams = ctx.o365audit.ExtendedProperties; for (int i = 0; i < oldparams.length; ++i) {\n  if (oldparams[i][\"Value\"] != null) {\n    newparams[oldparams[i][\"Name\"]] = oldparams[i][\"Value\"];\n  }\n} ctx.o365audit.ExtendedProperties = newparams;\n"
        }
      },
      {
        "rename": {
          "field": "o365audit.ExtendedProperties",
          "target_field": "o365audit.ExtendedProperties._raw",
          "if": "ctx.o365audit?.ExtendedProperties != null && ctx.o365audit?.ExtendedProperties instanceof String"
        }
      },
      {
        "script": {
          "lang": "painless",
          "if": "ctx.o365audit?.ModifiedProperties != null && ctx.o365audit?.ModifiedProperties instanceof List",
          "source": "def newparams = new HashMap();  def oldparams = ctx.o365audit.ModifiedProperties; for (int i = 0; i < oldparams.length; ++i) {\n  if (oldparams[i] instanceof Map && oldparams[i][\"OldValue\"] != null && oldparams[i][\"NewValue\"] != null) {\n    def validname = oldparams[i][\"Name\"].replace(\" \",\"_\").replace(\".\",\"_\");\n    newparams[validname] = new HashMap();\n    newparams[validname][\"NewValue\"] = oldparams[i][\"NewValue\"];\n    newparams[validname][\"OldValue\"] = oldparams[i][\"OldValue\"];\n  }\n  if (oldparams[i] instanceof String) {\n    def validname = oldparams[i].replace(\" \",\"_\").replace(\".\",\"_\");\n    newparams[validname] = new HashMap();\n  }\n} if (newparams.isEmpty()) {\n  ctx.o365audit.remove(\"ModifiedProperties\");\n  return;\n} ctx.o365audit.ModifiedProperties = newparams;\n"
        }
      },
      {
        "rename": {
          "field": "o365audit.ModifiedProperties",
          "target_field": "o365audit.ModifiedProperties._raw",
          "if": "ctx.o365audit?.ModifiedProperties != null && ctx.o365audit?.ModifiedProperties instanceof String"
        }
      },
      {
        "script": {
          "lang": "painless",
          "if": "ctx.o365audit?.AlertLinks != null && ctx.o365audit?.AlertLinks instanceof List",
          "source": "def list = ctx.o365audit.AlertLinks; def links = new ArrayList(); for (int i = 0; i < list.length; ++i) {\n  if (list[i] instanceof Map && list[i].containsKey(\"AlertLinkHref\") && list[i][\"AlertLinkHref\"] != null && list[i][\"AlertLinkHref\"] instanceof String) {\n    links.add(list[i][\"AlertLinkHref\"]);\n  }\n} if (links.length == 0) {\n  ctx.o365audit.remove(\"AlertLinks\");\n  return;\n} ctx.o365audit.AlertLinks = links;\n"
        }
      },
      {
        "set": {
          "field": "event.severity",
          "value": 1,
          "if": "ctx.o365audit?.Severity == \"informational\""
        }
      },
      {
        "set": {
          "field": "event.severity",
          "value": 2,
          "if": "ctx.o365audit?.Severity == \"low\""
        }
      },
      {
        "set": {
          "field": "event.severity",
          "value": 3,
          "if": "ctx.o365audit?.Severity == \"medium\""
        }
      },
      {
        "set": {
          "field": "event.severity",
          "value": 4,
          "if": "ctx.o365audit?.Severity == \"high\""
        }
      },
      {
        "rename": {
          "field": "o365audit.OrganizationName",
          "target_field": "organization.name",
          "ignore_missing": true,
          "if": "ctx.event?.code == \"ExchangeAdmin\""
        }
      },
      {
        "rename": {
          "field": "o365audit.OriginatingServer",
          "target_field": "server._temp",
          "ignore_missing": true,
          "if": "ctx.event?.code == \"ExchangeAdmin\""
        }
      },
      {
        "rename": {
          "field": "o365audit.MailboxOwnerUPN",
          "target_field": "user.email",
          "ignore_missing": true,
          "if": "ctx.event?.code == \"ExchangeItem\""
        }
      },
      {
        "convert": {
          "field": "o365audit.LogonUserSid",
          "target_field": "user.id",
          "type": "string",
          "ignore_missing": true,
          "if": "ctx.user?.id == null && ctx.o365audit?.LogonUserSid != null && ctx.event?.code == \"ExchangeItem\""
        }
      },
      {
        "rename": {
          "field": "o365audit.LogonUserDisplayName",
          "target_field": "user.full_name",
          "ignore_missing": true,
          "if": "ctx.event?.code == \"ExchangeItem\""
        }
      },
      {
        "rename": {
          "field": "o365audit.OrganizationName",
          "target_field": "organization.name",
          "ignore_missing": true,
          "if": "ctx.event?.code == \"ExchangeItem\""
        }
      },
      {
        "rename": {
          "field": "o365audit.OriginatingServer",
          "target_field": "server._temp",
          "ignore_missing": true,
          "if": "ctx.event?.code == \"ExchangeItem\""
        }
      },
      {
        "rename": {
          "field": "o365audit.ClientIPAddress",
          "target_field": "client._temp",
          "ignore_missing": true,
          "if": "ctx.event?.code == \"ExchangeItem\""
        }
      },
      {
        "rename": {
          "field": "o365audit.ClientProcessName",
          "target_field": "process.name",
          "ignore_missing": true,
          "if": "ctx.event?.code == \"ExchangeItem\""
        }
      },
      {
        "set": {
          "field": "user.target.id",
          "copy_from": "o365audit.ObjectId",
          "if": "ctx.event?.code == \"AzureActiveDirectory\""
        }
      },
      {
        "set": {
          "field": "event.action",
          "value": "added-user-account",
          "if": "ctx.event?.code == \"AzureActiveDirectory\" && ctx.event?.action == \"Add user.\""
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "iam",
          "if": "ctx.event?.code == \"AzureActiveDirectory\" && ctx.event?.action == \"added-user-account\""
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "user",
          "if": "ctx.event?.code == \"AzureActiveDirectory\" && ctx.event?.action == \"added-user-account\""
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "creation",
          "if": "ctx.event?.code == \"AzureActiveDirectory\" && ctx.event?.action == \"added-user-account\""
        }
      },
      {
        "set": {
          "field": "event.action",
          "value": "modified-user-account",
          "if": "ctx.event?.code == \"AzureActiveDirectory\" && ctx.event?.action == \"Update user.\""
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "iam",
          "if": "ctx.event?.code == \"AzureActiveDirectory\" && ctx.event?.action == \"modified-user-account\""
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "user",
          "if": "ctx.event?.code == \"AzureActiveDirectory\" && ctx.event?.action == \"modified-user-account\""
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "change",
          "if": "ctx.event?.code == \"AzureActiveDirectory\" && ctx.event?.action == \"modified-user-account\""
        }
      },
      {
        "set": {
          "field": "event.action",
          "value": "deleted-user-account",
          "if": "ctx.event?.code == \"AzureActiveDirectory\" && ctx.event?.action == \"Delete user.\""
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "iam",
          "if": "ctx.event?.code == \"AzureActiveDirectory\" && ctx.event?.action == \"deleted-user-account\""
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "user",
          "if": "ctx.event?.code == \"AzureActiveDirectory\" && ctx.event?.action == \"deleted-user-account\""
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "deletion",
          "if": "ctx.event?.code == \"AzureActiveDirectory\" && ctx.event?.action == \"deleted-user-account\""
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "authentication",
          "if": "ctx.event?.code == \"AzureActiveDirectoryStsLogon\""
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "start",
          "if": "ctx.event?.code == \"AzureActiveDirectoryStsLogon\""
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "access",
          "if": "ctx.event?.code == \"AzureActiveDirectoryStsLogon\""
        }
      },
      {
        "rename": {
          "field": "o365audit.ObjectId",
          "target_field": "url.original",
          "ignore_missing": true,
          "if": "ctx.event?.code == \"SharePointFileOperation\""
        }
      },
      {
        "rename": {
          "field": "o365audit.SourceRelativeUrl",
          "target_field": "file.directory",
          "ignore_missing": true,
          "if": "ctx.event?.code == \"SharePointFileOperation\""
        }
      },
      {
        "rename": {
          "field": "o365audit.SourceFileName",
          "target_field": "file.name",
          "ignore_missing": true,
          "if": "ctx.event?.code == \"SharePointFileOperation\""
        }
      },
      {
        "rename": {
          "field": "o365audit.SourceFileExtension",
          "target_field": "file.extension",
          "ignore_missing": true,
          "if": "ctx.event?.code == \"SharePointFileOperation\""
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "file",
          "if": "ctx.event?.action != null && [\"FileAccessed\", \"FileDeleted\", \"FileDownloaded\", \"FileModified\", \"FileMoved\", \"FileRenamed\", \"FileRestored\", \"FileUploaded\", \"FolderCopied\", \"FolderCreated\", \"FolderDeleted\", \"FolderModified\", \"FolderMoved\", \"FolderRenamed\", \"FolderRestored\"].contains(ctx.event?.action)"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "configuration",
          "if": "ctx.event?.action == \"ComplianceSettingChanged\""
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "access",
          "if": "ctx.event?.action != null && [\"FileAccessed\", \"FileDownloaded\"].contains(ctx.event?.action)"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "change",
          "if": "ctx.event?.action != null && [\"ComplianceSettingChanged\", \"FileModified\", \"FileMoved\", \"FileRenamed\", \"FileRestored\", \"FolderModified\", \"FolderMoved\", \"FolderRenamed\", \"FolderRestored\"].contains(ctx.event?.action)"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "deletion",
          "if": "ctx.event?.action != null && [\"FileDeleted\", \"FolderDeleted\"].contains(ctx.event?.action)"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "creation",
          "if": "ctx.event?.action != null && [\"FileUploaded\", \"FolderCopied\", \"FolderCreated\"].contains(ctx.event?.action)"
        }
      },
      {
        "rename": {
          "field": "o365audit.Comments",
          "target_field": "message",
          "ignore_missing": true,
          "if": "ctx.event?.code == \"SecurityComplianceAlerts\""
        }
      },
      {
        "rename": {
          "field": "o365audit.Name",
          "target_field": "rule.name",
          "ignore_missing": true,
          "if": "ctx.event?.code == \"SecurityComplianceAlerts\""
        }
      },
      {
        "rename": {
          "field": "o365audit.PolicyId",
          "target_field": "rule.id",
          "ignore_missing": true,
          "if": "ctx.event?.code == \"SecurityComplianceAlerts\""
        }
      },
      {
        "rename": {
          "field": "o365audit.Category",
          "target_field": "rule.category",
          "ignore_missing": true,
          "if": "ctx.event?.code == \"SecurityComplianceAlerts\""
        }
      },
      {
        "rename": {
          "field": "o365audit.EntityType",
          "target_field": "rule.ruleset",
          "ignore_missing": true,
          "if": "ctx.event?.code == \"SecurityComplianceAlerts\""
        }
      },
      {
        "rename": {
          "field": "o365audit.AlertEntityId",
          "target_field": "rule.description",
          "ignore_missing": true,
          "if": "ctx.event?.code == \"SecurityComplianceAlerts\""
        }
      },
      {
        "rename": {
          "field": "o365audit.AlertLinks",
          "target_field": "rule.reference",
          "ignore_missing": true,
          "if": "ctx.event?.code == \"SecurityComplianceAlerts\""
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "alert",
          "if": "ctx.event?.code == \"SecurityComplianceAlerts\""
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "authentication",
          "if": "ctx.event?.code == \"SecurityComplianceAlerts\" && ctx.o365audit?.Category == \"AccessGovernance\""
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "file",
          "if": "ctx.event?.code == \"SecurityComplianceAlerts\" && ctx.o365audit?.Category != null && [\"DataGovernance\", \"DataLossPrevention\"].contains(ctx.o365audit?.Category)"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "malware",
          "if": "ctx.event?.code == \"SecurityComplianceAlerts\" && ctx.o365audit?.Category == \"ThreatManagement\""
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "authentication",
          "allow_duplicates": false,
          "if": "ctx.event?.code == \"SecurityComplianceAlerts\" && ctx.o365audit?.Category != null && ![\"DataGovernance\", \"DataLossPrevention\", \"ThreatManagement\", \"AccessGovernance\"].contains(ctx.o365audit?.Category)"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "web",
          "allow_duplicates": false,
          "if": "ctx.event?.code == \"SecurityComplianceAlerts\""
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "info",
          "allow_duplicates": false,
          "if": "ctx.event?.code == \"SecurityComplianceAlerts\""
        }
      },
      {
        "convert": {
          "field": "o365audit.AlertEntityId",
          "target_field": "user.id",
          "type": "string",
          "ignore_missing": true,
          "if": "ctx.user?.id == null && ctx.event?.code == \"SecurityComplianceAlerts\" && ctx.rule?.ruleset == \"User\""
        }
      },
      {
        "rename": {
          "field": "o365audit.AlertEntityId",
          "target_field": "user.email",
          "ignore_missing": true,
          "if": "ctx.event?.code == \"SecurityComplianceAlerts\" && ctx.rule?.ruleset != null && [\"Recipients\", \"Sender\"].contains(ctx.rule?.ruleset)"
        }
      },
      {
        "rename": {
          "field": "o365audit.AlertEntityId",
          "target_field": "threat.technique.id",
          "ignore_missing": true,
          "if": "ctx.event?.code == \"SecurityComplianceAlerts\" && ctx.rule?.ruleset == \"MalwareFamily\""
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "alert",
          "if": "ctx.event?.code != null && [\"ComplianceDLPSharePoint\", \"ComplianceDLPExchange\"].contains(ctx.event?.code)"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "file",
          "if": "ctx.event?.code != null && [\"ComplianceDLPSharePoint\", \"ComplianceDLPExchange\"].contains(ctx.event?.code)"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "access",
          "if": "ctx.event?.code != null && [\"ComplianceDLPSharePoint\", \"ComplianceDLPExchange\"].contains(ctx.event?.code)"
        }
      },
      {
        "rename": {
          "field": "o365audit.SharePointMetaData.From",
          "target_field": "user.id",
          "ignore_missing": true,
          "if": "ctx.user?.id == null && ctx.event?.code != null && [\"ComplianceDLPSharePoint\", \"ComplianceDLPExchange\"].contains(ctx.event?.code)"
        }
      },
      {
        "rename": {
          "field": "o365audit.SharePointMetaData.FileName",
          "target_field": "file.name",
          "ignore_missing": true,
          "if": "ctx.event?.code != null && [\"ComplianceDLPSharePoint\", \"ComplianceDLPExchange\"].contains(ctx.event?.code)"
        }
      },
      {
        "rename": {
          "field": "o365audit.SharePointMetaData.FilePathUrl",
          "target_field": "url.original",
          "ignore_missing": true,
          "if": "ctx.event?.code != null && [\"ComplianceDLPSharePoint\", \"ComplianceDLPExchange\"].contains(ctx.event?.code)"
        }
      },
      {
        "rename": {
          "field": "o365audit.SharePointMetaData.UniqueId",
          "target_field": "file.inode",
          "ignore_missing": true,
          "if": "ctx.event?.code != null && [\"ComplianceDLPSharePoint\", \"ComplianceDLPExchange\"].contains(ctx.event?.code)"
        }
      },
      {
        "rename": {
          "field": "o365audit.SharePointMetaData.UniqueID",
          "target_field": "file.inode",
          "ignore_missing": true,
          "if": "ctx.event?.code != null && [\"ComplianceDLPSharePoint\", \"ComplianceDLPExchange\"].contains(ctx.event?.code)"
        }
      },
      {
        "rename": {
          "field": "o365audit.SharePointMetaData.FileOwner",
          "target_field": "file.owner",
          "ignore_missing": true,
          "if": "ctx.event?.code != null && [\"ComplianceDLPSharePoint\", \"ComplianceDLPExchange\"].contains(ctx.event?.code)"
        }
      },
      {
        "rename": {
          "field": "o365audit.ExchangeMetaData.From",
          "target_field": "source.user.email",
          "ignore_missing": true,
          "if": "ctx.event?.code != null && [\"ComplianceDLPSharePoint\", \"ComplianceDLPExchange\"].contains(ctx.event?.code)"
        }
      },
      {
        "rename": {
          "field": "o365audit.ExchangeMetaData.Subject",
          "target_field": "message",
          "ignore_missing": true,
          "if": "ctx.event?.code != null && [\"ComplianceDLPSharePoint\", \"ComplianceDLPExchange\"].contains(ctx.event?.code)"
        }
      },
      {
        "rename": {
          "field": "o365audit.PolicyId",
          "target_field": "rule.id",
          "ignore_missing": true,
          "if": "ctx.event?.code != null && [\"ComplianceDLPSharePoint\", \"ComplianceDLPExchange\"].contains(ctx.event?.code)"
        }
      },
      {
        "rename": {
          "field": "o365audit.PolicyName",
          "target_field": "rule.name",
          "ignore_missing": true,
          "if": "ctx.event?.code != null && [\"ComplianceDLPSharePoint\", \"ComplianceDLPExchange\"].contains(ctx.event?.code)"
        }
      },
      {
        "date": {
          "field": "o365audit.SharePointMetaData.LastModifiedTime",
          "target_field": "file.mtime",
          "formats": [
            "ISO8601"
          ],
          "if": "ctx.event?.code != null && [\"ComplianceDLPSharePoint\", \"ComplianceDLPExchange\"].contains(ctx.event?.code) && ctx.o365audit?.SharePointMetaData?.LastModifiedTime != null"
        }
      },
      {
        "script": {
          "lang": "painless",
          "if": "ctx.event?.code != null && ctx.o365audit?.ExchangeMetaData!= null && [\"ComplianceDLPSharePoint\", \"ComplianceDLPExchange\"].contains(ctx.event?.code)",
          "source": "def fields = new def[] {\"To\", \"CC\", \"BCC\"}; if (ctx.destination == null) {\n  ctx.destination = new HashMap();\n} if (ctx.destination.user == null) {\n  ctx.destination.user = new HashMap();\n} ctx.destination.user.email = new ArrayList(); for (int i = 0; i < fields.length; ++i) {\n  if (ctx.o365audit.ExchangeMetaData instanceof Map && ctx.o365audit.ExchangeMetaData.containsKey(fields[i])) {\n    def emails = ctx.o365audit.ExchangeMetaData[fields[i]];\n    if (emails instanceof List){\n      for (int e = 0; e < emails.length; ++e) {\n        ctx.destination.user.email.add(emails[e]);\n      }\n    }\n    if (emails instanceof String){\n      ctx.destination.user.email.add(emails);\n    }\n  }\n}\n"
        }
      },
      {
        "rename": {
          "field": "o365audit.ExceptionInfo",
          "target_field": "o365audit.ExceptionInfo.Reason",
          "ignore_missing": true,
          "if": "ctx.event?.code != null && [\"ComplianceDLPSharePoint\", \"ComplianceDLPExchange\"].contains(ctx.event?.code) && ctx.o365audit?.ExceptionInfo != null && ctx.o365audit?.ExceptionInfo instanceof String"
        }
      },
      {
        "script": {
          "lang": "painless",
          "if": "ctx.event?.code != null && [\"ComplianceDLPSharePoint\", \"ComplianceDLPExchange\"].contains(ctx.event?.code) && ctx.o365audit?.PolicyDetails != null",
          "source": "int severityToCode(def x) { \n  if (x.toLowerCase() == \"informational\") {\n    return 1;\n  }\n  if (x.toLowerCase() == \"low\") {\n    return 2;\n  }\n  if (x.toLowerCase() == \"medium\") {\n    return 3;\n  }\n  if (x.toLowerCase() == \"high\") {\n    return 4;\n  }\n  return 0;\n} def policies = ctx.o365audit.PolicyDetails; if (policies == null) {\n  return;\n} if (ctx.rule == null) {\n  ctx.rule = new HashMap();\n} if (ctx.rule.id == null) {\n  ctx.rule.id = new ArrayList();\n} if (ctx.rule.name == null) {\n  ctx.rule.name = new ArrayList();\n} def maxSeverity = 0; def allowed = true; for (int i = 0; i < policies.length && policies instanceof List; ++i) {\n  def rules = policies[i].Rules;\n  if (rules == null) {\n    continue;\n  }\n  for (int j = 0; j < rules.length; ++j) {\n    def rule = rules[j];\n    def id = rule.RuleId;\n    def name = rule.RuleName;\n    def sev = severityToCode(rule.Severity);\n    if (id != null && name != null) {\n      ctx.rule.id.add(id);\n      ctx.rule.name.add(name);\n    }\n    if (sev > maxSeverity) {\n      maxSeverity = sev;\n    }\n    if (allowed) {\n      if (rule.Actions != null && rule.Actions.contains(\"BlockAccess\")) {\n        allowed = false;\n      }\n    }\n  }\n} if (maxSeverity > -1) {\n  ctx.event.severity = maxSeverity;\n} if (allowed) {\n  ctx.event.outcome = \"success\";\n  return;\n} if (ctx.event?.action == \"DlpRuleUndo\") {\n  ctx.event.outcome = \"success\";\n  return;\n} if (ctx.event?.action == \"DlpInfo\") {\n  ctx.event.outcome = \"failure\";\n  return;\n} if (ctx.o365audit?.ExceptionInfo != null && !ctx.o365audit?.ExceptionInfo.isEmpty()) {\n  ctx.event.outcome = \"success\";\n  return;\n} ctx.event.outcome = \"failure\";\n"
        }
      },
      {
        "rename": {
          "field": "o365audit.ActorUserId",
          "target_field": "user.email",
          "ignore_missing": true,
          "if": "ctx.event?.code == \"Yammer\""
        }
      },
      {
        "convert": {
          "field": "o365audit.ActorYammerUserId",
          "target_field": "user.id",
          "type": "string",
          "ignore_missing": true,
          "if": "ctx.user?.id == null && ctx.event?.code == \"Yammer\""
        }
      },
      {
        "rename": {
          "field": "o365audit.FileId",
          "target_field": "file.inode",
          "ignore_missing": true,
          "if": "ctx.event?.code == \"Yammer\""
        }
      },
      {
        "rename": {
          "field": "o365audit.FileName",
          "target_field": "file.name",
          "ignore_missing": true,
          "if": "ctx.event?.code == \"Yammer\""
        }
      },
      {
        "rename": {
          "field": "o365audit.GroupName",
          "target_field": "group.name",
          "ignore_missing": true,
          "if": "ctx.event?.code == \"Yammer\""
        }
      },
      {
        "rename": {
          "field": "o365audit.TargetUserId",
          "target_field": "destination.user.email",
          "ignore_missing": true,
          "if": "ctx.event?.code == \"Yammer\""
        }
      },
      {
        "rename": {
          "field": "o365audit.TargetYammerUserId",
          "target_field": "destination.user.id",
          "ignore_missing": true,
          "if": "ctx.event?.code == \"Yammer\""
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "configuration",
          "if": "ctx.event?.code == \"Yammer\" && ctx.event?.action != null && [\"NetworkConfigurationUpdated\", \"NetworkSecurityConfigurationUpdated\", \"SoftDeleteSettingsUpdated\", \"ProcessProfileFields\", \"SupervisorAdminToggled\"].contains(ctx.event?.action)"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "iam",
          "if": "ctx.event?.code == \"Yammer\" && ctx.event?.action != null && [\"NetworkSecurityConfigurationUpdated\", \"GroupCreation\", \"GroupDeletion\", \"NetworkUserSuspended\", \"UserSuspension\"].contains(ctx.event?.action)"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "file",
          "if": "ctx.event?.code == \"Yammer\" && ctx.event?.action != null && [\"FileCreated\", \"FileDownloaded\", \"FileShared\", \"FileUpdateDescription\", \"FileUpdateName\", \"FileVisited\"].contains(ctx.event?.action)"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "change",
          "if": "ctx.event?.code == \"Yammer\" && ctx.event?.action != null && [\"NetworkConfigurationUpdated\", \"NetworkSecurityConfigurationUpdated\", \"SoftDeleteSettingsUpdated\", \"ProcessProfileFields\", \"SupervisorAdminToggled\"].contains(ctx.event?.action)"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "admin",
          "if": "ctx.event?.code == \"Yammer\" && ctx.event?.action == \"NetworkSecurityConfigurationUpdated\""
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "creation",
          "if": "ctx.event?.code == \"Yammer\" && ctx.event?.action != null && [\"FileCreated\", \"GroupCreation\", \"FileUpdateName\"].contains(ctx.event?.action)"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "deletion",
          "if": "ctx.event?.code == \"Yammer\" && ctx.event?.action == \"GroupDeletion\""
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "access",
          "if": "ctx.event?.code == \"Yammer\" && ctx.event?.action != null && [\"FileDownloaded\", \"FileShared\", \"FileUpdateDescription\", \"FileVisited\"].contains(ctx.event?.action)"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "group",
          "if": "ctx.event?.code == \"Yammer\" && ctx.event?.action != null && [\"GroupCreation\", \"GroupDeletion\"].contains(ctx.event?.action)"
        }
      },
      {
        "set": {
          "field": "event.action",
          "value": "added-group-account-to",
          "if": "ctx.event?.code == \"MicrosoftTeams\" && ctx.event?.action == \"TeamCreated\""
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "iam",
          "if": "ctx.event?.code == \"MicrosoftTeams\" && ctx.event?.action == \"added-group-account-to\""
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "group",
          "if": "ctx.event?.code == \"MicrosoftTeams\" && ctx.event?.action == \"added-group-account-to\""
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "creation",
          "if": "ctx.event?.code == \"MicrosoftTeams\" && ctx.event?.action == \"added-group-account-to\""
        }
      },
      {
        "rename": {
          "field": "o365audit.TeamName",
          "target_field": "group.name",
          "ignore_missing": true,
          "if": "ctx.event?.code == \"MicrosoftTeams\""
        }
      },
      {
        "set": {
          "field": "event.action",
          "value": "added-users-to-group",
          "if": "ctx.event?.code == \"MicrosoftTeams\" && ctx.event?.action == \"MemberAdded\""
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "iam",
          "if": "ctx.event?.code == \"MicrosoftTeams\" && ctx.event?.action == \"added-users-to-group\""
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "group",
          "if": "ctx.event?.code == \"MicrosoftTeams\" && ctx.event?.action == \"added-users-to-group\""
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "change",
          "if": "ctx.event?.code == \"MicrosoftTeams\" && ctx.event?.action == \"added-users-to-group\""
        }
      },
      {
        "set": {
          "field": "event.action",
          "value": "deleted-user-account",
          "if": "ctx.event?.code == \"MicrosoftTeams\" && ctx.event?.action == \"Delete user.\""
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "iam",
          "if": "ctx.event?.code == \"MicrosoftTeams\" && ctx.event?.action == \"deleted-user-account\""
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "user",
          "if": "ctx.event?.code == \"MicrosoftTeams\" && ctx.event?.action == \"deleted-user-account\""
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "deletion",
          "if": "ctx.event?.code == \"MicrosoftTeams\" && ctx.event?.action == \"deleted-user-account\""
        }
      },
      {
        "rename": {
          "field": "o365audit.ObjectId",
          "target_field": "user.target.id",
          "ignore_missing": true,
          "if": "ctx.event?.code == \"MicrosoftTeams\" && ctx.event?.action == \"deleted-user-account\""
        }
      },
      {
        "script": {
          "lang": "painless",
          "if": "ctx.event?.code == \"MicrosoftTeams\" && ctx.o365audit?.Members != null && ctx.o365audit.Members instanceof List",
          "source": "def members = ctx.o365audit?.Members; if (ctx.related == null) {\n  ctx.related = new HashMap();\n} if (ctx.related.user == null) {\n  ctx.related.user = new ArrayList();\n} for (int i = 0; i < members.length; ++i) {\n  if (members[i] instanceof Map && members[i].containsKey(\"UPN\") && !members[i][\"UPN\"].isEmpty()) {\n    ctx.related.user.add(members[i][\"UPN\"]);\n  }\n}\n"
        }
      },
      {
        "gsub": {
          "field": "client._temp",
          "pattern": "::ffff:([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)",
          "replacement": "$1",
          "ignore_missing": true
        }
      },
      {
        "grok": {
          "field": "client._temp",
          "patterns": [
            "%{IPANDPORTBRACKETS}",
            "^%{IP:client.address}$",
            "^\\[%{IP:client.address}\\]$",
            "%{IPANDPORT}",
            "^%{NOTSPACE:client.domain}$",
            "%{HOSTNAMEANDPORTBRACKETS}",
            "%{HOSTNAMEANDPORT}",
            "^\\[%{HOSTNAMEANDIP}\\]$",
            "^%{HOSTNAMEANDIP}$",
            "%{GREEDYDATA:client.address}"
          ],
          "pattern_definitions": {
            "IPANDPORTBRACKETS": "^\\[%{IP:client.address}\\]:%{POSINT:client._port}",
            "IPANDPORT": "^%{IP:client.address}:%{POSINT:client._port}",
            "HOSTNAMEANDPORTBRACKETS": "^\\[%{NOTSPACE:client.domain}\\]:%{POSINT:client._port}",
            "HOSTNAMEANDPORT": "^%{NOTSPACE:client.domain}:%{POSINT:client._port}",
            "NOTCLOSINGPARENS": "[^)]*",
            "HOSTNAMEANDIP": "%{NOTSPACE:client.domain} \\(%{NOTCLOSINGPARENS:client.address}\\)"
          },
          "if": "ctx.client?._temp != null && !ctx.client?._temp.isEmpty()"
        }
      },
      {
        "gsub": {
          "field": "server._temp",
          "pattern": "[\n\r]",
          "replacement": "",
          "ignore_missing": true
        }
      },
      {
        "grok": {
          "field": "server._temp",
          "patterns": [
            "^\\[%{HOSTNAMEANDIP}\\]$",
            "%{HOSTNAMEANDIP}",
            "%{GREEDYDATA:server.address}"
          ],
          "pattern_definitions": {
            "NOTCLOSINGPARENS": "[^)]*",
            "HOSTNAMEANDIP": "%{NOTSPACE:server.domain} \\(%{NOTCLOSINGPARENS:server.address}\\)"
          },
          "if": "ctx.server?._temp != null && !ctx.server?._temp.isEmpty()",
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "client.address",
          "target_field": "client.ip",
          "type": "ip",
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "client._port",
          "target_field": "client.port",
          "type": "long",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "server.address",
          "target_field": "server.ip",
          "type": "ip",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": [
            "client._port",
            "client._temp",
            "server._temp"
          ],
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "source.ip",
          "copy_from": "client.ip",
          "if": "ctx.client?.ip != null"
        }
      },
      {
        "set": {
          "field": "source.port",
          "copy_from": "client.port",
          "if": "ctx.client?.port != null"
        }
      },
      {
        "set": {
          "field": "destination.ip",
          "copy_from": "server.ip",
          "if": "ctx.server?.ip != null"
        }
      },
      {
        "script": {
          "lang": "painless",
          "if": "ctx.user?.id != null && ctx.user?.id.contains(\"@\")",
          "source": "String[] splitmail = ctx.user.id.splitOnToken(\"@\"); if (splitmail.length != 2) {\n  return;\n} ctx.user.email = ctx.user.id; ctx.user.domain = splitmail[1]; ctx.user.name = splitmail[0];\n"
        }
      },
      {
        "script": {
          "lang": "painless",
          "if": "ctx.user?.target?.id != null && ctx.user?.target?.id.contains(\"@\")",
          "source": "String[] splitmail = ctx.user.target.id.splitOnToken(\"@\"); if (splitmail.length != 2) {\n  return;\n} ctx.user.target.email = ctx.user.target.id; ctx.user.target.domain = splitmail[1]; ctx.user.target.name = splitmail[0];\n"
        }
      },
      {
        "script": {
          "lang": "painless",
          "if": "ctx.source?.user?.id != null && ctx.source?.user?.id.contains(\"@\")",
          "source": "String[] splitmail = ctx.source.user.id.splitOnToken(\"@\"); if (splitmail.length != 2) {\n  return;\n} ctx.source.user.email = ctx.source.user.id; ctx.source.user.domain = splitmail[1]; ctx.source.user.name = splitmail[0];\n"
        }
      },
      {
        "script": {
          "lang": "painless",
          "if": "ctx.destination?.user?.id != null && ctx.destination?.user?.id.contains(\"@\")",
          "source": "String[] splitmail = ctx.destination.user.id.splitOnToken(\"@\"); if (splitmail.length != 2) {\n  return;\n} ctx.destination.user.email = ctx.destination.user.id; ctx.destination.user.domain = splitmail[1]; ctx.destination.user.name = splitmail[0];\n"
        }
      },
      {
        "set": {
          "field": "network.type",
          "value": "ipv6",
          "if": "ctx.client?.ip != null && ctx.client?.ip.contains(\":\")"
        }
      },
      {
        "set": {
          "field": "network.type",
          "value": "ipv4",
          "if": "ctx.network?.type == null && ctx.client?.ip != null"
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{client.ip}}",
          "allow_duplicates": false,
          "if": "ctx.client?.ip != null"
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{server.ip}}",
          "allow_duplicates": false,
          "if": "ctx.server?.ip != null"
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{user.name}}",
          "allow_duplicates": false,
          "if": "ctx.user?.name != null"
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{user.target.name}}",
          "allow_duplicates": false,
          "if": "ctx.user?.target?.name != null"
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{file.owner}}",
          "allow_duplicates": false,
          "if": "ctx.file?.owner != null"
        }
      },
      {
        "rename": {
          "field": "o365audit.ExtendedProperties.UserAgent",
          "target_field": "user_agent.original",
          "ignore_missing": true,
          "if": "ctx.o365audit?.ExtendedProperties?.UserAgent != null"
        }
      },
      {
        "lowercase": {
          "field": "organization.id",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "host.id",
          "copy_from": "organization.id",
          "if": "ctx.organization?.id != null"
        }
      },
      {
        "script": {
          "lang": "painless",
          "if": "ctx.organization?.id != null && ctx._conf?.tenants != null",
          "source": "def conftenants = ctx._conf.tenants; def orgid = ctx.organization.id; if (conftenants instanceof Map && conftenants.containsKey(orgid)) {\n  ctx.organization.name = conftenants[orgid];\n  ctx.host.name = conftenants[orgid];\n}\n"
        }
      },
      {
        "set": {
          "field": "host.name",
          "copy_from": "organization.name",
          "if": "ctx.organization?.name != null && ctx.host?.name == null"
        }
      },
      {
        "set": {
          "field": "host.name",
          "copy_from": "user.domain",
          "if": "ctx.user?.domain != null && ctx.host?.name == null"
        }
      },
      {
        "convert": {
          "field": "o365audit.AzureActiveDirectoryEventType",
          "type": "string",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "o365audit.RecordType",
          "type": "string",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "o365audit.UserType",
          "type": "string",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "o365audit.Version",
          "type": "string",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "o365audit.InternalLogonType",
          "type": "string",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "o365audit.LogonType",
          "type": "string",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "o365audit.ActorYammerUserId",
          "type": "string",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "o365audit.YammerNetworkId",
          "type": "string",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "o365audit",
          "target_field": "o365.audit",
          "ignore_missing": true
        }
      },
      {
        "user_agent": {
          "field": "user_agent.original",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "source.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.asn",
          "target_field": "source.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.organization_name",
          "target_field": "source.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": [
            "_conf"
          ],
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-o365.audit@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "o365"
      }
    }
  },
  "logs-cisco_asa.log-2.7.6": {
    "description": "Pipeline for Cisco ASA logs",
    "processors": [
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "ecs.version",
          "value": "8.4.0"
        }
      },
      {
        "grok": {
          "field": "event.original",
          "patterns": [
            "(?:%{SYSLOG_HEADER})?\\s*%{GREEDYDATA:_temp_.full_message}"
          ],
          "pattern_definitions": {
            "SYSLOG_HEADER": "(?:%{SYSPRIORITY}\\s*)?(?:%{FTD_DATE:_temp_.raw_date}:?\\s+)?(?:%{PROCESS_HOST}|%{HOST_PROCESS})(?:{DATA})?%{SYSLOG_END}?",
            "SYSPRIORITY": "<%{NONNEGINT:log.syslog.priority:int}>",
            "FTD_DATE": "(?:%{TIMESTAMP_ISO8601}|%{ASA_DATE})",
            "ASA_DATE": "(?:%{DAY} )?%{MONTH}  *%{MONTHDAY}(?: %{YEAR})? %{TIME}(?: %{TZ})?",
            "PROCESS": "(?:[^%\\s:\\[]+)",
            "SYSLOG_END": "(?:(:|\\s)\\s+)",
            "PROCESS_HOST": "(?:%{PROCESS:process.name}:\\s%{SYSLOGHOST:host.name})",
            "HOST_PROCESS": "(?:%{SYSLOGHOST:host.hostname}:?\\s+)?(?:%{PROCESS:process.name}?(?:\\[%{POSINT:process.pid:long}\\])?)?"
          }
        }
      },
      {
        "script": {
          "lang": "painless",
          "source": "if (ctx.log?.syslog?.priority != null) {\n  def severity = new HashMap();\n  severity['code'] = ctx.log.syslog.priority&0x7;\n  ctx.log.syslog['severity'] = severity;\n  def facility = new HashMap();\n  facility['code'] = ctx.log.syslog.priority>>3;\n  ctx.log.syslog['facility'] = facility;\n}\n"
        }
      },
      {
        "grok": {
          "field": "_temp_.full_message",
          "patterns": [
            "%{FTD_PREFIX}-(?:%{FTD_SUFFIX:_temp_.cisco.suffix}-)?%{NONNEGINT:event.severity:int}-%{POSINT:_temp_.cisco.message_id}?:?\\s*%{GREEDYDATA:message}",
            "%{GREEDYDATA:message}"
          ],
          "pattern_definitions": {
            "FTD_SUFFIX": "[^0-9-]+",
            "FTD_PREFIX": "%{DATA}%(?:[A-Z]+)"
          }
        }
      },
      {
        "set": {
          "field": "_temp_.cisco.message_id",
          "value": "",
          "if": "ctx?._temp_?.cisco?.message_id == null"
        }
      },
      {
        "set": {
          "field": "event.severity",
          "value": 7,
          "if": "ctx?.event?.severity == null"
        }
      },
      {
        "date": {
          "if": "ctx.event?.timezone == null && ctx._temp_?.raw_date != null",
          "field": "_temp_.raw_date",
          "target_field": "@timestamp",
          "formats": [
            "ISO8601",
            "MMM  d HH:mm:ss",
            "MMM dd HH:mm:ss",
            "EEE MMM  d HH:mm:ss",
            "EEE MMM dd HH:mm:ss",
            "MMM  d HH:mm:ss z",
            "MMM dd HH:mm:ss z",
            "EEE MMM  d HH:mm:ss z",
            "EEE MMM dd HH:mm:ss z",
            "MMM  d yyyy HH:mm:ss",
            "MMM dd yyyy HH:mm:ss",
            "EEE MMM  d yyyy HH:mm:ss",
            "EEE MMM dd yyyy HH:mm:ss",
            "MMM  d yyyy HH:mm:ss z",
            "MMM dd yyyy HH:mm:ss z",
            "EEE MMM  d yyyy HH:mm:ss z",
            "EEE MMM dd yyyy HH:mm:ss z"
          ],
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{ _ingest.on_failure_message }}"
              }
            }
          ]
        }
      },
      {
        "date": {
          "if": "ctx.event?.timezone != null && ctx._temp_?.raw_date != null",
          "timezone": "{{ event.timezone }}",
          "field": "_temp_.raw_date",
          "target_field": "@timestamp",
          "formats": [
            "ISO8601",
            "MMM  d HH:mm:ss",
            "MMM dd HH:mm:ss",
            "EEE MMM  d HH:mm:ss",
            "EEE MMM dd HH:mm:ss",
            "MMM  d HH:mm:ss z",
            "MMM dd HH:mm:ss z",
            "EEE MMM  d HH:mm:ss z",
            "EEE MMM dd HH:mm:ss z",
            "MMM  d yyyy HH:mm:ss",
            "MMM dd yyyy HH:mm:ss",
            "EEE MMM  d yyyy HH:mm:ss",
            "EEE MMM dd yyyy HH:mm:ss",
            "MMM  d yyyy HH:mm:ss z",
            "MMM dd yyyy HH:mm:ss z",
            "EEE MMM  d yyyy HH:mm:ss z",
            "EEE MMM dd yyyy HH:mm:ss z"
          ],
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{ _ingest.on_failure_message }}"
              }
            }
          ]
        }
      },
      {
        "set": {
          "field": "log.level",
          "if": "ctx.event.severity == 0",
          "value": "unknown"
        }
      },
      {
        "set": {
          "field": "log.level",
          "if": "ctx.event.severity == 1",
          "value": "alert"
        }
      },
      {
        "set": {
          "field": "log.level",
          "if": "ctx.event.severity == 2",
          "value": "critical"
        }
      },
      {
        "set": {
          "field": "log.level",
          "if": "ctx.event.severity == 3",
          "value": "error"
        }
      },
      {
        "set": {
          "field": "log.level",
          "if": "ctx.event.severity == 4",
          "value": "warning"
        }
      },
      {
        "set": {
          "field": "log.level",
          "if": "ctx.event.severity == 5",
          "value": "notification"
        }
      },
      {
        "set": {
          "field": "log.level",
          "if": "ctx.event.severity == 6",
          "value": "informational"
        }
      },
      {
        "set": {
          "field": "log.level",
          "if": "ctx.event.severity == 7",
          "value": "debug"
        }
      },
      {
        "set": {
          "if": "ctx._temp_.cisco.message_id != \"\"",
          "field": "event.action",
          "value": "firewall-rule"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '106001'",
          "field": "message",
          "description": "106001",
          "pattern": "%{network.direction} %{network.transport} connection %{event.outcome} from %{source.address}/%{source.port} to %{destination.address}/%{destination.port} flags %{} on interface %{_temp_.cisco.source_interface}"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '106002'",
          "field": "message",
          "description": "106002",
          "pattern": "%{network.transport} Connection %{event.outcome} by %{network.direction} list %{_temp_.cisco.list_id} src %{source.address} dest %{destination.address}"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '106006'",
          "field": "message",
          "description": "106006",
          "pattern": "%{event.outcome} %{network.direction} %{network.transport} from %{source.address}/%{source.port} to %{destination.address}/%{destination.port} on interface %{_temp_.cisco.source_interface}"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '106007'",
          "field": "message",
          "description": "106007",
          "pattern": "%{event.outcome} %{network.direction} %{network.transport} from %{source.address}/%{source.port} to %{destination.address}/%{destination.port} due to %{network.protocol} %{}"
        }
      },
      {
        "grok": {
          "if": "ctx._temp_.cisco.message_id == '106010'",
          "field": "message",
          "description": "106010",
          "patterns": [
            "%{NOTSPACE:event.outcome} %{NOTSPACE:network.direction} %{NOTSPACE:network.transport} src %{NOTSPACE:_temp_.cisco.source_interface}:%{NOTSPACE:source.address}/%{POSINT:source.port} (%{DATA})?dst %{NOTSPACE:_temp_.cisco.destination_interface}:%{NOTSPACE:destination.address}/%{POSINT:destination.port}(%{GREEDYDATA})?"
          ]
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '106013'",
          "field": "message",
          "description": "106013",
          "pattern": "Dropping echo request from %{source.address} to PAT address %{destination.address}"
        }
      },
      {
        "set": {
          "if": "ctx._temp_.cisco.message_id == '106013'",
          "field": "network.transport",
          "description": "106013",
          "value": "icmp"
        }
      },
      {
        "set": {
          "if": "ctx._temp_.cisco.message_id == '106013'",
          "field": "network.direction",
          "description": "106013",
          "value": "inbound"
        }
      },
      {
        "grok": {
          "if": "ctx._temp_.cisco.message_id == '106014'",
          "field": "message",
          "description": "106014",
          "patterns": [
            "%{NOTSPACE:event.outcome} %{NOTSPACE:network.direction} %{NOTSPACE:network.transport} src %{NOTSPACE:_temp_.cisco.source_interface}:%{NOTSPACE:source.address} (%{DATA})?dst %{NOTSPACE:_temp_.cisco.destination_interface}:(?<destination.address>[^ (]*)(%{GREEDYDATA})?"
          ]
        }
      },
      {
        "grok": {
          "if": "ctx._temp_.cisco.message_id == '106015'",
          "field": "message",
          "description": "106015",
          "patterns": [
            "%{NOTSPACE:event.outcome} %{NOTSPACE:network.transport} %{NOTSPACE} %{NOTSPACE} from %{IP:source.address}/%{POSINT:source.port} to %{IPORHOST:destination.address}/%{POSINT:destination.port} flags %{DATA} on interface %{NOTSPACE:_temp_.cisco.source_interface}"
          ]
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '106016'",
          "field": "message",
          "pattern": "%{event.outcome} IP spoof from (%{source.address}) to %{destination.address} on interface %{_temp_.cisco.source_interface}",
          "description": "106016"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '106017'",
          "field": "message",
          "pattern": "%{event.outcome} IP due to Land Attack from %{source.address} to %{destination.address}",
          "description": "106017"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '106018'",
          "field": "message",
          "pattern": "%{network.transport} packet type %{_temp_.cisco.icmp_type} %{event.outcome} by %{network.direction} list %{_temp_.cisco.list_id} src %{source.address} dest %{destination.address}",
          "description": "106018"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '106020'",
          "field": "message",
          "pattern": "%{event.outcome} IP teardrop fragment (size = %{}, offset = %{}) from %{source.address} to %{destination.address}",
          "description": "106020"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '106021'",
          "field": "message",
          "pattern": "%{event.outcome} %{network.transport} reverse path check from %{source.address} to %{destination.address} on interface %{_temp_.cisco.source_interface}",
          "description": "106021"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '106022'",
          "field": "message",
          "pattern": "%{event.outcome} %{network.transport} connection spoof from %{source.address} to %{destination.address} on interface %{_temp_.cisco.source_interface}",
          "description": "106022"
        }
      },
      {
        "grok": {
          "if": "ctx._temp_.cisco.message_id == '106023'",
          "field": "message",
          "description": "106023",
          "patterns": [
            "^%{NOTSPACE:event.outcome} ((protocol %{POSINT:network.iana_number})|%{NOTSPACE:network.transport}) src %{NOTCOLON:_temp_.cisco.source_interface}:%{IPORHOST:source.address}(/%{POSINT:source.port})?\\s*(\\(%{CISCO_USER:_temp_.cisco.source_username}\\) )?dst %{NOTCOLON:_temp_.cisco.destination_interface}:%{IPORHOST:destination.address}(/%{POSINT:destination.port})?%{DATA}by access-group \"%{NOTSPACE:_temp_.cisco.list_id}\""
          ],
          "pattern_definitions": {
            "HOSTNAME": "\\b(?:[0-9A-Za-z][0-9A-Za-z-_]{0,62})(?:\\.(?:[0-9A-Za-z][0-9A-Za-z-_]{0,62}))*(\\.?|\\b)",
            "IPORHOST": "(?:%{IP}|%{HOSTNAME})",
            "NOTCOLON": "[^:]*",
            "CISCO_USER": "((LOCAL\\\\)?(%{HOSTNAME}\\\\)?%{USERNAME}(@%{HOSTNAME})?(, *%{NUMBER})?)"
          }
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '106027'",
          "field": "message",
          "description": "106027",
          "pattern": "%{} %{event.outcome} src %{source.address} dst %{destination.address} by access-group \"%{_temp_.cisco.list_id}\""
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '106100'",
          "field": "message",
          "description": "106100",
          "pattern": "access-list %{_temp_.cisco.list_id} %{event.outcome} %{network.transport} %{_temp_.cisco.source_interface}/%{source.address}(%{source.port})%{}-> %{_temp_.cisco.destination_interface}/%{destination.address}(%{destination.port})%{}"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '106102' || ctx._temp_.cisco.message_id == '106103'",
          "field": "message",
          "description": "106103",
          "pattern": "access-list %{_temp_.cisco.list_id} %{event.outcome} %{network.transport} for user %{user.name} %{_temp_.cisco.source_interface}/%{source.address}(%{source.port})%{}-> %{_temp_.cisco.destination_interface}/%{destination.address}(%{destination.port})%{}"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '111004'",
          "field": "message",
          "description": "111004",
          "pattern": "%{source.address} end configuration: %{_temp_.cisco.cli_outcome}"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "description": "111004",
          "value": "success",
          "if": "ctx._temp_.cisco.message_id == '111004' && ctx?._temp_?.cisco?.cli_outcome == 'OK'"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "description": "111004",
          "value": "failure",
          "if": "ctx._temp_.cisco.message_id == '111004' && ctx?._temp_?.cisco?.cli_outcome == 'FAILED'"
        }
      },
      {
        "remove": {
          "field": "_temp_.cisco.cli_outcome",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "event.type",
          "description": "111004",
          "value": "change",
          "if": "ctx._temp_.cisco.message_id == '111004'"
        }
      },
      {
        "grok": {
          "if": "ctx._temp_.cisco.message_id == '111009'",
          "description": "111009",
          "field": "message",
          "patterns": [
            "^%{NOTSPACE} '%{NOTSPACE:server.user.name}' executed %{NOTSPACE} %{GREEDYDATA:_temp_.cisco.command_line_arguments}"
          ]
        }
      },
      {
        "grok": {
          "if": "ctx._temp_.cisco.message_id == '111010'",
          "field": "message",
          "description": "111010",
          "patterns": [
            "User '%{NOTSPACE:server.user.name}', running %{QUOTEDSTRING} from IP %{IP:source.address}, executed %{QUOTEDSTRING:_temp_.cisco.command_line_arguments}"
          ]
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '113004'",
          "field": "message",
          "description": "113004",
          "pattern": "AAA user %{_temp_.cisco.aaa_type} Successful: server = %{destination.address} , User = %{source.user.name}"
        }
      },
      {
        "grok": {
          "if": "ctx._temp_.cisco.message_id == '113005'",
          "description": "113005",
          "field": "message",
          "patterns": [
            "AAA user authentication Rejected: reason = %{REASON}: server = %{IP:destination.address} : user = ?%{CISCO_USER:source.user.name}: user IP = %{IP:source.address}"
          ],
          "pattern_definitions": {
            "REASON": "(AAA failure|Account has been disabled)",
            "CISCO_USER": "((LOCAL\\\\)?(%{HOSTNAME}\\\\)?%{USERNAME}(@%{HOSTNAME})?(, *%{NUMBER})?)"
          }
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '113012'",
          "field": "message",
          "description": "113012",
          "pattern": "AAA user authentication Successful: local database: user = %{source.user.name}"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '113019'",
          "field": "message",
          "description": "113019",
          "pattern": "Group = %{source.user.group.name}, Username = %{source.user.name}, IP = %{destination.address}, Session disconnected. Session Type: %{_temp_.cisco.session_type}, Duration: %{_temp_.duration_hms}, Bytes xmt: %{source.bytes}, Bytes rcv: %{destination.bytes}, Reason: %{event.reason}"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '113021'",
          "field": "message",
          "description": "113021",
          "pattern": "Attempted console login failed. User %{source.user.name} did NOT have appropriate Admin Rights."
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '113040'",
          "field": "message",
          "description": "113040",
          "pattern": "Terminating the VPN connection attempt from %{source.user.group.name}. Reason: This connection is group locked to %{}."
        }
      },
      {
        "grok": {
          "if": "[\"113029\",\"113030\",\"113031\",\"113032\",\"113033\",\"113034\",\"113035\",\"113036\",\"113038\",\"113039\"].contains(ctx._temp_.cisco.message_id)",
          "field": "message",
          "description": "113029, 113030, 113031, 113032, 113033, 113034, 113035, 113036, 113038, 113039",
          "patterns": [
            "Group <%{NOTSPACE:source.user.group.name}> User <%{CISCO_USER:source.user.name}> IP <%{IP:source.address}>",
            "Group %{NOTSPACE:source.user.group.name} User %{CISCO_USER:source.user.name} IP %{IP:source.address}"
          ],
          "pattern_definitions": {
            "HOSTNAME": "\\b(?:[0-9A-Za-z][0-9A-Za-z-_]{0,62})(?:\\.(?:[0-9A-Za-z][0-9A-Za-z-_]{0,62}))*(\\.?|\\b)",
            "IPORHOST": "(?:%{IP}|%{HOSTNAME})",
            "CISCO_USER": "((LOCAL\\\\)?(%{HOSTNAME}\\\\)?%{USERNAME}(@%{HOSTNAME})?(, *%{NUMBER})?)"
          }
        }
      },
      {
        "grok": {
          "if": "[\"302013\", \"302015\"].contains(ctx._temp_.cisco.message_id)",
          "field": "message",
          "description": "302013, 302015",
          "patterns": [
            "Built %{NOTSPACE:network.direction} %{NOTSPACE:network.transport} connection %{NUMBER:_temp_.cisco.connection_id} for %{NOTCOLON:_temp_.cisco.source_interface}:%{IPORHOST:source.address}/%{NUMBER:source.port} \\(%{IPORHOST:_temp_.natsrcip}/%{NUMBER:_temp_.cisco.mapped_source_port}\\)(\\(%{CISCO_USER:_temp_.cisco.source_username}\\))? to %{NOTCOLON:_temp_.cisco.destination_interface}:%{NOTSPACE:destination.address}/%{NUMBER:destination.port} \\(%{NOTSPACE:_temp_.natdstip}/%{NUMBER:_temp_.cisco.mapped_destination_port}\\)(\\(%{CISCO_USER:_temp_.cisco.destination_username}\\))?( \\(%{CISCO_USER:_temp_.cisco.termination_user}\\))?%{GREEDYDATA}"
          ],
          "pattern_definitions": {
            "HOSTNAME": "\\b(?:[0-9A-Za-z][0-9A-Za-z-_]{0,62})(?:\\.(?:[0-9A-Za-z][0-9A-Za-z-_]{0,62}))*(\\.?|\\b)",
            "IPORHOST": "(?:%{IP}|%{HOSTNAME})",
            "NOTCOLON": "[^:]*",
            "CISCO_USER": "((LOCAL\\\\)?(%{HOSTNAME}\\\\)?%{USERNAME}(@%{HOSTNAME})?(, *%{NUMBER})?)"
          }
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '303002'",
          "field": "message",
          "description": "303002",
          "pattern": "%{network.protocol} connection from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port}, user %{client.user.name} %{} file %{file.path}"
        }
      },
      {
        "grok": {
          "if": "ctx._temp_.cisco.message_id == '305012'",
          "field": "message",
          "description": "305012",
          "patterns": [
            "Teardown %{DATA} %{NOTSPACE:network.transport} translation from %{NOTCOLON:_temp_.cisco.source_interface}:%{IPORHOST:source.address}/%{NUMBER:source.port}(\\s*\\(%{CISCO_USER:_temp_.cisco.source_username}\\))? to %{NOTCOLON:_temp_.cisco.destination_interface}:%{IP:destination.address}/%{NUMBER:destination.port} duration %{DURATION:_temp_.duration_hms}"
          ],
          "pattern_definitions": {
            "NOTCOLON": "[^:]*",
            "HOSTNAME": "\\b(?:[0-9A-Za-z][0-9A-Za-z-_]{0,62})(?:\\.(?:[0-9A-Za-z][0-9A-Za-z-_]{0,62}))*(\\.?|\\b)",
            "IPORHOST": "(?:%{IP}|%{HOSTNAME})",
            "CISCO_USER": "((LOCAL\\\\)?(%{HOSTNAME}\\\\)?%{USERNAME}(@%{HOSTNAME})?(, *%{NUMBER})?)",
            "DURATION": "%{INT}:%{MINUTE}:%{SECOND}"
          }
        }
      },
      {
        "set": {
          "if": "[\"302020\"].contains(ctx._temp_.cisco.message_id)",
          "field": "event.action",
          "value": "flow-creation",
          "description": "302020"
        }
      },
      {
        "grok": {
          "if": "ctx._temp_.cisco.message_id == '302020'",
          "field": "message",
          "description": "302020",
          "patterns": [
            "Built %{NOTSPACE:network.direction} %{NOTSPACE:network.protocol} connection for faddr (?:%{NOTCOLON:_temp_.cisco.source_interface}:)?%{ECSDESTIPORHOST}/%{NUMBER}\\s*(?:\\(%{CISCO_USER:_temp_.cisco.destination_username}\\) )?gaddr (?:%{NOTCOLON}:)?%{MAPPEDSRC}/%{NUMBER} laddr (?:%{NOTCOLON:_temp_.cisco.source_interface}:)?%{ECSSOURCEIPORHOST}/%{NUMBER}\\s*(?:\\(%{CISCO_USER:_temp_.cisco.source_username}\\) )?(type %{NUMBER:_temp_.cisco.icmp_type} code %{NUMBER:_temp_.cisco.icmp_code})?"
          ],
          "pattern_definitions": {
            "HOSTNAME": "\\b(?:[0-9A-Za-z][0-9A-Za-z-_]{0,62})(?:\\.(?:[0-9A-Za-z][0-9A-Za-z-_]{0,62}))*(\\.?|\\b)",
            "IPORHOST": "(?:%{IP}|%{HOSTNAME})",
            "NOTCOLON": "[^:]*",
            "ECSSOURCEIPORHOST": "(?:%{IP:source.address}|%{HOSTNAME:source.domain})",
            "ECSDESTIPORHOST": "(?:%{IP:destination.address}|%{HOSTNAME:destination.domain})",
            "MAPPEDSRC": "(?:%{DATA:_temp_.natsrcip}|%{HOSTNAME})",
            "CISCO_USER": "((LOCAL\\\\)?(%{HOSTNAME}\\\\)?%{USERNAME}(@%{HOSTNAME})?(, *%{NUMBER})?)"
          }
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '302022'",
          "field": "message",
          "description": "302022",
          "pattern": "Built %{} stub %{network.transport} connection for %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} %{} to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} %{}"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '302023'",
          "field": "message",
          "description": "302023",
          "pattern": "Teardown stub %{network.transport} connection for %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} duration %{_temp_.duration_hms} forwarded bytes %{network.bytes} %{event.reason}"
        }
      },
      {
        "grok": {
          "if": "ctx._temp_.cisco.message_id == '304001'",
          "field": "message",
          "description": "304001",
          "patterns": [
            "(%{NOTSPACE:source.user.name}@)?%{IP:source.address}(\\(%{DATA}\\))? %{DATA} (%{NOTSPACE}@)?%{IPORHOST:destination.address}:%{GREEDYDATA:url.original}"
          ]
        }
      },
      {
        "set": {
          "if": "ctx._temp_.cisco.message_id == '304001'",
          "field": "event.outcome",
          "description": "304001",
          "value": "allowed"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '304002'",
          "field": "message",
          "description": "304002",
          "pattern": "Access %{event.outcome} URL %{url.original} SRC %{source.address} %{}EST %{destination.address} on interface %{_temp_.cisco.source_interface}"
        }
      },
      {
        "grok": {
          "if": "ctx._temp_.cisco.message_id == '305011'",
          "field": "message",
          "description": "305011",
          "patterns": [
            "Built %{NOTSPACE} %{NOTSPACE:network.transport} translation from %{NOTSPACE:_temp_.cisco.source_interface}:%{IPORHOST:source.address}/%{NUMBER:source.port}(\\(%{NOTSPACE:source.user.name}\\))? to %{NOTSPACE:_temp_.cisco.destination_interface}:%{IP:destination.address}/%{NUMBER:destination.port}"
          ]
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '313001'",
          "field": "message",
          "description": "313001",
          "pattern": "%{event.outcome} %{network.transport} type=%{_temp_.cisco.icmp_type}, code=%{_temp_.cisco.icmp_code} from %{source.address} on interface %{_temp_.cisco.source_interface}"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '313004'",
          "field": "message",
          "description": "313004",
          "pattern": "%{event.outcome} %{network.transport} type=%{_temp_.cisco.icmp_type}, from%{}addr %{source.address} on interface %{_temp_.cisco.source_interface} to %{destination.address}: no matching session"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '313005'",
          "field": "message",
          "description": "313005",
          "pattern": "No matching connection for %{network.transport} error message: %{} on %{_temp_.cisco.source_interface} interface.%{}riginal IP payload: %{}"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '313008'",
          "field": "message",
          "description": "313008",
          "pattern": "%{event.outcome} %{network.transport} type=%{_temp_.cisco.icmp_type}, code=%{_temp_.cisco.icmp_code} from %{source.address} on interface %{_temp_.cisco.source_interface}"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '313009'",
          "field": "message",
          "description": "313009",
          "pattern": "%{event.outcome} invalid %{network.transport} code %{_temp_.cisco.icmp_code}, for %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '322001'",
          "field": "message",
          "description": "322001",
          "pattern": "%{event.outcome} MAC address %{source.mac}, possible spoof attempt on interface %{_temp_.cisco.source_interface}"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '338001'",
          "field": "message",
          "description": "338001",
          "pattern": "Dynamic filter %{event.outcome} black%{}d %{network.transport} traffic from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}source %{} resolved from %{_temp_.cisco.list_id} list: %{source.domain}, threat-level: %{_temp_.cisco.threat_level}, category: %{_temp_.cisco.threat_category}"
        }
      },
      {
        "set": {
          "if": "ctx._temp_.cisco.message_id == '338001'",
          "field": "server.domain",
          "description": "338001",
          "value": "{{source.domain}}",
          "ignore_empty_value": true
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '338002'",
          "field": "message",
          "description": "338002",
          "pattern": "Dynamic %{}ilter %{event.outcome} black%{}d %{network.transport} traffic from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}destination %{} resolved from %{_temp_.cisco.list_id} list: %{destination.domain}"
        }
      },
      {
        "set": {
          "if": "ctx._temp_.cisco.message_id == '338002'",
          "field": "server.domain",
          "description": "338002",
          "value": "{{destination.domain}}",
          "ignore_empty_value": true
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '338003'",
          "field": "message",
          "description": "338003",
          "pattern": "Dynamic %{}ilter %{event.outcome} black%{}d %{network.transport} traffic from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}source %{} resolved from %{_temp_.cisco.list_id} list: %{}, threat-level: %{_temp_.cisco.threat_level}, category: %{_temp_.cisco.threat_category}"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '338004'",
          "field": "message",
          "description": "338004",
          "pattern": "Dynamic %{}ilter %{event.outcome} black%{}d %{network.transport} traffic from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}destination %{} resolved from %{_temp_.cisco.list_id} list: %{}, threat-level: %{_temp_.cisco.threat_level}, category: %{_temp_.cisco.threat_category}"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '338005'",
          "field": "message",
          "description": "338005",
          "pattern": "Dynamic %{}ilter %{event.outcome} black%{}d %{network.transport} traffic from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}source %{} resolved from %{_temp_.cisco.list_id} list: %{source.domain}, threat-level: %{_temp_.cisco.threat_level}, category: %{_temp_.cisco.threat_category}"
        }
      },
      {
        "set": {
          "if": "ctx._temp_.cisco.message_id == '338005'",
          "field": "server.domain",
          "description": "338005",
          "value": "{{source.domain}}",
          "ignore_empty_value": true
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '338006'",
          "field": "message",
          "description": "338006",
          "pattern": "Dynamic %{}ilter %{event.outcome} black%{}d %{network.transport} traffic from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}destination %{} resolved from %{_temp_.cisco.list_id} list: %{destination.domain}, threat-level: %{_temp_.cisco.threat_level}, category: %{_temp_.cisco.threat_category}"
        }
      },
      {
        "set": {
          "if": "ctx._temp_.cisco.message_id == '338006'",
          "field": "server.domain",
          "description": "338006",
          "value": "{{destination.domain}}",
          "ignore_empty_value": true
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '338007'",
          "field": "message",
          "description": "338007",
          "pattern": "Dynamic %{}ilter %{event.outcome} black%{}d %{network.transport} traffic from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}source %{} resolved from %{_temp_.cisco.list_id} list: %{}, threat-level: %{_temp_.cisco.threat_level}, category: %{_temp_.cisco.threat_category}"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '338008'",
          "field": "message",
          "description": "338008",
          "pattern": "Dynamic %{}ilter %{event.outcome} black%{}d %{network.transport} traffic from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}destination %{} resolved from %{_temp_.cisco.list_id} list: %{}, threat-level: %{_temp_.cisco.threat_level}, category: %{_temp_.cisco.threat_category}"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '338101'",
          "field": "message",
          "description": "338101",
          "pattern": "Dynamic %{}ilter %{event.outcome} white%{}d %{network.transport} traffic from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}source %{} resolved from %{_temp_.cisco.list_id} list: %{source.domain}"
        }
      },
      {
        "set": {
          "if": "ctx._temp_.cisco.message_id == '338101'",
          "field": "server.domain",
          "description": "338101",
          "value": "{{source.domain}}",
          "ignore_empty_value": true
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '338102'",
          "field": "message",
          "description": "338102",
          "pattern": "Dynamic %{}ilter %{event.outcome} white%{}d %{network.transport} traffic from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}destination %{} resolved from %{_temp_.cisco.list_id} list: %{destination.domain}"
        }
      },
      {
        "set": {
          "if": "ctx._temp_.cisco.message_id == '338102'",
          "field": "server.domain",
          "description": "338102",
          "value": "{{destination.domain}}",
          "ignore_empty_value": true
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '338103'",
          "field": "message",
          "description": "338103",
          "pattern": "Dynamic %{}ilter %{event.outcome} white%{}d %{network.transport} traffic from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}source %{} resolved from %{_temp_.cisco.list_id} list: %{}"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '338104'",
          "field": "message",
          "description": "338104",
          "pattern": "Dynamic %{}ilter %{event.outcome} white%{}d %{network.transport} traffic from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}destination %{} resolved from %{_temp_.cisco.list_id} list: %{}"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '338201'",
          "field": "message",
          "description": "338201",
          "pattern": "Dynamic %{}ilter %{event.outcome} grey%{}d %{network.transport} traffic from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}source %{} resolved from %{_temp_.cisco.list_id} list: %{source.domain}, threat-level: %{_temp_.cisco.threat_level}, category: %{_temp_.cisco.threat_category}"
        }
      },
      {
        "set": {
          "if": "ctx._temp_.cisco.message_id == '338201'",
          "field": "server.domain",
          "description": "338201",
          "value": "{{source.domain}}",
          "ignore_empty_value": true
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '338202'",
          "field": "message",
          "description": "338202",
          "pattern": "Dynamic %{}ilter %{event.outcome} grey%{}d %{network.transport} traffic from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}destination %{} resolved from %{_temp_.cisco.list_id} list: %{destination.domain}, threat-level: %{_temp_.cisco.threat_level}, category: %{_temp_.cisco.threat_category}"
        }
      },
      {
        "set": {
          "if": "ctx._temp_.cisco.message_id == '338202'",
          "field": "server.domain",
          "description": "338202",
          "value": "{{destination.domain}}",
          "ignore_empty_value": true
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '338203'",
          "field": "message",
          "description": "338203",
          "pattern": "Dynamic %{}ilter %{event.outcome} grey%{}d %{network.transport} traffic from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}source %{} resolved from %{_temp_.cisco.list_id} list: %{source.domain}, threat-level: %{_temp_.cisco.threat_level}, category: %{_temp_.cisco.threat_category}"
        }
      },
      {
        "set": {
          "if": "ctx._temp_.cisco.message_id == '338203'",
          "field": "server.domain",
          "description": "338203",
          "value": "{{source.domain}}",
          "ignore_empty_value": true
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '338204'",
          "field": "message",
          "description": "338204",
          "pattern": "Dynamic %{}ilter %{event.outcome} grey%{}d %{network.transport} traffic from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}destination %{} resolved from %{_temp_.cisco.list_id} list: %{destination.domain}, threat-level: %{_temp_.cisco.threat_level}, category: %{_temp_.cisco.threat_category}"
        }
      },
      {
        "set": {
          "if": "ctx._temp_.cisco.message_id == '338204'",
          "field": "server.domain",
          "description": "338204",
          "value": "{{destination.domain}}",
          "ignore_empty_value": true
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '338301'",
          "field": "message",
          "description": "338301",
          "pattern": "Intercepted DNS reply for domain %{source.domain} from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port}, matched %{_temp_.cisco.list_id}"
        }
      },
      {
        "set": {
          "if": "ctx._temp_.cisco.message_id == '338301'",
          "field": "client.address",
          "description": "338301",
          "value": "{{destination.address}}",
          "ignore_empty_value": true
        }
      },
      {
        "set": {
          "if": "ctx._temp_.cisco.message_id == '338301'",
          "field": "client.port",
          "description": "338301",
          "value": "{{destination.port}}",
          "ignore_empty_value": true
        }
      },
      {
        "set": {
          "if": "ctx._temp_.cisco.message_id == '338301'",
          "field": "server.address",
          "description": "338301",
          "value": "{{source.address}}",
          "ignore_empty_value": true
        }
      },
      {
        "set": {
          "if": "ctx._temp_.cisco.message_id == '338301'",
          "field": "server.port",
          "description": "338301",
          "value": "{{source.port}}",
          "ignore_empty_value": true
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '502103'",
          "field": "message",
          "description": "502103",
          "pattern": "User priv level changed: Uname: %{server.user.name} From: %{_temp_.cisco.privilege.old} To: %{_temp_.cisco.privilege.new}"
        }
      },
      {
        "append": {
          "if": "ctx._temp_.cisco.message_id == '502103'",
          "field": "event.type",
          "description": "502103",
          "value": [
            "group",
            "change"
          ]
        }
      },
      {
        "append": {
          "if": "ctx._temp_.cisco.message_id == '502103'",
          "field": "event.category",
          "description": "502103",
          "value": "iam"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '507003'",
          "field": "message",
          "description": "507003",
          "pattern": "%{network.transport} flow from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} terminated by inspection engine, reason - %{message}"
        }
      },
      {
        "dissect": {
          "if": "[\"605004\", \"605005\"].contains(ctx._temp_.cisco.message_id)",
          "field": "message",
          "description": "605004, 605005",
          "pattern": "Login %{event.outcome} from %{source.address}/%{source.port} to %{_temp_.cisco.destination_interface}:%{destination.address}/%{network.protocol} for user \"%{source.user.name}\""
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '609001'",
          "field": "message",
          "description": "609001",
          "pattern": "Built local-host %{_temp_.cisco.source_interface}:%{source.address}"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '607001'",
          "field": "message",
          "description": "607001",
          "pattern": "Pre-allocate SIP %{_temp_.cisco.connection_type} secondary channel for %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} to %{_temp_.cisco.source_interface}:%{source.address} from %{_temp_.cisco.message} message"
        }
      },
      {
        "grok": {
          "if": "ctx._temp_.cisco.message_id == '607001'",
          "description": "607001",
          "field": "_temp_.cisco.connection_type",
          "patterns": [
            "%{CONNECTION}"
          ],
          "pattern_definitions": {
            "TRANSPORTS": "(?:UDP|TCP)",
            "PROTOCOLS": "(?:RTP|RTCP)",
            "CONNECTION": "(?:%{TRANSPORTS:network.transport}|%{PROTOCOLS:network.protocol})"
          },
          "ignore_failure": true
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '609002'",
          "field": "message",
          "description": "609002",
          "pattern": "Teardown local-host %{_temp_.cisco.source_interface}:%{source.address} duration %{_temp_.duration_hms}"
        }
      },
      {
        "dissect": {
          "if": "[\"611102\", \"611101\"].contains(ctx._temp_.cisco.message_id)",
          "field": "message",
          "description": "611102, 611101",
          "pattern": "User authentication %{event.outcome}: IP address: %{source.address}, Uname: %{server.user.name}"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '710003'",
          "field": "message",
          "description": "710003",
          "pattern": "%{network.transport} access %{event.outcome} by ACL from %{source.address}/%{source.port} to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port}"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '710005'",
          "field": "message",
          "description": "710005",
          "pattern": "%{network.transport} request %{event.outcome} from %{source.address}/%{source.port} to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port}"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '713049'",
          "field": "message",
          "description": "713049",
          "pattern": "Group = %{}, IP = %{source.address}, Security negotiation complete for LAN-to-LAN Group (%{}) %{}, Inbound SPI = %{}, Outbound SPI = %{}",
          "ignore_failure": true
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '713049'",
          "field": "message",
          "description": "713049",
          "pattern": "Group = %{}, Username = %{user.name}, IP = %{source.address}, Security negotiation complete for User (%{}) %{}, Inbound SPI = %{}, Outbound SPI = %{}",
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "if": "ctx._temp_.cisco.message_id == '716002'",
          "field": "message",
          "description": "716002",
          "patterns": [
            "Group <%{NOTSPACE:_temp_.cisco.webvpn.group_name}> User <%{NOTSPACE:source.user.name}> IP <%{IP:source.address}> WebVPN session terminated: %{GREEDYDATA:event.reason}.",
            "Group %{NOTSPACE:_temp_.cisco.webvpn.group_name} User %{NOTSPACE:source.user.name} IP %{IP:source.address} WebVPN session terminated: %{GREEDYDATA:event.reason}."
          ]
        }
      },
      {
        "grok": {
          "if": "ctx._temp_.cisco.message_id == '722051'",
          "field": "message",
          "description": "722051",
          "patterns": [
            "Group <%{NOTSPACE:_temp_.cisco.webvpn.group_name}> User <%{NOTSPACE:source.user.name}> IP <%{IP:source.address}> IPv4 Address <%{IP:_temp_.cisco.assigned_ip}> %{GREEDYDATA}",
            "Group %{NOTSPACE:_temp_.cisco.webvpn.group_name} User %{NOTSPACE:source.user.name} IP %{IP:source.address} IPv4 Address %{IP:_temp_.cisco.assigned_ip} %{GREEDYDATA}"
          ]
        }
      },
      {
        "grok": {
          "if": "ctx._temp_.cisco.message_id == '733100'",
          "field": "message",
          "description": "733100",
          "patterns": [
            "\\[(%{SPACE})?%{DATA:_temp_.cisco.burst.object}\\] drop %{NOTSPACE:_temp_.cisco.burst.id} exceeded. Current burst rate is %{INT:_temp_.cisco.burst.current_rate} per second, max configured rate is %{INT:_temp_.cisco.burst.configured_rate}; Current average rate is %{INT:_temp_.cisco.burst.avg_rate} per second, max configured rate is %{INT:_temp_.cisco.burst.configured_avg_rate}; Cumulative total count is %{INT:_temp_.cisco.burst.cumulative_count}"
          ]
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '734001'",
          "field": "message",
          "description": "734001",
          "pattern": "DAP: User %{user.email}, Addr %{source.address}, Connection %{_temp_.cisco.connection_type}: The following DAP records were selected for this connection: %{_temp_.cisco.dap_records->}"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '805001'",
          "field": "message",
          "description": "805001",
          "pattern": "Offloaded %{network.transport} Flow for connection %{_temp_.cisco.connection_id} from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '805002'",
          "field": "message",
          "description": "805002",
          "pattern": "%{network.transport} Flow is no longer offloaded for connection %{_temp_.cisco.connection_id} from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})"
        }
      },
      {
        "split": {
          "field": "_temp_.cisco.dap_records",
          "separator": ",\\s+",
          "ignore_missing": true
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '434002'",
          "field": "message",
          "pattern": "SFR requested to %{event.action} %{network.protocol} packet from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port}"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '434004'",
          "field": "message",
          "pattern": "SFR requested ASA to %{event.action} further packet redirection and process %{network.protocol} flow from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} locally"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '110002'",
          "field": "message",
          "pattern": "%{event.reason} for %{network.protocol} from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} to %{destination.address}/%{destination.port}"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '419002'",
          "field": "message",
          "pattern": "%{event.reason}from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} %{+event.reason}"
        }
      },
      {
        "dissect": {
          "if": "[\"602303\", \"602304\"].contains(ctx._temp_.cisco.message_id)",
          "field": "message",
          "pattern": "%{network.type}: An %{network.direction} %{_temp_.cisco.tunnel_type} SA (SPI= %{}) between %{source.address} and %{destination.address} (user= %{user.name}) has been %{event.action}."
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '750002'",
          "field": "message",
          "pattern": "Local:%{source.address}:%{source.port} Remote:%{destination.address}:%{destination.port} Username:%{user.name} %{event.reason}"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '713120'",
          "field": "message",
          "pattern": "Group = %{}, IP = %{source.address}, %{event.reason} (msgid=%{event.id})"
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '713202'",
          "field": "message",
          "pattern": "IP = %{source.address}, %{event.reason}. %{} packet."
        }
      },
      {
        "grok": {
          "if": "ctx._temp_.cisco.message_id == '716039'",
          "field": "message",
          "patterns": [
            "Authentication: rejected, group = %{NOTSPACE:source.user.group.name} user = %{USER:source.user.name} , Session Type: %{NOTSPACE:_temp_.cisco.session_type}",
            "Group <%{NOTSPACE:source.user.group.name}> User <%{USER:source.user.name}> IP <%{IP:source.address}> Authentication: rejected, Session Type: %{NOTSPACE:_temp_.cisco.session_type}\\."
          ]
        }
      },
      {
        "dissect": {
          "if": "ctx._temp_.cisco.message_id == '750003'",
          "field": "message",
          "pattern": "Local:%{source.address}:%{source.port} Remote:%{destination.address}:%{destination.port} Username:%{user.name} %{event.reason} ERROR:%{+event.reason}"
        }
      },
      {
        "grok": {
          "if": "[\"713905\", \"713904\", \"713906\", \"713902\", \"713901\"].contains(ctx._temp_.cisco.message_id)",
          "field": "message",
          "patterns": [
            "^(Group = %{IP}, )?(IP = %{IP:source.address}, )?%{GREEDYDATA:event.reason}$"
          ]
        }
      },
      {
        "set": {
          "if": "[\"434002\", \"434004\"].contains(ctx._temp_.cisco.message_id)",
          "field": "event.outcome",
          "value": "unknown"
        }
      },
      {
        "set": {
          "if": "[\"419002\"].contains(ctx._temp_.cisco.message_id)",
          "field": "network.protocol",
          "value": "tcp"
        }
      },
      {
        "set": {
          "if": "[\"110002\"].contains(ctx._temp_.cisco.message_id)",
          "field": "event.outcome",
          "value": "dropped"
        }
      },
      {
        "set": {
          "if": "[\"713120\"].contains(ctx._temp_.cisco.message_id)",
          "field": "event.outcome",
          "value": "success"
        }
      },
      {
        "set": {
          "if": "[\"113004\", \"113012\"].contains(ctx._temp_.cisco.message_id)",
          "field": "event.outcome",
          "value": "success"
        }
      },
      {
        "set": {
          "if": "[\"113002\", \"113005\", \"113021\"].contains(ctx._temp_.cisco.message_id)",
          "field": "event.outcome",
          "value": "failure"
        }
      },
      {
        "set": {
          "if": "[\"602303\", \"602304\", \"611101\"].contains(ctx._temp_.cisco.message_id)",
          "field": "event.outcome",
          "value": "success"
        }
      },
      {
        "set": {
          "if": "[\"605004\", \"611102\"].contains(ctx._temp_.cisco.message_id)",
          "field": "event.outcome",
          "value": "failure"
        }
      },
      {
        "set": {
          "if": "[\"734001\"].contains(ctx._temp_.cisco.message_id)",
          "field": "event.outcome",
          "value": "success"
        }
      },
      {
        "set": {
          "if": "[\"716039\"].contains(ctx._temp_.cisco.message_id)",
          "field": "event.outcome",
          "value": "failure"
        }
      },
      {
        "set": {
          "if": "[\"710005\"].contains(ctx._temp_.cisco.message_id)",
          "field": "event.outcome",
          "value": "dropped"
        }
      },
      {
        "set": {
          "if": "[\"713901\", \"713902\", \"713903\", \"713904\", \"713905\"].contains(ctx._temp_.cisco.message_id)",
          "field": "event.outcome",
          "value": "failure"
        }
      },
      {
        "set": {
          "if": "[\"113039\"].contains(ctx._temp_.cisco.message_id)",
          "field": "event.action",
          "value": "client-vpn-connected"
        }
      },
      {
        "set": {
          "if": "[\"113029\",\"113030\",\"113031\",\"113032\",\"113033\",\"113034\",\"113035\",\"113036\",\"113037\",\"113038\"].contains(ctx._temp_.cisco.message_id)",
          "field": "event.action",
          "value": "client-vpn-error"
        }
      },
      {
        "set": {
          "if": "[\"113040\"].contains(ctx._temp_.cisco.message_id)",
          "field": "event.action",
          "value": "client-vpn-disconnected"
        }
      },
      {
        "set": {
          "if": "[\"750002\", \"750003\"].contains(ctx._temp_.cisco.message_id)",
          "field": "event.action",
          "value": "connection-started"
        }
      },
      {
        "set": {
          "if": "[\"750003\", \"713905\", \"713904\", \"713906\", \"713902\", \"713901\"].contains(ctx._temp_.cisco.message_id)",
          "field": "event.action",
          "value": "error"
        }
      },
      {
        "set": {
          "if": "[\"113005\", \"113021\", \"605004\", \"611102\", \"716039\"].contains(ctx._temp_.cisco.message_id)",
          "field": "event.action",
          "value": "logon-failed"
        }
      },
      {
        "set": {
          "if": "[\"113004\", \"113012\", \"611101\", \"734001\"].contains(ctx._temp_.cisco.message_id)",
          "field": "event.action",
          "value": "logged-in"
        }
      },
      {
        "append": {
          "if": "[\"750003\", \"713905\", \"713904\", \"713906\", \"713902\", \"713901\"].contains(ctx._temp_.cisco.message_id)",
          "field": "event.type",
          "value": "error"
        }
      },
      {
        "set": {
          "if": "[\"305012\", \"302014\", \"302016\", \"302018\", \"302021\", \"302036\", \"302304\", \"302306\", \"609001\", \"609002\"].contains(ctx._temp_.cisco.message_id)",
          "field": "event.action",
          "value": "flow-expiration",
          "description": "305012, 302014, 302016, 302018, 302021, 302036, 302304, 302306, 609001, 609002"
        }
      },
      {
        "grok": {
          "field": "message",
          "if": "[\"302014\", \"302016\", \"302018\", \"302021\", \"302036\", \"302304\", \"302306\"].contains(ctx._temp_.cisco.message_id)",
          "description": "302014, 302016, 302018, 302021, 302036, 302304, 302306",
          "patterns": [
            "^Teardown %{NOTSPACE:network.transport} (?:state-bypass )?connection %{NOTSPACE:_temp_.cisco.connection_id} (?:for|from) %{NOTCOLON:_temp_.cisco.source_interface}:%{DATA:source.address}/%{NUMBER:source.port:int}\\s*(?:\\(?%{CISCO_USER:_temp_.cisco.source_username}\\)? )?to %{NOTCOLON:_temp_.cisco.destination_interface}:%{DATA:destination.address}/%{NUMBER:destination.port:int}\\s*(?:\\(?%{CISCO_USER:_temp_.cisco.destination_username}\\)? )?duration (?:%{DURATION:_temp_.duration_hms} bytes %{NUMBER:network.bytes}) %{NOTCOLON:event.reason} from %{NOTCOLON:_temp_.cisco.termination_initiator} \\(%{CISCO_USER:_temp_.cisco.termination_user}\\)",
            "^Teardown %{NOTSPACE:network.transport} (?:state-bypass )?connection %{NOTSPACE:_temp_.cisco.connection_id} (?:for|from) %{NOTCOLON:_temp_.cisco.source_interface}:%{DATA:source.address}/%{NUMBER:source.port:int}\\s*(?:\\(?%{CISCO_USER:_temp_.cisco.source_username}\\)? )?to %{NOTCOLON:_temp_.cisco.destination_interface}:%{DATA:destination.address}/%{NUMBER:destination.port:int}\\s*(?:\\(?%{CISCO_USER:_temp_.cisco.destination_username}\\)? )?duration (?:%{DURATION:_temp_.duration_hms} bytes %{NUMBER:network.bytes}) %{NOTCOLON:event.reason} from %{NOTCOLON:_temp_.cisco.termination_initiator}",
            "^Teardown %{NOTSPACE:network.transport} (?:state-bypass )?connection %{NOTSPACE:_temp_.cisco.connection_id} (?:for|from) %{NOTCOLON:_temp_.cisco.source_interface}:%{DATA:source.address}/%{NUMBER:source.port:int}\\s*(?:\\(?%{CISCO_USER:_temp_.cisco.source_username}\\)? )?to %{NOTCOLON:_temp_.cisco.destination_interface}:%{DATA:destination.address}/%{NUMBER:destination.port:int}\\s*(?:\\(?%{CISCO_USER:_temp_.cisco.destination_username}\\)? )?duration (?:%{DURATION:_temp_.duration_hms} bytes %{NUMBER:network.bytes}) %{NOTCOLON:event.reason} \\(%{CISCO_USER:_temp_.cisco.termination_user}\\)",
            "^Teardown %{NOTSPACE:network.transport} (?:state-bypass )?connection %{NOTSPACE:_temp_.cisco.connection_id} (?:for|from) %{NOTCOLON:_temp_.cisco.source_interface}:%{DATA:source.address}/%{NUMBER:source.port:int}\\s*(?:\\(?%{CISCO_USER:_temp_.cisco.source_username}\\)? )?to %{NOTCOLON:_temp_.cisco.destination_interface}:%{DATA:destination.address}/%{NUMBER:destination.port:int}\\s*(?:\\(?%{CISCO_USER:_temp_.cisco.destination_username}\\)? )?duration (?:%{DURATION:_temp_.duration_hms} bytes %{NUMBER:network.bytes}) \\(%{CISCO_USER:_temp_.cisco.termination_user}\\)",
            "^Teardown %{NOTSPACE:network.transport} (?:state-bypass )?connection %{NOTSPACE:_temp_.cisco.connection_id} (?:for|from) %{NOTCOLON:_temp_.cisco.source_interface}:%{DATA:source.address}/%{NUMBER:source.port:int}\\s*(?:\\(?%{CISCO_USER:_temp_.cisco.source_username}\\)? )?to %{NOTCOLON:_temp_.cisco.destination_interface}:%{DATA:destination.address}/%{NUMBER:destination.port:int}\\s*(?:\\(?%{CISCO_USER:_temp_.cisco.destination_username}\\)? )?duration (?:%{DURATION:_temp_.duration_hms} bytes %{NUMBER:network.bytes}) %{NOTCOLON:event.reason}",
            "^Teardown %{NOTSPACE:network.transport} (?:state-bypass )?connection %{NOTSPACE:_temp_.cisco.connection_id} (?:for|from) %{NOTCOLON:_temp_.cisco.source_interface}:%{DATA:source.address}/%{NUMBER:source.port:int}\\s*(?:\\(?%{CISCO_USER:_temp_.cisco.source_username}\\)? )?to %{NOTCOLON:_temp_.cisco.destination_interface}:%{DATA:destination.address}/%{NUMBER:destination.port:int}\\s*(?:\\(?%{CISCO_USER:_temp_.cisco.destination_username}\\)? )?duration (?:%{DURATION:_temp_.duration_hms} bytes %{NUMBER:network.bytes})",
            "^Teardown %{NOTSPACE:network.transport} connection for faddr (?:%{NOTCOLON:_temp_.cisco.source_interface}:)?%{ECSDESTIPORHOST}/%{NUMBER}\\s*(?:\\(?%{CISCO_USER:_temp_.cisco.destination_username}\\)? )?gaddr (?:%{NOTCOLON}:)?%{MAPPEDSRC}/%{NUMBER} laddr (?:%{NOTCOLON:_temp_.cisco.source_interface}:)?%{ECSSOURCEIPORHOST}/%{NUMBER}\\s*(?:\\(%{CISCO_USER:_temp_.cisco.source_username}\\))?(\\s*type %{NUMBER:_temp_.cisco.icmp_type} code %{NUMBER:_temp_.cisco.icmp_code})?"
          ],
          "pattern_definitions": {
            "HOSTNAME": "\\b(?:[0-9A-Za-z][0-9A-Za-z-_]{0,62})(?:\\.(?:[0-9A-Za-z][0-9A-Za-z-_]{0,62}))*(\\.?|\\b)",
            "IPORHOST": "(?:%{IP}|%{HOSTNAME})",
            "NOTCOLON": "[^:]*",
            "ECSSOURCEIPORHOST": "(?:%{IP:source.address}|%{HOSTNAME:source.domain})",
            "ECSDESTIPORHOST": "(?:%{IP:destination.address}|%{HOSTNAME:destination.domain})",
            "MAPPEDSRC": "(?:%{IPORHOST:_temp_.natsrcip}|%{HOSTNAME})",
            "DURATION": "%{INT}:%{MINUTE}:%{SECOND}",
            "CISCO_USER": "((LOCAL\\\\)?(%{HOSTNAME}\\\\)?%{USERNAME}(@%{HOSTNAME})?(, *%{NUMBER})?)"
          }
        }
      },
      {
        "kv": {
          "if": "[\"430001\", \"430002\", \"430003\", \"430004\", \"430005\", \"\"].contains(ctx._temp_.cisco.message_id)",
          "field": "message",
          "description": "430001, 430002, 430003, 430004, 430005",
          "field_split": ",(?=[A-za-z1-9\\s]+:)",
          "value_split": ":",
          "target_field": "_temp_.orig_security",
          "trim_key": " ",
          "trim_value": " ",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": [
            "message",
            "_temp_.full_message"
          ],
          "ignore_missing": true
        }
      },
      {
        "script": {
          "if": "ctx._temp_?.orig_security != null",
          "params": {
            "ACPolicy": {
              "target": "ac_policy",
              "id": [
                "430001",
                "430002",
                "430003"
              ],
              "ecs": [
                "_temp_.cisco.rule_name"
              ]
            },
            "AccessControlRuleAction": {
              "target": "access_control_rule_action",
              "id": [
                "430002",
                "430003"
              ],
              "ecs": [
                "event.outcome"
              ]
            },
            "AccessControlRuleName": {
              "target": "access_control_rule_name",
              "id": [
                "430002",
                "430003"
              ],
              "ecs": [
                "_temp_.cisco.rule_name"
              ]
            },
            "AccessControlRuleReason": {
              "target": "access_control_rule_reason",
              "id": [
                "430002",
                "430003"
              ]
            },
            "ApplicationProtocol": {
              "target": "application_protocol",
              "ecs": [
                "network.protocol"
              ]
            },
            "ArchiveDepth": {
              "target": "archive_depth",
              "id": [
                "430004",
                "430005"
              ]
            },
            "ArchiveFileName": {
              "target": "archive_file_name",
              "id": [
                "430004",
                "430005"
              ],
              "ecs": [
                "file.name"
              ]
            },
            "ArchiveFileStatus": {
              "target": "archive_file_status",
              "id": [
                "430004",
                "430005"
              ]
            },
            "ArchiveSHA256": {
              "target": "archive_sha256",
              "id": [
                "430004",
                "430005"
              ],
              "ecs": [
                "file.hash.sha256"
              ]
            },
            "Classification": {
              "target": "classification",
              "id": [
                "430001"
              ]
            },
            "Client": {
              "target": "client",
              "ecs": [
                "network.application"
              ]
            },
            "ClientVersion": {
              "target": "client_version",
              "id": [
                "430002",
                "430003"
              ]
            },
            "ConnectionDuration": {
              "target": "connection_duration",
              "id": [
                "430003"
              ],
              "ecs": [
                "event.duration"
              ]
            },
            "DNS_Sinkhole": {
              "target": "dns_sinkhole",
              "id": [
                "430002",
                "430003"
              ]
            },
            "DNS_TTL": {
              "target": "dns_ttl",
              "id": [
                "430002",
                "430003"
              ]
            },
            "DNSQuery": {
              "target": "dns_query",
              "id": [
                "430002",
                "430003"
              ],
              "ecs": [
                "dns.question.name"
              ]
            },
            "DNSRecordType": {
              "target": "dns_record_type",
              "id": [
                "430002",
                "430003"
              ],
              "ecs": [
                "dns.question.type"
              ]
            },
            "DNSResponseType": {
              "target": "dns_response_type",
              "id": [
                "430002",
                "430003"
              ],
              "ecs": [
                "dns.response_code"
              ]
            },
            "DNSSICategory": {
              "target": "dnssi_category",
              "id": [
                "430002",
                "430003"
              ]
            },
            "DstIP": {
              "target": "dst_ip",
              "ecs": [
                "destination.address"
              ]
            },
            "DstPort": {
              "target": "dst_port",
              "ecs": [
                "destination.port"
              ]
            },
            "EgressInterface": {
              "target": "egress_interface",
              "id": [
                "430001",
                "430002",
                "430003"
              ],
              "ecs": [
                "_temp_.cisco.destination_interface"
              ]
            },
            "EgressZone": {
              "target": "egress_zone",
              "id": [
                "430001",
                "430002",
                "430003"
              ]
            },
            "Endpoint Profile": {
              "target": "endpoint_profile",
              "id": [
                "430002",
                "430003"
              ]
            },
            "FileAction": {
              "target": "file_action",
              "id": [
                "430004",
                "430005"
              ]
            },
            "FileCount": {
              "target": "file_count",
              "id": [
                "430002",
                "430003"
              ]
            },
            "FileDirection": {
              "target": "file_direction",
              "id": [
                "430004",
                "430005"
              ]
            },
            "FileName": {
              "target": "file_name",
              "id": [
                "430004",
                "430005"
              ],
              "ecs": [
                "file.name"
              ]
            },
            "FilePolicy": {
              "target": "file_policy",
              "id": [
                "430004",
                "430005"
              ],
              "ecs": [
                "_temp_.cisco.rule_name"
              ]
            },
            "FileSHA256": {
              "target": "file_sha256",
              "id": [
                "430004",
                "430005"
              ],
              "ecs": [
                "file.hash.sha256"
              ]
            },
            "FileSandboxStatus": {
              "target": "file_sandbox_status",
              "id": [
                "430004",
                "430005"
              ]
            },
            "FileSize": {
              "target": "file_size",
              "id": [
                "430004",
                "430005"
              ],
              "ecs": [
                "file.size"
              ]
            },
            "FileStorageStatus": {
              "target": "file_storage_status",
              "id": [
                "430004",
                "430005"
              ]
            },
            "FileType": {
              "target": "file_type",
              "id": [
                "430004",
                "430005"
              ]
            },
            "FirstPacketSecond": {
              "target": "first_packet_second",
              "id": [
                "430004",
                "430005"
              ],
              "ecs": [
                "event.start"
              ]
            },
            "GID": {
              "target": "gid",
              "id": [
                "430001"
              ],
              "ecs": [
                "service.id"
              ]
            },
            "HTTPReferer": {
              "target": "http_referer",
              "id": [
                "430002",
                "430003"
              ],
              "ecs": [
                "http.request.referrer"
              ]
            },
            "HTTPResponse": {
              "target": "http_response",
              "id": [
                "430001",
                "430002",
                "430003"
              ],
              "ecs": [
                "http.response.status_code"
              ]
            },
            "ICMPCode": {
              "target": "icmp_code",
              "id": [
                "430001",
                "430002",
                "430003"
              ]
            },
            "ICMPType": {
              "target": "icmp_type",
              "id": [
                "430001",
                "430002",
                "430003"
              ]
            },
            "IPReputationSICategory": {
              "target": "ip_reputation_si_category",
              "id": [
                "430002",
                "430003"
              ]
            },
            "IPSCount": {
              "target": "ips_count",
              "id": [
                "430002",
                "430003"
              ]
            },
            "IngressInterface": {
              "target": "ingress_interface",
              "id": [
                "430001",
                "430002",
                "430003"
              ],
              "ecs": [
                "_temp_.cisco.source_interface"
              ]
            },
            "IngressZone": {
              "target": "ingress_zone",
              "id": [
                "430001",
                "430002",
                "430003"
              ]
            },
            "InitiatorBytes": {
              "target": "initiator_bytes",
              "id": [
                "430003"
              ],
              "ecs": [
                "source.bytes"
              ]
            },
            "InitiatorPackets": {
              "target": "initiator_packets",
              "id": [
                "430003"
              ],
              "ecs": [
                "source.packets"
              ]
            },
            "InlineResult": {
              "target": "inline_result",
              "id": [
                "430001"
              ],
              "ecs": [
                "event.outcome"
              ]
            },
            "IntrusionPolicy": {
              "target": "intrusion_policy",
              "id": [
                "430001"
              ],
              "ecs": [
                "_temp_.cisco.rule_name"
              ]
            },
            "MPLS_Label": {
              "target": "mpls_label",
              "id": [
                "430001"
              ]
            },
            "Message": {
              "target": "message",
              "id": [
                "430001"
              ],
              "ecs": [
                "message"
              ]
            },
            "NAPPolicy": {
              "target": "nap_policy",
              "id": [
                "430001",
                "430002",
                "430003"
              ]
            },
            "NetBIOSDomain": {
              "target": "net_bios_domain",
              "id": [
                "430002",
                "430003"
              ],
              "ecs": [
                "host.hostname"
              ]
            },
            "NumIOC": {
              "target": "num_ioc",
              "id": [
                "430001"
              ]
            },
            "Prefilter Policy": {
              "target": "prefilter_policy",
              "id": [
                "430002",
                "430003"
              ]
            },
            "Priority": {
              "target": "priority",
              "id": [
                "430001"
              ]
            },
            "Protocol": {
              "target": "protocol",
              "ecs": [
                "network.transport"
              ]
            },
            "ReferencedHost": {
              "target": "referenced_host",
              "id": [
                "430002",
                "430003"
              ],
              "ecs": [
                "url.domain"
              ]
            },
            "ResponderBytes": {
              "target": "responder_bytes",
              "id": [
                "430003"
              ],
              "ecs": [
                "destination.bytes"
              ]
            },
            "ResponderPackets": {
              "target": "responder_packets",
              "id": [
                "430003"
              ],
              "ecs": [
                "destination.packets"
              ]
            },
            "Revision": {
              "target": "revision",
              "id": [
                "430001"
              ]
            },
            "SHA_Disposition": {
              "target": "sha_disposition",
              "id": [
                "430004",
                "430005"
              ]
            },
            "SID": {
              "target": "sid",
              "id": [
                "430001"
              ]
            },
            "SSLActualAction": {
              "target": "ssl_actual_action",
              "ecs": [
                "event.outcome"
              ]
            },
            "SSLCertificate": {
              "target": "ssl_certificate",
              "id": [
                "430002",
                "430003",
                "430004",
                "430005"
              ]
            },
            "SSLExpectedAction": {
              "target": "ssl_expected_action",
              "id": [
                "430002",
                "430003"
              ]
            },
            "SSLFlowStatus": {
              "target": "ssl_flow_status",
              "id": [
                "430002",
                "430003",
                "430004",
                "430005"
              ]
            },
            "SSLPolicy": {
              "target": "ssl_policy",
              "id": [
                "430002",
                "430003"
              ]
            },
            "SSLRuleName": {
              "target": "ssl_rule_name",
              "id": [
                "430002",
                "430003"
              ]
            },
            "SSLServerCertStatus": {
              "target": "ssl_server_cert_status",
              "id": [
                "430002",
                "430003"
              ]
            },
            "SSLServerName": {
              "target": "ssl_server_name",
              "id": [
                "430002",
                "430003"
              ],
              "ecs": [
                "server.domain"
              ]
            },
            "SSLSessionID": {
              "target": "ssl_session_id",
              "id": [
                "430002",
                "430003"
              ]
            },
            "SSLTicketID": {
              "target": "ssl_ticket_id",
              "id": [
                "430002",
                "430003"
              ]
            },
            "SSLURLCategory": {
              "target": "sslurl_category",
              "id": [
                "430002",
                "430003"
              ]
            },
            "SSLVersion": {
              "target": "ssl_version",
              "id": [
                "430002",
                "430003"
              ]
            },
            "SSSLCipherSuite": {
              "target": "sssl_cipher_suite",
              "id": [
                "430002",
                "430003"
              ]
            },
            "SecIntMatchingIP": {
              "target": "sec_int_matching_ip",
              "id": [
                "430002",
                "430003"
              ]
            },
            "Security Group": {
              "target": "security_group",
              "id": [
                "430002",
                "430003"
              ]
            },
            "SperoDisposition": {
              "target": "spero_disposition",
              "id": [
                "430004",
                "430005"
              ]
            },
            "SrcIP": {
              "target": "src_ip",
              "ecs": [
                "source.address"
              ]
            },
            "SrcPort": {
              "target": "src_port",
              "ecs": [
                "source.port"
              ]
            },
            "TCPFlags": {
              "target": "tcp_flags",
              "id": [
                "430002",
                "430003"
              ]
            },
            "ThreatName": {
              "target": "threat_name",
              "id": [
                "430005"
              ],
              "ecs": [
                "_temp_.cisco.threat_category"
              ]
            },
            "ThreatScore": {
              "target": "threat_score",
              "id": [
                "430005"
              ],
              "ecs": [
                "_temp_.cisco.threat_level"
              ]
            },
            "Tunnel or Prefilter Rule": {
              "target": "tunnel_or_prefilter_rule",
              "id": [
                "430002",
                "430003"
              ]
            },
            "URI": {
              "target": "uri",
              "id": [
                "430004",
                "430005"
              ],
              "ecs": [
                "url.original"
              ]
            },
            "URL": {
              "target": "url",
              "id": [
                "430002",
                "430003"
              ],
              "ecs": [
                "url.original"
              ]
            },
            "URLCategory": {
              "target": "url_category",
              "id": [
                "430002",
                "430003"
              ]
            },
            "URLReputation": {
              "target": "url_reputation",
              "id": [
                "430002",
                "430003"
              ]
            },
            "URLSICategory": {
              "target": "urlsi_category",
              "id": [
                "430002",
                "430003"
              ]
            },
            "User": {
              "target": "user",
              "ecs": [
                "user.id",
                "user.name"
              ]
            },
            "UserAgent": {
              "target": "user_agent",
              "id": [
                "430002",
                "430003"
              ],
              "ecs": [
                "user_agent.original"
              ]
            },
            "VLAN_ID": {
              "target": "vlan_id",
              "id": [
                "430001",
                "430002",
                "430003"
              ]
            },
            "WebApplication": {
              "target": "web_application",
              "ecs": [
                "network.application"
              ]
            },
            "originalClientSrcIP": {
              "target": "original_client_src_ip",
              "id": [
                "430002",
                "430003"
              ],
              "ecs": [
                "client.address"
              ]
            }
          },
          "lang": "painless",
          "source": "boolean isEmpty(def value) {\n  return (value instanceof AbstractList? value.size() : value.length()) == 0;\n}\ndef appendOrCreate(Map dest, String[] path, def value) {\n for (int i=0; i<path.length-1; i++) {\n  dest = dest.computeIfAbsent(path[i], _ -> new HashMap());\n }\n String key = path[path.length - 1];\n def existing = dest.get(key);\n return existing == null?\n  dest.put(key, value)\n  : existing instanceof AbstractList?\n    existing.add(value)\n    : dest.put(key, new ArrayList([existing, value]));\n}\ndef msg = ctx._temp_.orig_security;\ndef counters = new HashMap();\ndef dest = new HashMap();\nctx._temp_.cisco['security'] = dest;\nfor (entry in msg.entrySet()) {\n def param = params.get(entry.getKey());\n if (param == null) {\n   continue;\n }\n param.getOrDefault('id', []).forEach( id -> counters[id] = 1 + counters.getOrDefault(id, 0) );\n if (!isEmpty(entry.getValue())) {\n  param.getOrDefault('ecs', []).forEach( field -> appendOrCreate(ctx, field.splitOnToken('.'), entry.getValue()) );\n  dest[param.target] = entry.getValue();\n }\n}\nif (ctx._temp_.cisco.message_id != \"\") return;\ndef best;\nfor (entry in counters.entrySet()) {\n if (best == null || best.getValue() < entry.getValue()) best = entry;\n}\nif (best != null) ctx._temp_.cisco.message_id = best.getKey();\n"
        }
      },
      {
        "script": {
          "lang": "painless",
          "params": {
            "ctx._temp_.cisco.message_id": {
              "target": "event.action",
              "map": {
                "430001": "intrusion-detected",
                "430002": "connection-started",
                "430003": "connection-finished",
                "430004": "file-detected",
                "430005": "malware-detected"
              }
            },
            "dns.question.type": {
              "map": {
                "a host address": "A",
                "ip6 address": "AAAA",
                "text strings": "TXT",
                "a domain name pointer": "PTR",
                "an authoritative name server": "NS",
                "the canonical name for an alias": "CNAME",
                "marks the start of a zone of authority": "SOA",
                "mail exchange": "MX",
                "server selection": "SRV"
              }
            },
            "dns.response_code": {
              "map": {
                "non-existent domain": "NXDOMAIN",
                "server failure": "SERVFAIL",
                "query refused": "REFUSED",
                "no error": "NOERROR"
              }
            }
          },
          "source": "def getField(Map src, String[] path) {\n for (int i=0; i<path.length-1; i++) {\n  src = src.getOrDefault(path[i], null);\n  if (src == null || !(src instanceof Map)) {\n    return null;\n  }\n }\n return src[path[path.length-1]];\n}\ndef setField(Map dest, String[] path, def value) {\n for (int i=0; i<path.length-1; i++) {\n   dest = dest.computeIfAbsent(path[i], _ -> new HashMap());\n }\n dest[path[path.length-1]] = value;\n}\nfor (entry in params.entrySet()) {\n  def srcField = entry.getKey();\n  def param = entry.getValue();\n  String oldVal = getField(ctx, srcField.splitOnToken('.'));\n  if (oldVal == null) continue;\n  def newVal = param.map?.getOrDefault(oldVal.toLowerCase(), null);\n  if (newVal != null) {\n    def dstField = param.getOrDefault('target', srcField);\n    setField(ctx, dstField.splitOnToken('.'), newVal);\n  }\n}\n"
        }
      },
      {
        "set": {
          "if": "ctx.dns?.question?.type != null && ctx.dns?.response_code == null",
          "field": "dns.response_code",
          "value": "NOERROR"
        }
      },
      {
        "set": {
          "if": "ctx._temp_.cisco.message_id == \"430001\"",
          "field": "event.action",
          "value": "intrusion-detected"
        }
      },
      {
        "set": {
          "if": "ctx._temp_.cisco.message_id == \"430002\"",
          "field": "event.action",
          "value": "connection-started"
        }
      },
      {
        "set": {
          "if": "ctx._temp_.cisco.message_id == \"430003\"",
          "field": "event.action",
          "value": "connection-finished"
        }
      },
      {
        "set": {
          "if": "ctx._temp_.cisco.message_id == \"430004\"",
          "field": "event.action",
          "value": "file-detected"
        }
      },
      {
        "set": {
          "if": "ctx._temp_.cisco.message_id == \"430005\"",
          "field": "event.action",
          "value": "malware-detected"
        }
      },
      {
        "set": {
          "field": "_temp_.duration_hms",
          "value": "{{event.duration}}",
          "ignore_empty_value": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "if": "ctx?._temp_?.duration_hms != null",
          "source": "long parse_hms(String s) {\n    long cur = 0, total = 0;\n    for (char c: s.toCharArray()) {\n        if (c >= (char)'0' && c <= (char)'9') {\n            cur = (cur*10) + (long)c - (char)'0';\n        } else if (c == (char)':') {\n            total = (total + cur) * 60;\n            cur = 0;\n        } else if (c != (char)'h' && c == (char)'m' && c == (char)'s') {\n            return 0;\n        }\n    }\n    return total + cur;\n} if (ctx?.event == null) {\n    ctx['event'] = new HashMap();\n} String end = ctx['@timestamp']; ctx.event['end'] = end; long nanos = parse_hms(ctx._temp_.duration_hms) * 1000000000L; ctx.event['duration'] = nanos; ctx.event['start'] = ZonedDateTime.ofInstant(\n    Instant.parse(end).minusNanos(nanos),\n    ZoneOffset.UTC);\n"
        }
      },
      {
        "grok": {
          "field": "_temp_.cisco.source_username",
          "if": "ctx?._temp_?.cisco?.source_username != null",
          "ignore_failure": true,
          "patterns": [
            "%{CISCO_DOMAIN_USER:_temp_.cisco.source_username}%{CISCO_SGT}"
          ],
          "pattern_definitions": {
            "CISCO_DOMAIN_USER": "(%{CISCO_DOMAIN})?%{CISCO_USER}",
            "CISCO_SGT": "(, *%{NUMBER:_temp_.cisco.source_user_security_group_tag})?",
            "CISCO_USER": "%{USERNAME}(@%{HOSTNAME})?",
            "CISCO_DOMAIN": "(LOCAL\\\\)?(%{HOSTNAME}\\\\)?"
          }
        }
      },
      {
        "convert": {
          "field": "_temp_.cisco.source_user_security_group_tag",
          "type": "long",
          "ignore_missing": true
        }
      },
      {
        "grok": {
          "field": "_temp_.cisco.destination_username",
          "if": "ctx?._temp_?.cisco?.destination_username != null",
          "ignore_failure": true,
          "patterns": [
            "%{CISCO_DOMAIN_USER:_temp_.cisco.destination_username}%{CISCO_SGT}"
          ],
          "pattern_definitions": {
            "CISCO_DOMAIN_USER": "(%{CISCO_DOMAIN})?%{CISCO_USER}",
            "CISCO_SGT": "(, *%{NUMBER:_temp_.cisco.destination_user_security_group_tag})?",
            "CISCO_USER": "%{USERNAME}(@%{HOSTNAME})?",
            "CISCO_DOMAIN": "(LOCAL\\\\)?(%{HOSTNAME}\\\\)?"
          }
        }
      },
      {
        "convert": {
          "field": "_temp_.cisco.destination_user_security_group_tag",
          "type": "long",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "source.user.name",
          "value": "{{{ _temp_.cisco.source_username }}}",
          "if": "ctx?.source?.user?.name == null && ctx?._temp_?.cisco?.source_username != null"
        }
      },
      {
        "set": {
          "field": "destination.user.name",
          "value": "{{{ _temp_.cisco.destination_username }}}",
          "if": "ctx?.destination?.user?.name == null && ctx?._temp_?.cisco?.destination_username != null"
        }
      },
      {
        "grok": {
          "field": "source.user.name",
          "if": "ctx?.source?.user?.name != null",
          "ignore_failure": true,
          "patterns": [
            "(%{CISCO_DOMAIN})?%{CISCO_USER}"
          ],
          "pattern_definitions": {
            "CISCO_USER": "%{USERNAME:source.user.name}(@%{HOSTNAME:source.user.domain})?",
            "CISCO_DOMAIN": "(LOCAL\\\\)?(%{HOSTNAME:source.user.domain}\\\\)?"
          }
        }
      },
      {
        "grok": {
          "field": "destination.user.name",
          "if": "ctx?.destination?.user?.name != null",
          "ignore_failure": true,
          "patterns": [
            "(%{CISCO_DOMAIN})?%{CISCO_USER}"
          ],
          "pattern_definitions": {
            "CISCO_USER": "%{USERNAME:destination.user.name}(@%{HOSTNAME:destination.user.domain})?",
            "CISCO_DOMAIN": "(LOCAL\\\\)?(%{HOSTNAME:destination.user.domain}\\\\)?"
          }
        }
      },
      {
        "lowercase": {
          "field": "network.transport",
          "ignore_failure": true
        }
      },
      {
        "lowercase": {
          "field": "network.protocol",
          "ignore_failure": true
        }
      },
      {
        "lowercase": {
          "field": "network.application",
          "ignore_failure": true
        }
      },
      {
        "lowercase": {
          "field": "file.type",
          "ignore_failure": true
        }
      },
      {
        "lowercase": {
          "field": "network.direction",
          "ignore_failure": true
        }
      },
      {
        "lowercase": {
          "field": "network.type",
          "ignore_failure": true
        }
      },
      {
        "script": {
          "if": "ctx?.network?.transport != null",
          "lang": "painless",
          "params": {
            "icmp": 1,
            "igmp": 2,
            "ipv4": 4,
            "tcp": 6,
            "egp": 8,
            "igp": 9,
            "pup": 12,
            "udp": 17,
            "rdp": 27,
            "irtp": 28,
            "dccp": 33,
            "idpr": 35,
            "ipv6": 41,
            "ipv6-route": 43,
            "ipv6-frag": 44,
            "rsvp": 46,
            "gre": 47,
            "esp": 50,
            "ipv6-icmp": 58,
            "ipv6-nonxt": 59,
            "ipv6-opts": 60
          },
          "source": "def net = ctx.network; def iana = params[net.transport]; if (iana != null) {\n  net['iana_number'] = iana;\n  return;\n} def reverse = new HashMap(); def[] arr = new def[] { null }; for (entry in params.entrySet()) {\n  arr[0] = entry.getValue();\n  reverse.put(String.format(\"%d\", arr), entry.getKey());\n} def trans = reverse[net.transport]; if (trans != null) {\n  net['iana_number'] = net.transport;\n  net['transport'] = trans;\n}\n"
        }
      },
      {
        "lowercase": {
          "field": "event.outcome",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "if": "ctx.event?.outcome == \"est-allowed\"",
          "value": "allowed"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "if": "ctx.event?.outcome == \"permitted\"",
          "value": "allowed"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "if": "ctx.event?.outcome == \"allow\"",
          "value": "allowed"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "if": "ctx.event?.outcome == \"deny\"",
          "value": "denied"
        }
      },
      {
        "set": {
          "field": "network.transport",
          "if": "ctx.network?.transport == \"icmpv6\"",
          "value": "ipv6-icmp"
        }
      },
      {
        "convert": {
          "field": "source.port",
          "type": "integer",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "destination.port",
          "type": "integer",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "source.bytes",
          "type": "long",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "destination.bytes",
          "type": "long",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "network.bytes",
          "type": "long",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "source.packets",
          "type": "integer",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "destination.packets",
          "type": "integer",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "_temp_.cisco.mapped_source_port",
          "type": "integer",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "_temp_.cisco.mapped_destination_port",
          "type": "integer",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "_temp_.cisco.icmp_code",
          "type": "integer",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "_temp_.cisco.icmp_type",
          "type": "integer",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "http.response.status_code",
          "type": "integer",
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "file.size",
          "type": "integer",
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "network.iana_number",
          "type": "string",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "sip.to.uri.port",
          "type": "integer",
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "source.address",
          "patterns": [
            "^(?:%{IP:source.ip}|%{GREEDYDATA:source.domain})$"
          ],
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "destination.address",
          "patterns": [
            "^(?:%{IP:destination.ip}|%{GREEDYDATA:destination.domain})$"
          ],
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "client.address",
          "patterns": [
            "^(?:%{IP:client.ip}|%{GREEDYDATA:client.domain})$"
          ],
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "server.address",
          "patterns": [
            "^(?:%{IP:server.ip}|%{GREEDYDATA:server.domain})$"
          ],
          "ignore_failure": true
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "source.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "field": "destination.ip",
          "target_field": "destination.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "destination.ip",
          "target_field": "destination.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.asn",
          "target_field": "source.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.organization_name",
          "target_field": "source.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "destination.as.asn",
          "target_field": "destination.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "destination.as.organization_name",
          "target_field": "destination.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "grok": {
          "field": "_temp_.natsrcip",
          "patterns": [
            "^(?:%{IP:_temp_.cisco.mapped_source_ip}|%{GREEDYDATA:_temp_.cisco.mapped_source_host})$"
          ],
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "_temp_.natdstip",
          "patterns": [
            "^(?:%{IP:_temp_.cisco.mapped_destination_ip}|%{GREEDYDATA:_temp_.cisco.mapped_destination_host})$"
          ],
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.nat.ip",
          "value": "{{_temp_.cisco.mapped_source_ip}}",
          "if": "ctx?._temp_?.cisco?.mapped_source_ip != ctx?.source?.ip",
          "ignore_empty_value": true
        }
      },
      {
        "convert": {
          "field": "source.nat.ip",
          "type": "ip",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "source.nat.port",
          "value": "{{_temp_.cisco.mapped_source_port}}",
          "if": "ctx?._temp_?.cisco?.mapped_source_port != ctx?.source?.port",
          "ignore_empty_value": true
        }
      },
      {
        "convert": {
          "field": "source.nat.port",
          "type": "long",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "destination.nat.ip",
          "value": "{{_temp_.cisco.mapped_destination_ip}}",
          "if": "ctx?._temp_?.cisco.mapped_destination_ip != ctx?.destination?.ip",
          "ignore_empty_value": true
        }
      },
      {
        "convert": {
          "field": "destination.nat.ip",
          "type": "ip",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "destination.nat.port",
          "value": "{{_temp_.cisco.mapped_destination_port}}",
          "if": "ctx?._temp_?.cisco?.mapped_destination_port != ctx?.destination?.port",
          "ignore_empty_value": true
        }
      },
      {
        "convert": {
          "field": "destination.nat.port",
          "type": "long",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "network.direction",
          "value": "inbound",
          "if": "ctx?._temp_?.external_zones != null && ctx?._temp_?.internal_zones != null && ctx?.observer?.ingress?.zone != null && ctx?.observer?.egress?.zone != null && ctx._temp_.external_zones.contains(ctx.observer.ingress.zone) && ctx._temp_.internal_zones.contains(ctx.observer.egress.zone)\n"
        }
      },
      {
        "set": {
          "field": "network.direction",
          "value": "outbound",
          "if": "ctx?._temp_?.external_zones != null && ctx?._temp_?.internal_zones != null && ctx?.observer?.ingress?.zone != null && ctx?.observer?.egress?.zone != null && ctx._temp_.external_zones.contains(ctx.observer.egress.zone) && ctx._temp_.internal_zones.contains(ctx.observer.ingress.zone)\n"
        }
      },
      {
        "set": {
          "field": "network.direction",
          "value": "internal",
          "if": "ctx?._temp_?.external_zones != null && ctx?._temp_?.internal_zones != null && ctx?.observer?.ingress?.zone != null && ctx?.observer?.egress?.zone != null && ctx._temp_.internal_zones.contains(ctx.observer.egress.zone) && ctx._temp_.internal_zones.contains(ctx.observer.ingress.zone)\n"
        }
      },
      {
        "set": {
          "field": "network.direction",
          "value": "external",
          "if": "ctx?._temp_?.external_zones != null && ctx?._temp_?.internal_zones != null && ctx?.observer?.ingress?.zone != null && ctx?.observer?.egress?.zone != null && ctx._temp_.external_zones.contains(ctx.observer.egress.zone) && ctx._temp_.external_zones.contains(ctx.observer.ingress.zone)\n"
        }
      },
      {
        "set": {
          "field": "network.direction",
          "value": "unknown",
          "if": "ctx?._temp_?.external_zones != null && ctx?._temp_?.internal_zones != null && ctx?.observer?.egress?.zone != null && ctx?.observer?.ingress?.zone != null && (\n  (\n    !ctx._temp_.external_zones.contains(ctx.observer.egress.zone) &&\n    !ctx._temp_.internal_zones.contains(ctx.observer.egress.zone)\n  ) ||\n  (\n    !ctx._temp_.external_zones.contains(ctx.observer.ingress.zone) &&\n    !ctx._temp_.internal_zones.contains(ctx.observer.ingress.zone)\n  )\n)\n"
        }
      },
      {
        "set": {
          "field": "_temp_.url_domain",
          "value": "{{url.domain}}",
          "ignore_failure": true,
          "if": "ctx?.url?.domain != null"
        }
      },
      {
        "uri_parts": {
          "field": "url.original",
          "ignore_failure": true,
          "if": "ctx?.url?.original != null"
        }
      },
      {
        "append": {
          "field": "url.domain",
          "value": "{{_temp_.url_domain}}",
          "ignore_failure": true,
          "allow_duplicates": false,
          "if": "ctx?._temp_?.url_domain != null"
        }
      },
      {
        "rename": {
          "field": "_temp_.cisco.message_id",
          "target_field": "event.code",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": [
            "_temp_.cisco.message_id",
            "event.code"
          ],
          "if": "ctx._temp_.cisco.message_id == \"\"",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "_temp_.cisco",
          "target_field": "cisco.asa",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": "_temp_",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "cisco.asa.list_id",
          "target_field": "cisco.asa.rule_name",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "params": {
            "connection-finished": {
              "kind": "event",
              "category": [
                "network"
              ],
              "type": [
                "end"
              ]
            },
            "connection-started": {
              "kind": "event",
              "category": [
                "network"
              ],
              "type": [
                "start"
              ]
            },
            "file-detected": {
              "kind": "alert",
              "category": [
                "malware"
              ],
              "type": [
                "info"
              ]
            },
            "firewall-rule": {
              "kind": "event",
              "category": [
                "network"
              ],
              "type": []
            },
            "flow-creation": {
              "kind": "event",
              "category": [
                "network"
              ],
              "type": [
                "connection",
                "start"
              ]
            },
            "flow-expiration": {
              "kind": "event",
              "category": [
                "network"
              ],
              "type": [
                "connection",
                "end"
              ]
            },
            "intrusion-detected": {
              "kind": "alert",
              "category": [
                "intrusion_detection"
              ],
              "type": [
                "info"
              ]
            },
            "logged-in": {
              "kind": "event",
              "category": [
                "authentication",
                "network"
              ],
              "type": [
                "allowed",
                "info"
              ]
            },
            "logon-failed": {
              "kind": "event",
              "category": [
                "authentication",
                "network"
              ],
              "type": [
                "denied",
                "info"
              ]
            },
            "malware-detected": {
              "kind": "alert",
              "category": [
                "malware"
              ],
              "type": [
                "info"
              ]
            },
            "bypass": {
              "kind": "event",
              "category": [
                "network"
              ],
              "type": [
                "info",
                "change"
              ]
            },
            "error": {
              "kind": "event",
              "outcome": "failure",
              "category": [
                "network"
              ],
              "type": [
                "error"
              ]
            },
            "deleted": {
              "kind": "event",
              "category": [
                "network"
              ],
              "type": [
                "info",
                "deletion",
                "user"
              ]
            },
            "creation": {
              "kind": "event",
              "category": [
                "network"
              ],
              "type": [
                "info",
                "creation",
                "user"
              ]
            },
            "client-vpn-connected": {
              "kind": "event",
              "category": [
                "network",
                "session"
              ],
              "type": [
                "connection",
                "start"
              ]
            },
            "client-vpn-error": {
              "kind": "event",
              "category": [
                "network"
              ],
              "type": [
                "connection",
                "error",
                "denied"
              ]
            },
            "client-vpn-disconnected": {
              "kind": "event",
              "category": [
                "network"
              ],
              "type": [
                "connection",
                "end"
              ]
            }
          },
          "source": "if (ctx?.event?.action == null || !params.containsKey(ctx.event.action)) {\n  return;\n}\nctx.event.kind = params.get(ctx.event.action).get('kind'); ctx.event.category = params.get(ctx.event.action).get('category').clone(); ctx.event.type = params.get(ctx.event.action).get('type').clone(); if (ctx?.event?.outcome == null || (!ctx.event.category.contains('network') && !ctx.event.category.contains('intrusion_detection'))) {\n  if (ctx?.event?.action == 'firewall-rule') {\n    ctx.event.type.add('info');\n  } else if (ctx?.event?.action.startsWith('connection-')) {\n    ctx.event.type.add('connection');\n  }\n  return;\n} if (ctx.event.outcome == 'allowed') {\n  ctx.event.outcome = 'success';\n  ctx.event.type.add('connection');\n  ctx.event.type.add('allowed');\n} else if (ctx.event.outcome == 'denied' || ctx.event.outcome == 'block') {\n  ctx.event.outcome = 'success';\n  ctx.event.type.add('connection');\n  ctx.event.type.add('denied');\n} else if (ctx.event.outcome == 'dropped') {\n  ctx.event.outcome = 'failure';\n  ctx.event.type.add('connection');\n  ctx.event.type.add('denied');\n} else if (ctx?.event?.action == 'firewall-rule') {\n  ctx.event.type.add('info');\n} else if (ctx?.event?.action.startsWith('connection-')) {\n  ctx.event.type.add('connection');\n} if (ctx.event.outcome == 'monitored') {\n  ctx.event.category.add('intrusion_detection');\n  ctx.event.outcome = 'success';\n}"
        }
      },
      {
        "set": {
          "description": "copy destination.user.name to user.name if it is not set",
          "field": "user.name",
          "value": "{{destination.user.name}}",
          "ignore_empty_value": true,
          "if": "ctx?.user?.name == null"
        }
      },
      {
        "set": {
          "field": "observer.hostname",
          "value": "{{ host.hostname }}",
          "ignore_empty_value": true
        }
      },
      {
        "set": {
          "field": "observer.vendor",
          "value": "Cisco",
          "ignore_empty_value": true
        }
      },
      {
        "set": {
          "field": "observer.type",
          "value": "firewall",
          "ignore_empty_value": true
        }
      },
      {
        "set": {
          "field": "observer.product",
          "value": "asa",
          "ignore_empty_value": true
        }
      },
      {
        "set": {
          "field": "observer.egress.interface.name",
          "value": "{{ cisco.asa.destination_interface }}",
          "ignore_empty_value": true
        }
      },
      {
        "set": {
          "field": "observer.ingress.interface.name",
          "value": "{{ cisco.asa.source_interface }}",
          "ignore_empty_value": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{source.ip}}",
          "if": "ctx?.source?.ip != null",
          "allow_duplicates": false
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{source.nat.ip}}",
          "if": "ctx?.source?.nat?.ip != null",
          "allow_duplicates": false
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{destination.ip}}",
          "if": "ctx?.destination?.ip != null",
          "allow_duplicates": false
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{destination.nat.ip}}",
          "if": "ctx?.destination?.nat?.ip != null",
          "allow_duplicates": false
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{{user.name}}}",
          "if": "ctx?.user?.name != null && ctx?.user?.name != ''",
          "allow_duplicates": false
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{server.user.name}}",
          "if": "ctx?.server?.user?.name != null && ctx?.server?.user?.name != ''",
          "allow_duplicates": false
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{{source.user.name}}}",
          "if": "ctx?.source?.user?.name != null && ctx?.source?.user?.name != ''",
          "allow_duplicates": false
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{{destination.user.name}}}",
          "if": "ctx?.destination?.user?.name != null && ctx?.destination?.user?.name != ''",
          "allow_duplicates": false
        }
      },
      {
        "append": {
          "field": "related.hash",
          "value": "{{file.hash.sha256}}",
          "if": "ctx?.file?.hash?.sha256 != null",
          "allow_duplicates": false
        }
      },
      {
        "append": {
          "field": "related.hosts",
          "value": "{{host.hostname}}",
          "if": "ctx.host?.hostname != null && ctx.host?.hostname != ''",
          "allow_duplicates": false
        }
      },
      {
        "append": {
          "field": "related.hosts",
          "value": "{{observer.hostname}}",
          "if": "ctx.observer?.hostname != null && ctx.observer?.hostname != ''",
          "allow_duplicates": false
        }
      },
      {
        "append": {
          "field": "related.hosts",
          "value": "{{destination.domain}}",
          "if": "ctx.destination?.domain != null && ctx.destination?.domain != ''",
          "allow_duplicates": false
        }
      },
      {
        "append": {
          "field": "related.hosts",
          "value": "{{source.domain}}",
          "if": "ctx.source?.domain != null && ctx.source?.domain != ''",
          "allow_duplicates": false
        }
      },
      {
        "append": {
          "field": "related.hosts",
          "value": "{{source.user.domain}}",
          "if": "ctx.source?.user?.domain != null && ctx.source?.user?.domain != ''",
          "allow_duplicates": false
        }
      },
      {
        "append": {
          "field": "related.hosts",
          "value": "{{destination.user.domain}}",
          "if": "ctx.destination?.user?.domain != null && ctx.destination?.user?.domain != ''",
          "allow_duplicates": false
        }
      },
      {
        "script": {
          "lang": "painless",
          "description": "This script processor iterates over the whole document to remove fields with null values.",
          "source": "void handleMap(Map map) {\n  for (def x : map.values()) {\n    if (x instanceof Map) {\n        handleMap(x);\n    } else if (x instanceof List) {\n        handleList(x);\n    }\n  }\n  map.values().removeIf(v -> v == null);\n}\nvoid handleList(List list) {\n  for (def x : list) {\n      if (x instanceof Map) {\n          handleMap(x);\n      } else if (x instanceof List) {\n          handleList(x);\n      }\n  }\n}\nhandleMap(ctx);\n"
        }
      },
      {
        "community_id": {
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-cisco_asa.log@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "rename": {
          "field": "_temp_.cisco",
          "target_field": "cisco.asa",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": "_temp_",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "cisco_asa"
      }
    }
  },
  "metrics-aws.ebs-1.25.2": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-aws.ebs@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "logs-elastic_agent.apm_server-1.3.5": {
    "processors": [
      {
        "pipeline": {
          "name": "logs-elastic_agent.apm_server@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "elastic_agent"
      }
    }
  },
  "metrics-system.cpu-1.20.4": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-system.cpu@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "system"
      }
    }
  },
  "metrics-aws.natgateway-1.25.2": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-aws.natgateway@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "logs-windows.forwarded-1.15.0-security": {
    "description": "Pipeline for Windows Security events",
    "processors": [
      {
        "convert": {
          "field": "event.code",
          "type": "string",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Set ECS categorization fields",
          "description": "Set ECS categorization fields",
          "params": {
            "1100": {
              "category": [
                "process"
              ],
              "type": [
                "end"
              ],
              "action": "logging-service-shutdown"
            },
            "1102": {
              "category": [
                "iam"
              ],
              "type": [
                "admin",
                "change"
              ],
              "action": "audit-log-cleared"
            },
            "1104": {
              "category": [
                "iam"
              ],
              "type": [
                "admin"
              ],
              "action": "logging-full"
            },
            "1105": {
              "category": [
                "iam"
              ],
              "type": [
                "admin"
              ],
              "action": "auditlog-archieved"
            },
            "1108": {
              "category": [
                "iam"
              ],
              "type": [
                "admin"
              ],
              "action": "logging-processing-error"
            },
            "4610": {
              "category": [
                "configuration"
              ],
              "type": [
                "access"
              ],
              "action": "authentication-package-loaded"
            },
            "4611": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ],
              "action": "trusted-logon-process-registered"
            },
            "4614": {
              "category": [
                "configuration"
              ],
              "type": [
                "access"
              ],
              "action": "notification-package-loaded"
            },
            "4616": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ],
              "action": "system-time-changed"
            },
            "4622": {
              "category": [
                "configuration"
              ],
              "type": [
                "access"
              ],
              "action": "security-package-loaded"
            },
            "4624": {
              "category": [
                "authentication"
              ],
              "type": [
                "start"
              ],
              "action": "logged-in"
            },
            "4625": {
              "category": [
                "authentication"
              ],
              "type": [
                "start"
              ],
              "action": "logon-failed"
            },
            "4634": {
              "category": [
                "authentication"
              ],
              "type": [
                "end"
              ],
              "action": "logged-out"
            },
            "4647": {
              "category": [
                "authentication"
              ],
              "type": [
                "end"
              ],
              "action": "logged-out"
            },
            "4648": {
              "category": [
                "authentication"
              ],
              "type": [
                "start"
              ],
              "action": "logged-in-explicit"
            },
            "4657": {
              "category": [
                "registry",
                "configuration"
              ],
              "type": [
                "change"
              ],
              "action": "registry-value-modified"
            },
            "4670": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "admin",
                "change"
              ],
              "action": "permissions-changed"
            },
            "4672": {
              "category": [
                "iam"
              ],
              "type": [
                "admin"
              ],
              "action": "logged-in-special"
            },
            "4673": {
              "category": [
                "iam"
              ],
              "type": [
                "admin"
              ],
              "action": "privileged-service-called"
            },
            "4674": {
              "category": [
                "iam"
              ],
              "type": [
                "admin"
              ],
              "action": "privileged-operation"
            },
            "4688": {
              "category": [
                "process"
              ],
              "type": [
                "start"
              ],
              "action": "created-process"
            },
            "4689": {
              "category": [
                "process"
              ],
              "type": [
                "end"
              ],
              "action": "exited-process"
            },
            "4697": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "admin",
                "change"
              ],
              "action": "service-installed"
            },
            "4698": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "creation",
                "admin"
              ],
              "action": "scheduled-task-created"
            },
            "4699": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "deletion",
                "admin"
              ],
              "action": "scheduled-task-deleted"
            },
            "4700": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "change",
                "admin"
              ],
              "action": "scheduled-task-enabled"
            },
            "4701": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "change",
                "admin"
              ],
              "action": "scheduled-task-disabled"
            },
            "4702": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "change",
                "admin"
              ],
              "action": "scheduled-task-updated"
            },
            "4706": {
              "category": [
                "configuration"
              ],
              "type": [
                "creation"
              ],
              "action": "domain-trust-added"
            },
            "4707": {
              "category": [
                "configuration"
              ],
              "type": [
                "deletion"
              ],
              "action": "domain-trust-removed"
            },
            "4713": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ],
              "action": "kerberos-policy-changed"
            },
            "4714": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ],
              "action": "encrypted-data-recovery-policy-changed"
            },
            "4715": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ],
              "action": "object-audit-policy-changed"
            },
            "4716": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ],
              "action": "trusted-domain-information-changed"
            },
            "4717": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "admin",
                "change"
              ],
              "action": "system-security-access-granted"
            },
            "4718": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "admin",
                "deletion"
              ],
              "action": "system-security-access-removed"
            },
            "4719": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "admin",
                "change"
              ],
              "action": "changed-audit-config"
            },
            "4720": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "creation"
              ],
              "action": "added-user-account"
            },
            "4722": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ],
              "action": "enabled-user-account"
            },
            "4723": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ],
              "action": "changed-password"
            },
            "4724": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ],
              "action": "reset-password"
            },
            "4725": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "deletion"
              ],
              "action": "disabled-user-account"
            },
            "4726": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "deletion"
              ],
              "action": "deleted-user-account"
            },
            "4727": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "creation"
              ],
              "action": "added-group-account"
            },
            "4728": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "added-member-to-group"
            },
            "4729": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "removed-member-from-group"
            },
            "4730": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "deletion"
              ],
              "action": "deleted-group-account"
            },
            "4731": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "creation"
              ],
              "action": "added-group-account"
            },
            "4732": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "added-member-to-group"
            },
            "4733": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "removed-member-from-group"
            },
            "4734": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "deletion"
              ],
              "action": "deleted-group-account"
            },
            "4735": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "modified-group-account"
            },
            "4737": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "modified-group-account"
            },
            "4738": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ],
              "action": "modified-user-account"
            },
            "4739": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ],
              "action": "domain-policy-changed"
            },
            "4740": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ],
              "action": "locked-out-user-account"
            },
            "4741": {
              "category": [
                "iam"
              ],
              "type": [
                "creation",
                "admin"
              ],
              "action": "added-computer-account"
            },
            "4742": {
              "category": [
                "iam"
              ],
              "type": [
                "change",
                "admin"
              ],
              "action": "changed-computer-account"
            },
            "4743": {
              "category": [
                "iam"
              ],
              "type": [
                "deletion",
                "admin"
              ],
              "action": "deleted-computer-account"
            },
            "4744": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "creation"
              ],
              "action": "added-distribution-group-account"
            },
            "4745": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "changed-distribution-group-account"
            },
            "4746": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "added-member-to-distribution-group"
            },
            "4747": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "removed-member-from-distribution-group"
            },
            "4748": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "deletion"
              ],
              "action": "deleted-distribution-group-account"
            },
            "4749": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "creation"
              ],
              "action": "added-distribution-group-account"
            },
            "4750": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "changed-distribution-group-account"
            },
            "4751": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "added-member-to-distribution-group"
            },
            "4752": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "removed-member-from-distribution-group"
            },
            "4753": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "deletion"
              ],
              "action": "deleted-distribution-group-account"
            },
            "4754": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "creation"
              ],
              "action": "added-group-account"
            },
            "4755": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "modified-group-account"
            },
            "4756": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "added-member-to-group"
            },
            "4757": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "removed-member-from-group"
            },
            "4758": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "deletion"
              ],
              "action": "deleted-group-account"
            },
            "4759": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "creation"
              ],
              "action": "added-distribution-group-account"
            },
            "4760": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "changed-distribution-group-account"
            },
            "4761": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "added-member-to-distribution-group"
            },
            "4762": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "removed-member-from-distribution-group"
            },
            "4763": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "deletion"
              ],
              "action": "deleted-distribution-group-account"
            },
            "4764": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ],
              "action": "type-changed-group-account"
            },
            "4767": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ],
              "action": "unlocked-user-account"
            },
            "4768": {
              "category": [
                "authentication"
              ],
              "type": [
                "start"
              ],
              "action": "kerberos-authentication-ticket-requested"
            },
            "4769": {
              "category": [
                "authentication"
              ],
              "type": [
                "start"
              ],
              "action": "kerberos-service-ticket-requested"
            },
            "4770": {
              "category": [
                "authentication"
              ],
              "type": [
                "start"
              ],
              "action": "kerberos-service-ticket-renewed"
            },
            "4771": {
              "category": [
                "authentication"
              ],
              "type": [
                "start"
              ],
              "action": "kerberos-preauth-failed"
            },
            "4776": {
              "category": [
                "authentication"
              ],
              "type": [
                "start"
              ],
              "action": "credential-validated"
            },
            "4778": {
              "category": [
                "authentication",
                "session"
              ],
              "type": [
                "start"
              ],
              "action": "session-reconnected"
            },
            "4779": {
              "category": [
                "authentication",
                "session"
              ],
              "type": [
                "end"
              ],
              "action": "session-disconnected"
            },
            "4781": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ],
              "action": "renamed-user-account"
            },
            "4798": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "info"
              ],
              "action": "group-membership-enumerated"
            },
            "4799": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "info"
              ],
              "action": "user-member-enumerated"
            },
            "4817": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "admin",
                "change"
              ],
              "action": "object-audit-changed"
            },
            "4902": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "admin",
                "creation"
              ],
              "action": "user-audit-policy-created"
            },
            "4904": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "admin",
                "change"
              ],
              "action": "security-event-source-added"
            },
            "4905": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "admin",
                "deletion"
              ],
              "action": "security-event-source-removed"
            },
            "4906": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "admin",
                "change"
              ],
              "action": "crash-on-audit-changed"
            },
            "4907": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "admin",
                "change"
              ],
              "action": "audit-setting-changed"
            },
            "4908": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "admin",
                "change"
              ],
              "action": "special-group-table-changed"
            },
            "4912": {
              "category": [
                "iam",
                "configuration"
              ],
              "type": [
                "admin",
                "change"
              ],
              "action": "per-user-audit-policy-changed"
            },
            "4950": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ],
              "action": "windows-firewall-setting-changed"
            },
            "4954": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ],
              "action": "windows-firewall-group-policy-changed"
            },
            "4964": {
              "category": [
                "iam"
              ],
              "type": [
                "admin",
                "group"
              ],
              "action": "logged-in-special"
            },
            "5024": {
              "category": [
                "process"
              ],
              "type": [
                "start"
              ],
              "action": "windows-firewall-service-started"
            },
            "5025": {
              "category": [
                "process"
              ],
              "type": [
                "end"
              ],
              "action": "windows-firewall-service-stopped"
            },
            "5033": {
              "category": [
                "driver"
              ],
              "type": [
                "start"
              ],
              "action": "windows-firewall-driver-started"
            },
            "5034": {
              "category": [
                "driver"
              ],
              "type": [
                "end"
              ],
              "action": "windows-firewall-driver-stopped"
            },
            "5037": {
              "category": [
                "driver"
              ],
              "type": [
                "end"
              ],
              "action": "windows-firewall-driver-error"
            }
          },
          "source": "if (ctx?.event?.code == null || params.get(ctx.event.code) == null) {\n  return;\n}\ndef hm = new HashMap(params.get(ctx.event.code));\nhm.forEach((k, v) -> ctx.event[k] = v);"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Set Logon Type",
          "description": "Set Logon Type",
          "params": {
            "2": "Interactive",
            "3": "Network",
            "4": "Batch",
            "5": "Service",
            "7": "Unlock",
            "8": "NetworkCleartext",
            "9": "NewCredentials",
            "10": "RemoteInteractive",
            "11": "CachedInteractive"
          },
          "source": "if (ctx?.winlog?.event_data?.LogonType == null) {\n  return;\n}\ndef t = params.get(ctx.winlog.event_data.LogonType);\nif (t == null) {\n  return;\n}\nif (ctx?.winlog?.logon == null ) {\n  Map map = new HashMap();\n  ctx.winlog.put(\"logon\", map);\n}\nctx.winlog.logon.put(\"type\", t)"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Set User Account Control",
          "description": "Set User Account Control",
          "params": {
            "0x00000001": "SCRIPT",
            "0x00000002": "ACCOUNTDISABLE",
            "0x00000008": "HOMEDIR_REQUIRED",
            "0x00000010": "LOCKOUT",
            "0x00000020": "PASSWD_NOTREQD",
            "0x00000040": "PASSWD_CANT_CHANGE",
            "0x00000080": "ENCRYPTED_TEXT_PWD_ALLOWED",
            "0x00000100": "TEMP_DUPLICATE_ACCOUNT",
            "0x00000200": "NORMAL_ACCOUNT",
            "0x00000800": "INTERDOMAIN_TRUST_ACCOUNT",
            "0x00001000": "WORKSTATION_TRUST_ACCOUNT",
            "0x00002000": "SERVER_TRUST_ACCOUNT",
            "0x00010000": "DONT_EXPIRE_PASSWORD",
            "0x00020000": "MNS_LOGON_ACCOUNT",
            "0x00040000": "SMARTCARD_REQUIRED",
            "0x00080000": "TRUSTED_FOR_DELEGATION",
            "0x00100000": "NOT_DELEGATED",
            "0x00200000": "USE_DES_KEY_ONLY",
            "0x00400000": "DONT_REQ_PREAUTH",
            "0x00800000": "PASSWORD_EXPIRED",
            "0x01000000": "TRUSTED_TO_AUTH_FOR_DELEGATION",
            "0x04000000": "PARTIAL_SECRETS_ACCOUNT"
          },
          "source": "if (ctx.winlog?.event_data == null) {\n  return;\n}\nif (ctx.winlog.event_data.NewUacValue == null || ctx.winlog.event_data.NewUacValue == \"-\") {\n  return;\n}\nLong newUacValue = Long.decode(ctx.winlog.event_data.NewUacValue);\nArrayList uacResult = new ArrayList();\nfor (entry in params.entrySet()) {\n  Long flag = Long.decode(entry.getKey());\n  if ((newUacValue.longValue() & flag.longValue()) == flag.longValue()) {\n    uacResult.add(entry.getValue());\n  }\n}\nif (uacResult.length == 0) {\n  return;\n}\nctx.winlog.event_data.put(\"NewUACList\", uacResult);\nif (ctx.winlog.event_data.UserAccountControl == null || ctx.winlog.event_data.UserAccountControl == \"-\") {\n  return;\n}\nArrayList uac_array = new ArrayList();\nfor (elem in ctx.winlog.event_data.UserAccountControl.splitOnToken(\"%%\")) {\n  if (elem.trim().length() > 0) {\n    uac_array.add(elem.trim());\n  }\n}\nctx.winlog.event_data.UserAccountControl = uac_array;"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Set Kerberos Ticket Options",
          "description": "Set Kerberos Ticket Options",
          "params": {
            "0x40000000": "Forwardable",
            "0x20000000": "Forwarded",
            "0x10000000": "Proxiable",
            "0x08000000": "Proxy",
            "0x04000000": "Allow-postdate",
            "0x02000000": "Postdated",
            "0x01000000": "Invalid",
            "0x00800000": "Renewable",
            "0x00400000": "Initial",
            "0x00200000": "Pre-authent",
            "0x00100000": "Opt-hardware-auth",
            "0x00080000": "Transited-policy-checked",
            "0x00040000": "Ok-as-delegate",
            "0x00020000": "Request-anonymous",
            "0x00010000": "Name-canonicalize",
            "0x00000020": "Disable-transited-check",
            "0x00000010": "Renewable-ok",
            "0x00000008": "Enc-tkt-in-skey",
            "0x00000002": "Renew",
            "0x00000001": "Validate"
          },
          "source": "if (ctx?.winlog?.event_data?.TicketOptions == null) {\n  return;\n}\nLong tOpts = Long.decode(ctx.winlog.event_data.TicketOptions);\nArrayList tDescs = new ArrayList();\nfor (entry in params.entrySet()) {\n  Long flag = Long.decode(entry.getKey());\n  if ((tOpts.longValue() & flag.longValue()) == flag.longValue()) {\n    tDescs.add(entry.getValue());\n  }\n}\nif (tDescs.length == 0) {\n  return;\n}\nctx.winlog.event_data.put(\"TicketOptionsDescription\", tDescs);"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Set Kerberos Encryption Types",
          "description": "Set Kerberos Encryption Types",
          "params": {
            "0x1": "DES-CBC-CRC",
            "0x3": "DES-CBC-MD5",
            "0x11": "AES128-CTS-HMAC-SHA1-96",
            "0x12": "AES256-CTS-HMAC-SHA1-96",
            "0x17": "RC4-HMAC",
            "0x18": "RC4-HMAC-EXP",
            "0xffffffff": "FAIL"
          },
          "source": "if (ctx?.winlog?.event_data?.TicketEncryptionType == null) {\n  return;\n}\nctx.winlog.event_data.put(\"TicketEncryptionTypeDescription\",\n                          params[ctx.winlog.event_data.TicketEncryptionType.toLowerCase()])"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Set Kerberos Ticket Status Codes",
          "description": "Set Kerberos Ticket Status Codes",
          "params": {
            "0x0": "KDC_ERR_NONE",
            "0x1": "KDC_ERR_NAME_EXP",
            "0x2": "KDC_ERR_SERVICE_EXP",
            "0x3": "KDC_ERR_BAD_PVNO",
            "0x4": "KDC_ERR_C_OLD_MAST_KVNO",
            "0x5": "KDC_ERR_S_OLD_MAST_KVNO",
            "0x6": "KDC_ERR_C_PRINCIPAL_UNKNOWN",
            "0x7": "KDC_ERR_S_PRINCIPAL_UNKNOWN",
            "0x8": "KDC_ERR_PRINCIPAL_NOT_UNIQUE",
            "0x9": "KDC_ERR_NULL_KEY",
            "0xA": "KDC_ERR_CANNOT_POSTDATE",
            "0xB": "KDC_ERR_NEVER_VALID",
            "0xC": "KDC_ERR_POLICY",
            "0xD": "KDC_ERR_BADOPTION",
            "0xE": "KDC_ERR_ETYPE_NOTSUPP",
            "0xF": "KDC_ERR_SUMTYPE_NOSUPP",
            "0x10": "KDC_ERR_PADATA_TYPE_NOSUPP",
            "0x11": "KDC_ERR_TRTYPE_NO_SUPP",
            "0x12": "KDC_ERR_CLIENT_REVOKED",
            "0x13": "KDC_ERR_SERVICE_REVOKED",
            "0x14": "KDC_ERR_TGT_REVOKED",
            "0x15": "KDC_ERR_CLIENT_NOTYET",
            "0x16": "KDC_ERR_SERVICE_NOTYET",
            "0x17": "KDC_ERR_KEY_EXPIRED",
            "0x18": "KDC_ERR_PREAUTH_FAILED",
            "0x19": "KDC_ERR_PREAUTH_REQUIRED",
            "0x1A": "KDC_ERR_SERVER_NOMATCH",
            "0x1B": "KDC_ERR_MUST_USE_USER2USER",
            "0x1F": "KRB_AP_ERR_BAD_INTEGRITY",
            "0x20": "KRB_AP_ERR_TKT_EXPIRED",
            "0x21": "KRB_AP_ERR_TKT_NYV",
            "0x22": "KRB_AP_ERR_REPEAT",
            "0x23": "KRB_AP_ERR_NOT_US",
            "0x24": "KRB_AP_ERR_BADMATCH",
            "0x25": "KRB_AP_ERR_SKEW",
            "0x26": "KRB_AP_ERR_BADADDR",
            "0x27": "KRB_AP_ERR_BADVERSION",
            "0x28": "KRB_AP_ERR_MSG_TYPE",
            "0x29": "KRB_AP_ERR_MODIFIED",
            "0x2A": "KRB_AP_ERR_BADORDER",
            "0x2C": "KRB_AP_ERR_BADKEYVER",
            "0x2D": "KRB_AP_ERR_NOKEY",
            "0x2E": "KRB_AP_ERR_MUT_FAIL",
            "0x2F": "KRB_AP_ERR_BADDIRECTION",
            "0x30": "KRB_AP_ERR_METHOD",
            "0x31": "KRB_AP_ERR_BADSEQ",
            "0x32": "KRB_AP_ERR_INAPP_CKSUM",
            "0x33": "KRB_AP_PATH_NOT_ACCEPTED",
            "0x34": "KRB_ERR_RESPONSE_TOO_BIG",
            "0x3C": "KRB_ERR_GENERIC",
            "0x3D": "KRB_ERR_FIELD_TOOLONG",
            "0x3E": "KDC_ERR_CLIENT_NOT_TRUSTED",
            "0x3F": "KDC_ERR_KDC_NOT_TRUSTED",
            "0x40": "KDC_ERR_INVALID_SIG",
            "0x41": "KDC_ERR_KEY_TOO_WEAK",
            "0x42": "KRB_AP_ERR_USER_TO_USER_REQUIRED",
            "0x43": "KRB_AP_ERR_NO_TGT",
            "0x44": "KDC_ERR_WRONG_REALM"
          },
          "source": "if (ctx?.winlog?.event_data?.Status == null ||\n    ctx?.event?.code == null ||\n    ![\"4768\", \"4769\", \"4770\", \"4771\"].contains(ctx.event.code)) {\n  return;\n}\nctx.winlog.event_data.put(\"StatusDescription\", params[ctx.winlog.event_data.Status]);"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Set Service Type and Name",
          "description": "Set Service Type and Name",
          "params": {
            "0x1": "Kernel Driver",
            "0x2": "File System Driver",
            "0x8": "Recognizer Driver",
            "0x10": "Win32 Own Process",
            "0x20": "Win32 Share Process",
            "0x110": "Interactive Own Process",
            "0x120": "Interactive Share Process"
          },
          "source": "if (ctx?.winlog?.event_data?.ServiceName != null) {\n  if (ctx?.service == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"service\", hm);\n  }\n  ctx.service.put(\"name\", ctx.winlog.event_data.ServiceName);\n}\nif (ctx?.winlog.event_data?.ServiceType != null) {\n  if (ctx?.service == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"service\", hm);\n  }\n  ctx.service.put(\"type\", params[ctx.winlog.event_data.ServiceType]);\n}"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Set Audit Information",
          "description": "Set Audit Information",
          "params": {
            "0CCE9210-69AE-11D9-BED3-505054503030": [
              "Security State Change",
              "System"
            ],
            "0CCE9211-69AE-11D9-BED3-505054503030": [
              "Security System Extension",
              "System"
            ],
            "0CCE9212-69AE-11D9-BED3-505054503030": [
              "System Integrity",
              "System"
            ],
            "0CCE9213-69AE-11D9-BED3-505054503030": [
              "IPsec Driver",
              "System"
            ],
            "0CCE9214-69AE-11D9-BED3-505054503030": [
              "Other System Events",
              "System"
            ],
            "0CCE9215-69AE-11D9-BED3-505054503030": [
              "Logon",
              "Logon/Logoff"
            ],
            "0CCE9216-69AE-11D9-BED3-505054503030": [
              "Logoff",
              "Logon/Logoff"
            ],
            "0CCE9217-69AE-11D9-BED3-505054503030": [
              "Account Lockout",
              "Logon/Logoff"
            ],
            "0CCE9218-69AE-11D9-BED3-505054503030": [
              "IPsec Main Mode",
              "Logon/Logoff"
            ],
            "0CCE9219-69AE-11D9-BED3-505054503030": [
              "IPsec Quick Mode",
              "Logon/Logoff"
            ],
            "0CCE921A-69AE-11D9-BED3-505054503030": [
              "IPsec Extended Mode",
              "Logon/Logoff"
            ],
            "0CCE921B-69AE-11D9-BED3-505054503030": [
              "Special Logon",
              "Logon/Logoff"
            ],
            "0CCE921C-69AE-11D9-BED3-505054503030": [
              "Other Logon/Logoff Events",
              "Logon/Logoff"
            ],
            "0CCE9243-69AE-11D9-BED3-505054503030": [
              "Network Policy Server",
              "Logon/Logoff"
            ],
            "0CCE9247-69AE-11D9-BED3-505054503030": [
              "User / Device Claims",
              "Logon/Logoff"
            ],
            "0CCE921D-69AE-11D9-BED3-505054503030": [
              "File System",
              "Object Access"
            ],
            "0CCE921E-69AE-11D9-BED3-505054503030": [
              "Registry",
              "Object Access"
            ],
            "0CCE921F-69AE-11D9-BED3-505054503030": [
              "Kernel Object",
              "Object Access"
            ],
            "0CCE9220-69AE-11D9-BED3-505054503030": [
              "SAM",
              "Object Access"
            ],
            "0CCE9221-69AE-11D9-BED3-505054503030": [
              "Certification Services",
              "Object Access"
            ],
            "0CCE9222-69AE-11D9-BED3-505054503030": [
              "Application Generated",
              "Object Access"
            ],
            "0CCE9223-69AE-11D9-BED3-505054503030": [
              "Handle Manipulation",
              "Object Access"
            ],
            "0CCE9224-69AE-11D9-BED3-505054503030": [
              "File Share",
              "Object Access"
            ],
            "0CCE9225-69AE-11D9-BED3-505054503030": [
              "Filtering Platform Packet Drop",
              "Object Access"
            ],
            "0CCE9226-69AE-11D9-BED3-505054503030": [
              "Filtering Platform Connection ",
              "Object Access"
            ],
            "0CCE9227-69AE-11D9-BED3-505054503030": [
              "Other Object Access Events",
              "Object Access"
            ],
            "0CCE9244-69AE-11D9-BED3-505054503030": [
              "Detailed File Share",
              "Object Access"
            ],
            "0CCE9245-69AE-11D9-BED3-505054503030": [
              "Removable Storage",
              "Object Access"
            ],
            "0CCE9246-69AE-11D9-BED3-505054503030": [
              "Central Policy Staging",
              "Object Access"
            ],
            "0CCE9228-69AE-11D9-BED3-505054503030": [
              "Sensitive Privilege Use",
              "Privilege Use"
            ],
            "0CCE9229-69AE-11D9-BED3-505054503030": [
              "Non Sensitive Privilege Use",
              "Privilege Use"
            ],
            "0CCE922A-69AE-11D9-BED3-505054503030": [
              "Other Privilege Use Events",
              "Privilege Use"
            ],
            "0CCE922B-69AE-11D9-BED3-505054503030": [
              "Process Creation",
              "Detailed Tracking"
            ],
            "0CCE922C-69AE-11D9-BED3-505054503030": [
              "Process Termination",
              "Detailed Tracking"
            ],
            "0CCE922D-69AE-11D9-BED3-505054503030": [
              "DPAPI Activity",
              "Detailed Tracking"
            ],
            "0CCE922E-69AE-11D9-BED3-505054503030": [
              "RPC Events",
              "Detailed Tracking"
            ],
            "0CCE9248-69AE-11D9-BED3-505054503030": [
              "Plug and Play Events",
              "Detailed Tracking"
            ],
            "0CCE922F-69AE-11D9-BED3-505054503030": [
              "Audit Policy Change",
              "Policy Change"
            ],
            "0CCE9230-69AE-11D9-BED3-505054503030": [
              "Authentication Policy Change",
              "Policy Change"
            ],
            "0CCE9231-69AE-11D9-BED3-505054503030": [
              "Authorization Policy Change",
              "Policy Change"
            ],
            "0CCE9232-69AE-11D9-BED3-505054503030": [
              "MPSSVC Rule-Level Policy Change",
              "Policy Change"
            ],
            "0CCE9233-69AE-11D9-BED3-505054503030": [
              "Filtering Platform Policy Change",
              "Policy Change"
            ],
            "0CCE9234-69AE-11D9-BED3-505054503030": [
              "Other Policy Change Events",
              "Policy Change"
            ],
            "0CCE9235-69AE-11D9-BED3-505054503030": [
              "User Account Management",
              "Account Management"
            ],
            "0CCE9236-69AE-11D9-BED3-505054503030": [
              "Computer Account Management",
              "Account Management"
            ],
            "0CCE9237-69AE-11D9-BED3-505054503030": [
              "Security Group Management",
              "Account Management"
            ],
            "0CCE9238-69AE-11D9-BED3-505054503030": [
              "Distribution Group Management",
              "Account Management"
            ],
            "0CCE9239-69AE-11D9-BED3-505054503030": [
              "Application Group Management",
              "Account Management"
            ],
            "0CCE923A-69AE-11D9-BED3-505054503030": [
              "Other Account Management Events",
              "Account Management"
            ],
            "0CCE923B-69AE-11D9-BED3-505054503030": [
              "Directory Service Access",
              "Account Management"
            ],
            "0CCE923C-69AE-11D9-BED3-505054503030": [
              "Directory Service Changes",
              "Account Management"
            ],
            "0CCE923D-69AE-11D9-BED3-505054503030": [
              "Directory Service Replication",
              "Account Management"
            ],
            "0CCE923E-69AE-11D9-BED3-505054503030": [
              "Detailed Directory Service Replication",
              "Account Management"
            ],
            "0CCE923F-69AE-11D9-BED3-505054503030": [
              "Credential Validation",
              "Account Logon"
            ],
            "0CCE9240-69AE-11D9-BED3-505054503030": [
              "Kerberos Service Ticket Operations",
              "Account Logon"
            ],
            "0CCE9241-69AE-11D9-BED3-505054503030": [
              "Other Account Logon Events",
              "Account Logon"
            ],
            "0CCE9242-69AE-11D9-BED3-505054503030": [
              "Kerberos Authentication Service",
              "Account Logon"
            ]
          },
          "source": "if (ctx?.winlog?.event_data?.SubcategoryGuid == null) {\n  return;\n}\ndef subCatGuid = ctx.winlog.event_data.SubcategoryGuid.replace(\"{\",\"\").replace(\"}\",\"\").toUpperCase();\nif (!params.containsKey(subCatGuid)) {\n  return;\n}\nctx.winlog.event_data.put(\"Category\", params[subCatGuid][1]);\nctx.winlog.event_data.put(\"SubCategory\", params[subCatGuid][0]);"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Decode message table",
          "description": "Decode message table",
          "params": {
            "descriptions": {
              "279": "Undefined Access (no effect) Bit 7",
              "1536": "Unused message ID",
              "1537": "DELETE",
              "1538": "READ_CONTROL",
              "1539": "WRITE_DAC",
              "1540": "WRITE_OWNER",
              "1541": "SYNCHRONIZE",
              "1542": "ACCESS_SYS_SEC",
              "1543": "MAX_ALLOWED",
              "1552": "Unknown specific access (bit 0)",
              "1553": "Unknown specific access (bit 1)",
              "1554": "Unknown specific access (bit 2)",
              "1555": "Unknown specific access (bit 3)",
              "1556": "Unknown specific access (bit 4)",
              "1557": "Unknown specific access (bit 5)",
              "1558": "Unknown specific access (bit 6)",
              "1559": "Unknown specific access (bit 7)",
              "1560": "Unknown specific access (bit 8)",
              "1561": "Unknown specific access (bit 9)",
              "1562": "Unknown specific access (bit 10)",
              "1563": "Unknown specific access (bit 11)",
              "1564": "Unknown specific access (bit 12)",
              "1565": "Unknown specific access (bit 13)",
              "1566": "Unknown specific access (bit 14)",
              "1567": "Unknown specific access (bit 15)",
              "1601": "Not used",
              "1603": "Assign Primary Token Privilege",
              "1604": "Lock Memory Privilege",
              "1605": "Increase Memory Quota Privilege",
              "1606": "Unsolicited Input Privilege",
              "1607": "Trusted Computer Base Privilege",
              "1608": "Security Privilege",
              "1609": "Take Ownership Privilege",
              "1610": "Load/Unload Driver Privilege",
              "1611": "Profile System Privilege",
              "1612": "Set System Time Privilege",
              "1613": "Profile Single Process Privilege",
              "1614": "Increment Base Priority Privilege",
              "1615": "Create Pagefile Privilege",
              "1616": "Create Permanent Object Privilege",
              "1617": "Backup Privilege",
              "1618": "Restore From Backup Privilege",
              "1619": "Shutdown System Privilege",
              "1620": "Debug Privilege",
              "1621": "View or Change Audit Log Privilege",
              "1622": "Change Hardware Environment Privilege",
              "1623": "Change Notify (and Traverse) Privilege",
              "1624": "Remotely Shut System Down Privilege",
              "1792": "<value changed",
              "1793": "<value not set>",
              "1794": "<never>",
              "1795": "Enabled",
              "1796": "Disabled",
              "1797": "All",
              "1798": "None",
              "1799": "Audit Policy query/set API Operation",
              "1800": "<Value change auditing for this registry type is not supported>",
              "1801": "Granted by",
              "1802": "Denied by",
              "1803": "Denied by Integrity Policy check",
              "1804": "Granted by Ownership",
              "1805": "Not granted",
              "1806": "Granted by NULL DACL",
              "1807": "Denied by Empty DACL",
              "1808": "Granted by NULL Security Descriptor",
              "1809": "Unknown or unchecked",
              "1810": "Not granted due to missing",
              "1811": "Granted by ACE on parent folder",
              "1812": "Denied by ACE on parent folder",
              "1813": "Granted by Central Access Rule",
              "1814": "NOT Granted by Central Access Rule",
              "1815": "Granted by parent folder's Central Access Rule",
              "1816": "NOT Granted by parent folder's Central Access Rule",
              "1817": "Unknown Type",
              "1818": "String",
              "1819": "Unsigned 64-bit Integer",
              "1820": "64-bit Integer",
              "1821": "FQBN",
              "1822": "Blob",
              "1823": "Sid",
              "1824": "Boolean",
              "1825": "TRUE",
              "1826": "FALSE",
              "1827": "Invalid",
              "1828": "an ACE too long to display",
              "1829": "a Security Descriptor too long to display",
              "1830": "Not granted to AppContainers",
              "1831": "...",
              "1832": "Identification",
              "1833": "Impersonation",
              "1840": "Delegation",
              "1841": "Denied by Process Trust Label ACE",
              "1842": "Yes",
              "1843": "No",
              "1844": "System",
              "1845": "Not Available",
              "1846": "Default",
              "1847": "DisallowMmConfig",
              "1848": "Off",
              "1849": "Auto",
              "1872": "REG_NONE",
              "1873": "REG_SZ",
              "1874": "REG_EXPAND_SZ",
              "1875": "REG_BINARY",
              "1876": "REG_DWORD",
              "1877": "REG_DWORD_BIG_ENDIAN",
              "1878": "REG_LINK",
              "1879": "REG_MULTI_SZ (New lines are replaced with *. A * is replaced with **)",
              "1880": "REG_RESOURCE_LIST",
              "1881": "REG_FULL_RESOURCE_DESCRIPTOR",
              "1882": "REG_RESOURCE_REQUIREMENTS_LIST",
              "1883": "REG_QWORD",
              "1904": "New registry value created",
              "1905": "Existing registry value modified",
              "1906": "Registry value deleted",
              "1920": "Sunday",
              "1921": "Monday",
              "1922": "Tuesday",
              "1923": "Wednesday",
              "1924": "Thursday",
              "1925": "Friday",
              "1926": "Saturday",
              "1936": "TokenElevationTypeDefault (1)",
              "1937": "TokenElevationTypeFull (2)",
              "1938": "TokenElevationTypeLimited (3)",
              "2048": "Account Enabled",
              "2049": "Home Directory Required' - Disabled",
              "2050": "Password Not Required' - Disabled",
              "2051": "Temp Duplicate Account' - Disabled",
              "2052": "Normal Account' - Disabled",
              "2053": "MNS Logon Account' - Disabled",
              "2054": "Interdomain Trust Account' - Disabled",
              "2055": "Workstation Trust Account' - Disabled",
              "2056": "Server Trust Account' - Disabled",
              "2057": "Don't Expire Password' - Disabled",
              "2058": "Account Unlocked",
              "2059": "Encrypted Text Password Allowed' - Disabled",
              "2060": "Smartcard Required' - Disabled",
              "2061": "Trusted For Delegation' - Disabled",
              "2062": "Not Delegated' - Disabled",
              "2063": "Use DES Key Only' - Disabled",
              "2064": "Don't Require Preauth' - Disabled",
              "2065": "Password Expired' - Disabled",
              "2066": "Trusted To Authenticate For Delegation' - Disabled",
              "2067": "Exclude Authorization Information' - Disabled",
              "2068": "Undefined UserAccountControl Bit 20' - Disabled",
              "2069": "Protect Kerberos Service Tickets with AES Keys' - Disabled",
              "2070": "Undefined UserAccountControl Bit 22' - Disabled",
              "2071": "Undefined UserAccountControl Bit 23' - Disabled",
              "2072": "Undefined UserAccountControl Bit 24' - Disabled",
              "2073": "Undefined UserAccountControl Bit 25' - Disabled",
              "2074": "Undefined UserAccountControl Bit 26' - Disabled",
              "2075": "Undefined UserAccountControl Bit 27' - Disabled",
              "2076": "Undefined UserAccountControl Bit 28' - Disabled",
              "2077": "Undefined UserAccountControl Bit 29' - Disabled",
              "2078": "Undefined UserAccountControl Bit 30' - Disabled",
              "2079": "Undefined UserAccountControl Bit 31' - Disabled",
              "2080": "Account Disabled",
              "2081": "Home Directory Required' - Enabled",
              "2082": "Password Not Required' - Enabled",
              "2083": "Temp Duplicate Account' - Enabled",
              "2084": "Normal Account' - Enabled",
              "2085": "MNS Logon Account' - Enabled",
              "2086": "Interdomain Trust Account' - Enabled",
              "2087": "Workstation Trust Account' - Enabled",
              "2088": "Server Trust Account' - Enabled",
              "2089": "Don't Expire Password' - Enabled",
              "2090": "Account Locked",
              "2091": "Encrypted Text Password Allowed' - Enabled",
              "2092": "Smartcard Required' - Enabled",
              "2093": "Trusted For Delegation' - Enabled",
              "2094": "Not Delegated' - Enabled",
              "2095": "Use DES Key Only' - Enabled",
              "2096": "Don't Require Preauth' - Enabled",
              "2097": "Password Expired' - Enabled",
              "2098": "Trusted To Authenticate For Delegation' - Enabled",
              "2099": "Exclude Authorization Information' - Enabled",
              "2100": "Undefined UserAccountControl Bit 20' - Enabled",
              "2101": "Protect Kerberos Service Tickets with AES Keys' - Enabled",
              "2102": "Undefined UserAccountControl Bit 22' - Enabled",
              "2103": "Undefined UserAccountControl Bit 23' - Enabled",
              "2104": "Undefined UserAccountControl Bit 24' - Enabled",
              "2105": "Undefined UserAccountControl Bit 25' - Enabled",
              "2106": "Undefined UserAccountControl Bit 26' - Enabled",
              "2107": "Undefined UserAccountControl Bit 27' - Enabled",
              "2108": "Undefined UserAccountControl Bit 28' - Enabled",
              "2109": "Undefined UserAccountControl Bit 29' - Enabled",
              "2110": "Undefined UserAccountControl Bit 30' - Enabled",
              "2111": "Undefined UserAccountControl Bit 31' - Enabled",
              "2304": "An Error occured during Logon.",
              "2305": "The specified user account has expired.",
              "2306": "The NetLogon component is not active.",
              "2307": "Account locked out.",
              "2308": "The user has not been granted the requested logon type at this machine.",
              "2309": "The specified account's password has expired.",
              "2310": "Account currently disabled.",
              "2311": "Account logon time restriction violation.",
              "2312": "User not allowed to logon at this computer.",
              "2313": "Unknown user name or bad password.",
              "2314": "Domain sid inconsistent.",
              "2315": "Smartcard logon is required and was not used.",
              "2432": "Not Available.",
              "2436": "Random number generator failure.",
              "2437": "Random number generation failed FIPS-140 pre-hash check.",
              "2438": "Failed to zero secret data.",
              "2439": "Key failed pair wise consistency check.",
              "2448": "Failed to unprotect persistent cryptographic key.",
              "2449": "Key export checks failed.",
              "2450": "Validation of public key failed.",
              "2451": "Signature verification failed.",
              "2456": "Open key file.",
              "2457": "Delete key file.",
              "2458": "Read persisted key from file.",
              "2459": "Write persisted key to file.",
              "2464": "Export of persistent cryptographic key.",
              "2465": "Import of persistent cryptographic key.",
              "2480": "Open Key.",
              "2481": "Create Key.",
              "2482": "Delete Key.",
              "2483": "Encrypt.",
              "2484": "Decrypt.",
              "2485": "Sign hash.",
              "2486": "Secret agreement.",
              "2487": "Domain settings",
              "2488": "Local settings",
              "2489": "Add provider.",
              "2490": "Remove provider.",
              "2491": "Add context.",
              "2492": "Remove context.",
              "2493": "Add function.",
              "2494": "Remove function.",
              "2495": "Add function provider.",
              "2496": "Remove function provider.",
              "2497": "Add function property.",
              "2498": "Remove function property.",
              "2499": "Machine key.",
              "2500": "User key.",
              "2501": "Key Derivation.",
              "4352": "Device Access Bit 0",
              "4353": "Device Access Bit 1",
              "4354": "Device Access Bit 2",
              "4355": "Device Access Bit 3",
              "4356": "Device Access Bit 4",
              "4357": "Device Access Bit 5",
              "4358": "Device Access Bit 6",
              "4359": "Device Access Bit 7",
              "4360": "Device Access Bit 8",
              "4361": "Undefined Access (no effect) Bit 9",
              "4362": "Undefined Access (no effect) Bit 10",
              "4363": "Undefined Access (no effect) Bit 11",
              "4364": "Undefined Access (no effect) Bit 12",
              "4365": "Undefined Access (no effect) Bit 13",
              "4366": "Undefined Access (no effect) Bit 14",
              "4367": "Undefined Access (no effect) Bit 15",
              "4368": "Query directory",
              "4369": "Traverse",
              "4370": "Create object in directory",
              "4371": "Create sub-directory",
              "4372": "Undefined Access (no effect) Bit 4",
              "4373": "Undefined Access (no effect) Bit 5",
              "4374": "Undefined Access (no effect) Bit 6",
              "4375": "Undefined Access (no effect) Bit 7",
              "4376": "Undefined Access (no effect) Bit 8",
              "4377": "Undefined Access (no effect) Bit 9",
              "4378": "Undefined Access (no effect) Bit 10",
              "4379": "Undefined Access (no effect) Bit 11",
              "4380": "Undefined Access (no effect) Bit 12",
              "4381": "Undefined Access (no effect) Bit 13",
              "4382": "Undefined Access (no effect) Bit 14",
              "4383": "Undefined Access (no effect) Bit 15",
              "4384": "Query event state",
              "4385": "Modify event state",
              "4386": "Undefined Access (no effect) Bit 2",
              "4387": "Undefined Access (no effect) Bit 3",
              "4388": "Undefined Access (no effect) Bit 4",
              "4389": "Undefined Access (no effect) Bit 5",
              "4390": "Undefined Access (no effect) Bit 6",
              "4391": "Undefined Access (no effect) Bit 7",
              "4392": "Undefined Access (no effect) Bit 8",
              "4393": "Undefined Access (no effect) Bit 9",
              "4394": "Undefined Access (no effect) Bit 10",
              "4395": "Undefined Access (no effect) Bit 11",
              "4396": "Undefined Access (no effect) Bit 12",
              "4397": "Undefined Access (no effect) Bit 13",
              "4398": "Undefined Access (no effect) Bit 14",
              "4399": "Undefined Access (no effect) Bit 15",
              "4416": "ReadData (or ListDirectory)",
              "4417": "WriteData (or AddFile)",
              "4418": "AppendData (or AddSubdirectory or CreatePipeInstance)",
              "4419": "ReadEA",
              "4420": "WriteEA",
              "4421": "Execute/Traverse",
              "4422": "DeleteChild",
              "4423": "ReadAttributes",
              "4424": "WriteAttributes",
              "4425": "Undefined Access (no effect) Bit 9",
              "4426": "Undefined Access (no effect) Bit 10",
              "4427": "Undefined Access (no effect) Bit 11",
              "4428": "Undefined Access (no effect) Bit 12",
              "4429": "Undefined Access (no effect) Bit 13",
              "4430": "Undefined Access (no effect) Bit 14",
              "4431": "Undefined Access (no effect) Bit 15",
              "4432": "Query key value",
              "4433": "Set key value",
              "4434": "Create sub-key",
              "4435": "Enumerate sub-keys",
              "4436": "Notify about changes to keys",
              "4437": "Create Link",
              "4438": "Undefined Access (no effect) Bit 6",
              "4439": "Undefined Access (no effect) Bit 7",
              "4440": "Enable 64(or 32) bit application to open 64 bit key",
              "4441": "Enable 64(or 32) bit application to open 32 bit key",
              "4442": "Undefined Access (no effect) Bit 10",
              "4443": "Undefined Access (no effect) Bit 11",
              "4444": "Undefined Access (no effect) Bit 12",
              "4445": "Undefined Access (no effect) Bit 13",
              "4446": "Undefined Access (no effect) Bit 14",
              "4447": "Undefined Access (no effect) Bit 15",
              "4448": "Query mutant state",
              "4449": "Undefined Access (no effect) Bit 1",
              "4450": "Undefined Access (no effect) Bit 2",
              "4451": "Undefined Access (no effect) Bit 3",
              "4452": "Undefined Access (no effect) Bit 4",
              "4453": "Undefined Access (no effect) Bit 5",
              "4454": "Undefined Access (no effect) Bit 6",
              "4455": "Undefined Access (no effect) Bit 7",
              "4456": "Undefined Access (no effect) Bit 8",
              "4457": "Undefined Access (no effect) Bit 9",
              "4458": "Undefined Access (no effect) Bit 10",
              "4459": "Undefined Access (no effect) Bit 11",
              "4460": "Undefined Access (no effect) Bit 12",
              "4461": "Undefined Access (no effect) Bit 13",
              "4462": "Undefined Access (no effect) Bit 14",
              "4463": "Undefined Access (no effect) Bit 15",
              "4464": "Communicate using port",
              "4465": "Undefined Access (no effect) Bit 1",
              "4466": "Undefined Access (no effect) Bit 2",
              "4467": "Undefined Access (no effect) Bit 3",
              "4468": "Undefined Access (no effect) Bit 4",
              "4469": "Undefined Access (no effect) Bit 5",
              "4470": "Undefined Access (no effect) Bit 6",
              "4471": "Undefined Access (no effect) Bit 7",
              "4472": "Undefined Access (no effect) Bit 8",
              "4473": "Undefined Access (no effect) Bit 9",
              "4474": "Undefined Access (no effect) Bit 10",
              "4475": "Undefined Access (no effect) Bit 11",
              "4476": "Undefined Access (no effect) Bit 12",
              "4477": "Undefined Access (no effect) Bit 13",
              "4478": "Undefined Access (no effect) Bit 14",
              "4479": "Undefined Access (no effect) Bit 15",
              "4480": "Force process termination",
              "4481": "Create new thread in process",
              "4482": "Set process session ID",
              "4483": "Perform virtual memory operation",
              "4484": "Read from process memory",
              "4485": "Write to process memory",
              "4486": "Duplicate handle into or out of process",
              "4487": "Create a subprocess of process",
              "4488": "Set process quotas",
              "4489": "Set process information",
              "4490": "Query process information",
              "4491": "Set process termination port",
              "4492": "Undefined Access (no effect) Bit 12",
              "4493": "Undefined Access (no effect) Bit 13",
              "4494": "Undefined Access (no effect) Bit 14",
              "4495": "Undefined Access (no effect) Bit 15",
              "4496": "Control profile",
              "4497": "Undefined Access (no effect) Bit 1",
              "4498": "Undefined Access (no effect) Bit 2",
              "4499": "Undefined Access (no effect) Bit 3",
              "4500": "Undefined Access (no effect) Bit 4",
              "4501": "Undefined Access (no effect) Bit 5",
              "4502": "Undefined Access (no effect) Bit 6",
              "4503": "Undefined Access (no effect) Bit 7",
              "4504": "Undefined Access (no effect) Bit 8",
              "4505": "Undefined Access (no effect) Bit 9",
              "4506": "Undefined Access (no effect) Bit 10",
              "4507": "Undefined Access (no effect) Bit 11",
              "4508": "Undefined Access (no effect) Bit 12",
              "4509": "Undefined Access (no effect) Bit 13",
              "4510": "Undefined Access (no effect) Bit 14",
              "4511": "Undefined Access (no effect) Bit 15",
              "4512": "Query section state",
              "4513": "Map section for write",
              "4514": "Map section for read",
              "4515": "Map section for execute",
              "4516": "Extend size",
              "4517": "Undefined Access (no effect) Bit 5",
              "4518": "Undefined Access (no effect) Bit 6",
              "4519": "Undefined Access (no effect) Bit 7",
              "4520": "Undefined Access (no effect) Bit 8",
              "4521": "Undefined Access (no effect) Bit 9",
              "4522": "Undefined Access (no effect) Bit 10",
              "4523": "Undefined Access (no effect) Bit 11",
              "4524": "Undefined Access (no effect) Bit 12",
              "4525": "Undefined Access (no effect) Bit 13",
              "4526": "Undefined Access (no effect) Bit 14",
              "4527": "Undefined Access (no effect) Bit 15",
              "4528": "Query semaphore state",
              "4529": "Modify semaphore state",
              "4530": "Undefined Access (no effect) Bit 2",
              "4531": "Undefined Access (no effect) Bit 3",
              "4532": "Undefined Access (no effect) Bit 4",
              "4533": "Undefined Access (no effect) Bit 5",
              "4534": "Undefined Access (no effect) Bit 6",
              "4535": "Undefined Access (no effect) Bit 7",
              "4536": "Undefined Access (no effect) Bit 8",
              "4537": "Undefined Access (no effect) Bit 9",
              "4538": "Undefined Access (no effect) Bit 10",
              "4539": "Undefined Access (no effect) Bit 11",
              "4540": "Undefined Access (no effect) Bit 12",
              "4541": "Undefined Access (no effect) Bit 13",
              "4542": "Undefined Access (no effect) Bit 14",
              "4543": "Undefined Access (no effect) Bit 15",
              "4544": "Use symbolic link",
              "4545": "Undefined Access (no effect) Bit 1",
              "4546": "Undefined Access (no effect) Bit 2",
              "4547": "Undefined Access (no effect) Bit 3",
              "4548": "Undefined Access (no effect) Bit 4",
              "4549": "Undefined Access (no effect) Bit 5",
              "4550": "Undefined Access (no effect) Bit 6",
              "4551": "Undefined Access (no effect) Bit 7",
              "4552": "Undefined Access (no effect) Bit 8",
              "4553": "Undefined Access (no effect) Bit 9",
              "4554": "Undefined Access (no effect) Bit 10",
              "4555": "Undefined Access (no effect) Bit 11",
              "4556": "Undefined Access (no effect) Bit 12",
              "4557": "Undefined Access (no effect) Bit 13",
              "4558": "Undefined Access (no effect) Bit 14",
              "4559": "Undefined Access (no effect) Bit 15",
              "4560": "Force thread termination",
              "4561": "Suspend or resume thread",
              "4562": "Send an alert to thread",
              "4563": "Get thread context",
              "4564": "Set thread context",
              "4565": "Set thread information",
              "4566": "Query thread information",
              "4567": "Assign a token to the thread",
              "4568": "Cause thread to directly impersonate another thread",
              "4569": "Directly impersonate this thread",
              "4570": "Undefined Access (no effect) Bit 10",
              "4571": "Undefined Access (no effect) Bit 11",
              "4572": "Undefined Access (no effect) Bit 12",
              "4573": "Undefined Access (no effect) Bit 13",
              "4574": "Undefined Access (no effect) Bit 14",
              "4575": "Undefined Access (no effect) Bit 15",
              "4576": "Query timer state",
              "4577": "Modify timer state",
              "4578": "Undefined Access (no effect) Bit 2",
              "4579": "Undefined Access (no effect) Bit 3",
              "4580": "Undefined Access (no effect) Bit 4",
              "4581": "Undefined Access (no effect) Bit 5",
              "4582": "Undefined Access (no effect) Bit 6",
              "4584": "Undefined Access (no effect) Bit 8",
              "4585": "Undefined Access (no effect) Bit 9",
              "4586": "Undefined Access (no effect) Bit 10",
              "4587": "Undefined Access (no effect) Bit 11",
              "4588": "Undefined Access (no effect) Bit 12",
              "4589": "Undefined Access (no effect) Bit 13",
              "4590": "Undefined Access (no effect) Bit 14",
              "4591": "Undefined Access (no effect) Bit 15",
              "4592": "AssignAsPrimary",
              "4593": "Duplicate",
              "4594": "Impersonate",
              "4595": "Query",
              "4596": "QuerySource",
              "4597": "AdjustPrivileges",
              "4598": "AdjustGroups",
              "4599": "AdjustDefaultDacl",
              "4600": "AdjustSessionID",
              "4601": "Undefined Access (no effect) Bit 9",
              "4602": "Undefined Access (no effect) Bit 10",
              "4603": "Undefined Access (no effect) Bit 11",
              "4604": "Undefined Access (no effect) Bit 12",
              "4605": "Undefined Access (no effect) Bit 13",
              "4606": "Undefined Access (no effect) Bit 14",
              "4607": "Undefined Access (no effect) Bit 15",
              "4608": "Create instance of object type",
              "4609": "Undefined Access (no effect) Bit 1",
              "4610": "Undefined Access (no effect) Bit 2",
              "4611": "Undefined Access (no effect) Bit 3",
              "4612": "Undefined Access (no effect) Bit 4",
              "4613": "Undefined Access (no effect) Bit 5",
              "4614": "Undefined Access (no effect) Bit 6",
              "4615": "Undefined Access (no effect) Bit 7",
              "4616": "Undefined Access (no effect) Bit 8",
              "4617": "Undefined Access (no effect) Bit 9",
              "4618": "Undefined Access (no effect) Bit 10",
              "4619": "Undefined Access (no effect) Bit 11",
              "4620": "Undefined Access (no effect) Bit 12",
              "4621": "Undefined Access (no effect) Bit 13",
              "4622": "Undefined Access (no effect) Bit 14",
              "4623": "Undefined Access (no effect) Bit 15",
              "4864": "Query State",
              "4865": "Modify State",
              "5120": "Channel read message",
              "5121": "Channel write message",
              "5122": "Channel query information",
              "5123": "Channel set information",
              "5124": "Undefined Access (no effect) Bit 4",
              "5125": "Undefined Access (no effect) Bit 5",
              "5126": "Undefined Access (no effect) Bit 6",
              "5127": "Undefined Access (no effect) Bit 7",
              "5128": "Undefined Access (no effect) Bit 8",
              "5129": "Undefined Access (no effect) Bit 9",
              "5130": "Undefined Access (no effect) Bit 10",
              "5131": "Undefined Access (no effect) Bit 11",
              "5132": "Undefined Access (no effect) Bit 12",
              "5133": "Undefined Access (no effect) Bit 13",
              "5134": "Undefined Access (no effect) Bit 14",
              "5135": "Undefined Access (no effect) Bit 15",
              "5136": "Assign process",
              "5137": "Set Attributes",
              "5138": "Query Attributes",
              "5139": "Terminate Job",
              "5140": "Set Security Attributes",
              "5141": "Undefined Access (no effect) Bit 5",
              "5142": "Undefined Access (no effect) Bit 6",
              "5143": "Undefined Access (no effect) Bit 7",
              "5144": "Undefined Access (no effect) Bit 8",
              "5145": "Undefined Access (no effect) Bit 9",
              "5146": "Undefined Access (no effect) Bit 10",
              "5147": "Undefined Access (no effect) Bit 11",
              "5148": "Undefined Access (no effect) Bit 12",
              "5149": "Undefined Access (no effect) Bit 13",
              "5150": "Undefined Access (no effect) Bit 14",
              "5151": "Undefined Access (no effect) Bit 15",
              "5376": "ConnectToServer",
              "5377": "ShutdownServer",
              "5378": "InitializeServer",
              "5379": "CreateDomain",
              "5380": "EnumerateDomains",
              "5381": "LookupDomain",
              "5382": "Undefined Access (no effect) Bit 6",
              "5383": "Undefined Access (no effect) Bit 7",
              "5384": "Undefined Access (no effect) Bit 8",
              "5385": "Undefined Access (no effect) Bit 9",
              "5386": "Undefined Access (no effect) Bit 10",
              "5387": "Undefined Access (no effect) Bit 11",
              "5388": "Undefined Access (no effect) Bit 12",
              "5389": "Undefined Access (no effect) Bit 13",
              "5390": "Undefined Access (no effect) Bit 14",
              "5391": "Undefined Access (no effect) Bit 15",
              "5392": "ReadPasswordParameters",
              "5393": "WritePasswordParameters",
              "5394": "ReadOtherParameters",
              "5395": "WriteOtherParameters",
              "5396": "CreateUser",
              "5397": "CreateGlobalGroup",
              "5398": "CreateLocalGroup",
              "5399": "GetLocalGroupMembership",
              "5400": "ListAccounts",
              "5401": "LookupIDs",
              "5402": "AdministerServer",
              "5403": "Undefined Access (no effect) Bit 11",
              "5404": "Undefined Access (no effect) Bit 12",
              "5405": "Undefined Access (no effect) Bit 13",
              "5406": "Undefined Access (no effect) Bit 14",
              "5407": "Undefined Access (no effect) Bit 15",
              "5408": "ReadInformation",
              "5409": "WriteAccount",
              "5410": "AddMember",
              "5411": "RemoveMember",
              "5412": "ListMembers",
              "5413": "Undefined Access (no effect) Bit 5",
              "5414": "Undefined Access (no effect) Bit 6",
              "5415": "Undefined Access (no effect) Bit 7",
              "5416": "Undefined Access (no effect) Bit 8",
              "5417": "Undefined Access (no effect) Bit 9",
              "5418": "Undefined Access (no effect) Bit 10",
              "5419": "Undefined Access (no effect) Bit 11",
              "5420": "Undefined Access (no effect) Bit 12",
              "5421": "Undefined Access (no effect) Bit 13",
              "5422": "Undefined Access (no effect) Bit 14",
              "5423": "Undefined Access (no effect) Bit 15",
              "5424": "AddMember",
              "5425": "RemoveMember",
              "5426": "ListMembers",
              "5427": "ReadInformation",
              "5428": "WriteAccount",
              "5429": "Undefined Access (no effect) Bit 5",
              "5430": "Undefined Access (no effect) Bit 6",
              "5431": "Undefined Access (no effect) Bit 7",
              "5432": "Undefined Access (no effect) Bit 8",
              "5433": "Undefined Access (no effect) Bit 9",
              "5434": "Undefined Access (no effect) Bit 10",
              "5435": "Undefined Access (no effect) Bit 11",
              "5436": "Undefined Access (no effect) Bit 12",
              "5437": "Undefined Access (no effect) Bit 13",
              "5438": "Undefined Access (no effect) Bit 14",
              "5439": "Undefined Access (no effect) Bit 15",
              "5440": "ReadGeneralInformation",
              "5441": "ReadPreferences",
              "5442": "WritePreferences",
              "5443": "ReadLogon",
              "5444": "ReadAccount",
              "5445": "WriteAccount",
              "5446": "ChangePassword (with knowledge of old password)",
              "5447": "SetPassword (without knowledge of old password)",
              "5448": "ListGroups",
              "5449": "ReadGroupMembership",
              "5450": "ChangeGroupMembership",
              "5451": "Undefined Access (no effect) Bit 11",
              "5452": "Undefined Access (no effect) Bit 12",
              "5453": "Undefined Access (no effect) Bit 13",
              "5454": "Undefined Access (no effect) Bit 14",
              "5455": "Undefined Access (no effect) Bit 15",
              "5632": "View non-sensitive policy information",
              "5633": "View system audit requirements",
              "5634": "Get sensitive policy information",
              "5635": "Modify domain trust relationships",
              "5636": "Create special accounts (for assignment of user rights)",
              "5637": "Create a secret object",
              "5638": "Create a privilege",
              "5639": "Set default quota limits",
              "5640": "Change system audit requirements",
              "5641": "Administer audit log attributes",
              "5642": "Enable/Disable LSA",
              "5643": "Lookup Names/SIDs",
              "5648": "Change secret value",
              "5649": "Query secret value",
              "5650": "Undefined Access (no effect) Bit 2",
              "5651": "Undefined Access (no effect) Bit 3",
              "5652": "Undefined Access (no effect) Bit 4",
              "5653": "Undefined Access (no effect) Bit 5",
              "5654": "Undefined Access (no effect) Bit 6",
              "5655": "Undefined Access (no effect) Bit 7",
              "5656": "Undefined Access (no effect) Bit 8",
              "5657": "Undefined Access (no effect) Bit 9",
              "5658": "Undefined Access (no effect) Bit 10",
              "5659": "Undefined Access (no effect) Bit 11",
              "5660": "Undefined Access (no effect) Bit 12",
              "5661": "Undefined Access (no effect) Bit 13",
              "5662": "Undefined Access (no effect) Bit 14",
              "5663": "Undefined Access (no effect) Bit 15",
              "5664": "Query trusted domain name/SID",
              "5665": "Retrieve the controllers in the trusted domain",
              "5666": "Change the controllers in the trusted domain",
              "5667": "Query the Posix ID offset assigned to the trusted domain",
              "5668": "Change the Posix ID offset assigned to the trusted domain",
              "5669": "Undefined Access (no effect) Bit 5",
              "5670": "Undefined Access (no effect) Bit 6",
              "5671": "Undefined Access (no effect) Bit 7",
              "5672": "Undefined Access (no effect) Bit 8",
              "5673": "Undefined Access (no effect) Bit 9",
              "5674": "Undefined Access (no effect) Bit 10",
              "5675": "Undefined Access (no effect) Bit 11",
              "5676": "Undefined Access (no effect) Bit 12",
              "5677": "Undefined Access (no effect) Bit 13",
              "5678": "Undefined Access (no effect) Bit 14",
              "5679": "Undefined Access (no effect) Bit 15",
              "5680": "Query account information",
              "5681": "Change privileges assigned to account",
              "5682": "Change quotas assigned to account",
              "5683": "Change logon capabilities assigned to account",
              "5684": "Change the Posix ID offset assigned to the accounted domain",
              "5685": "Undefined Access (no effect) Bit 5",
              "5686": "Undefined Access (no effect) Bit 6",
              "5687": "Undefined Access (no effect) Bit 7",
              "5688": "Undefined Access (no effect) Bit 8",
              "5689": "Undefined Access (no effect) Bit 9",
              "5690": "Undefined Access (no effect) Bit 10",
              "5691": "Undefined Access (no effect) Bit 11",
              "5692": "Undefined Access (no effect) Bit 12",
              "5693": "Undefined Access (no effect) Bit 13",
              "5694": "Undefined Access (no effect) Bit 14",
              "5695": "Undefined Access (no effect) Bit 15",
              "5696": "KeyedEvent Wait",
              "5697": "KeyedEvent Wake",
              "5698": "Undefined Access (no effect) Bit 2",
              "5699": "Undefined Access (no effect) Bit 3",
              "5700": "Undefined Access (no effect) Bit 4",
              "5701": "Undefined Access (no effect) Bit 5",
              "5702": "Undefined Access (no effect) Bit 6",
              "5703": "Undefined Access (no effect) Bit 7",
              "5704": "Undefined Access (no effect) Bit 8",
              "5705": "Undefined Access (no effect) Bit 9",
              "5706": "Undefined Access (no effect) Bit 10",
              "5707": "Undefined Access (no effect) Bit 11",
              "5708": "Undefined Access (no effect) Bit 12",
              "5709": "Undefined Access (no effect) Bit 13",
              "5710": "Undefined Access (no effect) Bit 14",
              "5711": "Undefined Access (no effect) Bit 15",
              "6656": "Enumerate desktops",
              "6657": "Read attributes",
              "6658": "Access Clipboard",
              "6659": "Create desktop",
              "6660": "Write attributes",
              "6661": "Access global atoms",
              "6662": "Exit windows",
              "6663": "Unused Access Flag",
              "6664": "Include this windowstation in enumerations",
              "6665": "Read screen",
              "6672": "Read Objects",
              "6673": "Create window",
              "6674": "Create menu",
              "6675": "Hook control",
              "6676": "Journal (record)",
              "6677": "Journal (playback)",
              "6678": "Include this desktop in enumerations",
              "6679": "Write objects",
              "6680": "Switch to this desktop",
              "6912": "Administer print server",
              "6913": "Enumerate printers",
              "6930": "Full Control",
              "6931": "Print",
              "6948": "Administer Document",
              "7168": "Connect to service controller",
              "7169": "Create a new service",
              "7170": "Enumerate services",
              "7171": "Lock service database for exclusive access",
              "7172": "Query service database lock state",
              "7173": "Set last-known-good state of service database",
              "7184": "Query service configuration information",
              "7185": "Set service configuration information",
              "7186": "Query status of service",
              "7187": "Enumerate dependencies of service",
              "7188": "Start the service",
              "7189": "Stop the service",
              "7190": "Pause or continue the service",
              "7191": "Query information from service",
              "7192": "Issue service-specific control commands",
              "7424": "DDE Share Read",
              "7425": "DDE Share Write",
              "7426": "DDE Share Initiate Static",
              "7427": "DDE Share Initiate Link",
              "7428": "DDE Share Request",
              "7429": "DDE Share Advise",
              "7430": "DDE Share Poke",
              "7431": "DDE Share Execute",
              "7432": "DDE Share Add Items",
              "7433": "DDE Share List Items",
              "7680": "Create Child",
              "7681": "Delete Child",
              "7682": "List Contents",
              "7683": "Write Self",
              "7684": "Read Property",
              "7685": "Write Property",
              "7686": "Delete Tree",
              "7687": "List Object",
              "7688": "Control Access",
              "7689": "Undefined Access (no effect) Bit 9",
              "7690": "Undefined Access (no effect) Bit 10",
              "7691": "Undefined Access (no effect) Bit 11",
              "7692": "Undefined Access (no effect) Bit 12",
              "7693": "Undefined Access (no effect) Bit 13",
              "7694": "Undefined Access (no effect) Bit 14",
              "7695": "Undefined Access (no effect) Bit 15",
              "7936": "Audit Set System Policy",
              "7937": "Audit Query System Policy",
              "7938": "Audit Set Per User Policy",
              "7939": "Audit Query Per User Policy",
              "7940": "Audit Enumerate Users",
              "7941": "Audit Set Options",
              "7942": "Audit Query Options",
              "8064": "Port sharing (read)",
              "8065": "Port sharing (write)",
              "8096": "Default credentials",
              "8097": "Credentials manager",
              "8098": "Fresh credentials",
              "8192": "Kerberos",
              "8193": "Preshared key",
              "8194": "Unknown authentication",
              "8195": "DES",
              "8196": "3DES",
              "8197": "MD5",
              "8198": "SHA1",
              "8199": "Local computer",
              "8200": "Remote computer",
              "8201": "No state",
              "8202": "Sent first (SA) payload",
              "8203": "Sent second (KE) payload",
              "8204": "Sent third (ID) payload",
              "8205": "Initiator",
              "8206": "Responder",
              "8207": "No state",
              "8208": "Sent first (SA) payload",
              "8209": "Sent final payload",
              "8210": "Complete",
              "8211": "Unknown",
              "8212": "Transport",
              "8213": "Tunnel",
              "8214": "IKE/AuthIP DoS prevention mode started",
              "8215": "IKE/AuthIP DoS prevention mode stopped",
              "8216": "Enabled",
              "8217": "Not enabled",
              "8218": "No state",
              "8219": "Sent first (EM attributes) payload",
              "8220": "Sent second (SSPI) payload",
              "8221": "Sent third (hash) payload",
              "8222": "IKEv1",
              "8223": "AuthIP",
              "8224": "Anonymous",
              "8225": "NTLM V2",
              "8226": "CGA",
              "8227": "Certificate",
              "8228": "SSL",
              "8229": "None",
              "8230": "DH group 1",
              "8231": "DH group 2",
              "8232": "DH group 14",
              "8233": "DH group ECP 256",
              "8234": "DH group ECP 384",
              "8235": "AES-128",
              "8236": "AES-192",
              "8237": "AES-256",
              "8238": "Certificate ECDSA P256",
              "8239": "Certificate ECDSA P384",
              "8240": "SSL ECDSA P256",
              "8241": "SSL ECDSA P384",
              "8242": "SHA 256",
              "8243": "SHA 384",
              "8244": "IKEv2",
              "8245": "EAP payload sent",
              "8246": "Authentication payload sent",
              "8247": "EAP",
              "8248": "DH group 24",
              "8272": "System",
              "8273": "Logon/Logoff",
              "8274": "Object Access",
              "8275": "Privilege Use",
              "8276": "Detailed Tracking",
              "8277": "Policy Change",
              "8278": "Account Management",
              "8279": "DS Access",
              "8280": "Account Logon",
              "8448": "Success removed",
              "8449": "Success Added",
              "8450": "Failure removed",
              "8451": "Failure Added",
              "8452": "Success include removed",
              "8453": "Success include added",
              "8454": "Success exclude removed",
              "8455": "Success exclude added",
              "8456": "Failure include removed",
              "8457": "Failure include added",
              "8458": "Failure exclude removed",
              "8459": "Failure exclude added",
              "12288": "Security State Change",
              "12289": "Security System Extension",
              "12290": "System Integrity",
              "12291": "IPsec Driver",
              "12292": "Other System Events",
              "12544": "Logon",
              "12545": "Logoff",
              "12546": "Account Lockout",
              "12547": "IPsec Main Mode",
              "12548": "Special Logon",
              "12549": "IPsec Quick Mode",
              "12550": "IPsec Extended Mode",
              "12551": "Other Logon/Logoff Events",
              "12552": "Network Policy Server",
              "12553": "User / Device Claims",
              "12554": "Group Membership",
              "12800": "File System",
              "12801": "Registry",
              "12802": "Kernel Object",
              "12803": "SAM",
              "12804": "Other Object Access Events",
              "12805": "Certification Services",
              "12806": "Application Generated",
              "12807": "Handle Manipulation",
              "12808": "File Share",
              "12809": "Filtering Platform Packet Drop",
              "12810": "Filtering Platform Connection",
              "12811": "Detailed File Share",
              "12812": "Removable Storage",
              "12813": "Central Policy Staging",
              "13056": "Sensitive Privilege Use",
              "13057": "Non Sensitive Privilege Use",
              "13058": "Other Privilege Use Events",
              "13312": "Process Creation",
              "13313": "Process Termination",
              "13314": "DPAPI Activity",
              "13315": "RPC Events",
              "13316": "Plug and Play Events",
              "13317": "Token Right Adjusted Events",
              "13568": "Audit Policy Change",
              "13569": "Authentication Policy Change",
              "13570": "Authorization Policy Change",
              "13571": "MPSSVC Rule-Level Policy Change",
              "13572": "Filtering Platform Policy Change",
              "13573": "Other Policy Change Events",
              "13824": "User Account Management",
              "13825": "Computer Account Management",
              "13826": "Security Group Management",
              "13827": "Distribution Group Management",
              "13828": "Application Group Management",
              "13829": "Other Account Management Events",
              "14080": "Directory Service Access",
              "14081": "Directory Service Changes",
              "14082": "Directory Service Replication",
              "14083": "Detailed Directory Service Replication",
              "14336": "Credential Validation",
              "14337": "Kerberos Service Ticket Operations",
              "14338": "Other Account Logon Events",
              "14339": "Kerberos Authentication Service",
              "14592": "Inbound",
              "14593": "Outbound",
              "14594": "Forward",
              "14595": "Bidirectional",
              "14596": "IP Packet",
              "14597": "Transport",
              "14598": "Forward",
              "14599": "Stream",
              "14600": "Datagram Data",
              "14601": "ICMP Error",
              "14602": "MAC 802.3",
              "14603": "MAC Native",
              "14604": "vSwitch",
              "14608": "Resource Assignment",
              "14609": "Listen",
              "14610": "Receive/Accept",
              "14611": "Connect",
              "14612": "Flow Established",
              "14614": "Resource Release",
              "14615": "Endpoint Closure",
              "14616": "Connect Redirect",
              "14617": "Bind Redirect",
              "14624": "Stream Packet",
              "14640": "ICMP Echo-Request",
              "14641": "vSwitch Ingress",
              "14642": "vSwitch Egress",
              "14672": "<Binary>",
              "14673": "[NULL]",
              "14674": "Value Added",
              "14675": "Value Deleted",
              "14676": "Active Directory Domain Services",
              "14677": "Active Directory Lightweight Directory Services",
              "14678": "Yes",
              "14679": "No",
              "14680": "Value Added With Expiration Time",
              "14681": "Value Deleted With Expiration Time",
              "14688": "Value Auto Deleted With Expiration Time",
              "16384": "Add",
              "16385": "Delete",
              "16386": "Boot-time",
              "16387": "Persistent",
              "16388": "Not persistent",
              "16389": "Block",
              "16390": "Permit",
              "16391": "Callout",
              "16392": "MD5",
              "16393": "SHA-1",
              "16394": "SHA-256",
              "16395": "AES-GCM 128",
              "16396": "AES-GCM 192",
              "16397": "AES-GCM 256",
              "16398": "DES",
              "16399": "3DES",
              "16400": "AES-128",
              "16401": "AES-192",
              "16402": "AES-256",
              "16403": "Transport",
              "16404": "Tunnel",
              "16405": "Responder",
              "16406": "Initiator",
              "16407": "AES-GMAC 128",
              "16408": "AES-GMAC 192",
              "16409": "AES-GMAC 256",
              "16416": "AuthNoEncap Transport",
              "16896": "Enable WMI Account",
              "16897": "Execute Method",
              "16898": "Full Write",
              "16899": "Partial Write",
              "16900": "Provider Write",
              "16901": "Remote Access",
              "16902": "Subscribe",
              "16903": "Publish"
            },
            "AccessMaskDescriptions": {
              "0x00000001": "Create Child",
              "0x00000002": "Delete Child",
              "0x00000004": "List Contents",
              "0x00000008": "SELF",
              "0x00000010": "Read Property",
              "0x00000020": "Write Property",
              "0x00000040": "Delete Treee",
              "0x00000080": "List Object",
              "0x00000100": "Control Access",
              "0x00010000": "DELETE",
              "0x00020000": "READ_CONTROL",
              "0x00040000": "WRITE_DAC",
              "0x00080000": "WRITE_OWNER",
              "0x00100000": "SYNCHRONIZE",
              "0x00F00000": "STANDARD_RIGHTS_REQUIRED",
              "0x001F0000": "STANDARD_RIGHTS_ALL",
              "0x0000FFFF": "SPECIFIC_RIGHTS_ALL",
              "0x01000000": "ADS_RIGHT_ACCESS_SYSTEM_SECURITY",
              "0x10000000": "ADS_RIGHT_GENERIC_ALL",
              "0x20000000": "ADS_RIGHT_GENERIC_EXECUTE",
              "0x40000000": "ADS_RIGHT_GENERIC_WRITE",
              "0x80000000": "ADS_RIGHT_GENERIC_READ"
            }
          },
          "source": "def split(String s) {\n  def f = new ArrayList();\n  int last = 0;\n  for (; last < s.length() && Character.isWhitespace(s.charAt(last)); last++) {}\n  for (def i = last; i < s.length(); i++) {\n    if (!Character.isWhitespace(s.charAt(i))) {\n      continue;\n    }\n    f.add(s.substring(last, i));\n    for (; i < s.length() && Character.isWhitespace(s.charAt(i)); i++) {}\n    last = i;\n  }\n  f.add(s.substring(last));\n  return f;\n}\nif (ctx?.winlog?.event_data?.FailureReason != null) {\n  def code = ctx.winlog.event_data.FailureReason.replace(\"%%\",\"\");\n  if (params.descriptions.containsKey(code)) {\n    if (ctx?.winlog?.logon == null ) {\n      HashMap hm = new HashMap();\n      ctx.winlog.put(\"logon\", hm);\n    }\n    if (ctx?.winlog?.logon?.failure == null) {\n      HashMap hm = new HashMap();\n      ctx.winlog.logon.put(\"failure\", hm);\n    }\n    ctx.winlog.logon.failure.put(\"reason\", params.descriptions[code]);\n  }\n}\nif (ctx?.winlog?.event_data?.AuditPolicyChanges != null) {\n  ArrayList results = new ArrayList();\n  for (elem in ctx.winlog.event_data.AuditPolicyChanges.splitOnToken(\",\")) {\n    def code = elem.replace(\"%%\",\"\").trim();\n    if (params.descriptions.containsKey(code)) {\n      results.add(params.descriptions[code]);\n    }\n  }\n  if (results.length > 0) {\n    ctx.winlog.event_data.put(\"AuditPolicyChangesDescription\", results);\n  }\n}\nif (ctx?.winlog?.event_data?.AccessList != null) {\n  ArrayList results = new ArrayList();\n  for (elem in ctx.winlog.event_data.AccessList.splitOnToken(\" \")) {\n    def code = elem.replace(\"%%\",\"\").trim();\n    if (params.descriptions.containsKey(code)) {\n      results.add(params.descriptions[code]);\n    }\n  }\n  if (results.length > 0) {\n    ctx.winlog.event_data.put(\"AccessListDescription\", results);\n  }\n}\nif (ctx?.winlog?.event_data?.AccessMask != null) {\n  ArrayList results = new ArrayList();\n  for (elem in split(ctx.winlog.event_data.AccessMask)) {\n    def mask = elem.replace(\"%%\",\"\").trim();\n    if (mask == \"\") {\n      continue;\n    }\n    Long accessMask = Long.decode(mask);\n    for (entry in params.AccessMaskDescriptions.entrySet()) {\n      Long accessFlag = Long.decode(entry.getKey());\n      if ((accessMask.longValue() & accessFlag.longValue()) == accessFlag.longValue()) {\n        results.add(entry.getValue());\n      }\n    }\n  }\n  if (results.length > 0) {\n    ctx.winlog.event_data.put(\"_AccessMaskDescription\", results);\n  }\n}"
        }
      },
      {
        "foreach": {
          "field": "winlog.event_data._AccessMaskDescription",
          "processor": {
            "append": {
              "field": "winlog.event_data.AccessMaskDescription",
              "value": "{{{_ingest._value}}}",
              "allow_duplicates": false,
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.winlog?.event_data?._AccessMaskDescription != null && ctx.winlog.event_data._AccessMaskDescription instanceof List"
        }
      },
      {
        "remove": {
          "field": "winlog.event_data._AccessMaskDescription",
          "ignore_failure": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "4625 and 4776 Set Status and SubStatus",
          "description": "4625 and 4776 Set Status and SubStatus",
          "params": {
            "0xc000005e": "There are currently no logon servers available to service the logon request.",
            "0xc0000064": "User logon with misspelled or bad user account",
            "0xc000006a": "User logon with misspelled or bad password",
            "0xc000006d": "This is either due to a bad username or authentication information",
            "0xc000006e": "Unknown user name or bad password.",
            "0xc000006f": "User logon outside authorized hours",
            "0xc0000070": "User logon from unauthorized workstation",
            "0xc0000071": "User logon with expired password",
            "0xc0000072": "User logon to account disabled by administrator",
            "0xc00000dc": "Indicates the Sam Server was in the wrong state to perform the desired operation.",
            "0xc0000133": "Clocks between DC and other computer too far out of sync",
            "0xc000015b": "The user has not been granted the requested logon type (aka logon right) at this machine",
            "0xc000018c": "The logon request failed because the trust relationship between the primary domain and the trusted domain failed.",
            "0xc0000192": "An attempt was made to logon, but the Netlogon service was not started.",
            "0xc0000193": "User logon with expired account",
            "0xc0000224": "User is required to change password at next logon",
            "0xc0000225": "Evidently a bug in Windows and not a risk",
            "0xc0000234": "User logon with account locked",
            "0xc00002ee": "Failure Reason: An Error occurred during Logon",
            "0xc0000413": "Logon Failure: The machine you are logging onto is protected by an authentication firewall. The specified account is not allowed to authenticate to the machine.",
            "0xc0000371": "The local account store does not contain secret material for the specified account",
            "0x0": "Status OK."
          },
          "source": "if (ctx?.winlog?.event_data?.Status == null ||\n    ctx?.event?.code == null ||\n    ![\"4625\", \"4776\"].contains(ctx.event.code)) {\n  return;\n}\nif (params.containsKey(ctx.winlog.event_data.Status)) {\n  if (ctx?.winlog?.logon == null ) {\n      HashMap hm = new HashMap();\n      ctx.winlog.put(\"logon\", hm);\n  }\n  if (ctx?.winlog?.logon?.failure == null) {\n      HashMap hm = new HashMap();\n      ctx.winlog.logon.put(\"failure\", hm);\n  }\n  ctx.winlog.logon.failure.put(\"status\", params[ctx.winlog.event_data.Status]);\n}\nif (ctx?.winlog?.event_data?.SubStatus == null || !params.containsKey(ctx.winlog.event_data.SubStatus)) {\n  return;\n}\nif (ctx?.winlog?.logon == null ) {\n  HashMap hm = new HashMap();\n  ctx.winlog.put(\"logon\", hm);\n}\nif (ctx?.winlog?.logon?.failure == null) {\n  HashMap hm = new HashMap();\n  ctx.winlog.logon.put(\"failure\", hm);\n}\nctx.winlog.logon.failure.put(\"sub_status\", params[ctx.winlog.event_data.SubStatus]);"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Set Trust Type",
          "description": "Set Trust Type",
          "params": {
            "1": "TRUST_TYPE_DOWNLEVEL",
            "2": "TRUST_TYPE_UPLEVEL",
            "3": "TRUST_TYPE_MIT",
            "4": "TRUST_TYPE_DCE"
          },
          "source": "if (ctx?.winlog?.event_data?.TdoType == null) {\n  return;\n}\nif (!params.containsKey(ctx.winlog.event_data.TdoType)) {\n  return;\n}\nctx.winlog.put(\"trustType\", params[ctx.winlog.event_data.TdoType]);"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Set Trust Direction",
          "description": "Set Trust Direction",
          "params": {
            "0": "TRUST_DIRECTION_DISABLED",
            "1": "TRUST_DIRECTION_INBOUND",
            "2": "TRUST_DIRECTION_OUTBOUND",
            "3": "TRUST_DIRECTION_BIDIRECTIONAL"
          },
          "source": "if (ctx?.winlog?.event_data?.TdoDirection == null) {\n  return;\n}\nif (!params.containsKey(ctx.winlog.event_data.TdoDirection)) {\n  return;\n}\nctx.winlog.put(\"trustDirection\", params[ctx.winlog.event_data.TdoDirection]);"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Set Trust Attributes",
          "description": "Set Trust Attributes",
          "params": {
            "0": "UNDEFINED",
            "1": "TRUST_ATTRIBUTE_NON_TRANSITIVE",
            "2": "TRUST_ATTRIBUTE_UPLEVEL_ONLY",
            "4": "TRUST_ATTRIBUTE_QUARANTINED_DOMAIN",
            "8": "TRUST_ATTRIBUTE_FOREST_TRANSITIVE",
            "16": "TRUST_ATTRIBUTE_CROSS_ORGANIZATION",
            "32": "TRUST_ATTRIBUTE_WITHIN_FOREST",
            "64": "TRUST_ATTRIBUTE_TREAT_AS_EXTERNAL",
            "128": "TRUST_ATTRIBUTE_USES_RC4_ENCRYPTION",
            "512": "TRUST_ATTRIBUTE_CROSS_ORGANIZATION_NO_TGT_DELEGATION",
            "1024": "TRUST_ATTRIBUTE_PIM_TRUST"
          },
          "source": "if (ctx?.winlog?.event_data?.TdoAttributes == null) {\n  return;\n}\nif (!params.containsKey(ctx.winlog.event_data.TdoAttributes)) {\n  return;\n}\nctx.winlog.put(\"trustAttribute\", params[ctx.winlog.event_data.TdoAttributes]);"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Add Session Events",
          "description": "Add Session Events",
          "source": "if (ctx?.event?.code == null ||\n    ![\"4778\", \"4779\"].contains(ctx.event.code)) {\n  return;\n}\n//AccountName to user.name and related.user\nif (ctx?.winlog?.event_data?.AccountName != null) {\n  if (ctx?.user == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"user\", hm);\n  }\n  if (ctx?.related == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"related\", hm);\n  }\n  if (ctx?.related?.user == null) {\n    ArrayList al = new ArrayList();\n    ctx.related.put(\"user\", al);\n  }\n  ctx.user.put(\"name\", ctx.winlog.event_data.AccountName);\n  if (!ctx.related.user.contains(ctx.winlog.event_data.AccountName)) {\n    ctx.related.user.add(ctx.winlog.event_data.AccountName);\n  }\n}\n\n//AccountDomain to user.domain\nif (ctx?.winlog?.event_data?.AccountDomain != null) {\n  if (ctx?.user == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"user\", hm);\n  }\n  ctx.user.put(\"domain\", ctx.winlog.event_data.AccountDomain);\n}\n\n//ClientAddress to source.ip and related.ip\nif (ctx?.winlog?.event_data?.ClientAddress != null &&\n    ctx.winlog.event_data.ClientAddress != \"-\") {\n  if (ctx?.source == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"source\", hm);\n  }\n  if (ctx?.related == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"related\", hm);\n  }\n  if (ctx?.related?.ip == null) {\n    ArrayList al = new ArrayList();\n    ctx.related.put(\"ip\", al);\n  }\n  ctx.source.put(\"ip\", ctx.winlog.event_data.ClientAddress);\n  if (!ctx.related.ip.contains(ctx.winlog.event_data.ClientAddress)) {\n    ctx.related.ip.add(ctx.winlog.event_data.ClientAddress);\n  }\n}\n\n//ClientName to source.domain\nif (ctx?.winlog?.event_data?.ClientName != null) {\n  if (ctx?.source == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"source\", hm);\n  }\n  ctx.source.put(\"domain\", ctx.winlog.event_data.ClientName);\n}\n\n//LogonID to winlog.logon.id\nif (ctx?.winlog?.event_data?.LogonID != null) {\n  if (ctx?.winlog?.logon == null) {\n    HashMap hm = new HashMap();\n    ctx.winlog.put(\"logon\", hm);\n  }\n  ctx.winlog.logon.put(\"id\", ctx.winlog.event_data.LogonID);\n}"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Copy Target User",
          "description": "Copy Target User",
          "source": "if (ctx?.event?.code == null ||\n    ![\"4624\", \"4625\", \"4634\", \"4647\", \"4648\", \"4768\", \"4769\", \"4770\",\n      \"4771\", \"4776\", \"4964\"].contains(ctx.event.code)) {\n  return;\n}\n\n//TargetUserSid to user.id or user.target.id\nif (ctx?.winlog?.event_data?.TargetUserSid != null) {\n  if (ctx?.user == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"user\", hm);\n  }\n  if (ctx?.user?.id == null) {\n    ctx.user.put(\"id\", ctx.winlog.event_data.TargetUserSid);\n  } else {\n    if (ctx?.user?.target == null) {\n      HashMap hm = new HashMap();\n      ctx.user.put(\"target\", hm);\n    }\n    ctx.user.target.put(\"id\", ctx.winlog.event_data.TargetUserSid);\n  }\n}\n//TargetUserName to related.user and user.name or user.target.name\nif (ctx?.winlog?.event_data?.TargetUserName != null) {\n  def tun = ctx.winlog.event_data.TargetUserName.splitOnToken(\"@\");\n  if (ctx?.user == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"user\", hm);\n  }\n  if (ctx?.user?.name == null) {\n    ctx.user.put(\"name\", tun[0]);\n  } else {\n    if (ctx?.user?.target == null) {\n      HashMap hm = new HashMap();\n      ctx.user.put(\"target\", hm);\n    }\n    ctx.user.target.put(\"name\", tun[0]);\n  }\n  if (ctx?.related == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"related\", hm);\n  }\n  if (ctx?.related?.user == null) {\n    ArrayList al = new ArrayList();\n    ctx.related.put(\"user\", al);\n  }\n  if (!ctx.related.user.contains(tun[0])) {\n    ctx.related.user.add(tun[0]);\n  }\n}\n//TargetUserDomain to user.domain or user.target.domain\nif (ctx?.winlog?.event_data?.TargetDomainName != null) {\n  if (ctx?.user == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"user\", hm);\n  }\n  if (ctx?.user?.domain == null) {\n    ctx.user.put(\"domain\", ctx.winlog.event_data.TargetDomainName);\n  } else {\n    if (ctx?.user?.target == null){\n      HashMap hm = new HashMap();\n      ctx.user.put(\"target\", hm);\n    }\n    ctx.user.target.put(\"domain\", ctx.winlog.event_data.TargetDomainName);\n  }\n}"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Copy MemberName to User and User to Group",
          "description": "Copy MemberName to User and User to Group",
          "source": "if (ctx?.event?.code == null ||\n    ![\"4727\", \"4728\", \"4729\", \"4730\", \"4731\", \"4732\", \"4733\", \"4734\", \"4735\",\n      \"4737\", \"4744\", \"4745\", \"4746\", \"4747\", \"4748\", \"4749\", \"4750\", \"4751\",\n      \"4752\", \"4753\", \"4754\", \"4755\", \"4756\", \"4757\", \"4758\", \"4759\", \"4760\",\n      \"4761\", \"4762\", \"4763\", \"4764\", \"4799\"].contains(ctx.event.code)) {\n  return;\n}\nif (ctx?.winlog?.event_data?.MemberName != null) {\n  def memberNameParts = ctx.winlog.event_data.MemberName.splitOnToken(\",\");\n  def memberName = memberNameParts[0].replace(\"CN=\",\"\").replace(\"cn=\",\"\");\n  if (ctx?.related == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"related\", hm);\n  }\n  if (ctx?.related?.user == null) {\n    ArrayList al = new ArrayList();\n    ctx.related.put(\"user\", al);\n  }\n  if (ctx?.user == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"user\", hm);\n  }\n  if (ctx?.user?.target == null){\n    HashMap hm = new HashMap();\n    ctx.user.put(\"target\", hm);\n  }\n  ctx.user.target.put(\"name\", memberName);\n  if (!ctx.related.user.contains(memberName)) {\n    ctx.related.user.add(memberName);\n  }\n}\nif (ctx?.winlog?.event_data?.TargetUserSid != null) {\n  if (ctx?.group == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"group\", hm);\n  }\n  ctx.group.put(\"id\", ctx.winlog.event_data.TargetUserSid);\n}\nif (ctx?.winlog?.event_data?.TargetSid != null) {\n  if (ctx?.group == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"group\", hm);\n  }\n  ctx.group.put(\"id\", ctx.winlog.event_data.TargetSid);\n}\nif (ctx?.winlog?.event_data?.TargetUserName != null) {\n  if (ctx?.group == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"group\", hm);\n  }\n  ctx.group.put(\"name\", ctx.winlog.event_data.TargetUserName);\n}\nif (ctx?.winlog?.event_data?.TargetDomainName != null) {\n  if (ctx?.group == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"group\", hm);\n  }\n  ctx.group.put(\"domain\", ctx.winlog.event_data.TargetDomainName);\n}\nif (ctx?.user?.target != null) {\n  if (ctx?.user?.target?.group == null) {\n    HashMap hm = new HashMap();\n    ctx.user.target.put(\"group\", hm);\n  }\n  if (ctx?.group?.id != null) {\n    ctx.user.target.group.put(\"id\", ctx.group.id);\n  } \n  if (ctx?.group?.name != null) {\n    ctx.user.target.group.put(\"name\", ctx.group.name);\n  } \n  if (ctx?.group?.domain != null) {\n    ctx.user.target.group.put(\"domain\", ctx.group.domain);\n  }\n}"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Copy Target User to Computer Object",
          "description": "Copy Target User to Computer Object",
          "source": "if (ctx?.event?.code == null ||\n    ![\"4741\", \"4742\", \"4743\"].contains(ctx.event.code)) {\n  return;\n}\nif (ctx?.winlog?.event_data?.TargetSid != null) {\n  if (ctx?.winlog?.computerObject == null) {\n    HashMap hm = new HashMap();\n    ctx.winlog.put(\"computerObject\", hm);\n  }\n  ctx.winlog.computerObject.put(\"id\", ctx.winlog.event_data.TargetSid);\n}\nif (ctx?.winlog?.event_data?.TargetUserName != null) {\n  if (ctx?.winlog?.computerObject == null) {\n    HashMap hm = new HashMap();\n    ctx.winlog.put(\"computerObject\", hm);\n  }\n  ctx.winlog.computerObject.put(\"name\", ctx.winlog.event_data.TargetUserName);\n}\nif (ctx?.winlog?.event_data?.TargetDomainName != null) {\n  if (ctx?.winlog?.computerObject == null) {\n    HashMap hm = new HashMap();\n    ctx.winlog.put(\"computerObject\", hm);\n  }\n  ctx.winlog.computerObject.put(\"domain\", ctx.winlog.event_data.TargetDomainName);\n}"
        }
      },
      {
        "set": {
          "field": "winlog.logon.id",
          "copy_from": "winlog.event_data.TargetLogonId",
          "ignore_failure": false,
          "if": "ctx?.event?.code != null && [\"4634\", \"4647\", \"4964\"].contains(ctx.event.code)"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Copy Subject User from Event Data",
          "description": "Copy Subject User from Event Data",
          "source": "if (ctx?.event?.code == null ||\n    ![\"4657\", \"4670\", \"4672\", \"4673\", \"4674\", \"4688\", \"4689\", \"4697\",\n      \"4698\", \"4699\", \"4700\", \"4701\", \"4702\", \"4706\", \"4707\", \"4713\",\n      \"4716\", \"4717\", \"4718\", \"4719\", \"4720\", \"4722\", \"4723\", \"4724\",\n      \"4725\", \"4726\", \"4727\", \"4728\", \"4729\", \"4730\", \"4731\", \"4732\",\n      \"4733\", \"4734\", \"4735\", \"4737\", \"4738\", \"4739\", \"4740\", \"4741\",\n      \"4742\", \"4743\", \"4744\", \"4745\", \"4746\", \"4747\", \"4748\", \"4749\",\n      \"4750\", \"4751\", \"4752\", \"4753\", \"4754\", \"4755\", \"4756\", \"4757\",\n      \"4758\", \"4759\", \"4760\", \"4761\", \"4762\", \"4763\", \"4764\", \"4767\",\n      \"4781\", \"4798\", \"4799\", \"4817\", \"4904\", \"4905\", \"4907\", \"4912\"].contains(ctx.event.code)) {\n  return;\n}\nif (ctx?.winlog?.event_data?.SubjectUserSid != null) {\n  if (ctx?.user == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"user\", hm);\n  }\n  ctx.user.put(\"id\", ctx.winlog.event_data.SubjectUserSid);\n}\nif (ctx?.winlog?.event_data?.SubjectUserName != null) {\n  if (ctx?.user == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"user\", hm);\n  }\n  if (ctx?.related == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"related\", hm);\n  }\n  if (ctx?.related?.user == null) {\n    ArrayList al = new ArrayList();\n    ctx.related.put(\"user\", al);\n  }\n  ctx.user.put(\"name\", ctx.winlog.event_data.SubjectUserName);\n  if (!ctx.related.user.contains(ctx.winlog.event_data.SubjectUserName)) {\n    ctx.related.user.add(ctx.winlog.event_data.SubjectUserName);\n  }\n}\nif (ctx?.winlog?.event_data?.SubjectDomainName != null) {\n  if (ctx?.user == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"user\", hm);\n  }\n  ctx.user.put(\"domain\", ctx.winlog.event_data.SubjectDomainName);\n}"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Copy Subject User from user_data",
          "description": "Copy Subject User from user_data",
          "source": "if (ctx?.event?.code == null ||\n    ![\"1102\"].contains(ctx.event.code)) {\n  return;\n}\nif (ctx?.winlog?.user_data?.SubjectUserSid != null) {\n  if (ctx?.user == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"user\", hm);\n  }\n  ctx.user.put(\"id\", ctx.winlog.user_data.SubjectUserSid);\n}\nif (ctx?.winlog?.user_data?.SubjectUserName != null) {\n  if (ctx?.user == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"user\", hm);\n  }\n  if (ctx?.related == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"related\", hm);\n  }\n  if (ctx?.related?.user == null) {\n    ArrayList al = new ArrayList();\n    ctx.related.put(\"user\", al);\n  }\n  ctx.user.put(\"name\", ctx.winlog.user_data.SubjectUserName);\n  if (!ctx.related.user.contains(ctx.winlog.user_data.SubjectUserName)) {\n    ctx.related.user.add(ctx.winlog.user_data.SubjectUserName);\n  }\n}\nif (ctx?.winlog?.user_data?.SubjectDomainName != null) {\n  if (ctx?.user == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"user\", hm);\n  }\n  ctx.user.put(\"domain\", ctx.winlog.user_data.SubjectDomainName);\n}"
        }
      },
      {
        "set": {
          "field": "winlog.logon.id",
          "copy_from": "winlog.event_data.SubjectLogonId",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "winlog.logon.id",
          "copy_from": "winlog.user_data.SubjectLogonId",
          "ignore_failure": true,
          "if": "ctx?.event?.code != null &&\n[\"1102\"].contains(ctx.event.code)"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Rename Common Auth Fields",
          "description": "Rename Common Auth Fields",
          "source": "if (ctx?.event?.code == null ||\n    ![\"1100\", \"1102\", \"1104\", \"1105\", \"1108\", \"4624\", \"4648\", \"4625\",\n      \"4670\", \"4673\", \"4674\", \"4689\", \"4697\", \"4719\", \"4720\", \"4722\",\n      \"4723\", \"4724\", \"4725\", \"4726\", \"4727\", \"4728\", \"4729\", \"4730\",\n      \"4731\", \"4732\", \"4733\", \"4734\", \"4735\", \"4737\", \"4738\", \"4740\",\n      \"4741\", \"4742\", \"4743\", \"4744\", \"4745\", \"4746\", \"4747\", \"4748\",\n      \"4749\", \"4750\", \"4751\", \"4752\", \"4753\", \"4754\", \"4755\", \"4756\",\n      \"4757\", \"4758\", \"4759\", \"4760\", \"4761\", \"4762\", \"4763\", \"4764\",\n      \"4767\", \"4768\", \"4769\", \"4770\", \"4771\", \"4798\", \"4799\", \"4817\",\n      \"4904\", \"4905\", \"4907\", \"4912\"].contains(ctx.event.code)) {\n  return;\n}\nif (ctx?.winlog?.event_data?.ProcessId != null) {\n  if (ctx?.process == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"process\", hm);\n  }\n  if (ctx.winlog.event_data.ProcessId instanceof String) {\n    Long pid = Long.decode(ctx.winlog.event_data.ProcessId);\n    ctx.process.put(\"pid\", pid.longValue());\n  } else {\n    ctx.process.put(\"pid\", ctx.winlog.event_data.ProcessId);\n  }\n  ctx.winlog.event_data.remove(\"ProcessId\");\n}\nif (ctx?.winlog?.event_data?.ProcessName != null) {\n  if (ctx?.process == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"process\", hm);\n  }\n  ctx.process.put(\"executable\", ctx.winlog.event_data.ProcessName);\n  ctx.winlog.event_data.remove(\"ProcessName\");\n}\nif (ctx?.winlog?.event_data?.IpAddress != null &&\n    ctx.winlog.event_data.IpAddress != \"-\") {\n  if (ctx?.source == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"source\", hm);\n  }\n  ctx.source.put(\"ip\", ctx.winlog.event_data.IpAddress);\n  ctx.winlog.event_data.remove(\"IpAddress\");\n}\nif (ctx?.winlog?.event_data?.IpPort != null && ctx.winlog.event_data.IpPort != \"-\") {\n  if (ctx?.source == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"source\", hm);\n  }\n  ctx.source.put(\"port\", Long.decode(ctx.winlog.event_data.IpPort));\n  ctx.winlog.event_data.remove(\"IpPort\");\n}\nif (ctx?.winlog?.event_data?.WorkstationName != null) {\n  if (ctx?.source == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"source\", hm);\n  }\n  ctx.source.put(\"domain\", ctx.winlog.event_data.WorkstationName);\n  ctx.winlog.event_data.remove(\"WorkstationName\");\n}\nif (ctx?.winlog?.event_data?.ClientAddress != null &&\n    ctx.winlog.event_data.ClientAddress != \"-\") {\n  if (ctx?.related == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"related\", hm);\n  }\n  ctx.related.put(\"ip\", ctx.winlog.event_data.ClientAddress);\n  ctx.winlog.event_data.remove(\"ClientAddress\");\n}\nif (ctx?.process?.name == null && ctx?.process?.executable != null) {\n  def parts = ctx.process.executable.splitOnToken(\"\\\\\");\n  ctx.process.put(\"name\", parts[-1]);\n}"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Process Event 4688",
          "description": "Process Event 4688",
          "source": "if (ctx?.event?.code == null ||\n    ![\"4688\"].contains(ctx.event.code)) {\n  return;\n}\nif (ctx?.winlog?.event_data?.NewProcessId != null) {\n  if (ctx?.process == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"process\", hm);\n  }\n  if (ctx.winlog.event_data.NewProcessId instanceof String) {\n    Long pid = Long.decode(ctx.winlog.event_data.NewProcessId);\n    ctx.process.put(\"pid\", pid.longValue());\n  } else {\n    ctx.process.put(\"pid\", ctx.winlog.event_data.NewProcessId);\n  }\n  ctx.winlog.event_data.remove(\"NewProcessId\");\n}\nif (ctx?.winlog?.event_data?.NewProcessName != null) {\n  if (ctx?.process == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"process\", hm);\n  }\n  ctx.process.put(\"executable\", ctx.winlog.event_data.NewProcessName);\n  ctx.winlog.event_data.remove(\"NewProcessName\");\n}\nif (ctx?.winlog?.event_data?.ParentProcessName != null) {\n  if (ctx?.process == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"process\", hm);\n  }\n  if (ctx?.process?.parent == null) {\n    HashMap hm = new HashMap();\n    ctx.process.put(\"parent\", hm);\n  }\n  ctx.process.parent.put(\"executable\", ctx.winlog.event_data.ParentProcessName);\n  ctx.winlog.event_data.remove(\"ParentProcessName\");\n}\nif (ctx?.process?.name == null && ctx?.process?.executable != null) {\n  def parts = ctx.process.executable.splitOnToken(\"\\\\\");\n  ctx.process.put(\"name\", parts[-1]);\n}\nif (ctx?.process?.parent?.name == null && ctx?.process?.parent?.executable != null) {\n  def parts = ctx.process.parent.executable.splitOnToken(\"\\\\\");\n  ctx.process.parent.put(\"name\", parts[-1]);\n}\nif (ctx?.winlog?.event_data?.ProcessId != null) {\n  if (ctx?.process == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"process\", hm);\n  }\n  if (ctx?.process?.parent == null) {\n    HashMap hm = new HashMap();\n    ctx.process.put(\"parent\", hm);\n  }\n  if (ctx.winlog.event_data.ProcessId instanceof String) {\n    Long pid = Long.decode(ctx.winlog.event_data.ProcessId);\n    ctx.process.parent.put(\"pid\", pid.longValue());\n  } else {\n    ctx.process.parent.put(\"pid\", ctx.winlog.event_data.ProcessId);\n  }\n}\nif (ctx?.winlog?.event_data?.CommandLine != null) {\n  int start = 0;\n  int end = 0;\n  boolean in_quote = false;\n  ArrayList al = new ArrayList();          \n  for (int i = 0; i < ctx.winlog.event_data.CommandLine.length(); i++) {\n    end = i;\n    if (Character.compare(ctx.winlog.event_data.CommandLine.charAt(i), \"\\\"\".charAt(0)) == 0) {\n      if (in_quote) {\n        in_quote = false;\n      } else {\n        in_quote = true;\n      }\n    }\n    if (Character.isWhitespace(ctx.winlog.event_data.CommandLine.charAt(i)) && !in_quote) {\n      al.add(ctx.winlog.event_data.CommandLine.substring(start, end));\n      start = i + 1;\n    }\n    if (i == ctx.winlog.event_data.CommandLine.length() - 1) {\n      al.add(ctx.winlog.event_data.CommandLine.substring(start, end + 1));\n    }\n  }\n  if (ctx?.process == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"process\", hm);\n  }\n  ctx.process.put(\"args\", al);\n  ctx.process.put(\"command_line\", ctx.winlog.event_data.CommandLine);\n}\nif ((ctx?.winlog?.event_data?.TargetUserName != null) &&\n    (!ctx.winlog.event_data.TargetUserName.equals(\"-\"))) {\n  if (ctx?.related == null) {\n    HashMap hm = new HashMap();\n    ctx.put(\"related\", hm);\n  }\n  if (ctx?.related?.user == null) {\n    ArrayList al = new ArrayList();\n    ctx.related.put(\"user\", al);\n  }\n  if (!ctx.related.user.contains(ctx.winlog.event_data.TargetUserName)) {\n    ctx.related.user.add(ctx.winlog.event_data.TargetUserName);\n  }\n}"
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{winlog.event_data.SubjectUserName}}",
          "allow_duplicates": false,
          "if": "ctx?.event?.code != null &&\n[\"4624\", \"4648\"].contains(ctx.event.code) &&\nctx?.winlog?.event_data?.SubjectUserName != null &&\nctx.winlog.event_data.SubjectUserName != \"-\""
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{winlog.event_data.TargetUserName}}",
          "allow_duplicates": false,
          "if": "ctx?.event?.code != null &&\n[\"4688\", \"4720\", \"4722\", \"4723\", \"4724\", \"4725\", \"4726\", \"4738\",\n \"4740\", \"4767\", \"4798\"].contains(ctx.event.code) &&\nctx?.winlog?.event_data?.TargetUserName != null &&\nctx.winlog.event_data.TargetUserName != \"-\""
        }
      },
      {
        "split": {
          "field": "winlog.event_data.PrivilegeList",
          "separator": "\\s+",
          "if": "ctx?.event?.code != null &&\n[\"4672\", \"4673\", \"4674\", \"4741\", \"4742\", \"4743\"].contains(ctx.event.code) &&\nctx?.winlog?.event_data?.PrivilegeList != null"
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{winlog.event_data.NewTargetUserName}}",
          "allow_duplicates": false,
          "if": "ctx?.winlog?.event_data?.NewTargetUserName != null &&\nctx.winlog.event_data.NewTargetUserName != \"-\""
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{winlog.event_data.OldTargetUserName}}",
          "allow_duplicates": false,
          "if": "ctx?.winlog?.event_data?.OldTargetUserName != null &&\nctx.winlog.event_data.OldTargetUserName != \"-\""
        }
      },
      {
        "gsub": {
          "field": "source.ip",
          "pattern": "::ffff:",
          "replacement": "",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{source.ip}}",
          "allow_duplicates": false,
          "if": "ctx?.source?.ip != null &&\nctx.source.ip != \"-\""
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": false,
          "tag": "Object Policy Change and SidListDesc",
          "description": "Object Policy Change and SidListDesc",
          "params": {
            "AccountSIDDescription": {
              "AO": "Account operators",
              "RU": "Alias to allow previous Windows 2000",
              "AN": "Anonymous logon",
              "AU": "Authenticated users",
              "BA": "Built-in administrators",
              "BG": "Built-in guests",
              "BO": "Backup operators",
              "BU": "Built-in users",
              "CA": "Certificate server administrators",
              "CG": "Creator group",
              "CO": "Creator owner",
              "DA": "Domain administrators",
              "DC": "Domain computers",
              "DD": "Domain controllers",
              "DG": "Domain guests",
              "DU": "Domain users",
              "EA": "Enterprise administrators",
              "ED": "Enterprise domain controllers",
              "WD": "Everyone",
              "PA": "Group Policy administrators",
              "IU": "Interactively logged-on user",
              "LA": "Local administrator",
              "LG": "Local guest",
              "LS": "Local service account",
              "SY": "Local system",
              "NU": "Network logon user",
              "NO": "Network configuration operators",
              "NS": "Network service account",
              "PO": "Printer operators",
              "PS": "Personal self",
              "PU": "Power users",
              "RS": "RAS servers group",
              "RD": "Terminal server users",
              "RE": "Replicator",
              "RC": "Restricted code",
              "SA": "Schema administrators",
              "SO": "Server operators",
              "SU": "Service logon user",
              "S-1-0": "Null Authority",
              "S-1-0-0": "Nobody",
              "S-1-1": "World Authority",
              "S-1-1-0": "Everyone",
              "S-1-16-0": "Untrusted Mandatory Level",
              "S-1-16-12288": "High Mandatory Level",
              "S-1-16-16384": "System Mandatory Level",
              "S-1-16-20480": "Protected Process Mandatory Level",
              "S-1-16-28672": "Secure Process Mandatory Level",
              "S-1-16-4096": "Low Mandatory Level",
              "S-1-16-8192": "Medium Mandatory Level",
              "S-1-16-8448": "Medium Plus Mandatory Level",
              "S-1-2": "Local Authority",
              "S-1-2-0": "Local",
              "S-1-2-1": "Console Logon",
              "S-1-3": "Creator Authority",
              "S-1-3-0": "Creator Owner",
              "S-1-3-1": "Creator Group",
              "S-1-3-2": "Creator Owner Server",
              "S-1-3-3": "Creator Group Server",
              "S-1-3-4": "Owner Rights",
              "S-1-4": "Non-unique Authority",
              "S-1-5": "NT Authority",
              "S-1-5-1": "Dialup",
              "S-1-5-10": "Principal Self",
              "S-1-5-11": "Authenticated Users",
              "S-1-5-12": "Restricted Code",
              "S-1-5-13": "Terminal Server Users",
              "S-1-5-14": "Remote Interactive Logon",
              "S-1-5-15": "This Organization",
              "S-1-5-17": "This Organization",
              "S-1-5-18": "Local System",
              "S-1-5-19": "NT Authority",
              "S-1-5-2": "Network",
              "S-1-5-20": "NT Authority",
              "S-1-5-3": "Batch",
              "S-1-5-32-544": "Administrators",
              "S-1-5-32-545": "Users",
              "S-1-5-32-546": "Guests",
              "S-1-5-32-547": "Power Users",
              "S-1-5-32-548": "Account Operators",
              "S-1-5-32-549": "Server Operators",
              "S-1-5-32-550": "Print Operators",
              "S-1-5-32-551": "Backup Operators",
              "S-1-5-32-552": "Replicators",
              "S-1-5-32-554": "Builtin\\Pre-Windows 2000 Compatible Access",
              "S-1-5-32-555": "Builtin\\Remote Desktop Users",
              "S-1-5-32-556": "Builtin\\Network Configuration Operators",
              "S-1-5-32-557": "Builtin\\Incoming Forest Trust Builders",
              "S-1-5-32-558": "Builtin\\Performance Monitor Users",
              "S-1-5-32-559": "Builtin\\Performance Log Users",
              "S-1-5-32-560": "Builtin\\Windows Authorization Access Group",
              "S-1-5-32-561": "Builtin\\Terminal Server License Servers",
              "S-1-5-32-562": "Builtin\\Distributed COM Users",
              "S-1-5-32-569": "Builtin\\Cryptographic Operators",
              "S-1-5-32-573": "Builtin\\Event Log Readers",
              "S-1-5-32-574": "Builtin\\Certificate Service DCOM Access",
              "S-1-5-32-575": "Builtin\\RDS Remote Access Servers",
              "S-1-5-32-576": "Builtin\\RDS Endpoint Servers",
              "S-1-5-32-577": "Builtin\\RDS Management Servers",
              "S-1-5-32-578": "Builtin\\Hyper-V Administrators",
              "S-1-5-32-579": "Builtin\\Access Control Assistance Operators",
              "S-1-5-32-580": "Builtin\\Remote Management Users",
              "S-1-5-32-582": "Storage Replica Administrators",
              "S-1-5-4": "Interactive",
              "S-1-5-5-X-Y": "Logon Session",
              "S-1-5-6": "Service",
              "S-1-5-64-10": "NTLM Authentication",
              "S-1-5-64-14": "SChannel Authentication",
              "S-1-5-64-21": "Digest Authentication",
              "S-1-5-7": "Anonymous",
              "S-1-5-8": "Proxy",
              "S-1-5-80": "NT Service",
              "S-1-5-80-0": "All Services",
              "S-1-5-83-0": "NT Virtual Machine\\Virtual Machines",
              "S-1-5-9": "Enterprise Domain Controllers",
              "S-1-5-90-0": "Windows Manager\\Windows Manager Group"
            },
            "AceTypes": {
              "A": "Access Allowed",
              "D": "Access Denied",
              "OA": "Object Access Allowed",
              "OD": "Object Access Denied",
              "AU": "System Audit",
              "AL": "System Alarm",
              "OU": "System Object Audit",
              "OL": "System Object Alarm",
              "ML": "System Mandatory Label",
              "SP": "Central Policy ID"
            },
            "DomainSpecificSID": {
              "498": "Enterprise Read-only Domain Controllers",
              "500": "Administrator",
              "501": "Guest",
              "502": "KRBTGT",
              "512": "Domain Admins",
              "513": "Domain Users",
              "514": "Domain Guests",
              "515": "Domain Computers",
              "516": "Domain Controllers",
              "517": "Cert Publishers",
              "518": "Schema Admins",
              "519": "Enterprise Admins",
              "520": "Group Policy Creator Owners",
              "521": "Read-only Domain Controllers",
              "522": "Cloneable Domain Controllers",
              "526": "Key Admins",
              "527": "Enterprise Key Admins",
              "553": "RAS and IAS Servers",
              "571": "Allowed RODC Password Replication Group",
              "572": "Denied RODC Password Replication Group"
            },
            "PermissionDescription": {
              "GA": "Generic All",
              "GR": "Generic Read",
              "GW": "Generic Write",
              "GX": "Generic Execute",
              "RC": "Read Permissions",
              "SD": "Delete",
              "WD": "Modify Permissions",
              "WO": "Modify Owner",
              "RP": "Read All Properties",
              "WP": "Write All Properties",
              "CC": "Create All Child Objects",
              "DC": "Delete All Child Objects",
              "LC": "List Contents",
              "SW": "All Validated",
              "LO": "List Object",
              "DT": "Delete Subtree",
              "CR": "All Extended Rights",
              "FA": "File All Access",
              "FR": "File Generic Read",
              "FX": "FILE GENERIC EXECUTE",
              "FW": "FILE GENERIC WRITE",
              "KA": "KEY ALL ACCESS",
              "KR": "KEY READ",
              "KW": "KEY WRITE",
              "KX": "KEY EXECUTE"
            },
            "PermsFlags": {
              "0x80000000": "Generic Read",
              "0x4000000": "Generic Write",
              "0x20000000": "Generic Execute",
              "0x10000000": "Generic All",
              "0x02000000": "Maximum Allowed",
              "0x01000000": "Access System Security",
              "0x00100000": "Syncronize",
              "0x00080000": "Write Owner",
              "0x00040000": "Write DACL",
              "0x00020000": "Read Control",
              "0x00010000": "Delete"
            }
          },
          "source": "ArrayList translatePermissionMask(def mask, def params) {\n  ArrayList al = new ArrayList();\n  Long permCode = Long.decode(mask);\n  for (entry in params.PermsFlags.entrySet()) {\n    Long permFlag = Long.decode(entry.getKey());\n    if ((permCode.longValue() & permFlag.longValue()) == permFlag.longValue()) {\n      al.add(entry.getValue());\n    }\n  }\n  if (al.length == 0) {\n    al.add(mask);\n  }\n  return al;\n}\n\nHashMap translateACL(def dacl, def params) {\n  def aceArray = dacl.splitOnToken(\";\");\n  HashMap hm = new HashMap();\n  \n  if (aceArray.length >= 6 ) {\n    hm.put(\"grantee\", translateSID(aceArray[5], params));\n  }\n\n  if (aceArray.length >= 1) {\n    hm.put(\"type\", params.AceTypes[aceArray[0]]);\n  }\n\n  if (aceArray.length >= 3) {\n    if (aceArray[2].startsWith(\"0x\")) {\n      hm.put(\"perms\", translatePermissionMask(aceArray[2], params));\n    } else {\n      ArrayList al = new ArrayList();\n      Pattern permPattern = /.{1,2}/;\n      Matcher permMatcher = permPattern.matcher(aceArray[2]);\n      while (permMatcher.find()) {\n        al.add(params.PermissionDescription[permMatcher.group(0)]);\n      }\n      hm.put(\"perms\", al);\n    }\n  }\n  return hm; \n}\nString translateSID(def sid, def params) {\n  if (!params.AccountSIDDescription.containsKey(sid)) {\n    if (sid.startsWith(\"S-1-5-21\")) {\n      Pattern uidPattern = /[0-9]{1,5}$/;\n      Matcher uidMatcher = uidPattern.matcher(sid);\n      if (uidMatcher.find()) {\n        return params.DomainSpecificSID[uidMatcher.group(0)];\n      }\n      return sid;\n    }\n    return sid;\n  }\n  return params.AccountSIDDescription[sid];\n}\n  \n\nvoid enrichSDDL(def sddlStr, def Sd, def params, def ctx) {\n  Pattern sdOwnerPattern = /^O\\:[A-Z]{2}/;\n  Matcher sdOwnerMatcher = sdOwnerPattern.matcher(sddlStr);\n  if (sdOwnerMatcher.find()) {\n    ctx.winlog.event_data.put(Sd + \"Owner\", translateSID(sdOwnerMatcher.group(0), params));\n  }\n\n  Pattern sdGroupPattern = /^G\\:[A-Z]{2}/;\n  Matcher sdGroupMatcher = sdGroupPattern.matcher(sddlStr);\n  if (sdGroupMatcher.find()) {\n    ctx.winlog.event_data.put(Sd + \"Group\", translateSID(sdGroupMatcher.group(0), params));\n  }\n\n  Pattern sdDaclPattern = /(D:([A-Z]*(\\(.*\\))*))/;\n  Matcher sdDaclMatcher = sdDaclPattern.matcher(sddlStr);\n  if (sdDaclMatcher.find()) {\n    Pattern dacListPattern = /\\([^*\\)]*\\)/;\n    Matcher dacListMatcher = dacListPattern.matcher(sdDaclMatcher.group(1));\n    for (def i = 0; dacListMatcher.find(); i++) {\n      def newDacl = translateACL(dacListMatcher.group(0).replace(\"(\",\"\").replace(\")\",\"\"), params);\n      ctx.winlog.event_data.put(Sd + \"Dacl\" + i.toString(), newDacl['grantee'] + \" :\" + newDacl['type'] + \" (\" + newDacl['perms'] + \")\");\n      if ([\"Administrator\", \"Guest\", \"KRBTGT\"].contains(newDacl['grantee'])) {\n        if (ctx?.related == null) {\n          HashMap hm = new HashMap();\n          ctx.put(\"related\", hm);\n        }\n        if (ctx?.related?.user == null) {\n          ArrayList al = new ArrayList();\n          ctx.related.put(\"user\", al);\n        }\n        if (!ctx.related.user.contains(newDacl['grantee'])) {\n          ctx.related.user.add(newDacl['grantee']);\n        }\n      }\n    }\n  }\n\n  Pattern sdSaclPattern = /(S:([A-Z]*(\\(.*\\))*))?$/;\n  Matcher sdSaclMatcher = sdSaclPattern.matcher(sddlStr);\n  if (sdSaclMatcher.find()) {\n    Pattern sacListPattern = /\\([^*\\)]*\\)/;\n    Matcher sacListMatcher = sacListPattern.matcher(sdSaclMatcher.group(0));\n    for (def i = 0; sacListMatcher.find(); i++) {\n      def newSacl = translateACL(sacListMatcher.group(0).replace(\"(\",\"\").replace(\")\",\"\"), params);\n      ctx.winlog.event_data.put(Sd + \"Sacl\" + i.toString(), newSacl['grantee'] + \" :\" + newSacl['type'] + \" (\" + newSacl['perms'] + \")\");\n      if ([\"Administrator\", \"Guest\", \"KRBTGT\"].contains(newSacl['grantee'])) {\n        if (ctx?.related == null) {\n          HashMap hm = new HashMap();\n          ctx.put(\"related\", hm);\n        }\n        if (ctx?.related?.user == null) {\n          ArrayList al = new ArrayList();\n          ctx.related.put(\"user\", al);\n        }\n        if (!ctx.related.user.contains(newSacl['grantee'])) {\n          ctx.related.user.add(newSacl['grantee']);\n        }\n      }\n    }\n  }\n}\n\nvoid splitSidList(def sids, def params, def ctx) {\n  ArrayList al = new ArrayList();\n  def sidList = sids.splitOnToken(\" \");\n  ctx.winlog.event_data.put(\"SidList\", sidList);\n  for (def i = 0; i < sidList.length; i++ ) {\n    al.add(translateSID(sidList[i].replace(\"%\", \"\").replace(\"{\", \"\").replace(\"}\", \"\").replace(\" \",\"\"), params));\n  }\n  ctx.winlog.event_data.put(\"SidListDesc\", al);\n}\n\nif (ctx?.event?.code == null ||\n    ![\"4670\", \"4817\", \"4907\", \"4908\"].contains(ctx.event.code)) {\n  return;\n}\nif (ctx?.winlog?.event_data?.OldSd != null) {\n  enrichSDDL(ctx.winlog.event_data.OldSd, \"OldSd\", params, ctx);\n}\nif (ctx?.winlog?.event_data?.NewSd != null) {\n  enrichSDDL(ctx.winlog.event_data.NewSd, \"NewSd\", params, ctx);\n}\nif (ctx?.winlog?.event_data?.SidList != null) {\n  splitSidList(ctx.winlog.event_data.SidList, params, ctx);\n}"
        }
      },
      {
        "convert": {
          "field": "winlog.record_id",
          "type": "string",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "winlog.event_id",
          "type": "string",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "ecs.version",
          "value": "8.0.0"
        }
      },
      {
        "set": {
          "field": "log.level",
          "copy_from": "winlog.level",
          "ignore_empty_value": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.level != \"\""
        }
      },
      {
        "date": {
          "field": "winlog.time_created",
          "formats": [
            "ISO8601"
          ],
          "ignore_failure": true,
          "if": "ctx?.winlog?.time_created != null"
        }
      },
      {
        "pipeline": {
          "name": "logs-windows.forwarded@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "Processor \"{{ _ingest.on_failure_processor_type }}\" with tag \"{{ _ingest.on_failure_processor_tag }}\" in pipeline \"{{ _ingest.on_failure_pipeline }}\" failed with message \"{{ _ingest.on_failure_message }}\""
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "windows"
      }
    }
  },
  "logs-microsoft_dhcp.log-1.7.0-dhcp": {
    "description": "Pipeline for processing Microsoft DHCP Server logs.",
    "processors": [
      {
        "csv": {
          "field": "event.original",
          "target_fields": [
            "event.code",
            "_tmp_.date",
            "_tmp_.time",
            "message",
            "host.ip",
            "host.name",
            "_tmp_.mac",
            "user.name",
            "microsoft.dhcp.transaction_id",
            "microsoft.dhcp.result",
            "microsoft.dhcp.probation_time",
            "microsoft.dhcp.correlation_id",
            "microsoft.dhcp.dhc_id",
            "microsoft.dhcp.vendor.hex",
            "microsoft.dhcp.vendor.string",
            "microsoft.dhcp.user.hex",
            "microsoft.dhcp.user.string",
            "microsoft.dhcp.relay_agent_info",
            "microsoft.dhcp.dns_error_code"
          ],
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "host.name",
          "if": "ctx.host?.name != null && ctx.host.name.contains(\".\")",
          "patterns": [
            "%{HOSTNAME}\\.%{GREEDYDATA:host.domain}"
          ],
          "pattern_definitions": {
            "HOSTNAME": "[^.]+"
          },
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "_tmp_.timestamp",
          "value": "{{{_tmp_.date}}} {{{_tmp_.time}}}"
        }
      },
      {
        "date": {
          "field": "_tmp_.timestamp",
          "formats": [
            "MM/dd/yy HH:mm:ss"
          ],
          "timezone": "{{{event.timezone}}}"
        }
      },
      {
        "script": {
          "description": "Set event action, category, outcome, and type for all known event types.",
          "lang": "painless",
          "tag": "Add ECS categorization fields",
          "params": {
            "10": {
              "action": "dhcp-new",
              "category": [
                "network"
              ],
              "type": [
                "allowed",
                "connection"
              ]
            },
            "11": {
              "action": "dhcp-renew",
              "category": [
                "network"
              ],
              "type": [
                "allowed",
                "connection"
              ]
            },
            "12": {
              "action": "dhcp-release",
              "category": [
                "network"
              ],
              "type": [
                "allowed",
                "connection"
              ]
            },
            "13": {
              "category": [
                "network"
              ],
              "type": [
                "connection"
              ]
            },
            "14": {
              "category": [
                "network"
              ],
              "type": [
                "connection",
                "denied"
              ],
              "outcome": "failure"
            },
            "15": {
              "action": "dhcp-deny",
              "category": [
                "network"
              ],
              "type": [
                "connection",
                "denied"
              ],
              "outcome": "failure"
            },
            "16": {
              "action": "dhcp-delete",
              "category": [
                "network"
              ],
              "type": [
                "connection"
              ]
            },
            "17": {
              "action": "dhcp-expire",
              "category": [
                "network"
              ],
              "type": [
                "connection"
              ]
            },
            "18": {
              "action": "dhcp-expire",
              "category": [
                "network"
              ],
              "type": [
                "connection"
              ]
            },
            "20": {
              "category": [
                "network"
              ],
              "type": [
                "allowed",
                "connection"
              ]
            },
            "21": {
              "category": [
                "network"
              ],
              "type": [
                "allowed",
                "connection"
              ]
            },
            "22": {
              "category": [
                "network"
              ],
              "type": [
                "connection",
                "denied"
              ],
              "outcome": "failure"
            },
            "23": {
              "category": [
                "network"
              ],
              "type": [
                "connection",
                "denied"
              ],
              "outcome": "failure"
            },
            "24": {
              "action": "ip-cleanup-start",
              "category": [
                "process"
              ],
              "type": [
                "start"
              ]
            },
            "25": {
              "action": "ip-cleanup-end",
              "category": [
                "process"
              ],
              "type": [
                "start"
              ]
            },
            "30": {
              "action": "dhcp-dns-update",
              "category": [
                "network"
              ],
              "type": [
                "connection"
              ]
            },
            "31": {
              "action": "dhcp-dns-update",
              "category": [
                "network"
              ],
              "type": [
                "connection"
              ],
              "outcome": "failure"
            },
            "32": {
              "action": "dhcp-dns-update",
              "category": [
                "network"
              ],
              "type": [
                "connection"
              ]
            },
            "33": {
              "category": [
                "network"
              ],
              "type": [
                "connection"
              ],
              "outcome": "failure"
            },
            "34": {
              "action": "dhcp-dns-update",
              "category": [
                "network"
              ],
              "type": [
                "connection"
              ],
              "outcome": "failure"
            },
            "35": {
              "action": "dhcp-dns-update",
              "category": [
                "network"
              ],
              "type": [
                "connection",
                "denied"
              ],
              "outcome": "failure"
            },
            "36": {
              "category": [
                "network"
              ],
              "type": [
                "connection",
                "denied"
              ],
              "outcome": "failure"
            },
            "50": {
              "action": "rogue-server-detection",
              "category": [
                "authentication",
                "network"
              ],
              "type": [
                "connection"
              ],
              "outcome": "failure"
            },
            "51": {
              "action": "rogue-server-detection",
              "category": [
                "authentication",
                "network"
              ],
              "type": [
                "allowed",
                "connection"
              ]
            },
            "52": {
              "action": "rogue-server-detection",
              "category": [
                "authentication",
                "network"
              ],
              "type": [
                "connection"
              ]
            },
            "53": {
              "action": "rogue-server-detection",
              "category": [
                "authentication",
                "network"
              ],
              "type": [
                "allowed",
                "connection"
              ]
            },
            "54": {
              "action": "rogue-server-detection",
              "category": [
                "authentication",
                "network"
              ],
              "type": [
                "connection",
                "denied"
              ],
              "outcome": "failure"
            },
            "55": {
              "action": "rogue-server-detection",
              "category": [
                "authentication",
                "network"
              ],
              "type": [
                "allowed",
                "connection"
              ]
            },
            "56": {
              "action": "rogue-server-detection",
              "category": [
                "authentication",
                "network"
              ],
              "type": [
                "connection",
                "denied"
              ],
              "outcome": "failure"
            },
            "57": {
              "action": "rogue-server-detection",
              "category": [
                "authentication",
                "network"
              ],
              "type": [
                "connection"
              ]
            },
            "58": {
              "action": "rogue-server-detection",
              "category": [
                "authentication",
                "network"
              ],
              "type": [
                "connection"
              ],
              "outcome": "failure"
            },
            "59": {
              "action": "rogue-server-detection",
              "category": [
                "authentication",
                "network"
              ],
              "type": [
                "connection"
              ],
              "outcome": "failure"
            },
            "60": {
              "action": "rogue-server-detection",
              "category": [
                "authentication",
                "network"
              ],
              "type": [
                "connection"
              ]
            },
            "61": {
              "action": "rogue-server-detection",
              "category": [
                "authentication",
                "network"
              ],
              "type": [
                "connection"
              ]
            },
            "62": {
              "action": "rogue-server-detection",
              "category": [
                "authentication",
                "network"
              ],
              "type": [
                "connection"
              ]
            },
            "63": {
              "action": "rogue-server-detection",
              "category": [
                "authentication",
                "network"
              ],
              "type": [
                "connection"
              ]
            },
            "64": {
              "action": "rogue-server-detection",
              "category": [
                "authentication",
                "network"
              ],
              "type": [
                "connection"
              ]
            },
            "00": {
              "action": "log-start",
              "category": [
                "process"
              ],
              "type": [
                "start"
              ]
            },
            "01": {
              "action": "log-end",
              "category": [
                "process"
              ],
              "type": [
                "end"
              ]
            },
            "02": {
              "action": "log-pause",
              "category": [
                "process"
              ],
              "type": [
                "change"
              ],
              "outcome": "failure"
            }
          },
          "source": "if (ctx?.event?.code == null || params.get(ctx.event.code) == null) {\n  return;\n}\ndef hm = new HashMap(params[ctx.event.code]);\nhm.forEach((k, v) -> ctx.event[k] = v);"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "success",
          "if": "ctx?.event?.outcome == null"
        }
      },
      {
        "gsub": {
          "field": "_tmp_.mac",
          "pattern": "(..)(?!$)",
          "replacement": "$1-",
          "ignore_missing": true
        }
      },
      {
        "uppercase": {
          "field": "_tmp_.mac",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "if": "ctx?._tmp_?.mac != null",
          "field": "host.mac",
          "value": "{{{_tmp_.mac}}}"
        }
      },
      {
        "pipeline": {
          "name": "logs-microsoft_dhcp.log@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "Processor \"{{ _ingest.on_failure_processor_type }}\" with tag \"{{ _ingest.on_failure_processor_tag }}\" in pipeline \"{{ _ingest.on_failure_pipeline }}\" failed with message \"{{ _ingest.on_failure_message }}\""
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "microsoft_dhcp"
      }
    }
  },
  "metrics-system.fsstat-1.20.4": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-system.fsstat@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "system"
      }
    }
  },
  "metrics-endpoint.policy-8.4.1": {
    "description": "Pipeline for setting event.ingested",
    "processors": [
      {
        "set": {
          "field": "event.ingested",
          "value": "{{ _ingest.timestamp }}",
          "ignore_failure": true
        }
      },
      {
        "pipeline": {
          "name": "metrics-endpoint.policy@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "endpoint"
      }
    }
  },
  "traces-apm.rum-8.4.2": {
    "description": "Pipeline for ingesting APM RUM trace events.",
    "processors": [
      {
        "grok": {
          "field": "observer.version",
          "pattern_definitions": {
            "DIGITS": "(?:[0-9]+)"
          },
          "patterns": [
            "%{DIGITS:observer.version_major:int}.%{DIGITS:observer.version_minor:int}.%{DIGITS:observer.version_patch:int}(?:[-+].*)?"
          ]
        }
      },
      {
        "fail": {
          "if": "ctx.observer.version_major > 8 || (ctx.observer.version_major == 8 && ctx.observer.version_minor > 4)",
          "message": "Document produced by APM Server v{{{observer.version}}}, which is newer than the installed APM integration (v8.4.2). The APM integration must be upgraded."
        }
      },
      {
        "remove": {
          "field": [
            "observer.version_major",
            "observer.version_minor",
            "observer.version_patch"
          ],
          "ignore_missing": true
        }
      },
      {
        "user_agent": {
          "field": "user_agent.original",
          "ignore_failure": true,
          "ignore_missing": true,
          "target_field": "user_agent"
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-City.mmdb",
          "field": "client.ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "client.ip",
                "ignore_failure": true,
                "ignore_missing": true
              }
            }
          ],
          "target_field": "client.geo"
        }
      },
      {
        "script": {
          "if": "ctx.processor?.event != null && ctx.get(ctx.processor.event) != null && ctx.get(ctx.processor.event)?.duration == null",
          "source": "def durationNanos = ctx.event?.duration ?: 0;\ndef eventType = ctx.processor.event;\nctx.get(ctx.processor.event).duration = [\"us\": (int)(durationNanos/1000)];"
        }
      },
      {
        "remove": {
          "field": "event.duration",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "if": "ctx.processor?.event == 'span'",
          "field": [
            "host",
            "process",
            "user",
            "user_agent",
            "container",
            "kubernetes",
            "service.node",
            "service.version",
            "service.language",
            "service.runtime",
            "service.framework"
          ],
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "pipeline": {
          "name": "traces-apm.rum@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "apm"
      }
    }
  },
  "logs-aws.cloudtrail-1.25.2": {
    "description": "Pipeline for AWS CloudTrail Logs",
    "processors": [
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "if": "ctx.event?.original == null",
          "description": "Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document."
        }
      },
      {
        "remove": {
          "field": "message",
          "ignore_missing": true,
          "if": "ctx.event?.original != null",
          "description": "The `message` field is no longer required if the document has an `event.original` field."
        }
      },
      {
        "set": {
          "if": "ctx['@timestamp'] != null",
          "field": "event.created",
          "copy_from": "@timestamp"
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "json"
        }
      },
      {
        "pipeline": {
          "if": "ctx?.json?.preview != null",
          "name": "logs-aws.cloudtrail-1.25.2-third-party"
        }
      },
      {
        "set": {
          "field": "ecs.version",
          "value": "8.0.0"
        }
      },
      {
        "date": {
          "field": "json.eventTime",
          "target_field": "@timestamp",
          "ignore_failure": true,
          "formats": [
            "ISO8601"
          ]
        }
      },
      {
        "script": {
          "description": "Drops null/empty values recursively",
          "lang": "painless",
          "source": "boolean drop(Object o) {\n  if (o == null || o == \"\") {\n    return true;\n  } else if (o instanceof Map) {\n    ((Map) o).values().removeIf(v -> drop(v));\n    return (((Map) o).size() == 0);\n  } else if (o instanceof List) {\n    ((List) o).removeIf(v -> drop(v));\n    return (((List) o).length == 0);\n  }\n  return false;\n}\ndrop(ctx);\n"
        }
      },
      {
        "rename": {
          "field": "json.eventVersion",
          "target_field": "aws.cloudtrail.event_version",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.userIdentity.type",
          "target_field": "aws.cloudtrail.user_identity.type",
          "ignore_failure": true
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{json.userIdentity.userName}}",
          "allow_duplicates": false,
          "if": "ctx.json?.userIdentity?.userName != null"
        }
      },
      {
        "rename": {
          "field": "json.userIdentity.userName",
          "target_field": "user.name",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.userIdentity.principalId",
          "target_field": "user.id",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.userIdentity.arn",
          "target_field": "aws.cloudtrail.user_identity.arn",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.userIdentity.accountId",
          "target_field": "cloud.account.id",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.userIdentity.accessKeyId",
          "target_field": "aws.cloudtrail.user_identity.access_key_id",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.userIdentity.sessionContext.attributes.mfaAuthenticated",
          "target_field": "aws.cloudtrail.user_identity.session_context.mfa_authenticated",
          "ignore_failure": true
        }
      },
      {
        "date": {
          "field": "json.userIdentity.sessionContext.attributes.creationDate",
          "target_field": "aws.cloudtrail.user_identity.session_context.creation_date",
          "ignore_failure": true,
          "formats": [
            "ISO8601"
          ]
        }
      },
      {
        "rename": {
          "field": "json.userIdentity.sessionContext.sessionIssuer.type",
          "target_field": "aws.cloudtrail.user_identity.session_context.session_issuer.type",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.userIdentity.sessionContext.sessionIssuer.userName",
          "target_field": "user.name",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.userIdentity.sessionContext.sessionIssuer.principalId",
          "target_field": "aws.cloudtrail.user_identity.session_context.session_issuer.principal_id",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.userIdentity.sessionContext.sessionIssuer.arn",
          "target_field": "aws.cloudtrail.user_identity.session_context.session_issuer.arn",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.userIdentity.sessionContext.sessionIssuer.accountId",
          "target_field": "aws.cloudtrail.user_identity.session_context.session_issuer.account_id",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.userIdentity.invokedBy",
          "target_field": "aws.cloudtrail.user_identity.invoked_by",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.eventSource",
          "target_field": "event.provider",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "event.action",
          "value": "{{json.eventName}}",
          "ignore_failure": true,
          "ignore_empty_value": true
        }
      },
      {
        "rename": {
          "field": "json.eventCategory",
          "target_field": "aws.cloudtrail.event_category",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "cloud.region",
          "copy_from": "json.awsRegion",
          "ignore_empty_value": true
        }
      },
      {
        "rename": {
          "field": "json.sourceIPAddress",
          "target_field": "source.address",
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "source.address",
          "ignore_failure": true,
          "patterns": [
            "^%{IP:source.ip}$"
          ]
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "source.geo",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.asn",
          "target_field": "source.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.organization_name",
          "target_field": "source.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "user_agent": {
          "field": "json.userAgent",
          "target_field": "user_agent",
          "on_failure": [
            {
              "rename": {
                "field": "json.userAgent",
                "target_field": "user_agent.original",
                "ignore_failure": true
              }
            }
          ]
        }
      },
      {
        "rename": {
          "field": "json.errorCode",
          "target_field": "aws.cloudtrail.error_code",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.errorMessage",
          "target_field": "aws.cloudtrail.error_message",
          "ignore_failure": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "source": "if (ctx.aws.cloudtrail?.flattened == null) {\n    Map map = new HashMap();\n    ctx.aws.cloudtrail.put(\"flattened\", map);\n  }\nif (ctx.json?.requestParameters != null) {\n  ctx.aws.cloudtrail.request_parameters = ctx.json.requestParameters.toString();\n  if (ctx.aws.cloudtrail.request_parameters.length() < 32766) {\n    ctx.aws.cloudtrail.flattened.put(\"request_parameters\", ctx.json.requestParameters);\n  }\n}\nif (ctx.json?.responseElements != null) {\n  ctx.aws.cloudtrail.response_elements = ctx.json.responseElements.toString();\n  if (ctx.aws.cloudtrail.response_elements.length() < 32766) {\n    ctx.aws.cloudtrail.flattened.put(\"response_elements\", ctx.json.responseElements);\n  }\n}\nif (ctx.json?.additionalEventData != null) {\n  ctx.aws.cloudtrail.additional_eventdata = ctx.json.additionalEventData.toString();\n  if (ctx.aws.cloudtrail.additional_eventdata.length() < 32766) {\n    ctx.aws.cloudtrail.flattened.put(\"additional_eventdata\", ctx.json.additionalEventData);\n  }\n}\nif (ctx.json?.serviceEventDetails != null) {\n  ctx.aws.cloudtrail.service_event_details = ctx.json.serviceEventDetails.toString();\n  if (ctx.aws.cloudtrail.service_event_details.length() < 32766) {\n    ctx.aws.cloudtrail.flattened.put(\"service_event_details\", ctx.json.serviceEventDetails);\n  }\n}\n",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.requestID",
          "target_field": "aws.cloudtrail.request_id",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.eventID",
          "target_field": "event.id",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.eventType",
          "target_field": "aws.cloudtrail.event_type",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.apiVersion",
          "target_field": "aws.cloudtrail.api_version",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.managementEvent",
          "target_field": "aws.cloudtrail.management_event",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.readOnly",
          "target_field": "aws.cloudtrail.read_only",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.resources.ARN",
          "target_field": "aws.cloudtrail.resources.arn",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.resources.accountId",
          "target_field": "aws.cloudtrail.resources.account_id",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.resources.type",
          "target_field": "aws.cloudtrail.resources.type",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.recipientAccountId",
          "target_field": "aws.cloudtrail.recipient_account_id",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.sharedEventId",
          "target_field": "aws.cloudtrail.shared_event_id",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.vpcEndpointId",
          "target_field": "aws.cloudtrail.vpc_endpoint_id",
          "ignore_failure": true
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{aws.cloudtrail.flattened.request_parameters.userName}}",
          "allow_duplicates": false,
          "if": "ctx.aws?.cloudtrail?.flattened?.request_parameters?.userName != null"
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{aws.cloudtrail.flattened.request_parameters.newUserName}}",
          "allow_duplicates": false,
          "if": "ctx.aws?.cloudtrail?.flattened?.request_parameters?.newUserName != null"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": true,
          "source": "if (ctx.json?.eventName != 'ConsoleLogin') {\n  return;\n} Map aed_map = new HashMap(); if (ctx?.aws?.cloudtrail?.flattened?.additional_eventdata?.MobileVersion != null) {\n  if (ctx.aws.cloudtrail.flattened.additional_eventdata.MobileVersion == 'No') {\n    aed_map.put(\"mobile_version\", false);\n  } else {\n    aed_map.put(\"mobile_version\", true);\n  }\n} if (ctx?.aws?.cloudtrail?.flattened?.additional_eventdata?.LoginTo != null) {\n  aed_map.put(\"login_to\", ctx.aws.cloudtrail.flattened.additional_eventdata.LoginTo);\n} if (ctx?.aws?.cloudtrail?.flattened?.additional_eventdata?.MFAUsed != null) {\n  if (ctx.aws.cloudtrail.flattened.additional_eventdata.MFAUsed == 'No') {\n    aed_map.put(\"mfa_used\", false);\n  } else {\n    aed_map.put(\"mfa_used\", true);\n  }\n} if (aed_map.size() > 0) {\n  Map cl_map = new HashMap();\n  cl_map.put(\"additional_eventdata\", aed_map);\n  ctx.aws.cloudtrail.put(\"console_login\", cl_map);\n}"
        }
      },
      {
        "script": {
          "lang": "painless",
          "tag": "Add ECS categorization",
          "params": {
            "AddUserToGroup": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ]
            },
            "AssumeRole": {
              "category": [
                "authentication"
              ],
              "type": [
                "info"
              ]
            },
            "AttachGroupPolicy": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ]
            },
            "AttachUserPolicy": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ]
            },
            "ChangePassword": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ]
            },
            "ConsoleLogin": {
              "category": [
                "authentication"
              ],
              "type": [
                "info"
              ]
            },
            "CreateAccessKey": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ]
            },
            "CreateBucket": {
              "category": [
                "file"
              ],
              "type": [
                "creation"
              ]
            },
            "CreateGroup": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "creation"
              ]
            },
            "CreateKeyPair": {
              "category": [
                "iam"
              ],
              "type": [
                "admin",
                "creation"
              ]
            },
            "CreateUser": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "creation"
              ]
            },
            "CreateVirtualMFADevice": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ]
            },
            "DeactivateMFADevice": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ]
            },
            "DeleteAccessKey": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ]
            },
            "DeleteBucket": {
              "category": [
                "file"
              ],
              "type": [
                "deletion"
              ]
            },
            "DeleteGroup": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "deletion"
              ]
            },
            "DeleteGroupPolicy": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ]
            },
            "DeleteSSHPublicKey": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ]
            },
            "DeleteUser": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "deletion"
              ]
            },
            "DeleteUserPermissionsBoundary": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ]
            },
            "DeleteUserPolicy": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ]
            },
            "DeleteVirtualMFADevice": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ]
            },
            "DetachGroupPolicy": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ]
            },
            "DetachUserPolicy": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ]
            },
            "EnableMFADevice": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ]
            },
            "GetGroup": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "info"
              ]
            },
            "GetGroupPolicy": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "info"
              ]
            },
            "GetUser": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "info"
              ]
            },
            "GetUserPolicy": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "info"
              ]
            },
            "ListAttachedGroupPolicies": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "info"
              ]
            },
            "ListAttachedUserPolicies": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "info"
              ]
            },
            "ListGroupPolicies": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "info"
              ]
            },
            "ListGroups": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "info"
              ]
            },
            "ListGroupsForUser": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "info"
              ]
            },
            "ListUserPolicies": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "info"
              ]
            },
            "ListUsers": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "info"
              ]
            },
            "ListUserTags": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "info"
              ]
            },
            "PutGroupPolicy": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ]
            },
            "PutUserPermissionsBoundary": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ]
            },
            "PutUserPolicy": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ]
            },
            "RemoveUserFromGroup": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ]
            },
            "SetDefaultPolicyVersion": {
              "category": [
                "iam"
              ],
              "type": [
                "admin",
                "change"
              ]
            },
            "SetSecurityTokenServicePreferences": {
              "category": [
                "iam"
              ],
              "type": [
                "admin",
                "change"
              ]
            },
            "TagUser": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ]
            },
            "UntagUser": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ]
            },
            "UpdateAccessKey": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ]
            },
            "UpdateAccountPasswordPolicy": {
              "category": [
                "iam"
              ],
              "type": [
                "admin",
                "change"
              ]
            },
            "UpdateGroup": {
              "category": [
                "iam"
              ],
              "type": [
                "group",
                "change"
              ]
            },
            "UpdateLoginProfile": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ]
            },
            "UpdateRole": {
              "category": [
                "iam"
              ],
              "type": [
                "admin",
                "change"
              ]
            },
            "UpdateSSHPublicKey": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ]
            },
            "UpdateUser": {
              "category": [
                "iam"
              ],
              "type": [
                "user",
                "change"
              ]
            }
          },
          "source": "ctx.event.kind = 'event'; ctx.event.type = 'info';\nif (ctx?.aws?.cloudtrail?.error_code != null || ctx?.aws?.cloudtrail?.error_message != null) {\n    ctx.event.outcome = 'failure'\n} else {\n    ctx.event.outcome = 'success'\n}\nif (ctx?.event?.action == null) {\n    return;\n}\nif (ctx.event.action == 'ConsoleLogin' && ctx?.aws?.cloudtrail?.flattened?.response_elements.ConsoleLogin != null) {\n    ctx.event.outcome = Processors.lowercase(ctx.aws.cloudtrail.flattened.response_elements.ConsoleLogin);\n}\nif (params.get(ctx.event.action) == null) {\n    return;\n}\ndef hm = new HashMap(params.get(ctx.event.action)); hm.forEach((k, v) -> ctx.event[k] = v);"
        }
      },
      {
        "rename": {
          "field": "json.awsAccountId",
          "target_field": "cloud.account.id",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.digestS3Object",
          "target_field": "file.path",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.previousDigestSignature",
          "target_field": "file.hash.sha256",
          "if": "ctx.json?.previousDigestHashAlgorithm != null && ctx.json?.previousDigestHashAlgorithm == 'SHA-256'"
        }
      },
      {
        "append": {
          "field": "related.hash",
          "value": "{{file.hash.sha256}}",
          "if": "ctx.file?.hash?.sha256 != null"
        }
      },
      {
        "rename": {
          "field": "json.logFiles",
          "target_field": "aws.cloudtrail.digest.log_files",
          "ignore_failure": true
        }
      },
      {
        "date": {
          "field": "json.digestStartTime",
          "target_field": "aws.cloudtrail.digest.start_time",
          "ignore_failure": true,
          "formats": [
            "ISO8601"
          ]
        }
      },
      {
        "date": {
          "field": "json.digestEndTime",
          "target_field": "@timestamp",
          "ignore_failure": true,
          "formats": [
            "ISO8601"
          ]
        }
      },
      {
        "date": {
          "field": "json.digestEndTime",
          "target_field": "aws.cloudtrail.digest.end_time",
          "ignore_failure": true,
          "formats": [
            "ISO8601"
          ]
        }
      },
      {
        "rename": {
          "field": "json.digestS3Bucket",
          "target_field": "aws.cloudtrail.digest.s3_bucket",
          "ignore_failure": true
        }
      },
      {
        "date": {
          "field": "json.newestEventTime",
          "target_field": "aws.cloudtrail.digest.newest_event_time",
          "ignore_failure": true,
          "formats": [
            "ISO8601"
          ]
        }
      },
      {
        "date": {
          "field": "json.oldestEventTime",
          "target_field": "aws.cloudtrail.digest.oldest_event_time",
          "ignore_failure": true,
          "formats": [
            "ISO8601"
          ]
        }
      },
      {
        "rename": {
          "field": "json.previousDigestS3Bucket",
          "target_field": "aws.cloudtrail.digest.previous_s3_bucket",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.previousDigestHashAlgorithm",
          "target_field": "aws.cloudtrail.digest.previous_hash_algorithm",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.publicKeyFingerprint",
          "target_field": "aws.cloudtrail.digest.public_key_fingerprint",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.digestSignatureAlgorithm",
          "target_field": "aws.cloudtrail.digest.signature_algorithm",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.insightDetails",
          "target_field": "aws.cloudtrail.insight_details",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "group.id",
          "value": "{{aws.cloudtrail.flattened.response_elements.group.groupId}}",
          "ignore_empty_value": true,
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "user.target.id",
          "value": "{{aws.cloudtrail.flattened.response_elements.user.userId}}",
          "ignore_empty_value": true,
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "user.changes.name",
          "value": "{{aws.cloudtrail.flattened.request_parameters.newUserName}}",
          "ignore_empty_value": true,
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "group.name",
          "value": "{{aws.cloudtrail.flattened.request_parameters.groupName}}",
          "ignore_empty_value": true,
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "user.target.name",
          "value": "{{aws.cloudtrail.flattened.request_parameters.userName}}",
          "ignore_empty_value": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "aws.cloudtrail.digest",
          "target_field": "aws.cloudtrail.flattened.digest",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.cloudtrail.insight_details",
          "target_field": "aws.cloudtrail.flattened.insight_details",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "json",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-aws.cloudtrail@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "Processor \"{{ _ingest.on_failure_processor_type }}\" with tag \"{{ _ingest.on_failure_processor_tag }}\" in pipeline \"{{ _ingest.on_failure_pipeline }}\" failed with message \"{{ _ingest.on_failure_message }}\""
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "logs-elastic_agent.endpoint_security-1.3.5": {
    "processors": [
      {
        "pipeline": {
          "name": "logs-elastic_agent.endpoint_security@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "elastic_agent"
      }
    }
  },
  "logs-aws.securityhub_insights-1.25.2": {
    "description": "Pipeline for processing AWS Security Hub Insights logs.",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.2.0"
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "set": {
          "field": "event.type",
          "value": [
            "info"
          ]
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "json",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.AwsAccountId",
          "target_field": "aws.securityhub_insights.filters.aws_account_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.CompanyName",
          "target_field": "aws.securityhub_insights.filters.company.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ComplianceStatus",
          "target_field": "aws.securityhub_insights.filters.compliance.status",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.Confidence",
          "target_field": "aws.securityhub_insights.filters.confidence",
          "ignore_missing": true
        }
      },
      {
        "foreach": {
          "field": "json.Filters.CreatedAt",
          "processor": {
            "rename": {
              "field": "_ingest._value.DateRange.Unit",
              "target_field": "_ingest._value.date_range.unit",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.CreatedAt != null && ctx.json?.Filters?.CreatedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.CreatedAt",
          "processor": {
            "rename": {
              "field": "_ingest._value.DateRange.Value",
              "target_field": "_ingest._value.date_range.value",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.CreatedAt != null && ctx.json?.Filters?.CreatedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.CreatedAt",
          "processor": {
            "date": {
              "field": "_ingest._value.End",
              "target_field": "_ingest._value.end",
              "formats": [
                "ISO8601",
                "yyyy-MM-dd HH:mm:ss.SSS"
              ],
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.CreatedAt != null && ctx.json?.Filters?.CreatedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.CreatedAt",
          "processor": {
            "date": {
              "field": "_ingest._value.Start",
              "target_field": "_ingest._value.start",
              "formats": [
                "ISO8601",
                "yyyy-MM-dd HH:mm:ss.SSS"
              ],
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.CreatedAt != null && ctx.json?.Filters?.CreatedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.CreatedAt",
          "processor": {
            "remove": {
              "field": [
                "_ingest._value.Start",
                "_ingest._value.End"
              ],
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.CreatedAt != null && ctx.json?.Filters?.CreatedAt instanceof List"
        }
      },
      {
        "rename": {
          "field": "json.Filters.CreatedAt",
          "target_field": "aws.securityhub_insights.filters.created_at",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.Criticality",
          "target_field": "aws.securityhub_insights.filters.criticality",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.Description",
          "target_field": "aws.securityhub_insights.filters.description",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.FindingProviderFieldsConfidence",
          "target_field": "aws.securityhub_insights.filters.finding_provider_fields.confidence",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.FindingProviderFieldsCriticality",
          "target_field": "aws.securityhub_insights.filters.finding_provider_fields.criticality",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.FindingProviderFieldsRelatedFindingsId",
          "target_field": "aws.securityhub_insights.filters.finding_provider_fields.related_findings.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.FindingProviderFieldsRelatedFindingsProductArn",
          "target_field": "aws.securityhub_insights.filters.finding_provider_fields.related_findings.product.arn",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.FindingProviderFieldsSeverityLabel",
          "target_field": "aws.securityhub_insights.filters.finding_provider_fields.severity.label",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.FindingProviderFieldsSeverityOriginal",
          "target_field": "aws.securityhub_insights.filters.finding_provider_fields.severity.original",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.FindingProviderFieldsTypes",
          "target_field": "aws.securityhub_insights.filters.finding_provider_fields.types",
          "ignore_missing": true
        }
      },
      {
        "foreach": {
          "field": "json.Filters.FirstObservedAt",
          "processor": {
            "rename": {
              "field": "_ingest._value.DateRange.Unit",
              "target_field": "_ingest._value.date_range.unit",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.FirstObservedAt != null && ctx.json?.Filters?.FirstObservedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.FirstObservedAt",
          "processor": {
            "rename": {
              "field": "_ingest._value.DateRange.Value",
              "target_field": "_ingest._value.date_range.value",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.FirstObservedAt != null && ctx.json?.Filters?.FirstObservedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.FirstObservedAt",
          "processor": {
            "date": {
              "field": "_ingest._value.End",
              "target_field": "_ingest._value.end",
              "formats": [
                "ISO8601",
                "yyyy-MM-dd HH:mm:ss.SSS"
              ],
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.FirstObservedAt != null && ctx.json?.Filters?.FirstObservedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.FirstObservedAt",
          "processor": {
            "date": {
              "field": "_ingest._value.Start",
              "target_field": "_ingest._value.start",
              "formats": [
                "ISO8601",
                "yyyy-MM-dd HH:mm:ss.SSS"
              ],
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.FirstObservedAt != null && ctx.json?.Filters?.FirstObservedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.FirstObservedAt",
          "processor": {
            "remove": {
              "field": [
                "_ingest._value.Start",
                "_ingest._value.End"
              ],
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.FirstObservedAt != null && ctx.json?.Filters?.FirstObservedAt instanceof List"
        }
      },
      {
        "rename": {
          "field": "json.Filters.FirstObservedAt",
          "target_field": "aws.securityhub_insights.filters.first_observed_at",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.GeneratorId",
          "target_field": "aws.securityhub_insights.filters.generator.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.Id",
          "target_field": "aws.securityhub_insights.filters.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.Keyword",
          "target_field": "aws.securityhub_insights.filters.keyword",
          "ignore_missing": true
        }
      },
      {
        "foreach": {
          "field": "json.Filters.LastObservedAt",
          "processor": {
            "rename": {
              "field": "_ingest._value.DateRange.Unit",
              "target_field": "_ingest._value.date_range.unit",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.LastObservedAt != null && ctx.json?.Filters?.LastObservedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.LastObservedAt",
          "processor": {
            "rename": {
              "field": "_ingest._value.DateRange.Value",
              "target_field": "_ingest._value.date_range.value",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.LastObservedAt != null && ctx.json?.Filters?.LastObservedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.LastObservedAt",
          "processor": {
            "date": {
              "field": "_ingest._value.End",
              "target_field": "_ingest._value.end",
              "formats": [
                "ISO8601",
                "yyyy-MM-dd HH:mm:ss.SSS"
              ],
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.LastObservedAt != null && ctx.json?.Filters?.LastObservedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.LastObservedAt",
          "processor": {
            "date": {
              "field": "_ingest._value.Start",
              "target_field": "_ingest._value.start",
              "formats": [
                "ISO8601",
                "yyyy-MM-dd HH:mm:ss.SSS"
              ],
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.LastObservedAt != null && ctx.json?.Filters?.LastObservedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.LastObservedAt",
          "processor": {
            "remove": {
              "field": [
                "_ingest._value.Start",
                "_ingest._value.End"
              ],
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.LastObservedAt != null && ctx.json?.Filters?.LastObservedAt instanceof List"
        }
      },
      {
        "rename": {
          "field": "json.Filters.LastObservedAt",
          "target_field": "aws.securityhub_insights.filters.last_observed_at",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.MalwareName",
          "target_field": "aws.securityhub_insights.filters.malware.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.MalwarePath",
          "target_field": "aws.securityhub_insights.filters.malware.path",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.MalwareState",
          "target_field": "aws.securityhub_insights.filters.malware.state",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.MalwareType",
          "target_field": "aws.securityhub_insights.filters.malware.type",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.NetworkDestinationDomain",
          "target_field": "aws.securityhub_insights.filters.network.destination.domain",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.NetworkDestinationIpV4",
          "target_field": "aws.securityhub_insights.filters.network.destination.ip.v4",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.NetworkDestinationIpV6",
          "target_field": "aws.securityhub_insights.filters.network.destination.ip.v6",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.NetworkDestinationPort",
          "target_field": "aws.securityhub_insights.filters.network.destination.port",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.NetworkDirection",
          "target_field": "aws.securityhub_insights.filters.network.direction",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.NetworkProtocol",
          "target_field": "aws.securityhub_insights.filters.network.protocol",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.NetworkSourceDomain",
          "target_field": "aws.securityhub_insights.filters.network.source.domain",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.NetworkSourceIpV4",
          "target_field": "aws.securityhub_insights.filters.network.source.ip.v4",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.NetworkSourceIpV6",
          "target_field": "aws.securityhub_insights.filters.network.source.ip.v6",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.NetworkSourceMac",
          "target_field": "aws.securityhub_insights.filters.network.source.mac",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.NetworkSourcePort",
          "target_field": "aws.securityhub_insights.filters.network.source.port",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.NoteText",
          "target_field": "aws.securityhub_insights.filters.note.text",
          "ignore_missing": true
        }
      },
      {
        "foreach": {
          "field": "json.Filters.NoteUpdatedAt",
          "processor": {
            "rename": {
              "field": "_ingest._value.DateRange.Unit",
              "target_field": "_ingest._value.date_range.unit",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.NoteUpdatedAt != null && ctx.json?.Filters?.NoteUpdatedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.NoteUpdatedAt",
          "processor": {
            "rename": {
              "field": "_ingest._value.DateRange.Value",
              "target_field": "_ingest._value.date_range.value",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.NoteUpdatedAt != null && ctx.json?.Filters?.NoteUpdatedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.NoteUpdatedAt",
          "processor": {
            "date": {
              "field": "_ingest._value.End",
              "target_field": "_ingest._value.end",
              "formats": [
                "ISO8601",
                "yyyy-MM-dd HH:mm:ss.SSS"
              ],
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.NoteUpdatedAt != null && ctx.json?.Filters?.NoteUpdatedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.NoteUpdatedAt",
          "processor": {
            "date": {
              "field": "_ingest._value.Start",
              "target_field": "_ingest._value.start",
              "formats": [
                "ISO8601",
                "yyyy-MM-dd HH:mm:ss.SSS"
              ],
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.NoteUpdatedAt != null && ctx.json?.Filters?.NoteUpdatedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.NoteUpdatedAt",
          "processor": {
            "remove": {
              "field": [
                "_ingest._value.Start",
                "_ingest._value.End"
              ],
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.NoteUpdatedAt != null && ctx.json?.Filters?.NoteUpdatedAt instanceof List"
        }
      },
      {
        "rename": {
          "field": "json.Filters.NoteUpdatedAt",
          "target_field": "aws.securityhub_insights.filters.note.updated_at",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.NoteUpdatedBy",
          "target_field": "aws.securityhub_insights.filters.note.updated_by",
          "ignore_missing": true
        }
      },
      {
        "foreach": {
          "field": "json.Filters.ProcessLaunchedAt",
          "processor": {
            "rename": {
              "field": "_ingest._value.DateRange.Unit",
              "target_field": "_ingest._value.date_range.unit",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.ProcessLaunchedAt != null && ctx.json?.Filters?.ProcessLaunchedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.ProcessLaunchedAt",
          "processor": {
            "rename": {
              "field": "_ingest._value.DateRange.Value",
              "target_field": "_ingest._value.date_range.value",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.ProcessLaunchedAt != null && ctx.json?.Filters?.ProcessLaunchedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.ProcessLaunchedAt",
          "processor": {
            "date": {
              "field": "_ingest._value.End",
              "target_field": "_ingest._value.end",
              "formats": [
                "ISO8601",
                "yyyy-MM-dd HH:mm:ss.SSS"
              ],
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.ProcessLaunchedAt != null && ctx.json?.Filters?.ProcessLaunchedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.ProcessLaunchedAt",
          "processor": {
            "date": {
              "field": "_ingest._value.Start",
              "target_field": "_ingest._value.start",
              "formats": [
                "ISO8601",
                "yyyy-MM-dd HH:mm:ss.SSS"
              ],
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.ProcessLaunchedAt != null && ctx.json?.Filters?.ProcessLaunchedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.ProcessLaunchedAt",
          "processor": {
            "remove": {
              "field": [
                "_ingest._value.Start",
                "_ingest._value.End"
              ],
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.ProcessLaunchedAt != null && ctx.json?.Filters?.ProcessLaunchedAt instanceof List"
        }
      },
      {
        "rename": {
          "field": "json.Filters.ProcessLaunchedAt",
          "target_field": "aws.securityhub_insights.filters.process.launched_at",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ProcessName",
          "target_field": "aws.securityhub_insights.filters.process.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ProcessParentPid",
          "target_field": "aws.securityhub_insights.filters.process.parent.pid",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ProcessPath",
          "target_field": "aws.securityhub_insights.filters.process.path",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ProcessPid",
          "target_field": "aws.securityhub_insights.filters.process.pid",
          "ignore_missing": true
        }
      },
      {
        "foreach": {
          "field": "json.Filters.ProcessTerminatedAt",
          "processor": {
            "rename": {
              "field": "_ingest._value.DateRange.Unit",
              "target_field": "_ingest._value.date_range.unit",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.ProcessTerminatedAt != null && ctx.json?.Filters?.ProcessTerminatedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.ProcessTerminatedAt",
          "processor": {
            "rename": {
              "field": "_ingest._value.DateRange.Value",
              "target_field": "_ingest._value.date_range.value",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.ProcessTerminatedAt != null && ctx.json?.Filters?.ProcessTerminatedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.ProcessTerminatedAt",
          "processor": {
            "date": {
              "field": "_ingest._value.End",
              "target_field": "_ingest._value.end",
              "formats": [
                "ISO8601",
                "yyyy-MM-dd HH:mm:ss.SSS"
              ],
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.ProcessTerminatedAt != null && ctx.json?.Filters?.ProcessTerminatedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.ProcessTerminatedAt",
          "processor": {
            "date": {
              "field": "_ingest._value.Start",
              "target_field": "_ingest._value.start",
              "formats": [
                "ISO8601",
                "yyyy-MM-dd HH:mm:ss.SSS"
              ],
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.ProcessTerminatedAt != null && ctx.json?.Filters?.ProcessTerminatedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.ProcessTerminatedAt",
          "processor": {
            "remove": {
              "field": [
                "_ingest._value.Start",
                "_ingest._value.End"
              ],
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.ProcessTerminatedAt != null && ctx.json?.Filters?.ProcessTerminatedAt instanceof List"
        }
      },
      {
        "rename": {
          "field": "json.Filters.ProcessTerminatedAt",
          "target_field": "aws.securityhub_insights.filters.process.terminated_at",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ProductArn",
          "target_field": "aws.securityhub_insights.filters.product.arn",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ProductFields",
          "target_field": "aws.securityhub_insights.filters.product.fields",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ProductName",
          "target_field": "aws.securityhub_insights.filters.product.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.RecommendationText",
          "target_field": "aws.securityhub_insights.filters.recommendation_text",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.RecordState",
          "target_field": "aws.securityhub_insights.filters.record_state",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.Region",
          "target_field": "aws.securityhub_insights.filters.region",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.RelatedFindingsId",
          "target_field": "aws.securityhub_insights.filters.related_findings.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.RelatedFindingsProductArn",
          "target_field": "aws.securityhub_insights.filters.related_findings.product.arn",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ResourceAwsEc2InstanceIamInstanceProfileArn",
          "target_field": "aws.securityhub_insights.filters.resource.aws_ec2_instance.iam_instance_profile.arn",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ResourceAwsEc2InstanceImageId",
          "target_field": "aws.securityhub_insights.filters.resource.aws_ec2_instance.image.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ResourceAwsEc2InstanceIpV4Addresses",
          "target_field": "aws.securityhub_insights.filters.resource.aws_ec2_instance.ip.v4_addresses",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ResourceAwsEc2InstanceIpV6Addresses",
          "target_field": "aws.securityhub_insights.filters.resource.aws_ec2_instance.ip.v6_addresses",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ResourceAwsEc2InstanceKeyName",
          "target_field": "aws.securityhub_insights.filters.resource.aws_ec2_instance.key.name",
          "ignore_missing": true
        }
      },
      {
        "foreach": {
          "field": "json.Filters.ResourceAwsEc2InstanceLaunchedAt",
          "processor": {
            "rename": {
              "field": "_ingest._value.DateRange.Unit",
              "target_field": "_ingest._value.date_range.unit",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.ResourceAwsEc2InstanceLaunchedAt != null && ctx.json?.Filters?.ResourceAwsEc2InstanceLaunchedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.ResourceAwsEc2InstanceLaunchedAt",
          "processor": {
            "rename": {
              "field": "_ingest._value.DateRange.Value",
              "target_field": "_ingest._value.date_range.value",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.ResourceAwsEc2InstanceLaunchedAt != null && ctx.json?.Filters?.ResourceAwsEc2InstanceLaunchedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.ResourceAwsEc2InstanceLaunchedAt",
          "processor": {
            "date": {
              "field": "_ingest._value.End",
              "target_field": "_ingest._value.end",
              "formats": [
                "ISO8601",
                "yyyy-MM-dd HH:mm:ss.SSS"
              ],
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.ResourceAwsEc2InstanceLaunchedAt != null && ctx.json?.Filters?.ResourceAwsEc2InstanceLaunchedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.ResourceAwsEc2InstanceLaunchedAt",
          "processor": {
            "date": {
              "field": "_ingest._value.Start",
              "target_field": "_ingest._value.start",
              "formats": [
                "ISO8601",
                "yyyy-MM-dd HH:mm:ss.SSS"
              ],
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.ResourceAwsEc2InstanceLaunchedAt != null && ctx.json?.Filters?.ResourceAwsEc2InstanceLaunchedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.ResourceAwsEc2InstanceLaunchedAt",
          "processor": {
            "remove": {
              "field": [
                "_ingest._value.Start",
                "_ingest._value.End"
              ],
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.ResourceAwsEc2InstanceLaunchedAt != null && ctx.json?.Filters?.ResourceAwsEc2InstanceLaunchedAt instanceof List"
        }
      },
      {
        "rename": {
          "field": "json.Filters.ResourceAwsEc2InstanceLaunchedAt",
          "target_field": "aws.securityhub_insights.filters.resource.aws_ec2_instance.launched_at",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ResourceAwsEc2InstanceSubnetId",
          "target_field": "aws.securityhub_insights.filters.resource.aws_ec2_instance.subnet.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ResourceAwsEc2InstanceType",
          "target_field": "aws.securityhub_insights.filters.resource.aws_ec2_instance.type",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ResourceAwsEc2InstanceVpcId",
          "target_field": "aws.securityhub_insights.filters.resource.aws_ec2_instance.vpc.id",
          "ignore_missing": true
        }
      },
      {
        "foreach": {
          "field": "json.Filters.ResourceAwsIamAccessKeyCreatedAt",
          "processor": {
            "rename": {
              "field": "_ingest._value.DateRange.Unit",
              "target_field": "_ingest._value.date_range.unit",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.ResourceAwsIamAccessKeyCreatedAt != null && ctx.json?.Filters?.ResourceAwsIamAccessKeyCreatedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.ResourceAwsIamAccessKeyCreatedAt",
          "processor": {
            "rename": {
              "field": "_ingest._value.DateRange.Value",
              "target_field": "_ingest._value.date_range.value",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.ResourceAwsIamAccessKeyCreatedAt != null && ctx.json?.Filters?.ResourceAwsIamAccessKeyCreatedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.ResourceAwsIamAccessKeyCreatedAt",
          "processor": {
            "date": {
              "field": "_ingest._value.End",
              "target_field": "_ingest._value.end",
              "formats": [
                "ISO8601",
                "yyyy-MM-dd HH:mm:ss.SSS"
              ],
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.ResourceAwsIamAccessKeyCreatedAt != null && ctx.json?.Filters?.ResourceAwsIamAccessKeyCreatedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.ResourceAwsIamAccessKeyCreatedAt",
          "processor": {
            "date": {
              "field": "_ingest._value.Start",
              "target_field": "_ingest._value.start",
              "formats": [
                "ISO8601",
                "yyyy-MM-dd HH:mm:ss.SSS"
              ],
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.ResourceAwsIamAccessKeyCreatedAt != null && ctx.json?.Filters?.ResourceAwsIamAccessKeyCreatedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.ResourceAwsIamAccessKeyCreatedAt",
          "processor": {
            "remove": {
              "field": [
                "_ingest._value.Start",
                "_ingest._value.End"
              ],
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.ResourceAwsIamAccessKeyCreatedAt != null && ctx.json?.Filters?.ResourceAwsIamAccessKeyCreatedAt instanceof List"
        }
      },
      {
        "rename": {
          "field": "json.Filters.ResourceAwsIamAccessKeyCreatedAt",
          "target_field": "aws.securityhub_insights.filters.resource.aws_iam_access_key.created_at",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ResourceAwsIamAccessKeyPrincipalName",
          "target_field": "aws.securityhub_insights.filters.resource.aws_iam_access_key.principal.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ResourceAwsIamAccessKeyStatus",
          "target_field": "aws.securityhub_insights.filters.resource.aws_iam_access_key.status",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ResourceAwsIamAccessKeyUserName",
          "target_field": "aws.securityhub_insights.filters.resource.aws_iam_access_key.user.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ResourceAwsIamUserUserName",
          "target_field": "aws.securityhub_insights.filters.resource.aws_iam_user.user.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ResourceAwsS3BucketOwnerId",
          "target_field": "aws.securityhub_insights.filters.resource.aws_s3_bucket.owner.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ResourceAwsS3BucketOwnerName",
          "target_field": "aws.securityhub_insights.filters.resource.aws_s3_bucket.owner.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ResourceContainerImageId",
          "target_field": "aws.securityhub_insights.filters.resource.container.image.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ResourceContainerImageName",
          "target_field": "aws.securityhub_insights.filters.resource.container.image.name",
          "ignore_missing": true
        }
      },
      {
        "foreach": {
          "field": "json.Filters.ResourceContainerLaunchedAt",
          "processor": {
            "rename": {
              "field": "_ingest._value.DateRange.Unit",
              "target_field": "_ingest._value.date_range.unit",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.ResourceContainerLaunchedAt != null && ctx.json?.Filters?.ResourceContainerLaunchedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.ResourceContainerLaunchedAt",
          "processor": {
            "rename": {
              "field": "_ingest._value.DateRange.Value",
              "target_field": "_ingest._value.date_range.value",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.ResourceContainerLaunchedAt != null && ctx.json?.Filters?.ResourceContainerLaunchedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.ResourceContainerLaunchedAt",
          "processor": {
            "date": {
              "field": "_ingest._value.End",
              "target_field": "_ingest._value.end",
              "formats": [
                "ISO8601",
                "yyyy-MM-dd HH:mm:ss.SSS"
              ],
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.ResourceContainerLaunchedAt != null && ctx.json?.Filters?.ResourceContainerLaunchedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.ResourceContainerLaunchedAt",
          "processor": {
            "date": {
              "field": "_ingest._value.Start",
              "target_field": "_ingest._value.start",
              "formats": [
                "ISO8601",
                "yyyy-MM-dd HH:mm:ss.SSS"
              ],
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.ResourceContainerLaunchedAt != null && ctx.json?.Filters?.ResourceContainerLaunchedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.ResourceContainerLaunchedAt",
          "processor": {
            "remove": {
              "field": [
                "_ingest._value.Start",
                "_ingest._value.End"
              ],
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.ResourceContainerLaunchedAt != null && ctx.json?.Filters?.ResourceContainerLaunchedAt instanceof List"
        }
      },
      {
        "rename": {
          "field": "json.Filters.ResourceContainerLaunchedAt",
          "target_field": "aws.securityhub_insights.filters.resource.container.launched_at",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ResourceContainerName",
          "target_field": "aws.securityhub_insights.filters.resource.container.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ResourceDetailsOther",
          "target_field": "aws.securityhub_insights.filters.resource.details_other",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ResourceId",
          "target_field": "aws.securityhub_insights.filters.resource.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ResourcePartition",
          "target_field": "aws.securityhub_insights.filters.resource.partition",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ResourceRegion",
          "target_field": "aws.securityhub_insights.filters.resource.region",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ResourceTags",
          "target_field": "aws.securityhub_insights.filters.resource.tags",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ResourceType",
          "target_field": "aws.securityhub_insights.filters.resource.type",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.Sample",
          "target_field": "aws.securityhub_insights.filters.sample",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.SeverityLabel",
          "target_field": "aws.securityhub_insights.filters.severity.label",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.SeverityNormalized",
          "target_field": "aws.securityhub_insights.filters.severity.normalized",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.SeverityProduct",
          "target_field": "aws.securityhub_insights.filters.severity.product",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.SourceUrl",
          "target_field": "aws.securityhub_insights.filters.source_url",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ThreatIntelIndicatorCategory",
          "target_field": "aws.securityhub_insights.filters.threat_intel_indicator.category",
          "ignore_missing": true
        }
      },
      {
        "foreach": {
          "field": "json.Filters.ThreatIntelIndicatorLastObservedAt",
          "processor": {
            "rename": {
              "field": "_ingest._value.DateRange.Unit",
              "target_field": "_ingest._value.date_range.unit",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.ThreatIntelIndicatorLastObservedAt != null && ctx.json?.Filters?.ThreatIntelIndicatorLastObservedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.ThreatIntelIndicatorLastObservedAt",
          "processor": {
            "rename": {
              "field": "_ingest._value.DateRange.Value",
              "target_field": "_ingest._value.date_range.value",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.ThreatIntelIndicatorLastObservedAt != null && ctx.json?.Filters?.ThreatIntelIndicatorLastObservedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.ThreatIntelIndicatorLastObservedAt",
          "processor": {
            "date": {
              "field": "_ingest._value.End",
              "target_field": "_ingest._value.end",
              "formats": [
                "ISO8601",
                "yyyy-MM-dd HH:mm:ss.SSS"
              ],
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.ThreatIntelIndicatorLastObservedAt != null && ctx.json?.Filters?.ThreatIntelIndicatorLastObservedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.ThreatIntelIndicatorLastObservedAt",
          "processor": {
            "date": {
              "field": "_ingest._value.Start",
              "target_field": "_ingest._value.start",
              "formats": [
                "ISO8601",
                "yyyy-MM-dd HH:mm:ss.SSS"
              ],
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.ThreatIntelIndicatorLastObservedAt != null && ctx.json?.Filters?.ThreatIntelIndicatorLastObservedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.ThreatIntelIndicatorLastObservedAt",
          "processor": {
            "remove": {
              "field": [
                "_ingest._value.Start",
                "_ingest._value.End"
              ],
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.ThreatIntelIndicatorLastObservedAt != null && ctx.json?.Filters?.ThreatIntelIndicatorLastObservedAt instanceof List"
        }
      },
      {
        "rename": {
          "field": "json.Filters.ThreatIntelIndicatorLastObservedAt",
          "target_field": "aws.securityhub_insights.filters.threat_intel_indicator.last_observed_at",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ThreatIntelIndicatorSource",
          "target_field": "aws.securityhub_insights.filters.threat_intel_indicator.source",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ThreatIntelIndicatorSourceUrl",
          "target_field": "aws.securityhub_insights.filters.threat_intel_indicator.source_url",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ThreatIntelIndicatorType",
          "target_field": "aws.securityhub_insights.filters.threat_intel_indicator.type",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.ThreatIntelIndicatorValue",
          "target_field": "aws.securityhub_insights.filters.threat_intel_indicator.value",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.Title",
          "target_field": "aws.securityhub_insights.filters.title",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.Type",
          "target_field": "aws.securityhub_insights.filters.type",
          "ignore_missing": true
        }
      },
      {
        "foreach": {
          "field": "json.Filters.UpdatedAt",
          "processor": {
            "rename": {
              "field": "_ingest._value.DateRange.Unit",
              "target_field": "_ingest._value.date_range.unit",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.UpdatedAt != null && ctx.json?.Filters?.UpdatedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.UpdatedAt",
          "processor": {
            "rename": {
              "field": "_ingest._value.DateRange.Value",
              "target_field": "_ingest._value.date_range.value",
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.UpdatedAt != null && ctx.json?.Filters?.UpdatedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.UpdatedAt",
          "processor": {
            "date": {
              "field": "_ingest._value.End",
              "target_field": "_ingest._value.end",
              "formats": [
                "ISO8601",
                "yyyy-MM-dd HH:mm:ss.SSS"
              ],
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.UpdatedAt != null && ctx.json?.Filters?.UpdatedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.UpdatedAt",
          "processor": {
            "date": {
              "field": "_ingest._value.Start",
              "target_field": "_ingest._value.start",
              "formats": [
                "ISO8601",
                "yyyy-MM-dd HH:mm:ss.SSS"
              ],
              "ignore_failure": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.UpdatedAt != null && ctx.json?.Filters?.UpdatedAt instanceof List"
        }
      },
      {
        "foreach": {
          "field": "json.Filters.UpdatedAt",
          "processor": {
            "remove": {
              "field": [
                "_ingest._value.Start",
                "_ingest._value.End"
              ],
              "ignore_missing": true
            }
          },
          "ignore_failure": true,
          "if": "ctx.json?.Filters?.UpdatedAt != null && ctx.json?.Filters?.UpdatedAt instanceof List"
        }
      },
      {
        "rename": {
          "field": "json.Filters.UpdatedAt",
          "target_field": "aws.securityhub_insights.filters.updated_at",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.UserDefinedFields",
          "target_field": "aws.securityhub_insights.filters.user_defined_fields",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.VerificationState",
          "target_field": "aws.securityhub_insights.filters.verification.state",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.WorkflowState",
          "target_field": "aws.securityhub_insights.filters.workflow.state",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Filters.WorkflowStatus",
          "target_field": "aws.securityhub_insights.filters.workflow.status",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.GroupByAttribute",
          "target_field": "aws.securityhub_insights.group_by_attribute",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.InsightArn",
          "target_field": "aws.securityhub_insights.insight_arn",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Name",
          "target_field": "aws.securityhub_insights.name",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": [
            "json"
          ],
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "script": {
          "description": "Drops null/empty values recursively.",
          "lang": "painless",
          "source": "boolean dropEmptyFields(Object object) { if (object == null || object == \"\") { return true; } else if (object instanceof Map) { ((Map) object).values().removeIf(value -> dropEmptyFields(value)); return (((Map) object).size() == 0); } else if (object instanceof List) { ((List) object).removeIf(value -> dropEmptyFields(value)); return (((List) object).length == 0); } return false; } dropEmptyFields(ctx);"
        }
      },
      {
        "pipeline": {
          "name": "logs-aws.securityhub_insights@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{{ _ingest.on_failure_message }}}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "logs-proofpoint_tap.clicks_permitted-1.1.1": {
    "description": "Pipeline for parsing Proofpoint TAP permitted clicks logs.",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.4.0"
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "json",
          "ignore_failure": true
        }
      },
      {
        "fingerprint": {
          "fields": [
            "json.GUID",
            "json.clickTime",
            "json.threatTime"
          ],
          "target_field": "_id",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "email",
          "ignore_failure": true
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "allowed",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "rename": {
          "field": "json.sender",
          "target_field": "email.from.address",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.messageID",
          "target_field": "email.message_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.recipient",
          "target_field": "email.to.address",
          "ignore_missing": true
        }
      },
      {
        "date": {
          "field": "json.clickTime",
          "target_field": "@timestamp",
          "ignore_failure": true,
          "formats": [
            "ISO8601"
          ]
        }
      },
      {
        "rename": {
          "field": "json.id",
          "target_field": "event.id",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{json.senderIP}}}",
          "if": "ctx.json?.senderIP != null && ctx.json?.senderIP != ''",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{json.clickIP}}}",
          "if": "ctx.json?.clickIP != null && ctx.json?.clickIP != ''",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "json.clickIP",
          "target_field": "destination.ip",
          "type": "ip",
          "ignore_failure": true
        }
      },
      {
        "geoip": {
          "field": "destination.ip",
          "target_field": "destination.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "destination.ip",
          "target_field": "destination.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "destination.as.asn",
          "target_field": "destination.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "destination.as.organization_name",
          "target_field": "destination.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.senderIP",
          "target_field": "source.ip",
          "type": "ip",
          "ignore_failure": true
        }
      },
      {
        "date": {
          "field": "json.threatTime",
          "target_field": "proofpoint_tap.clicks_permitted.threat.time",
          "ignore_failure": true,
          "formats": [
            "ISO8601"
          ]
        }
      },
      {
        "uri_parts": {
          "field": "json.url",
          "keep_original": false,
          "ignore_failure": true
        }
      },
      {
        "urldecode": {
          "field": "json.url",
          "target_field": "url.full",
          "ignore_missing": true
        }
      },
      {
        "user_agent": {
          "field": "json.userAgent",
          "target_field": "user_agent",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.campaignId",
          "target_field": "proofpoint_tap.clicks_permitted.campaign_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.classification",
          "target_field": "proofpoint_tap.clicks_permitted.classification",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.GUID",
          "target_field": "proofpoint_tap.guid",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.threatID",
          "target_field": "proofpoint_tap.clicks_permitted.threat.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.threatStatus",
          "target_field": "proofpoint_tap.clicks_permitted.threat.status",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.threatURL",
          "target_field": "proofpoint_tap.clicks_permitted.threat.url",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "json",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "description": "Drops null/empty values recursively.",
          "lang": "painless",
          "source": "boolean dropEmptyFields(Object object) {\nif (object == null || object == \"\") {\n    return true;\n} else if (object instanceof Map) {\n    ((Map) object).values().removeIf(value -> dropEmptyFields(value));\n    return (((Map) object).size() == 0);\n} else if (object instanceof List) {\n    ((List) object).removeIf(value -> dropEmptyFields(value));\n    return (((List) object).length == 0);\n}\nreturn false;\n}\ndropEmptyFields(ctx);\n"
        }
      },
      {
        "pipeline": {
          "name": "logs-proofpoint_tap.clicks_permitted@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{{ _ingest.on_failure_message }}}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "proofpoint_tap"
      }
    }
  },
  "logs-windows.powershell-1.15.0": {
    "description": "Pipeline for Windows Powershell events",
    "processors": [
      {
        "kv": {
          "description": "Split Event 800 event data fields.",
          "field": "winlog.event_data.param2",
          "target_field": "winlog.event_data",
          "field_split": "\n\t",
          "trim_key": "\n\t",
          "trim_value": "\n\t",
          "value_split": "=",
          "if": "ctx?.winlog?.event_id == \"800\""
        }
      },
      {
        "kv": {
          "description": "Split Events 4xx and 600 event data fields.",
          "field": "winlog.event_data.param3",
          "target_field": "winlog.event_data",
          "field_split": "\n\t",
          "trim_key": "\n\t",
          "trim_value": "\n\t",
          "value_split": "=",
          "if": "ctx?.winlog?.event_id != \"800\""
        }
      },
      {
        "set": {
          "field": "ecs.version",
          "value": "8.0.0"
        }
      },
      {
        "set": {
          "field": "log.level",
          "copy_from": "winlog.level",
          "ignore_empty_value": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.level != \"\""
        }
      },
      {
        "date": {
          "field": "winlog.time_created",
          "formats": [
            "ISO8601"
          ],
          "ignore_failure": true,
          "if": "ctx?.winlog?.time_created != null"
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "set": {
          "field": "event.code",
          "value": "{{winlog.event_id}}"
        }
      },
      {
        "set": {
          "field": "event.category",
          "value": "process"
        }
      },
      {
        "set": {
          "field": "event.type",
          "value": "start",
          "if": "ctx?.event.code == \"400\""
        }
      },
      {
        "set": {
          "field": "event.type",
          "value": "end",
          "if": "ctx?.event.code == \"403\""
        }
      },
      {
        "set": {
          "field": "event.type",
          "value": "info",
          "if": "ctx?.event?.type == null"
        }
      },
      {
        "convert": {
          "field": "winlog.event_data.SequenceNumber",
          "target_field": "event.sequence",
          "type": "long",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "winlog.record_id",
          "type": "string",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.HostId",
          "target_field": "process.entity_id",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.HostId != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.HostApplication",
          "target_field": "process.command_line",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.HostApplication != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.HostName",
          "target_field": "process.title",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.HostName != \"\""
        }
      },
      {
        "split": {
          "field": "winlog.event_data.UserId",
          "target_field": "_temp.user_parts",
          "separator": "\\\\",
          "if": "ctx?.winlog?.event_data?.UserId != null"
        }
      },
      {
        "set": {
          "field": "user.domain",
          "value": "{{_temp.user_parts.0}}",
          "ignore_failure": true,
          "ignore_empty_value": true,
          "if": "ctx?._temp?.user_parts != null && ctx._temp.user_parts.size() == 2"
        }
      },
      {
        "set": {
          "field": "user.name",
          "value": "{{_temp.user_parts.1}}",
          "ignore_failure": true,
          "ignore_empty_value": true,
          "if": "ctx?._temp?.user_parts != null && ctx._temp.user_parts.size() == 2"
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{user.name}}",
          "ignore_failure": true,
          "allow_duplicates": false,
          "if": "ctx?.user?.name != null"
        }
      },
      {
        "rename": {
          "field": "winlog.event_data._MemberUserName",
          "target_field": "user.name",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data._MemberDomain",
          "target_field": "user.domain",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "append": {
          "value": "{{{winlog.event_data._MemberAccountType}}}",
          "field": "user.roles",
          "ignore_failure": true,
          "allow_duplicates": false,
          "if": "ctx.winlog?.event_data?._MemberAccountType != null"
        }
      },
      {
        "remove": {
          "field": "winlog.event_data._MemberAccountType",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx.user?.roles != null && ctx.winlog?.event_data?._MemberAccountType != null && ctx.user.roles.contains(ctx.winlog.event_data._MemberAccountType)"
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.NewEngineState",
          "target_field": "powershell.engine.new_state",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.NewEngineState != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.PreviousEngineState",
          "target_field": "powershell.engine.previous_state",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.PreviousEngineState != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.NewProviderState",
          "target_field": "powershell.provider.new_state",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.NewProviderState != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.ProviderName",
          "target_field": "powershell.provider.name",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.ProviderName != \"\""
        }
      },
      {
        "convert": {
          "field": "winlog.event_data.DetailTotal",
          "target_field": "powershell.total",
          "type": "long",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.DetailTotal != \"\""
        }
      },
      {
        "convert": {
          "field": "winlog.event_data.DetailSequence",
          "target_field": "powershell.sequence",
          "type": "long",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.DetailSequence != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.EngineVersion",
          "target_field": "powershell.engine.version",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.EngineVersion != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.PipelineId",
          "target_field": "powershell.pipeline_id",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.PipelineId != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.RunspaceId",
          "target_field": "powershell.runspace_id",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.RunspaceId != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.HostVersion",
          "target_field": "powershell.process.executable_version",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.HostVersion != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.CommandLine",
          "target_field": "powershell.command.value",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.CommandLine != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.CommandPath",
          "target_field": "powershell.command.path",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.CommandPath != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.CommandName",
          "target_field": "powershell.command.name",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.CommandName != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.CommandType",
          "target_field": "powershell.command.type",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.CommandType != \"\""
        }
      },
      {
        "split": {
          "description": "Split Event 800 command invocation details.",
          "field": "winlog.event_data.param3",
          "separator": "\n",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx.event.code == \"800\""
        }
      },
      {
        "script": {
          "description": "Parses all command invocation detail raw lines, and converts them to an object, based on their type.\n - for unexpectedly formatted ones: {value: \"the raw line as it is\"}\n - for all:\n      * related_command: describes to what command it is related to\n      * value: the value for that detail line\n      * type: the type of the detail line, i.e.: CommandInvocation, ParameterBinding, NonTerminatingError\n - additionally, ParameterBinding adds a `name` field with the parameter name being bound.",
          "lang": "painless",
          "if": "ctx.event.code == \"800\"",
          "params": {
            "field": "param3"
          },
          "source": "def parseRawDetail(String raw) {\n    Pattern detailRegex = /^([^:(]+)\\((.+)\\)\\:\\s*(.+)?$/;\n    Pattern parameterBindingRegex = /name\\=(.+);\\s*value\\=(.+)$/;\n\n    def matcher = detailRegex.matcher(raw);\n    if (!matcher.matches()) {\n        return [\"value\": raw];\n    }\n    def matches = new ArrayList();\n    for (def i = 0; i <= matcher.groupCount(); i++) {\n        matches.add(matcher.group(i));\n    }\n    \n    if (matches.length != 4) {\n        return [\"value\": raw];\n    }                \n    \n    if (matches[1] != \"ParameterBinding\") {\n        return [\n            \"type\": matches[1], \n            \"related_command\": matches[2], \n            \"value\": matches[3]\n        ];\n    }\n\n    matcher = parameterBindingRegex.matcher(matches[3]);\n    if (!matcher.matches()) {\n        return [\"value\": matches[4]];\n    }\n    def nameValMatches = new ArrayList();\n    for (def i = 0; i <= matcher.groupCount(); i++) {\n        nameValMatches.add(matcher.group(i));\n    }\n    if (nameValMatches.length !== 3) {\n        return [\"value\": matches[3]];\n    }\n\n    return [\n        \"type\": matches[1],\n        \"related_command\": matches[2],\n        \"name\": nameValMatches[1],\n        \"value\": nameValMatches[2]\n    ];\n}\n\nif (ctx?._temp == null) {\n    ctx._temp = new HashMap();\n}\n\nif (ctx._temp.details == null) {\n    ctx._temp.details = new ArrayList();\n}\n\ndef values = ctx?.winlog?.event_data[params[\"field\"]];\nif (values != null && values.length > 0) {\n    for (v in values) {\n        ctx._temp.details.add(parseRawDetail(v));\n    }\n}"
        }
      },
      {
        "rename": {
          "field": "_temp.details",
          "target_field": "powershell.command.invocation_details",
          "if": "ctx?._temp?.details != null && ctx?._temp?.details.length > 0"
        }
      },
      {
        "script": {
          "description": "Implements Windows-like SplitCommandLine",
          "lang": "painless",
          "if": "ctx?.process?.command_line != null && ctx.process.command_line != \"\"",
          "source": "// appendBSBytes appends n '\\\\' bytes to b and returns the resulting slice.\ndef appendBSBytes(StringBuilder b, int n) {\n    for (; n > 0; n--) {\n        b.append('\\\\');\n    }\n    return b;\n}\n\n// readNextArg splits command line string cmd into next\n// argument and command line remainder.\ndef readNextArg(String cmd) {\n    def b = new StringBuilder();\n    boolean inquote;\n    int nslash;\n    for (; cmd.length() > 0; cmd = cmd.substring(1)) {\n        def c = cmd.charAt(0);\n        if (c == (char)' ' || c == (char)0x09) {\n            if (!inquote) {\n                return [\n                    \"arg\":  appendBSBytes(b, nslash).toString(),\n                    \"rest\": cmd.substring(1)\n                ];\n            }\n        } else if (c == (char)'\"') {\n            b = appendBSBytes(b, nslash/2);\n            if (nslash%2 == 0) {\n                // use \"Prior to 2008\" rule from\n                // http://daviddeley.com/autohotkey/parameters/parameters.htm\n                // section 5.2 to deal with double double quotes\n                if (inquote && cmd.length() > 1 && cmd.charAt(1) == (char)'\"') {\n                    b.append(c);\n                    cmd = cmd.substring(1);\n                }\n                inquote = !inquote;\n            } else {\n                b.append(c);\n            }\n            nslash = 0;\n            continue;\n        } else if (c == (char)'\\\\') {\n            nslash++;\n            continue;\n        }\n        b = appendBSBytes(b, nslash);\n        nslash = 0;\n        b.append(c);\n    }\n    return [\n        \"arg\":  appendBSBytes(b, nslash).toString(), \n        \"rest\": ''\n    ];\n}\n\n// commandLineToArgv splits a command line into individual argument\n// strings, following the Windows conventions documented\n// at http://daviddeley.com/autohotkey/parameters/parameters.htm#WINARGV\n// Original implementation found at: https://github.com/golang/go/commit/39c8d2b7faed06b0e91a1ad7906231f53aab45d1\ndef commandLineToArgv(String cmd) {\n    def args = new ArrayList();\n    while (cmd.length() > 0) {\n        if (cmd.charAt(0) == (char)' ' || cmd.charAt(0) == (char)0x09) {\n            cmd = cmd.substring(1);\n            continue;\n        }\n        def next = readNextArg(cmd);\n        cmd = next.rest;\n        args.add(next.arg);\n    }\n    return args;\n}\n\nctx.process.args = commandLineToArgv(ctx.process.command_line);\nctx.process.args_count = ctx.process.args.length;"
        }
      },
      {
        "script": {
          "description": "Adds file information.",
          "lang": "painless",
          "if": "ctx?.winlog?.event_data?.ScriptName != null && ctx.winlog.event_data.ScriptName.length() > 1",
          "source": "def path = ctx.winlog.event_data.ScriptName;\ndef idx = path.lastIndexOf(\"\\\\\");\nif (idx > -1) {\n    if (ctx?.file == null) {\n        ctx.file = new HashMap();\n    }\n    ctx.file.name = path.substring(idx+1);\n    ctx.file.directory = path.substring(0, idx);\n\n    def extIdx = path.lastIndexOf(\".\");\n    if (extIdx > -1) {\n        ctx.file.extension = path.substring(extIdx+1);\n    }\n}"
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.ScriptName",
          "target_field": "file.path",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.ScriptName != \"\""
        }
      },
      {
        "remove": {
          "field": [
            "_temp",
            "winlog.event_data.param1",
            "winlog.event_data.param2",
            "winlog.event_data.param3",
            "winlog.event_data.SequenceNumber",
            "winlog.event_data.DetailTotal",
            "winlog.event_data.DetailSequence",
            "winlog.event_data.UserId",
            "winlog.time_created",
            "winlog.level"
          ],
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "script": {
          "description": "Remove all empty values from event_data.",
          "lang": "painless",
          "source": "ctx?.winlog?.event_data?.entrySet().removeIf(entry -> entry.getValue() == null || entry.getValue().equals(\"\"));"
        }
      },
      {
        "remove": {
          "description": "Remove empty event data.",
          "field": "winlog.event_data",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data != null && ctx.winlog.event_data.size() == 0"
        }
      },
      {
        "pipeline": {
          "name": "logs-windows.powershell@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "windows"
      }
    }
  },
  "logs-github.code_scanning-1.6.0": {
    "description": "Pipeline for parsing GitHub audit logs",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.5.0"
        }
      },
      {
        "set": {
          "field": "event.action",
          "value": "code_scanning"
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "alert"
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "github.code_scanning"
        }
      },
      {
        "fingerprint": {
          "fields": [
            "github.code_scanning.number",
            "github.code_scanning.updated_at"
          ],
          "target_field": "_id",
          "ignore_missing": true
        }
      },
      {
        "date": {
          "field": "github.code_scanning.created_at",
          "formats": [
            "ISO8601"
          ],
          "timezone": "UTC",
          "target_field": "event.created",
          "if": "ctx.github.code_scanning?.created_at != null"
        }
      },
      {
        "date": {
          "field": "github.code_scanning.created_at",
          "formats": [
            "ISO8601"
          ],
          "timezone": "UTC",
          "target_field": "@timestamp",
          "if": "ctx.github.code_scanning?.created_at != null"
        }
      },
      {
        "date": {
          "field": "github.code_scanning.updated_at",
          "formats": [
            "ISO8601"
          ],
          "timezone": "UTC",
          "target_field": "@timestamp",
          "if": "ctx.github.code_scanning?.updated_at != null"
        }
      },
      {
        "rename": {
          "target_field": "_temp",
          "field": "github.code_scanning.repository",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.id",
          "target_field": "github.repository.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.name",
          "target_field": "github.repository.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.full_name",
          "target_field": "github.repository.full_name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.private",
          "target_field": "github.repository.private",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.html_url",
          "target_field": "github.repository.html_url",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.url",
          "target_field": "github.repository.url",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.description",
          "target_field": "github.repository.description",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.fork",
          "target_field": "github.repository.fork",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.owner.login",
          "target_field": "github.repository.owner.login",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.owner.id",
          "target_field": "github.repository.owner.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.owner.url",
          "target_field": "github.repository.owner.url",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.owner.html_url",
          "target_field": "github.repository.owner.html_url",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.owner.type",
          "target_field": "github.repository.owner.type",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.owner.site_admin",
          "target_field": "github.repository.owner.site_admin",
          "ignore_missing": true
        }
      },
      {
        "dissect": {
          "field": "github.code_scanning.url",
          "pattern": "https://api.github.com/repos/%{_temp.owner}/%{_temp.repository}/code-scanning/alerts/%{_temp.number}",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "github.repository.html_url",
          "value": "https://github.com/{{_temp.owner}}/{{_temp.repository}}",
          "if": "ctx.github.repository?.html_url == null && ctx._temp?.owner != null && ctx._temp?.repository != null"
        }
      },
      {
        "set": {
          "field": "github.repository.url",
          "value": "https://api.github.com/repos/{{_temp.owner}}/{{_temp.repository}}",
          "if": "ctx.github.repository?.url == null && ctx._temp?.owner != null && ctx._temp?.repository != null"
        }
      },
      {
        "rename": {
          "field": "_temp.repository",
          "target_field": "github.repository.name",
          "if": "ctx.github.repository?.name == null",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.owner",
          "target_field": "github.repository.owner.login",
          "if": "ctx.github.repository?.owner?.login == null",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.number",
          "target_field": "github.code_scanning.number",
          "if": "ctx.github.code_scanning?.number == null",
          "ignore_missing": true
        }
      },
      {
        "lowercase": {
          "field": "github.code_scanning.state",
          "ignore_missing": true
        }
      },
      {
        "lowercase": {
          "field": "github.code_scanning.rule.security_severity_level",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "github.severity",
          "value": "{{github.code_scanning.rule.security_severity_level}}",
          "if": "ctx.github.code_scanning?.rule?.security_severity_level != null"
        }
      },
      {
        "set": {
          "field": "github.severity",
          "value": "undefined",
          "if": "ctx.github.severity == null"
        }
      },
      {
        "set": {
          "field": "github.state",
          "value": "{{github.code_scanning.state}}",
          "if": "ctx.github.code_scanning?.state != null"
        }
      },
      {
        "rename": {
          "target_field": "_temp.dismissed_by",
          "field": "github.code_scanning.dismissed_by",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "github.code_scanning.dismissed_by",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.dismissed_by.login",
          "target_field": "github.code_scanning.dismissed_by.login",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.dismissed_by.id",
          "target_field": "github.code_scanning.dismissed_by.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.dismissed_by.url",
          "target_field": "github.code_scanning.dismissed_by.url",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.dismissed_by.html_url",
          "target_field": "github.code_scanning.dismissed_by.html_url",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.dismissed_by.type",
          "target_field": "github.code_scanning.dismissed_by.type",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.dismissed_by.site_admin",
          "target_field": "github.code_scanning.dismissed_by.site_admin",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "github.code_scanning.most_recent_instance.message.text",
          "target_field": "message",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "description": "Calculate time taken to resolve the alerts",
          "if": "ctx.github.code_scanning?.fixed_at != null || ctx.github.code_scanning?.dismissed_at != null",
          "source": "def time_to_resolution = new HashMap();\ndef fixedAtDt = ctx.github.code_scanning.fixed_at;\ndef dismissedAtDt = ctx.github.code_scanning.dismissed_at;\ndef createdAtDt = ctx.github.code_scanning.created_at;\nZonedDateTime zdt = ZonedDateTime.parse(createdAtDt);\nlong createdAtEpoch = zdt.toEpochSecond();\nif (fixedAtDt != null) {\n    zdt = ZonedDateTime.parse(fixedAtDt);\n    long fixedAtEpoch = zdt.toEpochSecond();\n    time_to_resolution.put(\"sec\", fixedAtEpoch - createdAtEpoch);\n    ctx.github.code_scanning.time_to_resolution = time_to_resolution;\n}\nelse {\n    zdt = ZonedDateTime.parse(dismissedAtDt);\n    long dismissedAtEpoch = zdt.toEpochSecond();\n    time_to_resolution.put(\"sec\", dismissedAtEpoch - createdAtEpoch);\n    ctx.github.code_scanning.time_to_resolution = time_to_resolution;\n}\n"
        }
      },
      {
        "rename": {
          "field": "github.code_scanning.rule.id",
          "target_field": "rule.id",
          "if": "ctx.github.code_scanning?.rule?.id != null"
        }
      },
      {
        "rename": {
          "field": "github.code_scanning.rule.name",
          "target_field": "rule.name",
          "if": "ctx.github.code_scanning?.rule?.name != null"
        }
      },
      {
        "rename": {
          "field": "github.code_scanning.rule.description",
          "target_field": "rule.description",
          "if": "ctx.github.code_scanning?.rule?.description != null"
        }
      },
      {
        "foreach": {
          "field": "github.code_scanning.rule.tags",
          "processor": {
            "append": {
              "field": "tags",
              "value": "{{_ingest._value}}"
            }
          },
          "ignore_missing": true,
          "if": "ctx.github.code_scanning?.rule?.tags != null"
        }
      },
      {
        "remove": {
          "field": "github.code_scanning.rule.tags",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": [
            "_temp"
          ],
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "description": "This script processor iterates over the whole document to remove fields with null values.",
          "source": "void handleMap(Map map) {\n  for (def x : map.values()) {\n    if (x instanceof Map) {\n        handleMap(x);\n    } else if (x instanceof List) {\n        handleList(x);\n    }\n  }\n  map.values().removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));\n}\nvoid handleList(List list) {\n  for (def x : list) {\n      if (x instanceof Map) {\n          handleMap(x);\n      } else if (x instanceof List) {\n          handleList(x);\n      }\n  }\n  list.removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));\n}\nhandleMap(ctx);\n"
        }
      },
      {
        "pipeline": {
          "name": "logs-github.code_scanning@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "github"
      }
    }
  },
  "logs-endpoint.events.file-8.4.1": {
    "description": "Pipeline for setting event.ingested",
    "processors": [
      {
        "set": {
          "field": "event.ingested",
          "value": "{{ _ingest.timestamp }}",
          "ignore_failure": true
        }
      },
      {
        "pipeline": {
          "name": "logs-endpoint.events.file@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "endpoint"
      }
    }
  },
  "logs-elastic_agent.packetbeat-1.3.5": {
    "processors": [
      {
        "pipeline": {
          "name": "logs-elastic_agent.packetbeat@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "elastic_agent"
      }
    }
  },
  "metrics-elastic_agent.auditbeat-1.3.5": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-elastic_agent.auditbeat@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "elastic_agent"
      }
    }
  },
  "metrics-elastic_agent.heartbeat-1.3.5": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-elastic_agent.heartbeat@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "elastic_agent"
      }
    }
  },
  "logs-crowdstrike.falcon-1.7.0-detection_summary": {
    "processors": [
      {
        "set": {
          "field": "event.kind",
          "value": "alert"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": [
            "malware"
          ]
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": [
            "info"
          ]
        }
      },
      {
        "set": {
          "field": "agent.type",
          "value": "falcon"
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.LocalIP",
          "target_field": "source.ip",
          "type": "string",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.crowdstrike?.event?.LocalIP != null && ctx?.crowdstrike?.event?.LocalIP != \"\""
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.ProcessId",
          "target_field": "process.pid",
          "ignore_failure": true,
          "type": "long",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.ParentImageFileName",
          "target_field": "process.parent.executable",
          "type": "string",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.ParentCommandLine",
          "target_field": "process.parent.command_line",
          "type": "string",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.PatternDispositionDescription",
          "target_field": "event.action",
          "type": "string",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.FalconHostLink",
          "target_field": "event.url",
          "type": "string",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.Severity",
          "target_field": "event.severity",
          "type": "long",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.DetectDescription",
          "target_field": "message",
          "type": "string",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.FileName",
          "target_field": "process.name",
          "type": "string",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.UserName",
          "target_field": "user.name",
          "type": "string",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.MachineDomain",
          "target_field": "user.domain",
          "type": "string",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.SensorId",
          "target_field": "agent.id",
          "type": "string",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.ComputerName",
          "target_field": "host.name",
          "type": "string",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.SHA256String",
          "target_field": "file.hash.sha256",
          "type": "string",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.hash",
          "value": "{{file.hash.sha256}}",
          "allow_duplicates": false,
          "ignore_failure": true,
          "if": "ctx?.file?.hash?.sha256 != null && ctx?.file?.hash?.sha256 != \"\" && !(/^0+$/.matcher(ctx.file.hash.sha256).matches())"
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.MD5String",
          "target_field": "file.hash.md5",
          "type": "string",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.hash",
          "value": "{{file.hash.md5}}",
          "allow_duplicates": false,
          "ignore_failure": true,
          "if": "ctx?.file?.hash?.md5 != null && ctx?.file?.hash?.md5 != \"\" && !(/^0+$/.matcher(ctx.file.hash.md5).matches())"
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.SHA1String",
          "target_field": "file.hash.sha1",
          "type": "string",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.hash",
          "value": "{{file.hash.sha1}}",
          "allow_duplicates": false,
          "ignore_failure": true,
          "if": "ctx?.file?.hash?.sha1 != null && ctx?.file?.hash?.sha1 != \"\" && !(/^0+$/.matcher(ctx.file.hash.sha1).matches())"
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.DetectName",
          "target_field": "rule.name",
          "type": "string",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.DetectDescription",
          "target_field": "rule.description",
          "type": "string",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.Technique",
          "target_field": "threat.technique.name",
          "type": "string",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "lowercase": {
          "field": "threat.technique.name",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.Tactic",
          "target_field": "threat.tactic.name",
          "type": "string",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "lowercase": {
          "field": "threat.tactic.name",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "pipeline": {
          "name": "logs-crowdstrike.falcon@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "crowdstrike"
      }
    }
  },
  "logs-panw.panos-3.1.1-system": {
    "description": "Pipeline for PanOS System Logs.",
    "processors": [
      {
        "csv": {
          "field": "message",
          "ignore_failure": true,
          "target_fields": [
            "panw.panos.virtual_sys",
            "panw.panos.event.id",
            "panw.panos.object.id",
            "_temp_.future_use1",
            "_temp_.future_use2",
            "panw.panos.module",
            "panw.panos.severity",
            "panw.panos.description",
            "panw.panos.sequence_number",
            "panw.panos.action_flags",
            "panw.panos.device_group_hierarchy1",
            "panw.panos.device_group_hierarchy2",
            "panw.panos.device_group_hierarchy3",
            "panw.panos.device_group_hierarchy4",
            "panw.panos.vsys_name",
            "panw.panos.device_name",
            "_temp_.future_use3",
            "_temp_.future_use4",
            "_temp_.high_res_timestamp"
          ]
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": [
            "configuration"
          ]
        }
      },
      {
        "set": {
          "field": "event.code",
          "copy_from": "panw.panos.event.id",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "log.level",
          "copy_from": "panw.panos.severity",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.hostname",
          "copy_from": "panw.panos.device_name",
          "ignore_failure": true
        }
      },
      {
        "pipeline": {
          "name": "logs-panw.panos@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "append": {
          "field": "error.message",
          "value": "error in System pipeline: error in [{{{_ingest.on_failure_processor_type}}}] processor{{{#_ingest.on_failure_processor_tag}}} with tag [{{{_ingest.on_failure_processor_tag}}}]{{{/_ingest.on_failure_processor_tag}}} {{{_ingest.on_failure_message}}}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "panw"
      }
    }
  },
  "logs-system.syslog-1.20.4": {
    "description": "Pipeline for parsing Syslog messages.",
    "processors": [
      {
        "grok": {
          "field": "message",
          "patterns": [
            "%{SYSLOGTIMESTAMP:system.syslog.timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: %{GREEDYMULTILINE:system.syslog.message}",
            "%{SYSLOGTIMESTAMP:system.syslog.timestamp} %{GREEDYMULTILINE:system.syslog.message}",
            "%{TIMESTAMP_ISO8601:system.syslog.timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: %{GREEDYMULTILINE:system.syslog.message}"
          ],
          "pattern_definitions": {
            "GREEDYMULTILINE": "(.|\n)*"
          },
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "message"
        }
      },
      {
        "rename": {
          "field": "system.syslog.message",
          "target_field": "message",
          "ignore_missing": true
        }
      },
      {
        "date": {
          "if": "ctx.event.timezone == null",
          "field": "system.syslog.timestamp",
          "target_field": "@timestamp",
          "formats": [
            "MMM  d HH:mm:ss",
            "MMM dd HH:mm:ss",
            "MMM d HH:mm:ss",
            "ISO8601"
          ],
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{ _ingest.on_failure_message }}"
              }
            }
          ]
        }
      },
      {
        "date": {
          "if": "ctx.event.timezone != null",
          "field": "system.syslog.timestamp",
          "target_field": "@timestamp",
          "formats": [
            "MMM  d HH:mm:ss",
            "MMM dd HH:mm:ss",
            "MMM d HH:mm:ss",
            "ISO8601"
          ],
          "timezone": "{{ event.timezone }}",
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{ _ingest.on_failure_message }}"
              }
            }
          ]
        }
      },
      {
        "remove": {
          "field": "system.syslog.timestamp"
        }
      },
      {
        "set": {
          "field": "ecs.version",
          "value": "8.0.0"
        }
      },
      {
        "pipeline": {
          "name": "logs-system.syslog@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "system"
      }
    }
  },
  "logs-github.dependabot-1.6.0": {
    "description": "Pipeline for parsing GitHub audit logs",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.5.0"
        }
      },
      {
        "set": {
          "field": "event.action",
          "value": "dependabot"
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "alert"
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "github.dependabot"
        }
      },
      {
        "set": {
          "field": "_temp.updated_at",
          "value": "{{{_ingest.timestamp}}}"
        }
      },
      {
        "fingerprint": {
          "fields": [
            "github.dependabot.repository.owner.login",
            "github.dependabot.repository.name",
            "github.dependabot.number",
            "github.dependabot.created_at",
            "github.dependabot.dismissed_at",
            "github.dependabot.fixed_at"
          ],
          "target_field": "_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "github.dependabot.createdAt",
          "target_field": "github.dependabot.created_at",
          "ignore_missing": true
        }
      },
      {
        "date": {
          "field": "github.dependabot.created_at",
          "formats": [
            "ISO8601"
          ],
          "timezone": "UTC",
          "target_field": "event.created",
          "if": "ctx.github.dependabot?.created_at != null"
        }
      },
      {
        "rename": {
          "field": "github.dependabot.dependabotUpdate",
          "target_field": "github.dependabot.dependabot_update",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "github.dependabot.dependabot_update.error.errorType",
          "target_field": "github.dependabot.dependabot_update.error.error_type",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "github.dependabot.dependencyScope",
          "target_field": "github.dependabot.dependency_scope",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "github.dependabot.dismissReason",
          "target_field": "github.dependabot.dismiss_reason",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "github.dependabot.dismissedAt",
          "target_field": "github.dependabot.dismissed_at",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "github.dependabot.fixReason",
          "target_field": "github.dependabot.fix_reason",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "github.dependabot.fixedAt",
          "target_field": "github.dependabot.fixed_at",
          "ignore_missing": true
        }
      },
      {
        "date": {
          "field": "github.dependabot.created_at",
          "formats": [
            "ISO8601"
          ],
          "timezone": "UTC",
          "target_field": "@timestamp",
          "if": "ctx.github.dependabot?.created_at != null"
        }
      },
      {
        "date": {
          "field": "github.dependabot.dismissed_at",
          "formats": [
            "ISO8601"
          ],
          "timezone": "UTC",
          "target_field": "@timestamp",
          "if": "ctx.github.dependabot?.dismissed_at != null"
        }
      },
      {
        "date": {
          "field": "github.dependabot.fixed_at",
          "formats": [
            "ISO8601"
          ],
          "timezone": "UTC",
          "target_field": "@timestamp",
          "if": "ctx.github.dependabot?.fixed_at != null"
        }
      },
      {
        "rename": {
          "field": "github.dependabot.repository.isInOrganization",
          "target_field": "github.dependabot.repository.is_in_organization",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "github.dependabot.repository.isPrivate",
          "target_field": "github.dependabot.repository.is_private",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "github.dependabot.securityAdvisory",
          "target_field": "github.dependabot.security_advisory",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "github.dependabot.security_advisory.cvss.vectorString",
          "target_field": "github.dependabot.security_advisory.cvss.vector_string",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "github.dependabot.security_advisory.ghsaId",
          "target_field": "github.dependabot.security_advisory.ghsa_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "github.dependabot.security_advisory.publishedAt",
          "target_field": "github.dependabot.security_advisory.published_at",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "github.dependabot.security_advisory.updatedAt",
          "target_field": "github.dependabot.security_advisory.updated_at",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "_temp.cwes",
          "copy_from": "github.dependabot.security_advisory.cwes.nodes",
          "if": "ctx.github.dependabot?.security_advisory?.cwes?.nodes != null"
        }
      },
      {
        "remove": {
          "field": "github.dependabot.security_advisory.cwes",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "github.dependabot.security_advisory.cwes",
          "copy_from": "_temp.cwes",
          "if": "ctx._temp?.cwes != null"
        }
      },
      {
        "rename": {
          "field": "github.dependabot.securityVulnerability",
          "target_field": "github.dependabot.security_vulnerability",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "github.dependabot.security_vulnerability.firstPatchedVersion",
          "target_field": "github.dependabot.security_vulnerability.first_patched_version",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "github.dependabot.security_vulnerability.updatedAt",
          "target_field": "github.dependabot.security_vulnerability.updated_at",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "github.dependabot.security_vulnerability.vulnerableVersionRange",
          "target_field": "github.dependabot.security_vulnerability.vulnerable_version_range",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "github.dependabot.vulnerableManifestFilename",
          "target_field": "github.dependabot.vulnerable_manifest_filename",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "github.dependabot.vulnerableManifestPath",
          "target_field": "github.dependabot.vulnerable_manifest_path",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "github.dependabot.vulnerableRequirements",
          "target_field": "github.dependabot.vulnerable_requirements",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "vulnerability.classification",
          "value": "CVSS"
        }
      },
      {
        "rename": {
          "target_field": "vulnerability.description",
          "field": "github.dependabot.security_advisory.description",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "description": "Set vulnerability.enumeration and vulnerability.id ECS fields. Defaults to GHSA",
          "if": "ctx.github.dependabot.security_advisory?.identifiers != null",
          "source": "def enumeration = \"GHSA\";\ndef id = \"\";\ndef sa_ids = ctx.github.dependabot.security_advisory.identifiers;\nfor (def sa_id: sa_ids) {\n    id = sa_id.value;\n    if (!sa_id.type.equals(\"GHSA\")) {\n        enumeration = sa_id.type;\n        break;\n    }\n}\nctx.vulnerability.enumeration = enumeration;\nctx.vulnerability.id = id;\n"
        }
      },
      {
        "script": {
          "lang": "painless",
          "description": "Set vulnerability.reference ECS field",
          "if": "ctx.github.dependabot.security_advisory?.references != null",
          "source": "List references = new ArrayList();\ndef sa_references = ctx.github.dependabot.security_advisory.references;\nfor (def ref: sa_references) {\n    references.add(ref.url);\n}\nctx.vulnerability.reference = references;\n"
        }
      },
      {
        "remove": {
          "field": "github.dependabot.security_advisory.references",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "vulnerability.scanner.vendor",
          "value": "Github"
        }
      },
      {
        "convert": {
          "field": "github.dependabot.security_advisory.cvss.score",
          "type": "float"
        }
      },
      {
        "rename": {
          "target_field": "vulnerability.score.base",
          "field": "github.dependabot.security_advisory.cvss.score",
          "ignore_missing": true
        }
      },
      {
        "kv": {
          "field": "github.dependabot.security_advisory.cvss.vector_string",
          "target_field": "_temp.score.version",
          "field_split": "/",
          "value_split": ":",
          "include_keys": [
            "CVSS"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "target_field": "vulnerability.score.version",
          "field": "_temp.score.version.CVSS",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "github.dependabot.security_vulnerability.severity",
          "target_field": "vulnerability.severity",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "event.start",
          "copy_from": "github.dependabot.created_at",
          "if": "ctx.github.dependabot?.created_at != null"
        }
      },
      {
        "set": {
          "field": "event.end",
          "copy_from": "github.dependabot.fixed_at",
          "if": "ctx.github.dependabot?.fixed_at != null"
        }
      },
      {
        "set": {
          "field": "event.end",
          "copy_from": "github.dependabot.dismissed_at",
          "if": "ctx.event?.end == null && ctx.github.dependabot?.dismissed_at != null"
        }
      },
      {
        "script": {
          "lang": "painless",
          "description": "Calculate time taken to resolve the alerts",
          "if": "ctx?.event?.start != null && ctx?.event?.end != null",
          "source": "ZonedDateTime start = ZonedDateTime.parse(ctx.event.start); ZonedDateTime end = ZonedDateTime.parse(ctx.event.end); ctx.event.duration = ChronoUnit.SECONDS.between(start, end);"
        }
      },
      {
        "lowercase": {
          "field": "github.dependabot.state",
          "ignore_missing": true
        }
      },
      {
        "lowercase": {
          "field": "vulnerability.severity",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "github.state",
          "copy_from": "github.dependabot.state",
          "if": "ctx.github.dependabot?.state != null"
        }
      },
      {
        "set": {
          "field": "github.severity",
          "copy_from": "vulnerability.severity",
          "if": "ctx.vulnerability?.severity != null"
        }
      },
      {
        "set": {
          "field": "github.severity",
          "value": "undefined",
          "if": "ctx.github.severity == null"
        }
      },
      {
        "rename": {
          "field": "github.dependabot.repository",
          "target_field": "github.repository",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": [
            "_temp"
          ],
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "description": "This script processor iterates over the whole document to remove fields with null values.",
          "source": "void handleMap(Map map) {\n  for (def x : map.values()) {\n    if (x instanceof Map) {\n        handleMap(x);\n    } else if (x instanceof List) {\n        handleList(x);\n    }\n  }\n  map.values().removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));\n}\nvoid handleList(List list) {\n  for (def x : list) {\n      if (x instanceof Map) {\n          handleMap(x);\n      } else if (x instanceof List) {\n          handleList(x);\n      }\n  }\n  list.removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));\n}\nhandleMap(ctx);\n"
        }
      },
      {
        "pipeline": {
          "name": "logs-github.dependabot@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "github"
      }
    }
  },
  "logs-elastic_agent.metricbeat-1.3.5": {
    "processors": [
      {
        "pipeline": {
          "name": "logs-elastic_agent.metricbeat@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "elastic_agent"
      }
    }
  },
  "metrics-kubernetes.state_service-1.26.0": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-kubernetes.state_service@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "kubernetes"
      }
    }
  },
  "metrics-kubernetes.state_persistentvolume-1.26.0": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-kubernetes.state_persistentvolume@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "kubernetes"
      }
    }
  },
  "metrics-kubernetes.state_persistentvolumeclaim-1.26.0": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-kubernetes.state_persistentvolumeclaim@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "kubernetes"
      }
    }
  },
  "logs-github.audit-1.6.0": {
    "description": "Pipeline for parsing GitHub audit logs",
    "processors": [
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "set": {
          "field": "ecs.version",
          "value": "8.5.0"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": [
            "configuration",
            "web"
          ]
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "json"
        }
      },
      {
        "fingerprint": {
          "fields": [
            "json._document_id"
          ],
          "target_field": "_id",
          "ignore_missing": true
        }
      },
      {
        "date": {
          "field": "json.created_at",
          "formats": [
            "UNIX_MS"
          ],
          "timezone": "UTC",
          "target_field": "@timestamp",
          "if": "ctx.json?.created_at != null"
        }
      },
      {
        "date": {
          "field": "json.@timestamp",
          "formats": [
            "UNIX_MS"
          ],
          "timezone": "UTC",
          "target_field": "@timestamp",
          "if": "ctx.json['@timestamp'] != null"
        }
      },
      {
        "rename": {
          "field": "json._document_id",
          "target_field": "event.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.action",
          "target_field": "event.action",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.actor",
          "target_field": "user.name",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{user.name}}",
          "if": "ctx.user?.name != null"
        }
      },
      {
        "rename": {
          "field": "json.org",
          "target_field": "github.org",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.user",
          "target_field": "user.target.name",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{user.target.name}}",
          "if": "ctx.user?.target?.name != null"
        }
      },
      {
        "rename": {
          "field": "json.repo",
          "target_field": "github.repo",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.team",
          "target_field": "github.team",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.data.team",
          "target_field": "github.team",
          "ignore_missing": true,
          "if": "ctx.github?.team == null"
        }
      },
      {
        "set": {
          "field": "group.name",
          "copy_from": "github.team",
          "ignore_empty_value": true,
          "if": "ctx.event?.action.startsWith(\"team.\")"
        }
      },
      {
        "set": {
          "field": "user.target.group.name",
          "copy_from": "github.team",
          "ignore_empty_value": true,
          "if": "ctx.event?.action.startsWith(\"team.\") && ctx.user?.target?.name != null"
        }
      },
      {
        "set": {
          "field": "group.name",
          "copy_from": "github.org",
          "ignore_empty_value": true,
          "if": "ctx.event?.action.startsWith(\"org.\")"
        }
      },
      {
        "set": {
          "field": "user.target.group.name",
          "copy_from": "github.org",
          "ignore_empty_value": true,
          "if": "ctx.event?.action.startsWith(\"org.\") && ctx.user?.target?.name != null"
        }
      },
      {
        "rename": {
          "field": "json.data.old_user",
          "target_field": "user.target.group.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.data.old_user",
          "target_field": "user.target.group.name",
          "ignore_missing": true,
          "if": "ctx.user?.target?.group?.name == null"
        }
      },
      {
        "rename": {
          "field": "json.actor_location.country_code",
          "target_field": "client.geo.country_iso_code",
          "ignore_missing": true
        }
      },
      {
        "grok": {
          "field": "event.action",
          "ignore_missing": true,
          "patterns": [
            "^%{GH_CAT:github.category}\\.%{GREEDYDATA:_temp.action}"
          ],
          "pattern_definitions": {
            "GH_CAT": "[a-z_]+"
          }
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "iam",
          "if": "[\"team\",\"org\"].contains(ctx.github.category)"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": [
            "group",
            "user"
          ],
          "if": "[\"team\",\"org\"].contains(ctx.github.category)"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "creation",
          "if": "ctx._temp?.action.contains(\"create\") || ctx._temp?.action.contains(\"add\")"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "deletion",
          "if": "ctx._temp?.action.contains(\"delete\") || ctx._temp?.action.contains(\"remove\")"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "change",
          "if": "ctx.event?.type == null || ctx.event?.type.size() == 0"
        }
      },
      {
        "remove": {
          "field": [
            "json",
            "_temp"
          ],
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "description": "This script processor iterates over the whole document to remove fields with null values.",
          "source": "void handleMap(Map map) {\n  for (def x : map.values()) {\n    if (x instanceof Map) {\n        handleMap(x);\n    } else if (x instanceof List) {\n        handleList(x);\n    }\n  }\n  map.values().removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));\n}\nvoid handleList(List list) {\n  for (def x : list) {\n      if (x instanceof Map) {\n          handleMap(x);\n      } else if (x instanceof List) {\n          handleList(x);\n      }\n  }\n  list.removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));\n}\nhandleMap(ctx);\n"
        }
      },
      {
        "pipeline": {
          "name": "logs-github.audit@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "github"
      }
    }
  },
  "logs-windows.powershell_operational-1.15.0": {
    "description": "Pipeline for Windows Powershell/Operational events",
    "processors": [
      {
        "kv": {
          "description": "Split Event 4103 event data fields.",
          "field": "winlog.event_data.ContextInfo",
          "target_field": "winlog.event_data",
          "field_split": "\n",
          "trim_key": " \n\t",
          "trim_value": " \n\t",
          "value_split": "=",
          "if": "ctx?.winlog?.event_id == \"4103\""
        }
      },
      {
        "script": {
          "description": "Remove spaces from all event_data keys.",
          "lang": "painless",
          "if": "ctx?.winlog?.event_data != null",
          "source": "def newEventData = new HashMap();\nfor (entry in ctx.winlog.event_data.entrySet()) {\n  def newKey = /\\s/.matcher(entry.getKey().toString()).replaceAll(\"\");\n  newEventData.put(newKey, entry.getValue());\n}\nctx.winlog.event_data = newEventData;"
        }
      },
      {
        "set": {
          "field": "ecs.version",
          "value": "8.0.0"
        }
      },
      {
        "set": {
          "field": "log.level",
          "copy_from": "winlog.level",
          "ignore_empty_value": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.level != \"\""
        }
      },
      {
        "date": {
          "field": "winlog.time_created",
          "formats": [
            "ISO8601"
          ],
          "ignore_failure": true,
          "if": "ctx?.winlog?.time_created != null"
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "set": {
          "field": "event.code",
          "value": "{{winlog.event_id}}"
        }
      },
      {
        "set": {
          "field": "event.category",
          "value": "process"
        }
      },
      {
        "set": {
          "field": "event.type",
          "value": "start",
          "if": "ctx?.event.code == \"4105\""
        }
      },
      {
        "set": {
          "field": "event.type",
          "value": "end",
          "if": "ctx?.event.code == \"4106\""
        }
      },
      {
        "set": {
          "field": "event.type",
          "value": "info",
          "if": "ctx?.event?.type == null"
        }
      },
      {
        "convert": {
          "field": "winlog.event_data.SequenceNumber",
          "target_field": "event.sequence",
          "type": "long",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "winlog.record_id",
          "type": "string",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.HostID",
          "target_field": "process.entity_id",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.HostID != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.HostApplication",
          "target_field": "process.command_line",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.HostApplication != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.HostName",
          "target_field": "process.title",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.HostName != \"\""
        }
      },
      {
        "set": {
          "field": "user.id",
          "copy_from": "winlog.user.identifier",
          "ignore_failure": true,
          "ignore_empty_value": true
        }
      },
      {
        "split": {
          "field": "winlog.event_data.User",
          "target_field": "_temp.user_parts",
          "separator": "\\\\",
          "if": "ctx?.winlog?.event_data?.User != null"
        }
      },
      {
        "set": {
          "field": "user.domain",
          "value": "{{_temp.user_parts.0}}",
          "ignore_failure": true,
          "ignore_empty_value": true,
          "if": "ctx?._temp?.user_parts != null && ctx._temp.user_parts.size() == 2"
        }
      },
      {
        "set": {
          "field": "user.name",
          "value": "{{_temp.user_parts.1}}",
          "ignore_failure": true,
          "ignore_empty_value": true,
          "if": "ctx?._temp?.user_parts != null && ctx._temp.user_parts.size() == 2"
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{user.name}}",
          "ignore_failure": true,
          "allow_duplicates": false,
          "if": "ctx?.user?.name != null"
        }
      },
      {
        "split": {
          "field": "winlog.event_data.ConnectedUser",
          "target_field": "_temp.connected_user_parts",
          "separator": "\\\\",
          "if": "ctx?.winlog?.event_data?.ConnectedUser != null"
        }
      },
      {
        "set": {
          "field": "source.user.domain",
          "value": "{{_temp.connected_user_parts.0}}",
          "ignore_failure": true,
          "ignore_empty_value": true,
          "if": "ctx?._temp?.connected_user_parts != null && ctx._temp.connected_user_parts.size() == 2"
        }
      },
      {
        "set": {
          "field": "source.user.name",
          "value": "{{_temp.connected_user_parts.1}}",
          "ignore_failure": true,
          "ignore_empty_value": true,
          "if": "ctx?._temp?.connected_user_parts != null && ctx._temp.connected_user_parts.size() == 2"
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{source.user.name}}",
          "ignore_failure": true,
          "allow_duplicates": false,
          "if": "ctx?.source?.user?.name != null"
        }
      },
      {
        "rename": {
          "field": "user.domain",
          "target_field": "destination.user.domain",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.source?.user != null"
        }
      },
      {
        "rename": {
          "field": "user.name",
          "target_field": "destination.user.name",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.source?.user != null"
        }
      },
      {
        "set": {
          "field": "user.domain",
          "copy_from": "source.user.domain",
          "ignore_failure": true,
          "ignore_empty_value": true,
          "if": "ctx?.source?.user != null"
        }
      },
      {
        "set": {
          "field": "user.name",
          "copy_from": "source.user.name",
          "ignore_failure": true,
          "ignore_empty_value": true,
          "if": "ctx?.source?.user != null"
        }
      },
      {
        "rename": {
          "field": "winlog.event_data._MemberUserName",
          "target_field": "user.name",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data._MemberDomain",
          "target_field": "user.domain",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "append": {
          "value": "{{{winlog.event_data._MemberAccountType}}}",
          "field": "user.roles",
          "ignore_failure": true,
          "allow_duplicates": false,
          "if": "ctx.winlog?.event_data?._MemberAccountType != null"
        }
      },
      {
        "remove": {
          "field": "winlog.event_data._MemberAccountType",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx.user?.roles != null && ctx.winlog?.event_data?._MemberAccountType != null && ctx.user.roles.contains(ctx.winlog.event_data._MemberAccountType)"
        }
      },
      {
        "convert": {
          "field": "winlog.event_data.MessageNumber",
          "target_field": "powershell.sequence",
          "type": "long",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "winlog.event_data.MessageTotal",
          "target_field": "powershell.total",
          "type": "long",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.ShellID",
          "target_field": "powershell.id",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.ShellID != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.EngineVersion",
          "target_field": "powershell.engine.version",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.EngineVersion != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.PipelineID",
          "target_field": "powershell.pipeline_id",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.PipelineID != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.RunspaceID",
          "target_field": "powershell.runspace_id",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.RunspaceID != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.RunspaceId",
          "target_field": "powershell.runspace_id",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.RunspaceId != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.HostVersion",
          "target_field": "powershell.process.executable_version",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.HostVersion != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.CommandLine",
          "target_field": "powershell.command.value",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.CommandLine != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.CommandPath",
          "target_field": "powershell.command.path",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.CommandPath != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.CommandName",
          "target_field": "powershell.command.name",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.CommandName != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.CommandType",
          "target_field": "powershell.command.type",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.CommandType != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.ScriptBlockId",
          "target_field": "powershell.file.script_block_id",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.ScriptBlockId != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.ScriptBlockText",
          "target_field": "powershell.file.script_block_text",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.ScriptBlockText != \"\""
        }
      },
      {
        "split": {
          "description": "Split Event 800 command invocation details.",
          "field": "winlog.event_data.Payload",
          "separator": "\n",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx.event.code == \"4103\""
        }
      },
      {
        "script": {
          "description": "Parses all command invocation detail raw lines, and converts them to an object, based on their type.\n - for unexpectedly formatted ones: {value: \"the raw line as it is\"}\n - for all:\n      * related_command: describes to what command it is related to\n      * value: the value for that detail line\n      * type: the type of the detail line, i.e.: CommandInvocation, ParameterBinding, NonTerminatingError\n - additionally, ParameterBinding adds a `name` field with the parameter name being bound.",
          "lang": "painless",
          "if": "ctx.event.code == \"4103\"",
          "params": {
            "field": "Payload"
          },
          "source": "def parseRawDetail(String raw) {\n    Pattern detailRegex = /^(.+)\\((.+)\\)\\:\\s*(.+)?$/;\n    Pattern parameterBindingRegex = /name\\=(.+);\\s*value\\=(.+)$/;\n\n    def matcher = detailRegex.matcher(raw);\n    if (!matcher.matches()) {\n        return [\"value\": raw];\n    }\n    def matches = new ArrayList();\n    for (def i = 0; i <= matcher.groupCount(); i++) {\n        matches.add(matcher.group(i));\n    }\n    \n    if (matches.length != 4) {\n        return [\"value\": raw];\n    }                \n    \n    if (matches[1] != \"ParameterBinding\") {\n        return [\n            \"type\": matches[1], \n            \"related_command\": matches[2], \n            \"value\": matches[3]\n        ];\n    }\n\n    matcher = parameterBindingRegex.matcher(matches[3]);\n    if (!matcher.matches()) {\n        return [\"value\": matches[4]];\n    }\n    def nameValMatches = new ArrayList();\n    for (def i = 0; i <= matcher.groupCount(); i++) {\n        nameValMatches.add(matcher.group(i));\n    }\n    if (nameValMatches.length !== 3) {\n        return [\"value\": matches[3]];\n    }\n\n    return [\n        \"type\": matches[1],\n        \"related_command\": matches[2],\n        \"name\": nameValMatches[1],\n        \"value\": nameValMatches[2]\n    ];\n}\n\nif (ctx?._temp == null) {\n    ctx._temp = new HashMap();\n}\n\nif (ctx._temp.details == null) {\n    ctx._temp.details = new ArrayList();\n}\n\ndef values = ctx?.winlog?.event_data[params[\"field\"]];\nif (values != null && values.length > 0) {\n    for (v in values) {\n        ctx._temp.details.add(parseRawDetail(v));\n    }\n}"
        }
      },
      {
        "rename": {
          "field": "_temp.details",
          "target_field": "powershell.command.invocation_details",
          "if": "ctx?._temp?.details != null && ctx?._temp?.details.length > 0"
        }
      },
      {
        "script": {
          "description": "Implements Windows-like SplitCommandLine",
          "lang": "painless",
          "if": "ctx?.process?.command_line != null && ctx.process.command_line != \"\"",
          "source": "// appendBSBytes appends n '\\\\' bytes to b and returns the resulting slice.\ndef appendBSBytes(StringBuilder b, int n) {\n    for (; n > 0; n--) {\n        b.append('\\\\');\n    }\n    return b;\n}\n\n// readNextArg splits command line string cmd into next\n// argument and command line remainder.\ndef readNextArg(String cmd) {\n    def b = new StringBuilder();\n    boolean inquote;\n    int nslash;\n    for (; cmd.length() > 0; cmd = cmd.substring(1)) {\n        def c = cmd.charAt(0);\n        if (c == (char)' ' || c == (char)0x09) {\n            if (!inquote) {\n                return [\n                    \"arg\":  appendBSBytes(b, nslash).toString(),\n                    \"rest\": cmd.substring(1)\n                ];\n            }\n        } else if (c == (char)'\"') {\n            b = appendBSBytes(b, nslash/2);\n            if (nslash%2 == 0) {\n                // use \"Prior to 2008\" rule from\n                // http://daviddeley.com/autohotkey/parameters/parameters.htm\n                // section 5.2 to deal with double double quotes\n                if (inquote && cmd.length() > 1 && cmd.charAt(1) == (char)'\"') {\n                    b.append(c);\n                    cmd = cmd.substring(1);\n                }\n                inquote = !inquote;\n            } else {\n                b.append(c);\n            }\n            nslash = 0;\n            continue;\n        } else if (c == (char)'\\\\') {\n            nslash++;\n            continue;\n        }\n        b = appendBSBytes(b, nslash);\n        nslash = 0;\n        b.append(c);\n    }\n    return [\n        \"arg\":  appendBSBytes(b, nslash).toString(), \n        \"rest\": ''\n    ];\n}\n\n// commandLineToArgv splits a command line into individual argument\n// strings, following the Windows conventions documented\n// at http://daviddeley.com/autohotkey/parameters/parameters.htm#WINARGV\n// Original implementation found at: https://github.com/golang/go/commit/39c8d2b7faed06b0e91a1ad7906231f53aab45d1\ndef commandLineToArgv(String cmd) {\n    def args = new ArrayList();\n    while (cmd.length() > 0) {\n        if (cmd.charAt(0) == (char)' ' || cmd.charAt(0) == (char)0x09) {\n            cmd = cmd.substring(1);\n            continue;\n        }\n        def next = readNextArg(cmd);\n        cmd = next.rest;\n        args.add(next.arg);\n    }\n    return args;\n}\n\nctx.process.args = commandLineToArgv(ctx.process.command_line);\nctx.process.args_count = ctx.process.args.length;"
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.Path",
          "target_field": "winlog.event_data.ScriptName",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.Path != \"\""
        }
      },
      {
        "script": {
          "description": "Adds file information.",
          "lang": "painless",
          "if": "ctx?.winlog?.event_data?.ScriptName != null && ctx.winlog.event_data.ScriptName.length() > 1",
          "source": "def path = ctx.winlog.event_data.ScriptName;\ndef idx = path.lastIndexOf(\"\\\\\");\nif (idx > -1) {\n    if (ctx?.file == null) {\n        ctx.file = new HashMap();\n    }\n    ctx.file.name = path.substring(idx+1);\n    ctx.file.directory = path.substring(0, idx);\n\n    def extIdx = path.lastIndexOf(\".\");\n    if (extIdx > -1) {\n        ctx.file.extension = path.substring(extIdx+1);\n    }\n}"
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.ScriptName",
          "target_field": "file.path",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.ScriptName != \"\""
        }
      },
      {
        "remove": {
          "field": [
            "_temp",
            "winlog.event_data.SequenceNumber",
            "winlog.event_data.User",
            "winlog.event_data.ConnectedUser",
            "winlog.event_data.ContextInfo",
            "winlog.event_data.Severity",
            "winlog.event_data.MessageTotal",
            "winlog.event_data.MessageNumber",
            "winlog.event_data.Payload",
            "winlog.time_created",
            "winlog.level"
          ],
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "script": {
          "description": "Remove all empty values from event_data.",
          "lang": "painless",
          "source": "ctx?.winlog?.event_data?.entrySet().removeIf(entry -> entry.getValue() == null || entry.getValue().equals(\"\"));"
        }
      },
      {
        "remove": {
          "description": "Remove empty event data.",
          "field": "winlog.event_data",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data != null && ctx.winlog.event_data.size() == 0"
        }
      },
      {
        "pipeline": {
          "name": "logs-windows.powershell_operational@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "windows"
      }
    }
  },
  "metrics-system.core-1.20.4": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-system.core@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "system"
      }
    }
  },
  "logs-endpoint.diagnostic.collection-8.4.1": {
    "description": "Pipeline for setting event.ingested",
    "processors": [
      {
        "set": {
          "field": "event.ingested",
          "value": "{{ _ingest.timestamp }}",
          "ignore_failure": true
        }
      },
      {
        "pipeline": {
          "name": "logs-endpoint.diagnostic.collection@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "endpoint"
      }
    }
  },
  "logs-cloud_security_posture.findings-0.0.26": {
    "description": "Pipeline for cloudbeat findings",
    "processors": [
      {
        "set": {
          "field": "event.ingested",
          "value": "{{_ingest.timestamp}}"
        }
      },
      {
        "pipeline": {
          "name": "logs-cloud_security_posture.findings@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "cloud_security_posture"
      }
    }
  },
  "metrics-aws.usage-1.25.2": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-aws.usage@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "logs-elastic_agent.cloudbeat-1.3.5": {
    "processors": [
      {
        "pipeline": {
          "name": "logs-elastic_agent.cloudbeat@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "elastic_agent"
      }
    }
  },
  "logs-elastic_agent.heartbeat-1.3.5": {
    "processors": [
      {
        "pipeline": {
          "name": "logs-elastic_agent.heartbeat@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "elastic_agent"
      }
    }
  },
  "logs-azure.eventhub-1.5.4": {
    "description": "Pipeline for parsing azure activity logs.",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.0.0"
        }
      },
      {
        "rename": {
          "field": "azure",
          "target_field": "azure-eventhub",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "pipeline": {
          "if": "ctx?.tags != null && ctx.tags.contains('parse_message')",
          "name": "logs-azure.eventhub-1.5.4-parsed-message"
        }
      },
      {
        "pipeline": {
          "name": "logs-azure.eventhub@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "azure"
      }
    }
  },
  "logs-cisco_umbrella.log-1.4.2": {
    "description": "Pipeline for Cisco Umbrella",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.4.0"
        }
      },
      {
        "set": {
          "field": "observer.vendor",
          "value": "Cisco"
        }
      },
      {
        "set": {
          "field": "observer.product",
          "value": "Umbrella"
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original"
        }
      },
      {
        "csv": {
          "field": "event.original",
          "target_fields": [
            "cisco.umbrella._tmp.time",
            "user.name",
            "cisco.umbrella.identities",
            "source.address",
            "source.nat.ip",
            "cisco.umbrella.action",
            "dns.question.type",
            "dns.response_code",
            "dns.question.name",
            "cisco.umbrella.categories",
            "cisco.umbrella.policy_identity_type",
            "cisco.umbrella.identity_types",
            "cisco.umbrella.blocked_categories"
          ],
          "if": "ctx.log?.file?.path.contains('dnslogs')"
        }
      },
      {
        "gsub": {
          "description": "Strip tailing dot from DNS names.",
          "field": "dns.question.name",
          "pattern": "\\.$",
          "replacement": "",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "observer.type",
          "value": "dns",
          "if": "ctx.log?.file?.path.contains('dnslogs')"
        }
      },
      {
        "csv": {
          "field": "event.original",
          "target_fields": [
            "cisco.umbrella._tmp.time",
            "user.name",
            "source.address",
            "source.port",
            "destination.address",
            "destination.port",
            "cisco.umbrella.categories"
          ],
          "if": "ctx.log?.file?.path.contains('iplogs')"
        }
      },
      {
        "set": {
          "field": "observer.type",
          "value": "firewall",
          "if": "ctx.log?.file?.path.contains('iplogs')"
        }
      },
      {
        "csv": {
          "field": "event.original",
          "target_fields": [
            "cisco.umbrella._tmp.time",
            "cisco.umbrella.identity",
            "source.address",
            "source.nat.ip",
            "destination.address",
            "cisco.umbrella.content_type",
            "cisco.umbrella.verdict",
            "url.full",
            "http.request.referrer",
            "user_agent.original",
            "http.response.status_code",
            "http.request.bytes",
            "http.response.bytes",
            "http.response.body.bytes",
            "cisco.umbrella.sha_sha256",
            "cisco.umbrella.categories",
            "cisco.umbrella.av_detections",
            "cisco.umbrella.puas",
            "cisco.umbrella.amp_disposition",
            "cisco.umbrella.amp_malware_name",
            "cisco.umbrella.amp_score",
            "cisco.umbrella.identity_types",
            "cisco.umbrella.blocked_categories",
            "cisco.umbrella.identities",
            "cisco.umbrella.identity_types",
            "cisco.umbrella.request_method",
            "cisco.umbrella.dlp_status",
            "cisco.umbrella.certificate_errors",
            "cisco.umbrella.file_name",
            "cisco.umbrella.ruleset_id",
            "cisco.umbrella.rule_id",
            "cisco.umbrella.destination_lists_id"
          ],
          "if": "ctx.log?.file?.path.contains('proxylogs')"
        }
      },
      {
        "set": {
          "field": "observer.type",
          "value": "proxy",
          "if": "ctx.log?.file?.path.contains('proxylogs')"
        }
      },
      {
        "csv": {
          "field": "event.original",
          "target_fields": [
            "cisco.umbrella._tmp.time",
            "cisco.umbrella.origin_id",
            "user.name",
            "cisco.umbrella.identity_types",
            "cisco.umbrella.direction",
            "network.transport",
            "source.bytes",
            "source.address",
            "source.port",
            "destination.address",
            "destination.port",
            "cisco.umbrella.datacenter",
            "cisco.umbrella.ruleid",
            "cisco.umbrella.verdict"
          ],
          "if": "ctx.log?.file?.path.contains('cloudfirewalllogs')"
        }
      },
      {
        "set": {
          "field": "observer.type",
          "value": "firewall",
          "if": "ctx.log?.file?.path.contains('cloudfirewalllogs')"
        }
      },
      {
        "csv": {
          "field": "event.original",
          "target_fields": [
            "event.id",
            "cisco.umbrella._tmp.time",
            "user.email",
            "user.name",
            "cisco.umbrella.audit.type",
            "event.action",
            "source.address",
            "cisco.umbrella.audit.before",
            "cisco.umbrella.audit.after"
          ],
          "if": "ctx.log?.file?.path.contains('auditlogs')"
        }
      },
      {
        "uri_parts": {
          "field": "url.full",
          "ignore_failure": true,
          "if": "ctx.url?.full != null"
        }
      },
      {
        "split": {
          "field": "cisco.umbrella.identities",
          "separator": ",\\s*",
          "preserve_trailing": false,
          "if": "ctx.cisco?.umbrella?.identities != null && (ctx.log?.file?.path.contains('dnslogs') || ctx.log?.file?.path.contains('proxylogs'))"
        }
      },
      {
        "split": {
          "field": "cisco.umbrella.categories",
          "separator": ",\\s*",
          "preserve_trailing": false,
          "if": "ctx.log?.file?.path.contains('dnslogs') && ctx.cisco?.umbrella?.categories != null"
        }
      },
      {
        "split": {
          "field": "cisco.umbrella.blocked_categories",
          "separator": ",\\s*",
          "preserve_trailing": false,
          "if": "ctx.log?.file?.path.contains('dnslogs') && ctx.cisco?.umbrella?.blocked_categories != null"
        }
      },
      {
        "split": {
          "field": "cisco.umbrella.identity_types",
          "separator": ",\\s*",
          "preserve_trailing": false,
          "if": "ctx.cisco?.umbrella?.identity_types != null"
        }
      },
      {
        "date": {
          "field": "cisco.umbrella._tmp.time",
          "target_field": "@timestamp",
          "formats": [
            "yyyy-MM-dd HH:mm:ss",
            "ISO8601"
          ],
          "if": "ctx.cisco?.umbrella?._tmp?.time != null"
        }
      },
      {
        "set": {
          "field": "dns.type",
          "value": "query",
          "if": "ctx.cisco?.umbrella?.action != null"
        }
      },
      {
        "registered_domain": {
          "field": "dns.question.name",
          "target_field": "dns.question",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": "dns.question.domain",
          "ignore_missing": true
        }
      },
      {
        "lowercase": {
          "field": "cisco.umbrella.direction",
          "target_field": "network.direction",
          "if": "ctx.cisco?.umbrella?.direction != null"
        }
      },
      {
        "convert": {
          "field": "source.bytes",
          "type": "long",
          "if": "ctx.source?.bytes != null"
        }
      },
      {
        "convert": {
          "field": "source.port",
          "type": "long",
          "if": "ctx.source?.port != null"
        }
      },
      {
        "convert": {
          "field": "destination.port",
          "type": "long",
          "if": "ctx.destination?.port != null"
        }
      },
      {
        "convert": {
          "field": "http.request.bytes",
          "type": "long",
          "if": "ctx.http?.request?.bytes != null"
        }
      },
      {
        "convert": {
          "field": "http.response.bytes",
          "type": "long",
          "if": "ctx.http?.response?.bytes != null"
        }
      },
      {
        "convert": {
          "field": "http.response.status_code",
          "type": "long",
          "if": "ctx.http?.response?.status_code != null"
        }
      },
      {
        "rename": {
          "field": "cisco.umbrella.ruleid",
          "target_field": "rule.id",
          "if": "ctx.cisco?.umbrella?.ruleid != null"
        }
      },
      {
        "set": {
          "field": "event.action",
          "value": "dns-request-{{cisco.umbrella.action}}",
          "if": "ctx.cisco?.umbrella?.action != null"
        }
      },
      {
        "set": {
          "field": "event.category",
          "value": "network",
          "if": "!ctx.log?.file?.path.contains('auditlogs')"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "allowed",
          "if": "ctx.cisco?.umbrella?.action == 'Allowed' || ['ALLOWED','ALLOW'].contains(ctx.cisco?.umbrella?.verdict)"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "denied",
          "if": "ctx.cisco?.umbrella?.action == 'Blocked' || ['BLOCKED','BLOCK'].contains(ctx.cisco?.umbrella?.verdict)"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "connection",
          "if": "ctx.cisco?.umbrella?.action != null"
        }
      },
      {
        "set": {
          "field": "event.category",
          "value": "configuration",
          "if": "ctx.log?.file?.path.contains('auditlogs')"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "creation",
          "if": "ctx.log?.file?.path.contains('auditlogs') && ctx.event?.action.toLowerCase() == 'create'"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "change",
          "if": "ctx.log?.file?.path.contains('auditlogs') && ctx.event?.action.toLowerCase() == 'update'"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "deletion",
          "if": "ctx.log?.file?.path.contains('auditlogs') && ctx.event?.action.toLowerCase() == 'delete'"
        }
      },
      {
        "convert": {
          "field": "source.address",
          "target_field": "source.ip",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "set": {
                "copy_from": "source.address",
                "field": "source.domain",
                "override": true
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "destination.address",
          "target_field": "destination.ip",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "set": {
                "field": "destination.domain",
                "copy_from": "destination.address",
                "override": true
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "source.nat.ip",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "source.nat.ip"
              }
            }
          ]
        }
      },
      {
        "community_id": {
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "source.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.asn",
          "target_field": "source.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.organization_name",
          "target_field": "source.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "field": "destination.ip",
          "target_field": "destination.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "destination.ip",
          "target_field": "destination.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "destination.as.asn",
          "target_field": "destination.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "destination.as.organization_name",
          "target_field": "destination.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{user.name}}",
          "if": "ctx.source?.user?.name != null"
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{source.ip}}",
          "if": "ctx.source?.ip != null"
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{source.nat.ip}}",
          "if": "ctx.source?.nat?.ip != null"
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{destination.ip}}",
          "if": "ctx.destination?.ip != null"
        }
      },
      {
        "append": {
          "field": "related.hosts",
          "value": "{{source.domain}}",
          "if": "ctx.source?.domain != null"
        }
      },
      {
        "append": {
          "field": "related.hosts",
          "value": "{{dns.question.name}}",
          "if": "ctx.dns?.question?.name != null"
        }
      },
      {
        "append": {
          "field": "related.hash",
          "value": "{{cisco.umbrella.sha_sha256}}",
          "if": "ctx.cisco?.umbrella?.sha_sha256 != null"
        }
      },
      {
        "script": {
          "if": "ctx.cisco?.umbrella?.identities != null && ctx.cisco.umbrella.identities instanceof List",
          "lang": "painless",
          "description": "Extract user name values from ctx.cisco.umbrella.identities and append it to related.user",
          "source": "void addRelatedUser(def ctx, def x) {\n  if (ctx.related == null) {\n    Map map = new HashMap();\n    ctx.put(\"related\", map);\n  }\n  if (ctx.related?.user == null) {\n    ArrayList al = new ArrayList();\n    ctx.related.put(\"user\", al);\n  }\n  if (!ctx.related.user.contains(x)) {\n    ctx.related.user.add(x);\n  }\n}\nfor (cisco_identity in ctx.cisco.umbrella.identities) {\n  if (cisco_identity.contains('@')) {\n    addRelatedUser(ctx, cisco_identity);\n  }\n}"
        }
      },
      {
        "remove": {
          "field": [
            "cisco.umbrella._tmp",
            "cisco.umbrella.direction",
            "cisco.umbrella.action",
            "cisco.umbrella.verdict"
          ],
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-cisco_umbrella.log@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "cisco_umbrella"
      }
    }
  },
  "metrics-kubernetes.system-1.26.0": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-kubernetes.system@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "kubernetes"
      }
    }
  },
  "logs-azure.application_gateway-1.5.4-azure-shared-pipeline": {
    "description": "Pipeline for parsing Azure shared log fields.",
    "processors": [
      {
        "set": {
          "field": "cloud.provider",
          "value": "azure"
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "patterns": [
            "(?i)/subscriptions/%{SUBID:azure.subscription_id}/resourceGroups/%{GROUPID:azure.resource.group}/providers/%{PROVIDERNAME:azure.resource.provider}/namespaces/%{NAMESPACE:azure.resource.namespace}/authorizationRules/%{RULE:azure.resource.authorization_rule}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "GROUPID": ".+",
            "PROVIDERNAME": ".+",
            "NAMESPACE": ".+",
            "RULE": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "(?i)/subscriptions/%{SUBID:azure.subscription_id}/resourceGroups/%{GROUPID:azure.resource.group}/providers/%{PROVIDERNAME:azure.resource.provider}/%{NAME:azure.resource.name}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "GROUPID": ".+",
            "PROVIDERNAME": "([A-Za-z])\\w+.([A-Za-z])\\w+/([A-Za-z])\\w+.",
            "NAME": "((?!AUTHORIZATIONRULES).)*$"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "(?i)/subscriptions/%{SUBID:azure.subscription_id}/resourceGroups/%{GROUPID:azure.resource.group}/providers/%{PROVIDERNAME:azure.resource.provider}/%{NAME:azure.resource.name}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "GROUPID": ".+",
            "PROVIDERNAME": "([A-Za-z])\\w+.([A-Za-z])\\w+\\/([A-Za-z][^\\/])\\w+",
            "NAME": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "(?i)/providers/%{PROVIDER:azure.resource.provider}"
          ],
          "pattern_definitions": {
            "PROVIDER": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "(?i)/subscriptions/%{SUBID:azure.subscription_id}/providers/%{PROVIDERNAME:azure.resource.provider}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "PROVIDERNAME": "([A-Za-z])\\w+.([A-Za-z])\\w+\\/([A-Za-z][^\\/])\\w+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "(?i)/subscriptions/%{SUBID:azure.subscription_id}/resourceGroups/%{GROUPID:azure.resource.group}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "GROUPID": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "(?i)/subscriptions/%{SUBID:azure.subscription_id}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}"
          },
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "azure.resource_id",
          "target_field": "azure.resource.id",
          "ignore_missing": true
        }
      },
      {
        "lowercase": {
          "field": "event.outcome",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "cloud.account.id",
          "copy_from": "azure.subscription_id",
          "ignore_empty_value": true
        }
      },
      {
        "pipeline": {
          "name": "logs-azure.application_gateway@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "azure"
      }
    }
  },
  "metrics-aws.dynamodb-1.25.2": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-aws.dynamodb@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "logs-cisco_duo.auth-1.5.1": {
    "description": "Pipeline for parsing cisco_duo authentication logs",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.4.0"
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "json",
          "ignore_failure": true
        }
      },
      {
        "fingerprint": {
          "fields": [
            "json.timestamp",
            "json.txid"
          ],
          "target_field": "_id",
          "ignore_missing": true
        }
      },
      {
        "date": {
          "field": "json.timestamp",
          "target_field": "@timestamp",
          "if": "ctx.json?.timestamp != null",
          "formats": [
            "UNIX"
          ],
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "set": {
          "field": "event.category",
          "value": "authentication"
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "failure"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "success",
          "if": "ctx?.json?.result == \"success\""
        }
      },
      {
        "set": {
          "field": "event.type",
          "value": "info"
        }
      },
      {
        "set": {
          "field": "event.reason",
          "copy_from": "json.reason",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.address",
          "copy_from": "json.access_device.ip"
        }
      },
      {
        "grok": {
          "field": "json.access_device.ip",
          "patterns": [
            "^%{IPV4:json.access_device.ip}:%{PORT:json.access_device.port}$",
            "^\\[%{IPV6:json.access_device.ip}\\]:%{PORT:json.access_device.port}$",
            "^%{IPV6NOCOMPRESS:json.access_device.ip}:%{PORT:json.access_device.port}$",
            "^%{IPV6:json.access_device.ip}%{IPV6PORTSEP}%{PORT:json.access_device.port}$"
          ],
          "pattern_definitions": {
            "IPV6NOCOMPRESS": "([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4}",
            "IPV6PORTSEP": "(?: port |[p#.])",
            "PORT": "[0-9]+"
          },
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "json.access_device.ip",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "json.access_device.ip"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "json.access_device.port",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "json.access_device.port"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "set": {
          "field": "source.ip",
          "copy_from": "json.access_device.ip",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.port",
          "copy_from": "json.access_device.port",
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "json.auth_device.ip",
          "patterns": [
            "^%{IPV4:json.auth_device.ip}:%{PORT:json.auth_device.port}$",
            "^\\[%{IPV6:json.auth_device.ip}\\]:%{PORT:json.auth_device.port}$",
            "^%{IPV6NOCOMPRESS:json.auth_device.ip}:%{PORT:json.auth_device.port}$",
            "^%{IPV6:json.auth_device.ip}%{IPV6PORTSEP}%{PORT:json.auth_device.port}$"
          ],
          "pattern_definitions": {
            "IPV6NOCOMPRESS": "([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4}",
            "IPV6PORTSEP": "(?: port |[p#.])",
            "PORT": "[0-9]+"
          },
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "json.auth_device.ip",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "json.auth_device.ip"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "convert": {
          "field": "json.auth_device.port",
          "type": "long",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "json.auth_device.port"
              }
            },
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "set": {
          "field": "source.address",
          "copy_from": "json.access_device.hostname",
          "if": "ctx?.json?.access_device?.hostname != null"
        }
      },
      {
        "set": {
          "field": "source.user.email",
          "copy_from": "json.email",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.user.id",
          "copy_from": "json.user.key",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.user.name",
          "copy_from": "json.user.name",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.user.groups",
          "target_field": "source.user.group.name",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "source.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.asn",
          "target_field": "source.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.organization_name",
          "target_field": "source.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "field": "json.auth_device.ip",
          "target_field": "cisco_duo.auth.auth_device.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "json.auth_device.ip",
          "target_field": "cisco_duo.auth.auth_device.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "cisco_duo.auth.auth_device.as.asn",
          "target_field": "cisco_duo.auth.auth_device.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "cisco_duo.auth.auth_device.as.organization_name",
          "target_field": "cisco_duo.auth.auth_device.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "user.email",
          "copy_from": "json.email",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "user.name",
          "copy_from": "json.user.name",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "user.id",
          "copy_from": "json.user.key",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "user_agent.name",
          "copy_from": "json.access_device.browser",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "user_agent.version",
          "copy_from": "json.access_device.browser_version",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "user_agent.os.name",
          "copy_from": "json.access_device.os",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "user_agent.os.version",
          "copy_from": "json.access_device.os_version",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.email",
          "target_field": "cisco_duo.auth.email",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.event_type",
          "target_field": "cisco_duo.auth.event_type",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.factor",
          "target_field": "cisco_duo.auth.factor",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.ood_software",
          "target_field": "cisco_duo.auth.ood_software",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.reason",
          "target_field": "cisco_duo.auth.reason",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.result",
          "target_field": "cisco_duo.auth.result",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.txid",
          "target_field": "cisco_duo.auth.txid",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.alias",
          "target_field": "cisco_duo.auth.alias",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.access_device.flash_version",
          "target_field": "cisco_duo.auth.access_device.flash_version",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.access_device.hostname",
          "target_field": "cisco_duo.auth.access_device.hostname",
          "if": "ctx?.json?.access_device?.hostname != null"
        }
      },
      {
        "rename": {
          "field": "json.access_device.ip",
          "target_field": "cisco_duo.auth.access_device.ip",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.access_device.port",
          "target_field": "cisco_duo.auth.access_device.port",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.access_device.is_encryption_enabled",
          "target_field": "cisco_duo.auth.access_device.is_encryption_enabled",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "cisco_duo.auth.access_device.is_encryption_enabled",
          "type": "string",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.access_device.is_firewall_enabled",
          "target_field": "cisco_duo.auth.access_device.is_firewall_enabled",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "cisco_duo.auth.access_device.is_firewall_enabled",
          "type": "string",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.access_device.is_password_set",
          "target_field": "cisco_duo.auth.access_device.is_password_set",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "cisco_duo.auth.access_device.is_password_set",
          "type": "string",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.access_device.java_version",
          "target_field": "cisco_duo.auth.access_device.java_version",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.access_device.location.city",
          "target_field": "cisco_duo.auth.access_device.location.city",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.access_device.location.country",
          "target_field": "cisco_duo.auth.access_device.location.country",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.access_device.location.state",
          "target_field": "cisco_duo.auth.access_device.location.state",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "json.access_device.security_agents",
          "if": "ctx.json?.access_device?.security_agents != null && (\n  !(ctx.json.access_device.security_agents instanceof List) ||\n  ctx.json.access_device.security_agents.length == 0 ||\n  !(ctx.json.access_device.security_agents[0] instanceof Object)\n)"
        }
      },
      {
        "rename": {
          "field": "json.access_device.security_agents",
          "target_field": "cisco_duo.auth.access_device.security_agents",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.application.key",
          "target_field": "cisco_duo.auth.application.key",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.application.name",
          "target_field": "cisco_duo.auth.application.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.auth_device.ip",
          "target_field": "cisco_duo.auth.auth_device.ip",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.auth_device.port",
          "target_field": "cisco_duo.auth.auth_device.port",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.auth_device.location.city",
          "target_field": "cisco_duo.auth.auth_device.location.city",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.auth_device.location.country",
          "target_field": "cisco_duo.auth.auth_device.location.country",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.auth_device.location.state",
          "target_field": "cisco_duo.auth.auth_device.location.state",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.auth_device.name",
          "target_field": "cisco_duo.auth.auth_device.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.trusted_endpoint_status",
          "target_field": "cisco_duo.auth.trusted_endpoint_status",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{source.ip}}}",
          "if": "ctx?.source?.ip != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{cisco_duo.auth.auth_device.ip}}}",
          "if": "ctx?.cisco_duo?.auth?.auth_device?.ip != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "script": {
          "description": "Drops null/empty values recursively",
          "lang": "painless",
          "source": "boolean drop(Object o) {\n  if (o == null || o == \"\") {\n    return true;\n  } else if (o instanceof Map) {\n    ((Map) o).values().removeIf(v -> drop(v));\n    return (((Map) o).size() == 0);\n  } else if (o instanceof List) {\n    ((List) o).removeIf(v -> drop(v));\n    return (((List) o).length == 0);\n  }\n  return false;\n}\ndrop(ctx);\n"
        }
      },
      {
        "remove": {
          "field": "json",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-cisco_duo.auth@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "append": {
          "field": "error.message",
          "value": "{{{_ingest.on_failure_message}}}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "cisco_duo"
      }
    }
  },
  "logs-zscaler_zia.tunnel-2.4.1": {
    "description": "Pipeline for Zscaler tunnel logs",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.4.0"
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "resp",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": "json",
          "if": "ctx?.input?.type == 'http_endpoint'",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "resp.event",
          "target_field": "json",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "resp",
          "ignore_missing": true
        }
      },
      {
        "date": {
          "field": "json.datetime",
          "target_field": "@timestamp",
          "ignore_failure": true,
          "formats": [
            "E MMM dd HH:mm:ss yyyy",
            "E MMM  d HH:mm:ss yyyy",
            "E MMM d HH:mm:ss yyyy",
            "yyyy-mm-dd HH:mm:ss"
          ]
        }
      },
      {
        "date": {
          "field": "json.time",
          "target_field": "@timestamp",
          "ignore_failure": true,
          "formats": [
            "E MMM dd HH:mm:ss yyyy",
            "E MMM  d HH:mm:ss yyyy",
            "E MMM d HH:mm:ss yyyy",
            "yyyy-MM-dd HH:mm:ss"
          ]
        }
      },
      {
        "remove": {
          "field": [
            "json.time",
            "json.datetime"
          ],
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "network"
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "info"
        }
      },
      {
        "rename": {
          "field": "json.recordid",
          "target_field": "event.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.event",
          "target_field": "event.action",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.eventreason",
          "target_field": "event.reason",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.destinationip",
          "target_field": "destination.ip",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{destination.ip}}}",
          "if": "ctx?.destination?.ip != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "json.destinationport",
          "target_field": "destination.port",
          "type": "long",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "json.destinationport",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.sourceip",
          "target_field": "source.ip",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{source.ip}}}",
          "if": "ctx?.source?.ip != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "json.sourceport",
          "target_field": "source.port",
          "type": "long",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "json.sourceport",
          "ignore_missing": true
        }
      },
      {
        "urldecode": {
          "field": "json.user",
          "target_field": "user.name",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "json.user",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{{user.name}}}",
          "if": "ctx?.user?.name != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "json.rxbytes",
          "target_field": "destination.bytes",
          "type": "long",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "json.rxbytes",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.rxpackets",
          "target_field": "destination.packets",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.txbytes",
          "target_field": "source.bytes",
          "type": "long",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "json.txbytes",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.txpackets",
          "target_field": "source.packets",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.Recordtype",
          "target_field": "zscaler_zia.tunnel.action.type",
          "ignore_missing": true
        }
      },
      {
        "urldecode": {
          "field": "json.location",
          "target_field": "zscaler_zia.tunnel.location.name",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "json.location",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.lifetime",
          "target_field": "zscaler_zia.tunnel.life.time",
          "type": "long",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "json.lifetime",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.ikeversion",
          "target_field": "zscaler_zia.tunnel.ike.version",
          "type": "integer",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "json.ikeversion",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.spi_in",
          "target_field": "zscaler_zia.tunnel.spi_in",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.spi_out",
          "target_field": "zscaler_zia.tunnel.spi_out",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.algo",
          "target_field": "zscaler_zia.tunnel.encryption.algorithm",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.authentication",
          "target_field": "zscaler_zia.tunnel.authentication.algorithm",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.authtype",
          "target_field": "zscaler_zia.tunnel.authentication.type",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.tunneltype",
          "target_field": "zscaler_zia.tunnel.type",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "network.transport",
          "copy_from": "zscaler_zia.tunnel.type",
          "ignore_failure": true
        }
      },
      {
        "lowercase": {
          "field": "network.transport",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "network.iana_number",
          "value": "47",
          "if": "ctx?.network?.transport == \"gre\"",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.vendorname",
          "target_field": "zscaler_zia.tunnel.vendor.name",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.sourceportstart",
          "target_field": "zscaler_zia.tunnel.source.start.port",
          "type": "long",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "json.sourceportstart",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.destinationportstart",
          "target_field": "zscaler_zia.tunnel.destination.start.port",
          "type": "long",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "json.destinationportstart",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.srcipstart",
          "target_field": "zscaler_zia.tunnel.source.start.ip",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{zscaler_zia.tunnel.source.start.ip}}}",
          "if": "ctx?.zscaler_zia?.tunnel?.source?.start?.ip != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.srcipend",
          "target_field": "zscaler_zia.tunnel.source.end.ip",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{zscaler_zia.tunnel.source.end.ip}}}",
          "if": "ctx?.zscaler_zia?.tunnel?.source?.end?.ip != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.destinationipstart",
          "target_field": "zscaler_zia.tunnel.destination.start.ip",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{zscaler_zia.tunnel.destination.start.ip}}}",
          "if": "ctx?.zscaler_zia?.tunnel?.destination?.start?.ip != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.destinationipend",
          "target_field": "zscaler_zia.tunnel.destination.end.ip",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{zscaler_zia.tunnel.destination.end.ip}}}",
          "if": "ctx?.zscaler_zia?.tunnel?.destination?.end?.ip != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.spi",
          "target_field": "zscaler_zia.tunnel.spi",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.protocol",
          "target_field": "zscaler_zia.tunnel.policy.protocol",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.tunnelprotocol",
          "target_field": "zscaler_zia.tunnel.protocol",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.policydirection",
          "target_field": "zscaler_zia.tunnel.policy.direction",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.lifebytes",
          "target_field": "zscaler_zia.tunnel.life.bytes",
          "type": "long",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "json.lifebytes",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.dpdrec",
          "target_field": "zscaler_zia.tunnel.dpd_packets",
          "ignore_missing": true
        }
      },
      {
        "community_id": {
          "ignore_failure": true
        }
      },
      {
        "script": {
          "description": "Drops null/empty values recursively",
          "lang": "painless",
          "source": "boolean dropEmptyFields(Object object) {\n  if (object == null || object == \"\") {\n    return true;\n  } else if (object instanceof Map) {\n    ((Map) object).values().removeIf(value -> dropEmptyFields(value));\n    return (((Map) object).size() == 0);\n  } else if (object instanceof List) {\n    ((List) object).removeIf(value -> dropEmptyFields(value));\n    return (((List) object).length == 0);\n  }\n  return false;\n}\ndropEmptyFields(ctx);\n"
        }
      },
      {
        "script": {
          "description": "Adds all the remaining fields in fields under zscaler_zia.tunnel",
          "lang": "painless",
          "if": "ctx.json != null",
          "source": "for (Map.Entry m : ctx.json.entrySet()) {\n  ctx.zscaler_zia.tunnel[m.getKey()] = m.getValue();\n}\n"
        }
      },
      {
        "remove": {
          "field": "json",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-zscaler_zia.tunnel@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{{ _ingest.on_failure_message }}}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "zscaler_zia"
      }
    }
  },
  "metrics-aws.s3_request-1.25.2": {
    "description": "Pipeline for S3 request metrics",
    "processors": [
      {
        "rename": {
          "field": "aws.s3.metrics.AllRequests.avg",
          "target_field": "aws.s3_request.requests.total",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.s3.metrics.GetRequests.avg",
          "target_field": "aws.s3_request.requests.get",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.s3.metrics.PutRequests.avg",
          "target_field": "aws.s3_request.requests.put",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.s3.metrics.DeleteRequests.avg",
          "target_field": "aws.s3_request.requests.delete",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.s3.metrics.HeadRequests.avg",
          "target_field": "aws.s3_request.requests.head",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.s3.metrics.PostRequests.avg",
          "target_field": "aws.s3_request.requests.post",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.s3.metrics.SelectRequests.avg",
          "target_field": "aws.s3_request.requests.select",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.s3.metrics.SelectScannedBytes.avg",
          "target_field": "aws.s3_request.requests.select_scanned.bytes",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.s3.metrics.SelectReturnedBytes.avg",
          "target_field": "aws.s3_request.requests.select_returned.bytes",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.s3.metrics.ListRequests.avg",
          "target_field": "aws.s3_request.requests.list",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.s3.metrics.BytesDownloaded.avg",
          "target_field": "aws.s3_request.downloaded.bytes",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.s3.metrics.BytesUploaded.avg",
          "target_field": "aws.s3_request.uploaded.bytes",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.s3.metrics.4xxErrors.avg",
          "target_field": "aws.s3_request.errors.4xx",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.s3.metrics.5xxErrors.avg",
          "target_field": "aws.s3_request.errors.5xx",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.s3.metrics.FirstByteLatency.avg",
          "target_field": "aws.s3_request.latency.first_byte.ms",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.s3.metrics.TotalRequestLatency.avg",
          "target_field": "aws.s3_request.latency.total_request.ms",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.dimensions.BucketName",
          "target_field": "aws.s3.bucket.name",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": [
            "aws.s3.metrics"
          ],
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "metrics-aws.s3_request@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "logs-azure.auditlogs-1.5.4": {
    "description": "Pipeline for parsing azure activity logs.",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.0.0"
        }
      },
      {
        "rename": {
          "field": "azure",
          "target_field": "azure-eventhub",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true,
          "if": "ctx.event?.original == null",
          "description": "Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document."
        }
      },
      {
        "remove": {
          "field": "message",
          "ignore_missing": true,
          "if": "ctx.event?.original != null",
          "description": "The `message` field is no longer required if the document has an `event.original` field."
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "azure.auditlogs"
        }
      },
      {
        "drop": {
          "if": "ctx.azure.auditlogs.category != 'AuditLogs'"
        }
      },
      {
        "date": {
          "field": "azure.auditlogs.time",
          "target_field": "@timestamp",
          "ignore_failure": true,
          "formats": [
            "ISO8601"
          ]
        }
      },
      {
        "rename": {
          "field": "azure.auditlogs.resourceId",
          "target_field": "azure.resource_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.auditlogs.durationMs",
          "target_field": "event.duration",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "source": "ctx.event.duration = ctx.event.duration * params.param_nano",
          "params": {
            "param_nano": 1000000
          }
        }
      },
      {
        "rename": {
          "field": "azure.auditlogs.properties.result",
          "target_field": "event.outcome",
          "if": "ctx?.azure?.auditlogs?.properties?.result != null && ctx.azure.auditlogs.properties.result instanceof String && (ctx.azure.auditlogs.properties.result.toLowerCase() == 'success' || ctx.azure.auditlogs.properties.result.toLowerCase() == 'failure')"
        }
      },
      {
        "rename": {
          "field": "azure.auditlogs.level",
          "target_field": "log.level",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "azure.auditlogs.time",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "azure.auditlogs.operationName",
          "target_field": "event.action",
          "type": "string",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "azure.auditlogs.operationName",
          "target_field": "azure.auditlogs.operation_name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.auditlogs.resultSignature",
          "target_field": "azure.auditlogs.result_signature",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.auditlogs.operationVersion",
          "target_field": "azure.auditlogs.operation_version",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.auditlogs.tenantId",
          "target_field": "azure.tenant_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.auditlogs.correlationId",
          "target_field": "azure.correlation_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.auditlogs.properties.activityDisplayName",
          "target_field": "azure.auditlogs.properties.activity_display_name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.auditlogs.properties.activityDateTime",
          "target_field": "azure.auditlogs.properties.activity_datetime",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.auditlogs.properties.additionalDetails",
          "target_field": "azure.auditlogs.properties.additional_details",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "azure.auditlogs.callerIpAddress",
          "target_field": "source.ip",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "rename": {
                "field": "azure.auditlogs.callerIpAddress",
                "target_field": "source.address",
                "ignore_missing": true,
                "ignore_failure": true
              }
            }
          ]
        }
      },
      {
        "remove": {
          "field": "azure.auditlogs.callerIpAddress",
          "if": "ctx.source?.ip != null",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "description": "Drop appId field if value is null.",
          "if": "ctx?.azure?.auditlogs?.properties?.initiatedBy?.app?.appId == null",
          "field": "azure.auditlogs.properties.initiatedBy.app.appId",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "description": "Drop servicePrincipalName field if value is null.",
          "if": "ctx?.azure?.auditlogs?.properties?.initiatedBy?.app?.servicePrincipalName == null",
          "field": "azure.auditlogs.properties.initiatedBy.app.servicePrincipalName",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "description": "Drop userAgent field if value is null.",
          "if": "ctx?.azure?.auditlogs?.properties?.userAgent == null",
          "field": "azure.auditlogs.properties.userAgent",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "client.ip",
          "value": "{{source.ip}}",
          "ignore_empty_value": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{source.ip}}",
          "allow_duplicates": false,
          "if": "ctx.source?.ip != null"
        }
      },
      {
        "rename": {
          "field": "azure.auditlogs.properties.resultReason",
          "target_field": "azure.auditlogs.properties.result_reason",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.auditlogs.properties.correlationId",
          "target_field": "azure.auditlogs.properties.correlation_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.auditlogs.properties.loggedByService",
          "target_field": "azure.auditlogs.properties.logged_by_service",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.auditlogs.properties.operationType",
          "target_field": "azure.auditlogs.properties.operation_type",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.auditlogs.Level",
          "target_field": "azure.auditlogs.level",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.auditlogs.properties.additional_details.userAgent",
          "target_field": "azure.auditlogs.properties.additional_details.user_agent",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "source": "if (ctx.azure.auditlogs.properties.targetResources != null) {\n  ctx.azure.auditlogs.properties.target_resources = new HashMap();\n  for (def i = 0; i < ctx.azure.auditlogs.properties.targetResources.length; i++) {\n    String index = String.valueOf(i);\n    ctx.azure.auditlogs.properties.target_resources[index] = new HashMap();\n    if(ctx.azure.auditlogs.properties.targetResources[i].displayName != null) {\n      ctx.azure.auditlogs.properties.target_resources[index].display_name = ctx.azure.auditlogs.properties.targetResources[i].displayName;\n    }\n    ctx.azure.auditlogs.properties.target_resources[index].id = ctx.azure.auditlogs.properties.targetResources[i].id;\n    ctx.azure.auditlogs.properties.target_resources[index].type = ctx.azure.auditlogs.properties.targetResources[i].type;\n    if (ctx.azure.auditlogs.properties.targetResources[i].ipAddress != null) {\n      ctx.azure.auditlogs.properties.target_resources[index].ip_address = ctx.azure.auditlogs.properties.targetResources[i].ipAddress;\n    }\n    if (ctx.azure.auditlogs.properties.targetResources[i].userPrincipalName != null) {\n      ctx.azure.auditlogs.properties.target_resources[index].user_principal_name = ctx.azure.auditlogs.properties.targetResources[i].userPrincipalName;\n    }\n    ctx.azure.auditlogs.properties.target_resources[index].modified_properties = new HashMap();\n    for (def j = 0; j < ctx.azure.auditlogs.properties.targetResources[i].modifiedProperties.length; j++) {\n      String n = String.valueOf(j);\n      ctx.azure.auditlogs.properties.target_resources[index].modified_properties[n] = new HashMap();\n      ctx.azure.auditlogs.properties.target_resources[index].modified_properties[n].display_name = ctx.azure.auditlogs.properties.targetResources[i].modifiedProperties[j].displayName;\n      if (ctx.azure.auditlogs.properties.targetResources[i].modifiedProperties[j].newValue != null) {\n        ctx.azure.auditlogs.properties.target_resources[index].modified_properties[n].new_value = ctx.azure.auditlogs.properties.targetResources[i].modifiedProperties[j].newValue;\n      }\n      if (ctx.azure.auditlogs.properties.targetResources[i].modifiedProperties[j].oldValue != null) {\n        ctx.azure.auditlogs.properties.target_resources[index].modified_properties[n].old_value = ctx.azure.auditlogs.properties.targetResources[i].modifiedProperties[j].oldValue;\n      }\n    }\n  }\n  ctx.azure.auditlogs.properties.remove('targetResources');\n}",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "azure.auditlogs.properties.initiatedBy",
          "target_field": "azure.auditlogs.properties.initiated_by",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "source.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.asn",
          "target_field": "source.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.organization_name",
          "target_field": "source.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "pipeline": {
          "name": "logs-azure.auditlogs-1.5.4-azure-shared-pipeline"
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-azure.auditlogs@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "azure"
      }
    }
  },
  "metrics-kubernetes.state_replicaset-1.26.0": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-kubernetes.state_replicaset@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "kubernetes"
      }
    }
  },
  "logs-proofpoint_tap.clicks_blocked-1.1.1": {
    "description": "Pipeline for parsing Proofpoint TAP blocked clicks logs.",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.4.0"
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "json",
          "ignore_failure": true
        }
      },
      {
        "fingerprint": {
          "fields": [
            "json.GUID",
            "json.clickTime",
            "json.threatTime"
          ],
          "target_field": "_id",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "email",
          "ignore_failure": true
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "denied",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "rename": {
          "field": "json.sender",
          "target_field": "email.from.address",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.messageID",
          "target_field": "email.message_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.recipient",
          "target_field": "email.to.address",
          "ignore_missing": true
        }
      },
      {
        "date": {
          "field": "json.clickTime",
          "target_field": "@timestamp",
          "ignore_failure": true,
          "formats": [
            "ISO8601"
          ]
        }
      },
      {
        "rename": {
          "field": "json.id",
          "target_field": "event.id",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{json.senderIP}}}",
          "if": "ctx.json?.senderIP != null && ctx.json?.senderIP != ''",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{json.clickIP}}}",
          "if": "ctx.json?.clickIP != null && ctx.json?.clickIP != ''",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "json.clickIP",
          "target_field": "destination.ip",
          "type": "ip",
          "ignore_failure": true
        }
      },
      {
        "geoip": {
          "field": "destination.ip",
          "target_field": "destination.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "destination.ip",
          "target_field": "destination.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "destination.as.asn",
          "target_field": "destination.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "destination.as.organization_name",
          "target_field": "destination.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.senderIP",
          "target_field": "source.ip",
          "type": "ip",
          "ignore_failure": true
        }
      },
      {
        "date": {
          "field": "json.threatTime",
          "target_field": "proofpoint_tap.clicks_blocked.threat.time",
          "ignore_failure": true,
          "formats": [
            "ISO8601"
          ]
        }
      },
      {
        "uri_parts": {
          "field": "json.url",
          "keep_original": false,
          "ignore_failure": true
        }
      },
      {
        "urldecode": {
          "field": "json.url",
          "target_field": "url.full",
          "ignore_missing": true
        }
      },
      {
        "user_agent": {
          "field": "json.userAgent",
          "target_field": "user_agent",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.campaignId",
          "target_field": "proofpoint_tap.clicks_blocked.campaign_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.classification",
          "target_field": "proofpoint_tap.clicks_blocked.classification",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.GUID",
          "target_field": "proofpoint_tap.guid",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.threatID",
          "target_field": "proofpoint_tap.clicks_blocked.threat.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.threatStatus",
          "target_field": "proofpoint_tap.clicks_blocked.threat.status",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.threatURL",
          "target_field": "proofpoint_tap.clicks_blocked.threat.url",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "json",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "description": "Drops null/empty values recursively.",
          "lang": "painless",
          "source": "boolean dropEmptyFields(Object object) {\nif (object == null || object == \"\") {\n    return true;\n} else if (object instanceof Map) {\n    ((Map) object).values().removeIf(value -> dropEmptyFields(value));\n    return (((Map) object).size() == 0);\n} else if (object instanceof List) {\n    ((List) object).removeIf(value -> dropEmptyFields(value));\n    return (((List) object).length == 0);\n}\nreturn false;\n}\ndropEmptyFields(ctx);\n"
        }
      },
      {
        "pipeline": {
          "name": "logs-proofpoint_tap.clicks_blocked@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{{ _ingest.on_failure_message }}}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "proofpoint_tap"
      }
    }
  },
  "logs-azure.eventhub-1.5.4-parsed-message": {
    "description": "Pipeline for parsing azure activity logs.",
    "processors": [
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "azure.eventhub"
        }
      },
      {
        "date": {
          "field": "azure.eventhub.time",
          "target_field": "@timestamp",
          "ignore_failure": true,
          "formats": [
            "ISO8601"
          ]
        }
      },
      {
        "remove": {
          "field": "azure.eventhub.time",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.eventhub.resourceId",
          "target_field": "azure.resource_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.eventhub.durationMs",
          "target_field": "event.duration",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "source": "if (ctx.event.duration!= null) {ctx.event.duration = ctx.event.duration * params.param_nano;}",
          "params": {
            "param_nano": 1000000
          },
          "ignore_failure": true
        }
      },
      {
        "pipeline": {
          "name": "logs-azure.eventhub-1.5.4-azure-shared-pipeline",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-azure.eventhub@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "azure"
      }
    }
  },
  "logs-zscaler_zia.web-2.4.1": {
    "description": "Pipeline for Zscaler web logs",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.4.0"
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "resp",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": "json",
          "if": "ctx?.input?.type == 'http_endpoint'",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "resp.event",
          "target_field": "json",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "resp",
          "ignore_missing": true
        }
      },
      {
        "date": {
          "field": "json.time",
          "target_field": "@timestamp",
          "ignore_failure": true,
          "formats": [
            "E MMM dd HH:mm:ss yyyy",
            "E MMM  d HH:mm:ss yyyy",
            "E MMM d HH:mm:ss yyyy",
            "yyyy-MM-dd HH:mm:ss"
          ]
        }
      },
      {
        "date": {
          "field": "json.datetime",
          "target_field": "@timestamp",
          "ignore_failure": true,
          "formats": [
            "E MMM dd HH:mm:ss yyyy",
            "E MMM  d HH:mm:ss yyyy",
            "E MMM d HH:mm:ss yyyy",
            "yyyy-MM-dd HH:mm:ss"
          ]
        }
      },
      {
        "remove": {
          "field": [
            "json.time",
            "json.datetime"
          ],
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "web"
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "info"
        }
      },
      {
        "rename": {
          "field": "json.cip",
          "target_field": "source.nat.ip",
          "if": "ctx?.json?.cip != ctx?.json?.cintip",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{source.nat.ip}}}",
          "if": "ctx?.source?.nat?.ip != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.sip",
          "target_field": "destination.ip",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{destination.ip}}}",
          "if": "ctx?.destination?.ip != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.deviceowner",
          "target_field": "source.user.name",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.reqsize",
          "target_field": "http.request.bytes",
          "type": "long",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": "json.reqsize",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.reqmethod",
          "target_field": "http.request.method",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.contenttype",
          "target_field": "http.request.mime_type",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.ereferer",
          "target_field": "http.request.referrer",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.respsize",
          "target_field": "http.response.bytes",
          "type": "long",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": "json.respsize",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.respcode",
          "target_field": "http.response.status_code",
          "type": "long",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": "json.respcode",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.rulelabel",
          "target_field": "rule.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.ruletype",
          "target_field": "rule.ruleset",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.proto",
          "target_field": "network.protocol",
          "ignore_missing": true
        }
      },
      {
        "lowercase": {
          "field": "network.protocol",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "description": "Build URI for parsing",
          "tag": "Build URI for parsing",
          "lang": "painless",
          "params": {
            "valid_protocols": [
              "http",
              "https"
            ],
            "default_protocol": "https"
          },
          "source": "if (ctx.network?.protocol == null || ctx.json?.eurl == null) {\n  return;\n}\n\n// Remap network.protocol to a valid value, if necessary.\nif (params.valid_protocols.contains(ctx.network.protocol)) {\n  ctx.json[\"url\"] = ctx.network.protocol + \"://\" + ctx.json.eurl;\n} else {\n  ctx.json[\"url\"] = params.default_protocol + \"://\" + ctx.json.eurl;\n}\n"
        }
      },
      {
        "uri_parts": {
          "field": "json.url",
          "on_failure": [
            {
              "set": {
                "field": "url.original",
                "value": "{{{json.eurl}}}",
                "if": "ctx.json?.eurl != null",
                "ignore_failure": true
              }
            }
          ]
        }
      },
      {
        "remove": {
          "field": [
            "json.eurl",
            "json.url"
          ],
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "url.full",
          "value": "{{{url.original}}}",
          "ignore_failure": true
        }
      },
      {
        "urldecode": {
          "field": "url.original",
          "ignore_missing": true
        }
      },
      {
        "user_agent": {
          "field": "json.ua",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": "json.ua",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.login",
          "target_field": "user.email",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.action",
          "target_field": "event.action",
          "ignore_missing": true
        }
      },
      {
        "lowercase": {
          "field": "event.action",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.appname",
          "target_field": "zscaler_zia.web.app.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.appclass",
          "target_field": "zscaler_zia.web.app.class",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.stime",
          "target_field": "zscaler_zia.web.stime",
          "type": "long",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": "json.stime",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.ctime",
          "target_field": "zscaler_zia.web.ctime",
          "type": "long",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": "json.ctime",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.urlclass",
          "target_field": "zscaler_zia.web.url.class",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.urlsupercat",
          "target_field": "zscaler_zia.web.url.category.super",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.urlcat",
          "target_field": "zscaler_zia.web.url.category.sub",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.malwarecat",
          "target_field": "zscaler_zia.web.malware.category",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.threatname",
          "target_field": "zscaler_zia.web.threat.name",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.riskscore",
          "target_field": "event.risk_score",
          "type": "long",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": "json.riskscore",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.dlpeng",
          "target_field": "zscaler_zia.web.dpl.engine",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.dlpdict",
          "target_field": "zscaler_zia.web.dpl.dictionaries",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.location",
          "target_field": "zscaler_zia.web.location",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.dept",
          "target_field": "zscaler_zia.web.department",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.unscannabletype",
          "target_field": "zscaler_zia.web.unscannable.type",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.devicehostname",
          "target_field": "zscaler_zia.web.device.hostname",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.hosts",
          "value": "{{{zscaler_zia.web.device.hostname}}}",
          "if": "ctx?.zscaler_zia?.web?.device?.hostname != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.bwthrottle",
          "target_field": "zscaler_zia.web.bandwidth_throttle",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.cintip",
          "target_field": "source.ip",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{source.ip}}}",
          "if": "ctx?.source?.ip != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.ehost",
          "target_field": "zscaler_zia.web.encoded_host",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.fileclass",
          "target_field": "zscaler_zia.web.file.class",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.filetype",
          "target_field": "zscaler_zia.web.file.type",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.malwareclass",
          "target_field": "zscaler_zia.web.malware.class",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.reason",
          "target_field": "event.reason",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.recordid",
          "target_field": "zscaler_zia.web.record.id",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.totalsize",
          "target_field": "zscaler_zia.web.total.size",
          "type": "long",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": "json.totalsize",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "description": "Drops null/empty values recursively",
          "lang": "painless",
          "source": "boolean dropEmptyFields(Object object) {\n  if (object == null || object == \"\") {\n    return true;\n  } else if (object instanceof Map) {\n    ((Map) object).values().removeIf(value -> dropEmptyFields(value));\n    return (((Map) object).size() == 0);\n  } else if (object instanceof List) {\n    ((List) object).removeIf(value -> dropEmptyFields(value));\n    return (((List) object).length == 0);\n  }\n  return false;\n}\ndropEmptyFields(ctx);\n"
        }
      },
      {
        "script": {
          "description": "Adds all the remaining fields in fields under zscaler_zia.web",
          "lang": "painless",
          "if": "ctx.json != null",
          "source": "for (Map.Entry m : ctx.json.entrySet()) {\n  ctx.zscaler_zia.web[m.getKey()] = m.getValue();\n}\n"
        }
      },
      {
        "remove": {
          "field": "json",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-zscaler_zia.web@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{{ _ingest.on_failure_message }}}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "zscaler_zia"
      }
    }
  },
  "logs-crowdstrike.falcon-1.7.0-remote_response_session_start": {
    "processors": [
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": [
            "network",
            "session"
          ]
        }
      },
      {
        "append": {
          "field": "event.action",
          "value": [
            "remote_response_session_start_event"
          ]
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": [
            "start"
          ]
        }
      },
      {
        "set": {
          "field": "message",
          "value": "Remote response session started."
        }
      },
      {
        "convert": {
          "field": "crowdstrike.event.HostnameField",
          "target_field": "host.name",
          "type": "string",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-crowdstrike.falcon@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "crowdstrike"
      }
    }
  },
  "metrics-kubernetes.controllermanager-1.26.0": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-kubernetes.controllermanager@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "kubernetes"
      }
    }
  },
  "logs-azure.identity_protection-1.5.4": {
    "description": "Pipeline for parsing Azure Active Directory Identity Protection logs.",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.5.0"
        }
      },
      {
        "rename": {
          "field": "azure",
          "target_field": "azure-eventhub",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "source": "ctx.message = ctx.message.replace(params.empty_field_name, '')",
          "params": {
            "empty_field_name": "\"\":\"\","
          },
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true,
          "if": "ctx.event?.original == null",
          "description": "Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document."
        }
      },
      {
        "remove": {
          "field": "message",
          "ignore_missing": true,
          "if": "ctx.event?.original != null",
          "description": "The `message` field is no longer required if the document has an `event.original` field."
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "azure.identityprotection"
        }
      },
      {
        "drop": {
          "description": "Drop events that are not AD Identity Protection logs.",
          "if": "ctx?.azure?.identityprotection?.category == null || ctx.azure.identityprotection.category != 'RiskyUsers' && ctx.azure.identityprotection.category != 'UserRiskEvents'"
        }
      },
      {
        "date": {
          "field": "azure.identityprotection.time",
          "target_field": "@timestamp",
          "ignore_failure": true,
          "formats": [
            "M/d/yyyy h:mm:ss a",
            "ISO8601"
          ]
        }
      },
      {
        "remove": {
          "field": "azure.identityprotection.time",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.identityprotection.resourceId",
          "target_field": "azure.resource_id",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "azure.identityprotection.callerIpAddress",
          "target_field": "source.ip",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "rename": {
                "field": "azure.identityprotection.callerIpAddress",
                "target_field": "source.address",
                "ignore_missing": true,
                "ignore_failure": true
              }
            }
          ]
        }
      },
      {
        "remove": {
          "field": "azure.identityprotection.callerIpAddress",
          "if": "ctx.source?.ip != null",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "source.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.asn",
          "target_field": "source.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.organization_name",
          "target_field": "source.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.identityprotection.durationMs",
          "target_field": "event.duration",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "source": "if (ctx.event.duration!= null) {ctx.event.duration = ctx.event.duration * params.param_nano;}",
          "params": {
            "param_nano": 1000000
          },
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "azure.identityprotection.operationName",
          "target_field": "azure.identityprotection.operation_name",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "azure.identityprotection.operation_name",
          "target_field": "event.action",
          "type": "string",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.identityprotection.operationVersion",
          "target_field": "azure.identityprotection.operation_version",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.identityprotection.tenantId",
          "target_field": "azure.tenant_id",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "azure.identityprotection.identity",
          "description": "identity is undocumented, removing it until we know what it is",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "azure.identityprotection.Level",
          "description": "Level is undocumented, removing it until we know what it is",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "azure.identityprotection.location",
          "description": "location is undocumented, removing it until we know what it is",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.identityprotection.resultSignature",
          "target_field": "azure.identityprotection.result_signature",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.identityprotection.correlationId",
          "target_field": "azure.correlation_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.identityprotection.properties.isDeleted",
          "target_field": "azure.identityprotection.properties.is_deleted",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.identityprotection.properties.isGuest",
          "target_field": "azure.identityprotection.properties.is_guest",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.identityprotection.properties.isProcessing",
          "target_field": "azure.identityprotection.properties.is_processing",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.identityprotection.properties.riskType",
          "target_field": "azure.identityprotection.properties.risk_type",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.identityprotection.properties.riskEventType",
          "target_field": "azure.identityprotection.properties.risk_event_type",
          "description": "The type of risk event detected. For more information about each value, see https://docs.microsoft.com/en-us/graph/api/resources/riskdetection?view=graph-rest-1.0#riskeventtype-values values.",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.identityprotection.properties.riskState",
          "target_field": "azure.identityprotection.properties.risk_state",
          "description": "The state of a detected risky user or sign-in. Possible values are: none, confirmedSafe, remediated, dismissed, atRisk, confirmedCompromised, unknownFutureValue.",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.identityprotection.properties.riskLevel",
          "target_field": "azure.identityprotection.properties.risk_level",
          "description": "Level of the detected risk. Possible values are: low, medium, high, hidden, none, unknownFutureValue.",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.identityprotection.properties.riskDetail",
          "target_field": "azure.identityprotection.properties.risk_detail",
          "ignore_missing": true,
          "description": "Details of the detected risk. Possible values are: none, adminGeneratedTemporaryPassword, userPerformedSecuredPasswordChange, userPerformedSecuredPasswordReset, adminConfirmedSigninSafe, aiConfirmedSigninSafe, userPassedMFADrivenByRiskBasedPolicy, adminDismissedAllRiskForUser, adminConfirmedSigninCompromised, hidden, adminConfirmedUserCompromised, unknownFutureValue."
        }
      },
      {
        "date": {
          "field": "azure.identityprotection.properties.lastUpdatedDateTime",
          "target_field": "azure.identityprotection.properties.last_updated_datetime",
          "ignore_failure": true,
          "description": "Date and time when the risk detection was last updated.",
          "formats": [
            "ISO8601",
            "yyyy-MM-dd'T'H:mm:ss.SSS'Z'"
          ]
        }
      },
      {
        "remove": {
          "field": "azure.identityprotection.properties.lastUpdatedDateTime",
          "ignore_missing": true
        }
      },
      {
        "date": {
          "field": "azure.identityprotection.properties.riskLastUpdatedDateTime",
          "target_field": "azure.identityprotection.properties.risk_last_updated_datetime",
          "ignore_failure": true,
          "description": "The date and time that the risky user was last updated.",
          "formats": [
            "ISO8601",
            "yyyy-MM-dd'T'H:mm:ss.SSS'Z'"
          ]
        }
      },
      {
        "remove": {
          "field": "azure.identityprotection.properties.riskLastUpdatedDateTime",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.identityprotection.properties.userId",
          "target_field": "azure.identityprotection.properties.user_id",
          "description": "Unique ID of the user.",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.identityprotection.properties.userDisplayName",
          "target_field": "azure.identityprotection.properties.user_display_name",
          "description": "The user principal name (UPN) of the user.",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.identityprotection.properties.userPrincipalName",
          "target_field": "azure.identityprotection.properties.user_principal_name",
          "description": "The user principal name (UPN) of the user.",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.identityprotection.properties.userType",
          "target_field": "azure.identityprotection.properties.user_type",
          "ignore_missing": true
        }
      },
      {
        "date": {
          "field": "azure.identityprotection.properties.activityDateTime",
          "target_field": "azure.identityprotection.properties.activity_datetime",
          "ignore_failure": true,
          "formats": [
            "ISO8601",
            "yyyy-MM-dd'T'H:mm:ss.SSS'Z'"
          ]
        }
      },
      {
        "remove": {
          "field": "azure.identityprotection.properties.activityDateTime",
          "ignore_missing": true
        }
      },
      {
        "date": {
          "field": "azure.identityprotection.properties.detectedDateTime",
          "target_field": "azure.identityprotection.properties.detected_datetime",
          "ignore_failure": true,
          "formats": [
            "ISO8601",
            "yyyy-MM-dd'T'H:mm:ss.SSS'Z'"
          ]
        }
      },
      {
        "remove": {
          "field": "azure.identityprotection.properties.detectedDateTime",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.identityprotection.properties.detectionTimingType",
          "target_field": "azure.identityprotection.properties.detection_timing_type",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.identityprotection.properties.requestId",
          "target_field": "azure.identityprotection.properties.request_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.identityprotection.properties.correlationId",
          "target_field": "azure.identityprotection.properties.correlation_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.identityprotection.properties.tokenIssuerType",
          "target_field": "azure.identityprotection.properties.token_issuer_type",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.identityprotection.properties.ipAddress",
          "target_field": "azure.identityprotection.properties.ip_address",
          "ignore_missing": true
        }
      },
      {
        "json": {
          "field": "azure.identityprotection.properties.additionalInfo",
          "target_field": "azure.identityprotection.properties.additional_info",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": "azure.identityprotection.properties.additionalInfo",
          "ignore_missing": true,
          "if": "ctx?.azure.identityprotection.properties.additional_info != null"
        }
      },
      {
        "remove": {
          "field": "azure.identityprotection.properties.resourceTenantId",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "azure.identityprotection.properties.homeTenantId",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "azure.identityprotection.properties.crossTenantAccessType",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "pipeline": {
          "name": "logs-azure.identity_protection-1.5.4-azure-shared-pipeline"
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-azure.identity_protection@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "Processor \"{{ _ingest.on_failure_processor_type }}\" with tag \"{{ _ingest.on_failure_processor_tag }}\" in pipeline \"{{ _ingest.on_failure_pipeline }}\" failed with message \"{{ _ingest.on_failure_message }}\""
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "azure"
      }
    }
  },
  "logs-aws.vpcflow-1.25.2": {
    "description": "Pipeline for AWS VPC Flow Logs",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.0.0"
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true,
          "if": "ctx.event?.original == null",
          "description": "Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document."
        }
      },
      {
        "remove": {
          "field": "message",
          "ignore_missing": true,
          "if": "ctx.event?.original != null",
          "description": "The `message` field is no longer required if the document has an `event.original` field."
        }
      },
      {
        "set": {
          "field": "event.type",
          "value": "connection"
        }
      },
      {
        "set": {
          "field": "event.category",
          "value": "network"
        }
      },
      {
        "drop": {
          "if": "ctx.event?.original.startsWith(\"version\") || ctx.event?.original.startsWith(\"instance-id\")"
        }
      },
      {
        "script": {
          "lang": "painless",
          "if": "ctx.event?.original != null",
          "source": "ctx._temp_ = new HashMap(); ctx._temp_.message_token_count = ctx.event?.original.splitOnToken(\" \").length;"
        }
      },
      {
        "dissect": {
          "field": "event.original",
          "pattern": "%{aws.vpcflow.version} %{aws.vpcflow.account_id} %{aws.vpcflow.interface_id} %{aws.vpcflow.srcaddr} %{aws.vpcflow.dstaddr} %{aws.vpcflow.srcport} %{aws.vpcflow.dstport} %{aws.vpcflow.protocol} %{aws.vpcflow.packets} %{aws.vpcflow.bytes} %{aws.vpcflow.start} %{aws.vpcflow.end} %{aws.vpcflow.action} %{aws.vpcflow.log_status}",
          "if": "ctx?._temp_?.message_token_count == 14"
        }
      },
      {
        "dissect": {
          "field": "event.original",
          "pattern": "%{aws.vpcflow.instance_id} %{aws.vpcflow.interface_id} %{aws.vpcflow.srcaddr} %{aws.vpcflow.dstaddr} %{aws.vpcflow.pkt_srcaddr} %{aws.vpcflow.pkt_dstaddr}",
          "if": "ctx?._temp_?.message_token_count == 6"
        }
      },
      {
        "dissect": {
          "field": "event.original",
          "pattern": "%{aws.vpcflow.version} %{aws.vpcflow.interface_id} %{aws.vpcflow.account_id} %{aws.vpcflow.vpc_id} %{aws.vpcflow.subnet_id} %{aws.vpcflow.instance_id} %{aws.vpcflow.srcaddr} %{aws.vpcflow.dstaddr} %{aws.vpcflow.srcport} %{aws.vpcflow.dstport} %{aws.vpcflow.protocol} %{aws.vpcflow.tcp_flags} %{aws.vpcflow.type} %{aws.vpcflow.pkt_srcaddr} %{aws.vpcflow.pkt_dstaddr} %{aws.vpcflow.action} %{aws.vpcflow.log_status}",
          "if": "ctx?._temp_?.message_token_count == 17"
        }
      },
      {
        "dissect": {
          "field": "event.original",
          "pattern": "%{aws.vpcflow.version} %{aws.vpcflow.vpc_id} %{aws.vpcflow.subnet_id} %{aws.vpcflow.instance_id} %{aws.vpcflow.interface_id} %{aws.vpcflow.account_id} %{aws.vpcflow.type} %{aws.vpcflow.srcaddr} %{aws.vpcflow.dstaddr} %{aws.vpcflow.srcport} %{aws.vpcflow.dstport} %{aws.vpcflow.pkt_srcaddr} %{aws.vpcflow.pkt_dstaddr} %{aws.vpcflow.protocol} %{aws.vpcflow.bytes} %{aws.vpcflow.packets} %{aws.vpcflow.start} %{aws.vpcflow.end} %{aws.vpcflow.action} %{aws.vpcflow.tcp_flags} %{aws.vpcflow.log_status}",
          "if": "ctx?._temp_?.message_token_count == 21"
        }
      },
      {
        "dissect": {
          "field": "event.original",
          "pattern": "%{aws.vpcflow.version} %{aws.vpcflow.account_id} %{aws.vpcflow.interface_id} %{aws.vpcflow.srcaddr} %{aws.vpcflow.dstaddr} %{aws.vpcflow.srcport} %{aws.vpcflow.dstport} %{aws.vpcflow.protocol} %{aws.vpcflow.packets} %{aws.vpcflow.bytes} %{aws.vpcflow.start} %{aws.vpcflow.end} %{aws.vpcflow.action} %{aws.vpcflow.log_status} %{aws.vpcflow.vpc_id} %{aws.vpcflow.subnet_id} %{aws.vpcflow.instance_id} %{aws.vpcflow.tcp_flags} %{aws.vpcflow.type} %{aws.vpcflow.pkt_srcaddr} %{aws.vpcflow.pkt_dstaddr} %{cloud.region} %{cloud.availability_zone} %{aws.vpcflow.sublocation.type} %{aws.vpcflow.sublocation.id} %{aws.vpcflow.pkt_src_service} %{aws.vpcflow.pkt_dst_service} %{network.direction} %{aws.vpcflow.traffic_path}",
          "if": "ctx?._temp_?.message_token_count == 29"
        }
      },
      {
        "date": {
          "field": "aws.vpcflow.end",
          "target_field": "@timestamp",
          "ignore_failure": true,
          "formats": [
            "UNIX"
          ]
        }
      },
      {
        "date": {
          "field": "aws.vpcflow.start",
          "target_field": "event.start",
          "ignore_failure": true,
          "formats": [
            "UNIX"
          ]
        }
      },
      {
        "date": {
          "field": "aws.vpcflow.end",
          "target_field": "event.end",
          "ignore_failure": true,
          "formats": [
            "UNIX"
          ]
        }
      },
      {
        "remove": {
          "field": [
            "aws.vpcflow.start",
            "aws.vpcflow.end"
          ],
          "ignore_missing": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": true,
          "if": "ctx.aws != null",
          "source": "void handleMap(Map map) {\n  for (def x : map.values()) {\n    if (x instanceof Map) {\n        handleMap(x);\n    } else if (x instanceof List) {\n        handleList(x);\n    }\n  }\n  map.values().removeIf(v -> v instanceof String && v == \"-\");\n} void handleList(List list) {\n  for (def x : list) {\n      if (x instanceof Map) {\n          handleMap(x);\n      } else if (x instanceof List) {\n          handleList(x);\n      }\n  }\n} handleMap(ctx.aws);"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "success",
          "if": "ctx.aws?.vpcflow?.action == \"ACCEPT\""
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "failure",
          "if": "ctx.aws?.vpcflow?.action == \"REJECT\""
        }
      },
      {
        "rename": {
          "field": "aws.vpcflow.srcaddr",
          "target_field": "source.address",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "source.ip",
          "copy_from": "source.address",
          "if": "ctx.source?.address != null"
        }
      },
      {
        "convert": {
          "field": "aws.vpcflow.srcport",
          "target_field": "source.port",
          "type": "integer",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.vpcflow.dstaddr",
          "target_field": "destination.address",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "destination.ip",
          "copy_from": "destination.address",
          "if": "ctx.destination?.address != null"
        }
      },
      {
        "convert": {
          "field": "aws.vpcflow.dstport",
          "target_field": "destination.port",
          "type": "integer",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.vpcflow.protocol",
          "target_field": "network.iana_number",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "aws.vpcflow.packets",
          "target_field": "source.packets",
          "type": "long",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "aws.vpcflow.bytes",
          "target_field": "source.bytes",
          "type": "long",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "network.bytes",
          "copy_from": "source.bytes",
          "if": "ctx.source?.bytes != null"
        }
      },
      {
        "set": {
          "field": "network.packets",
          "copy_from": "source.packets",
          "if": "ctx.source?.packets != null"
        }
      },
      {
        "set": {
          "field": "network.type",
          "value": "ipv4",
          "if": "ctx.source?.ip != null && ctx.source?.ip.contains(\".\")"
        }
      },
      {
        "set": {
          "field": "network.type",
          "value": "ipv6",
          "if": "ctx.source?.ip != null && ctx.source?.ip.contains(\":\")"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": true,
          "if": "ctx?.network?.iana_number != null",
          "source": "def iana_number = ctx.network.iana_number;\nif (iana_number == '0') {\n    ctx.network.transport = 'hopopt';\n} else if (iana_number == '1') {\n    ctx.network.transport = 'icmp';\n} else if (iana_number == '2') {\n    ctx.network.transport = 'igmp';\n} else if (iana_number == '6') {\n    ctx.network.transport = 'tcp';\n} else if (iana_number == '8') {\n    ctx.network.transport = 'egp';\n} else if (iana_number == '17') {\n    ctx.network.transport = 'udp';\n} else if (iana_number == '47') {\n    ctx.network.transport = 'gre';\n} else if (iana_number == '50') {\n    ctx.network.transport = 'esp';\n} else if (iana_number == '58') {\n    ctx.network.transport = 'ipv6-icmp';\n} else if (iana_number == '112') {\n    ctx.network.transport = 'vrrp';\n} else if (iana_number == '132') {\n    ctx.network.transport = 'sctp';\n}\n"
        }
      },
      {
        "community_id": {
          "target_field": "network.community_id",
          "ignore_failure": true
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "source.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "field": "destination.ip",
          "target_field": "destination.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "destination.ip",
          "target_field": "destination.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.asn",
          "target_field": "source.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.organization_name",
          "target_field": "source.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "destination.as.asn",
          "target_field": "destination.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "destination.as.organization_name",
          "target_field": "destination.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "if": "ctx.source?.ip != null && ctx.destination?.ip != null",
          "field": "related.ip",
          "value": [
            "{{source.ip}}",
            "{{destination.ip}}"
          ]
        }
      },
      {
        "set": {
          "field": "cloud.provider",
          "value": "aws"
        }
      },
      {
        "set": {
          "if": "ctx.aws?.vpcflow?.account_id != null",
          "field": "cloud.account.id",
          "value": "{{aws.vpcflow.account_id}}"
        }
      },
      {
        "set": {
          "if": "ctx?.aws?.vpcflow?.instance_id != null && ctx.aws.vpcflow.instance_id != \"-\"",
          "field": "cloud.instance.id",
          "value": "{{aws.vpcflow.instance_id}}"
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": true,
          "if": "ctx.aws?.vpcflow?.tcp_flags != null",
          "source": "if (ctx.aws.vpcflow.tcp_flags_array == null) {\n  ArrayList al = new ArrayList();\n  ctx.aws.vpcflow.put(\"tcp_flags_array\", al);\n}\n\ndef flags = Integer.parseUnsignedInt(ctx.aws.vpcflow.tcp_flags);\n\nif ((flags & 0x01) != 0) {\n  ctx.aws.vpcflow.tcp_flags_array.add('fin');\n}\nif ((flags & 0x02) != 0) {\n  ctx.aws.vpcflow.tcp_flags_array.add('syn');\n}\nif ((flags & 0x04) != 0) {\n  ctx.aws.vpcflow.tcp_flags_array.add('rst');\n}\nif ((flags & 0x08) != 0) {\n  ctx.aws.vpcflow.tcp_flags_array.add('psh');\n}\nif ((flags & 0x10) != 0) {\n  ctx.aws.vpcflow.tcp_flags_array.add('ack');\n}\nif ((flags & 0x20) != 0) {\n  ctx.aws.vpcflow.tcp_flags_array.add('urg');\n}\n"
        }
      },
      {
        "remove": {
          "field": [
            "_temp_",
            "aws.vpcflow.srcaddr",
            "aws.vpcflow.srcport",
            "aws.vpcflow.dstaddr",
            "aws.vpcflow.dstport",
            "aws.vpcflow.bytes",
            "aws.vpcflow.packets",
            "aws.vpcflow.protocol"
          ],
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-aws.vpcflow@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "logs-panw.panos-3.1.1-ip_tag": {
    "description": "Pipeline for PanOS IP Tag Logs.",
    "processors": [
      {
        "csv": {
          "field": "message",
          "ignore_failure": true,
          "target_fields": [
            "panw.panos.virtual_sys",
            "panw.panos.source.ip",
            "panw.panos.tag.name",
            "panw.panos.event.id",
            "panw.panos.repeat_count",
            "panw.panos.timeout",
            "panw.panos.datasourcename",
            "panw.panos.datasource_type",
            "panw.panos.datasource_subtype",
            "panw.panos.sequence_number",
            "panw.panos.action_flags",
            "panw.panos.device_group_hierarchy1",
            "panw.panos.device_group_hierarchy2",
            "panw.panos.device_group_hierarchy3",
            "panw.panos.device_group_hierarchy4",
            "panw.panos.vsys_name",
            "panw.panos.device_name",
            "panw.panos.vsys_id",
            "_temp_.high_res_timestamp"
          ]
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": [
            "network"
          ]
        }
      },
      {
        "set": {
          "field": "event.code",
          "copy_from": "panw.panos.event.id",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.hostname",
          "copy_from": "panw.panos.device_name",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.ip",
          "copy_from": "panw.panos.source.ip",
          "ignore_failure": true
        }
      },
      {
        "pipeline": {
          "name": "logs-panw.panos@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "append": {
          "field": "error.message",
          "value": "error in IP Tag pipeline: error in [{{{_ingest.on_failure_processor_type}}}] processor{{{#_ingest.on_failure_processor_tag}}} with tag [{{{_ingest.on_failure_processor_tag}}}]{{{/_ingest.on_failure_processor_tag}}} {{{_ingest.on_failure_message}}}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "panw"
      }
    }
  },
  "logs-elastic_agent.auditbeat-1.3.5": {
    "processors": [
      {
        "pipeline": {
          "name": "logs-elastic_agent.auditbeat@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "elastic_agent"
      }
    }
  },
  "metrics-aws.sns-1.25.2": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-aws.sns@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "logs-windows.forwarded-1.15.0": {
    "description": "Pipeline for Windows forwarded Event Logs",
    "processors": [
      {
        "pipeline": {
          "name": "logs-windows.forwarded-1.15.0-security",
          "if": "ctx?.winlog?.channel != null && ctx?.winlog?.channel == \"Security\" && ctx?.winlog?.provider_name != null && [\"Microsoft-Windows-Eventlog\", \"Microsoft-Windows-Security-Auditing\"].contains(ctx?.winlog?.provider_name)"
        }
      },
      {
        "pipeline": {
          "name": "logs-windows.forwarded-1.15.0-powershell",
          "if": "ctx?.winlog?.channel != null && ctx?.winlog?.channel == \"Windows PowerShell\""
        }
      },
      {
        "pipeline": {
          "name": "logs-windows.forwarded-1.15.0-powershell_operational",
          "if": "ctx?.winlog?.channel != null && ctx?.winlog?.channel == \"Microsoft-Windows-PowerShell/Operational\""
        }
      },
      {
        "pipeline": {
          "name": "logs-windows.forwarded-1.15.0-sysmon_operational",
          "if": "ctx?.winlog?.channel != null && ctx?.winlog?.channel == \"Microsoft-Windows-Sysmon/Operational\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data._MemberUserName",
          "target_field": "user.name",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data._MemberDomain",
          "target_field": "user.domain",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "append": {
          "value": "{{{winlog.event_data._MemberAccountType}}}",
          "field": "user.roles",
          "ignore_failure": true,
          "allow_duplicates": false,
          "if": "ctx.winlog?.event_data?._MemberAccountType != null"
        }
      },
      {
        "remove": {
          "field": "winlog.event_data._MemberAccountType",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx.user?.roles != null && ctx.winlog?.event_data?._MemberAccountType != null && ctx.user.roles.contains(ctx.winlog.event_data._MemberAccountType)"
        }
      },
      {
        "pipeline": {
          "name": "logs-windows.forwarded@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "windows"
      }
    }
  },
  "logs-panw.panos-3.1.1-tunnel_inspection": {
    "description": "Pipeline for PanOS Tunnel Inspection Logs.",
    "processors": [
      {
        "csv": {
          "field": "message",
          "ignore_failure": true,
          "target_fields": [
            "panw.panos.source.ip",
            "panw.panos.destination.ip",
            "panw.panos.source.nat.ip",
            "panw.panos.destination.nat.ip",
            "panw.panos.ruleset",
            "_temp_.srcuser",
            "panw.panos.destination.user",
            "panw.panos.network.application",
            "panw.panos.virtual_sys",
            "panw.panos.source.zone",
            "panw.panos.destination.zone",
            "panw.panos.inbound_interface",
            "panw.panos.outbound_interface",
            "panw.panos.log_profile",
            "_temp_.future_use1",
            "panw.panos.flow_id",
            "panw.panos.repeat_count",
            "panw.panos.source.port",
            "panw.panos.destination.port",
            "panw.panos.source.nat.port",
            "panw.panos.destination.nat.port",
            "_temp_.labels",
            "panw.panos.protocol",
            "panw.panos.action",
            "panw.panos.severity",
            "panw.panos.sequence_number",
            "panw.panos.action_flags",
            "_temp_.srcloc",
            "_temp_.dstloc",
            "panw.panos.device_group_hierarchy1",
            "panw.panos.device_group_hierarchy2",
            "panw.panos.device_group_hierarchy3",
            "panw.panos.device_group_hierarchy4",
            "panw.panos.vsys_name",
            "panw.panos.device_name",
            "panw.panos.imsi",
            "panw.panos.imei",
            "panw.panos.parent_session.id",
            "panw.panos.parent_session.start_time",
            "panw.panos.tunnel_type",
            "panw.panos.network.bytes",
            "panw.panos.bytes_sent",
            "panw.panos.bytes_received",
            "panw.panos.network.packets",
            "panw.panos.packets_sent",
            "panw.panos.packets_received",
            "panw.panos.max_encapsulation",
            "panw.panos.unknown_protocol",
            "panw.panos.strict_check",
            "panw.panos.tunnel_fragment",
            "panw.panos.sessions.created",
            "panw.panos.sessions.closed",
            "panw.panos.endreason",
            "panw.panos.action_source",
            "panw.panos.start_time",
            "panw.panos.elapsed_time",
            "panw.panos.tunnel_inspection_rule",
            "panw.panos.remote_user.ip",
            "panw.panos.remote_user.id",
            "panw.panos.rule_uuid",
            "panw.panos.pcap_id",
            "panw.panos.dynamic_user.group.name",
            "panw.panos.src.external_dynamic_list",
            "panw.panos.dst.external_dynamic_list",
            "_temp_.high_res_timestamp",
            "panw.panos.nssai_sd",
            "panw.panos.nssai_sst",
            "panw.panos.pdu_session.id",
            "panw.panos.application.sub_category",
            "panw.panos.application.category",
            "panw.panos.application.technology",
            "panw.panos.application.risk_level",
            "panw.panos.application.characteristics",
            "panw.panos.application.container",
            "panw.panos.application.is_saas",
            "panw.panos.application.is_sanctioned"
          ]
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": [
            "network"
          ]
        }
      },
      {
        "set": {
          "field": "destination.bytes",
          "copy_from": "panw.panos.bytes_received",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "panw.panos.destination.location",
          "copy_from": "_temp_.dstloc",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "destination.ip",
          "copy_from": "panw.panos.destination.ip",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "destination.nat.ip",
          "copy_from": "panw.panos.destination.nat.ip",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "destination.nat.port",
          "copy_from": "panw.panos.destination.nat.port",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "destination.packets",
          "copy_from": "panw.panos.packets_received",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "destination.port",
          "copy_from": "panw.panos.destination.port",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "destination.user.name",
          "copy_from": "panw.panos.destination.user",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "event.duration",
          "copy_from": "panw.panos.elapsed_time",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "event.start",
          "copy_from": "panw.panos.start_time",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "network.application",
          "copy_from": "panw.panos.network.application",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "network.bytes",
          "copy_from": "panw.panos.network.bytes",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "network.packets",
          "copy_from": "panw.panos.network.packets",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "network.transport",
          "copy_from": "panw.panos.protocol",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "log.level",
          "copy_from": "panw.panos.severity",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.egress.interface.name",
          "copy_from": "panw.panos.outbound_interface",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.egress.zone",
          "copy_from": "panw.panos.destination.zone",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.hostname",
          "copy_from": "panw.panos.device_name",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.ingress.interface.name",
          "copy_from": "panw.panos.inbound_interface",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.ingress.zone",
          "copy_from": "panw.panos.source.zone",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "rule.name",
          "copy_from": "panw.panos.tunnel_inspection_rule",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "rule.uuid",
          "copy_from": "panw.panos.rule_uuid",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.bytes",
          "copy_from": "panw.panos.bytes_sent",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "panw.panos.source.location",
          "copy_from": "_temp_.srcloc",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.ip",
          "copy_from": "panw.panos.source.ip",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.nat.ip",
          "copy_from": "panw.panos.source.nat.ip",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.port",
          "copy_from": "panw.panos.source.port",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.nat.port",
          "copy_from": "panw.panos.source.nat.port",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.packets",
          "copy_from": "panw.panos.packets_sent",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "panw.panos.source.user",
          "copy_from": "_temp_.srcuser",
          "ignore_failure": true
        }
      },
      {
        "pipeline": {
          "name": "logs-panw.panos@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "append": {
          "field": "error.message",
          "value": "error in Tunnel Inspection pipeline: error in [{{{_ingest.on_failure_processor_type}}}] processor{{{#_ingest.on_failure_processor_tag}}} with tag [{{{_ingest.on_failure_processor_tag}}}]{{{/_ingest.on_failure_processor_tag}}} {{{_ingest.on_failure_message}}}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "panw"
      }
    }
  },
  "logs-panw.panos-3.1.1-correlated_event": {
    "description": "Pipeline for PanOS Correlated Event Logs.",
    "processors": [
      {
        "csv": {
          "field": "message",
          "ignore_failure": true,
          "target_fields": [
            "panw.panos.source.ip",
            "_temp_.srcuser",
            "panw.panos.virtual_sys",
            "panw.panos.category",
            "panw.panos.severity",
            "panw.panos.device_group_hierarchy1",
            "panw.panos.device_group_hierarchy2",
            "panw.panos.device_group_hierarchy3",
            "panw.panos.device_group_hierarchy4",
            "panw.panos.vsys_name",
            "panw.panos.device_name",
            "panw.panos.vsys_id",
            "panw.panos.object.name",
            "panw.panos.object.id",
            "panw.panos.evidence"
          ]
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": [
            "network"
          ]
        }
      },
      {
        "set": {
          "field": "log.level",
          "copy_from": "panw.panos.severity",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.hostname",
          "copy_from": "panw.panos.device_name",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.ip",
          "copy_from": "panw.panos.source.ip",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "panw.panos.source.user",
          "copy_from": "_temp_.srcuser",
          "ignore_failure": true
        }
      },
      {
        "pipeline": {
          "name": "logs-panw.panos@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "append": {
          "field": "error.message",
          "value": "error in Correlated Event pipeline: error in [{{{_ingest.on_failure_processor_type}}}] processor{{{#_ingest.on_failure_processor_tag}}} with tag [{{{_ingest.on_failure_processor_tag}}}]{{{/_ingest.on_failure_processor_tag}}} {{{_ingest.on_failure_message}}}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "panw"
      }
    }
  },
  "metrics-apm.profiling-8.4.2": {
    "description": "Pipeline for ingesting APM profile data.",
    "processors": [
      {
        "grok": {
          "field": "observer.version",
          "pattern_definitions": {
            "DIGITS": "(?:[0-9]+)"
          },
          "patterns": [
            "%{DIGITS:observer.version_major:int}.%{DIGITS:observer.version_minor:int}.%{DIGITS:observer.version_patch:int}(?:[-+].*)?"
          ]
        }
      },
      {
        "fail": {
          "if": "ctx.observer.version_major > 8 || (ctx.observer.version_major == 8 && ctx.observer.version_minor > 4)",
          "message": "Document produced by APM Server v{{{observer.version}}}, which is newer than the installed APM integration (v8.4.2). The APM integration must be upgraded."
        }
      },
      {
        "remove": {
          "field": [
            "observer.version_major",
            "observer.version_minor",
            "observer.version_patch"
          ],
          "ignore_missing": true
        }
      },
      {
        "user_agent": {
          "field": "user_agent.original",
          "ignore_failure": true,
          "ignore_missing": true,
          "target_field": "user_agent"
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-City.mmdb",
          "field": "client.ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "client.ip",
                "ignore_failure": true,
                "ignore_missing": true
              }
            }
          ],
          "target_field": "client.geo"
        }
      },
      {
        "pipeline": {
          "name": "metrics-apm.profiling@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "apm"
      }
    }
  },
  "metrics-aws.s3_storage_lens-1.25.2": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-aws.s3_storage_lens@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "synthetics-http-0.10.2": {
    "processors": [
      {
        "pipeline": {
          "name": "synthetics-http@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "synthetics"
      }
    }
  },
  "logs-windows.forwarded-1.15.0-powershell_operational": {
    "description": "Pipeline for Windows Powershell/Operational events",
    "processors": [
      {
        "kv": {
          "description": "Split Event 4103 event data fields.",
          "field": "winlog.event_data.ContextInfo",
          "target_field": "winlog.event_data",
          "field_split": "\n",
          "trim_key": " \n\t",
          "trim_value": " \n\t",
          "value_split": "=",
          "if": "ctx?.winlog?.event_id == \"4103\""
        }
      },
      {
        "script": {
          "description": "Remove spaces from all event_data keys.",
          "lang": "painless",
          "if": "ctx?.winlog?.event_data != null",
          "source": "def newEventData = new HashMap();\nfor (entry in ctx.winlog.event_data.entrySet()) {\n  def newKey = /\\s/.matcher(entry.getKey().toString()).replaceAll(\"\");\n  newEventData.put(newKey, entry.getValue());\n}\nctx.winlog.event_data = newEventData;"
        }
      },
      {
        "set": {
          "field": "ecs.version",
          "value": "8.0.0"
        }
      },
      {
        "set": {
          "field": "log.level",
          "copy_from": "winlog.level",
          "ignore_empty_value": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.level != \"\""
        }
      },
      {
        "date": {
          "field": "winlog.time_created",
          "formats": [
            "ISO8601"
          ],
          "ignore_failure": true,
          "if": "ctx?.winlog?.time_created != null"
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "set": {
          "field": "event.code",
          "value": "{{winlog.event_id}}"
        }
      },
      {
        "set": {
          "field": "event.category",
          "value": "process"
        }
      },
      {
        "set": {
          "field": "event.type",
          "value": "start",
          "if": "ctx?.event.code == \"4105\""
        }
      },
      {
        "set": {
          "field": "event.type",
          "value": "end",
          "if": "ctx?.event.code == \"4106\""
        }
      },
      {
        "set": {
          "field": "event.type",
          "value": "info",
          "if": "ctx?.event?.type == null"
        }
      },
      {
        "convert": {
          "field": "winlog.event_data.SequenceNumber",
          "target_field": "event.sequence",
          "type": "long",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "winlog.record_id",
          "type": "string",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.HostID",
          "target_field": "process.entity_id",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.HostID != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.HostApplication",
          "target_field": "process.command_line",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.HostApplication != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.HostName",
          "target_field": "process.title",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.HostName != \"\""
        }
      },
      {
        "set": {
          "field": "user.id",
          "copy_from": "winlog.user.identifier",
          "ignore_failure": true,
          "ignore_empty_value": true
        }
      },
      {
        "split": {
          "field": "winlog.event_data.User",
          "target_field": "_temp.user_parts",
          "separator": "\\\\",
          "if": "ctx?.winlog?.event_data?.User != null"
        }
      },
      {
        "set": {
          "field": "user.domain",
          "value": "{{_temp.user_parts.0}}",
          "ignore_failure": true,
          "ignore_empty_value": true,
          "if": "ctx?._temp?.user_parts != null && ctx._temp.user_parts.size() == 2"
        }
      },
      {
        "set": {
          "field": "user.name",
          "value": "{{_temp.user_parts.1}}",
          "ignore_failure": true,
          "ignore_empty_value": true,
          "if": "ctx?._temp?.user_parts != null && ctx._temp.user_parts.size() == 2"
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{user.name}}",
          "ignore_failure": true,
          "allow_duplicates": false,
          "if": "ctx?.user?.name != null"
        }
      },
      {
        "split": {
          "field": "winlog.event_data.ConnectedUser",
          "target_field": "_temp.connected_user_parts",
          "separator": "\\\\",
          "if": "ctx?.winlog?.event_data?.ConnectedUser != null"
        }
      },
      {
        "set": {
          "field": "source.user.domain",
          "value": "{{_temp.connected_user_parts.0}}",
          "ignore_failure": true,
          "ignore_empty_value": true,
          "if": "ctx?._temp?.connected_user_parts != null && ctx._temp.connected_user_parts.size() == 2"
        }
      },
      {
        "set": {
          "field": "source.user.name",
          "value": "{{_temp.connected_user_parts.1}}",
          "ignore_failure": true,
          "ignore_empty_value": true,
          "if": "ctx?._temp?.connected_user_parts != null && ctx._temp.connected_user_parts.size() == 2"
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{source.user.name}}",
          "ignore_failure": true,
          "allow_duplicates": false,
          "if": "ctx?.source?.user?.name != null"
        }
      },
      {
        "rename": {
          "field": "user.domain",
          "target_field": "destination.user.domain",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.source?.user != null"
        }
      },
      {
        "rename": {
          "field": "user.name",
          "target_field": "destination.user.name",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.source?.user != null"
        }
      },
      {
        "set": {
          "field": "user.domain",
          "copy_from": "source.user.domain",
          "ignore_failure": true,
          "ignore_empty_value": true,
          "if": "ctx?.source?.user != null"
        }
      },
      {
        "set": {
          "field": "user.name",
          "copy_from": "source.user.name",
          "ignore_failure": true,
          "ignore_empty_value": true,
          "if": "ctx?.source?.user != null"
        }
      },
      {
        "convert": {
          "field": "winlog.event_data.MessageNumber",
          "target_field": "powershell.sequence",
          "type": "long",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "winlog.event_data.MessageTotal",
          "target_field": "powershell.total",
          "type": "long",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.ShellID",
          "target_field": "powershell.id",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.ShellID != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.EngineVersion",
          "target_field": "powershell.engine.version",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.EngineVersion != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.PipelineID",
          "target_field": "powershell.pipeline_id",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.PipelineID != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.RunspaceID",
          "target_field": "powershell.runspace_id",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.RunspaceID != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.RunspaceId",
          "target_field": "powershell.runspace_id",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.RunspaceId != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.HostVersion",
          "target_field": "powershell.process.executable_version",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.HostVersion != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.CommandLine",
          "target_field": "powershell.command.value",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.CommandLine != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.CommandPath",
          "target_field": "powershell.command.path",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.CommandPath != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.CommandName",
          "target_field": "powershell.command.name",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.CommandName != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.CommandType",
          "target_field": "powershell.command.type",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.CommandType != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.ScriptBlockId",
          "target_field": "powershell.file.script_block_id",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.ScriptBlockId != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.ScriptBlockText",
          "target_field": "powershell.file.script_block_text",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.ScriptBlockText != \"\""
        }
      },
      {
        "split": {
          "description": "Split Event 800 command invocation details.",
          "field": "winlog.event_data.Payload",
          "separator": "\n",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx.event.code == \"4103\""
        }
      },
      {
        "script": {
          "description": "Parses all command invocation detail raw lines, and converts them to an object, based on their type.\n - for unexpectedly formatted ones: {value: \"the raw line as it is\"}\n - for all:\n      * related_command: describes to what command it is related to\n      * value: the value for that detail line\n      * type: the type of the detail line, i.e.: CommandInvocation, ParameterBinding, NonTerminatingError\n - additionally, ParameterBinding adds a `name` field with the parameter name being bound.",
          "lang": "painless",
          "if": "ctx.event.code == \"4103\"",
          "params": {
            "field": "Payload"
          },
          "source": "def parseRawDetail(String raw) {\n    Pattern detailRegex = /^(.+)\\((.+)\\)\\:\\s*(.+)?$/;\n    Pattern parameterBindingRegex = /name\\=(.+);\\s*value\\=(.+)$/;\n\n    def matcher = detailRegex.matcher(raw);\n    if (!matcher.matches()) {\n        return [\"value\": raw];\n    }\n    def matches = new ArrayList();\n    for (def i = 0; i <= matcher.groupCount(); i++) {\n        matches.add(matcher.group(i));\n    }\n    \n    if (matches.length != 4) {\n        return [\"value\": raw];\n    }                \n    \n    if (matches[1] != \"ParameterBinding\") {\n        return [\n            \"type\": matches[1], \n            \"related_command\": matches[2], \n            \"value\": matches[3]\n        ];\n    }\n\n    matcher = parameterBindingRegex.matcher(matches[3]);\n    if (!matcher.matches()) {\n        return [\"value\": matches[4]];\n    }\n    def nameValMatches = new ArrayList();\n    for (def i = 0; i <= matcher.groupCount(); i++) {\n        nameValMatches.add(matcher.group(i));\n    }\n    if (nameValMatches.length !== 3) {\n        return [\"value\": matches[3]];\n    }\n\n    return [\n        \"type\": matches[1],\n        \"related_command\": matches[2],\n        \"name\": nameValMatches[1],\n        \"value\": nameValMatches[2]\n    ];\n}\n\nif (ctx?._temp == null) {\n    ctx._temp = new HashMap();\n}\n\nif (ctx._temp.details == null) {\n    ctx._temp.details = new ArrayList();\n}\n\ndef values = ctx?.winlog?.event_data[params[\"field\"]];\nif (values != null && values.length > 0) {\n    for (v in values) {\n        ctx._temp.details.add(parseRawDetail(v));\n    }\n}"
        }
      },
      {
        "rename": {
          "field": "_temp.details",
          "target_field": "powershell.command.invocation_details",
          "if": "ctx?._temp?.details != null && ctx?._temp?.details.length > 0"
        }
      },
      {
        "script": {
          "description": "Implements Windows-like SplitCommandLine",
          "lang": "painless",
          "if": "ctx?.process?.command_line != null && ctx.process.command_line != \"\"",
          "source": "// appendBSBytes appends n '\\\\' bytes to b and returns the resulting slice.\ndef appendBSBytes(StringBuilder b, int n) {\n    for (; n > 0; n--) {\n        b.append('\\\\');\n    }\n    return b;\n}\n\n// readNextArg splits command line string cmd into next\n// argument and command line remainder.\ndef readNextArg(String cmd) {\n    def b = new StringBuilder();\n    boolean inquote;\n    int nslash;\n    for (; cmd.length() > 0; cmd = cmd.substring(1)) {\n        def c = cmd.charAt(0);\n        if (c == (char)' ' || c == (char)0x09) {\n            if (!inquote) {\n                return [\n                    \"arg\":  appendBSBytes(b, nslash).toString(),\n                    \"rest\": cmd.substring(1)\n                ];\n            }\n        } else if (c == (char)'\"') {\n            b = appendBSBytes(b, nslash/2);\n            if (nslash%2 == 0) {\n                // use \"Prior to 2008\" rule from\n                // http://daviddeley.com/autohotkey/parameters/parameters.htm\n                // section 5.2 to deal with double double quotes\n                if (inquote && cmd.length() > 1 && cmd.charAt(1) == (char)'\"') {\n                    b.append(c);\n                    cmd = cmd.substring(1);\n                }\n                inquote = !inquote;\n            } else {\n                b.append(c);\n            }\n            nslash = 0;\n            continue;\n        } else if (c == (char)'\\\\') {\n            nslash++;\n            continue;\n        }\n        b = appendBSBytes(b, nslash);\n        nslash = 0;\n        b.append(c);\n    }\n    return [\n        \"arg\":  appendBSBytes(b, nslash).toString(), \n        \"rest\": ''\n    ];\n}\n\n// commandLineToArgv splits a command line into individual argument\n// strings, following the Windows conventions documented\n// at http://daviddeley.com/autohotkey/parameters/parameters.htm#WINARGV\n// Original implementation found at: https://github.com/golang/go/commit/39c8d2b7faed06b0e91a1ad7906231f53aab45d1\ndef commandLineToArgv(String cmd) {\n    def args = new ArrayList();\n    while (cmd.length() > 0) {\n        if (cmd.charAt(0) == (char)' ' || cmd.charAt(0) == (char)0x09) {\n            cmd = cmd.substring(1);\n            continue;\n        }\n        def next = readNextArg(cmd);\n        cmd = next.rest;\n        args.add(next.arg);\n    }\n    return args;\n}\n\nctx.process.args = commandLineToArgv(ctx.process.command_line);\nctx.process.args_count = ctx.process.args.length;"
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.Path",
          "target_field": "winlog.event_data.ScriptName",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.Path != \"\""
        }
      },
      {
        "script": {
          "description": "Adds file information.",
          "lang": "painless",
          "if": "ctx?.winlog?.event_data?.ScriptName != null && ctx.winlog.event_data.ScriptName.length() > 1",
          "source": "def path = ctx.winlog.event_data.ScriptName;\ndef idx = path.lastIndexOf(\"\\\\\");\nif (idx > -1) {\n    if (ctx?.file == null) {\n        ctx.file = new HashMap();\n    }\n    ctx.file.name = path.substring(idx+1);\n    ctx.file.directory = path.substring(0, idx);\n\n    def extIdx = path.lastIndexOf(\".\");\n    if (extIdx > -1) {\n        ctx.file.extension = path.substring(extIdx+1);\n    }\n}"
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.ScriptName",
          "target_field": "file.path",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.ScriptName != \"\""
        }
      },
      {
        "remove": {
          "field": [
            "_temp",
            "winlog.event_data.SequenceNumber",
            "winlog.event_data.User",
            "winlog.event_data.ConnectedUser",
            "winlog.event_data.ContextInfo",
            "winlog.event_data.Severity",
            "winlog.event_data.MessageTotal",
            "winlog.event_data.MessageNumber",
            "winlog.event_data.Payload",
            "winlog.time_created",
            "winlog.level"
          ],
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "script": {
          "description": "Remove all empty values from event_data.",
          "lang": "painless",
          "source": "ctx?.winlog?.event_data?.entrySet().removeIf(entry -> entry.getValue() == null || entry.getValue().equals(\"\"));"
        }
      },
      {
        "remove": {
          "description": "Remove empty event data.",
          "field": "winlog.event_data",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data != null && ctx.winlog.event_data.size() == 0"
        }
      },
      {
        "pipeline": {
          "name": "logs-windows.forwarded@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "windows"
      }
    }
  },
  "metrics-windows.service-1.15.0": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-windows.service@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "windows"
      }
    }
  },
  "logs-aws.waf-1.25.2": {
    "description": "Pipeline for WAF logs",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.0.0"
        }
      },
      {
        "set": {
          "field": "event.category",
          "value": "web"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "access"
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true,
          "if": "ctx.event?.original == null",
          "description": "Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document."
        }
      },
      {
        "remove": {
          "field": "message",
          "ignore_missing": true,
          "if": "ctx.event?.original != null",
          "description": "The `message` field is no longer required if the document has an `event.original` field."
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "json"
        }
      },
      {
        "date": {
          "field": "json.timestamp",
          "target_field": "@timestamp",
          "ignore_failure": true,
          "formats": [
            "UNIX_MS"
          ]
        }
      },
      {
        "rename": {
          "field": "json.httpRequest.clientIp",
          "target_field": "source.ip",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "source.geo",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.httpRequest.country",
          "target_field": "source.geo.country_iso_code",
          "ignore_missing": true,
          "if": "ctx.source?.geo?.country_iso_code == null"
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.asn",
          "target_field": "source.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.ClientASN",
          "target_field": "source.as.number",
          "ignore_missing": true,
          "if": "ctx?.source?.as?.number == null"
        }
      },
      {
        "rename": {
          "field": "source.as.organization_name",
          "target_field": "source.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.httpRequest.requestId",
          "target_field": "http.request.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.httpRequest.httpMethod",
          "target_field": "http.request.method",
          "ignore_missing": true
        }
      },
      {
        "dissect": {
          "field": "json.httpRequest.httpVersion",
          "pattern": "%{network.protocol}/%{http.version}",
          "ignore_failure": true
        }
      },
      {
        "lowercase": {
          "field": "network.protocol",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "network.transport",
          "value": "tcp",
          "if": "ctx?.network?.protocol != null && ctx?.network?.protocol == 'http'"
        }
      },
      {
        "rename": {
          "field": "json.httpRequest.args",
          "target_field": "url.query",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.httpRequest.uri",
          "target_field": "url.path",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.terminatingRuleMatchDetails",
          "target_field": "aws.waf.terminating_rule_match_details",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.ruleGroupList",
          "target_field": "aws.waf.rule_group_list",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.rateBasedRuleList",
          "target_field": "aws.waf.rate_based_rule_list",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.nonTerminatingMatchingRules",
          "target_field": "aws.waf.non_terminating_matching_rules",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "source": "if (ctx.json.httpRequest.headers != null) {\n  ctx.aws.waf.request = new HashMap();\n  ctx.aws.waf.request.headers = new HashMap();\n  for (def i = 0; i < ctx.json.httpRequest.headers.length; i++) {\n    ctx.aws.waf.request.headers[ctx.json.httpRequest.headers[i].name] = ctx.json.httpRequest.headers[i].value;\n  }\n}",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.action",
          "target_field": "event.action",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{source.ip}}",
          "allow_duplicates": false,
          "if": "ctx.source?.ip != null"
        }
      },
      {
        "set": {
          "field": "cloud.provider",
          "value": "aws"
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "allowed",
          "if": "ctx.event.action == \"ALLOW\""
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "denied",
          "if": "ctx.event.action == \"BLOCK\""
        }
      },
      {
        "rename": {
          "field": "json.webaclId",
          "target_field": "aws.waf.arn",
          "ignore_missing": true
        }
      },
      {
        "dissect": {
          "field": "aws.waf.arn",
          "pattern": "arn:%{}:%{cloud.service.name}:%{cloud.region}:%{cloud.account.id}:%{aws.waf.id}",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.terminatingRuleId",
          "target_field": "rule.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.terminatingRuleType",
          "target_field": "rule.ruleset",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.httpSourceName",
          "target_field": "aws.waf.source.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.httpSourceId",
          "target_field": "aws.waf.source.id",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "json",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "description": "This script processor iterates over the whole document to remove fields with null values.",
          "source": "void handleMap(Map map) {\n    for (def x : map.values()) {\n        if (x instanceof Map) {\n            handleMap(x);\n        } else if (x instanceof List) {\n            handleList(x);\n        }\n    }\n    map.values().removeIf(v -> v == null || v == \"\" || v == \"-\" || ((v instanceof List || v instanceof Map) && v.isEmpty()));\n}\nvoid handleList(List list) {\n    for (def x : list) {\n        if (x instanceof Map) {\n            handleMap(x);\n        } else if (x instanceof List) {\n            handleList(x);\n        }\n    }\n}\nhandleMap(ctx);\n"
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-aws.waf@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "logs-log.log-1.0.0": {
    "processors": [
      {
        "pipeline": {
          "name": "logs-log.log@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "log"
      }
    }
  },
  "logs-endpoint.action.responses-8.4.1": {
    "description": "Pipeline for setting event.ingested",
    "processors": [
      {
        "set": {
          "field": "event.ingested",
          "value": "{{ _ingest.timestamp }}",
          "ignore_failure": true
        }
      },
      {
        "pipeline": {
          "name": "logs-endpoint.action.responses@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "endpoint"
      }
    }
  },
  "logs-system.application-1.20.4": {
    "description": "Pipeline for Windows Application Event Logs",
    "processors": [
      {
        "set": {
          "field": "event.ingested",
          "value": "{{_ingest.timestamp}}"
        }
      },
      {
        "set": {
          "field": "ecs.version",
          "value": "8.0.0"
        }
      },
      {
        "pipeline": {
          "name": "logs-system.application@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "system"
      }
    }
  },
  "cloud_security_posture_add_ingest_timestamp_pipeline": {
    "description": "Pipeline for adding event timestamp",
    "processors": [
      {
        "set": {
          "field": "@timestamp",
          "value": "{{_ingest.timestamp}}"
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ]
  },
  "logs-azure.activitylogs-1.5.4": {
    "description": "Pipeline for parsing azure activity logs.",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.0.0"
        }
      },
      {
        "rename": {
          "field": "azure",
          "target_field": "azure-eventhub",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "source": "ctx.message = ctx.message.replace(params.empty_field_name, '')",
          "params": {
            "empty_field_name": "\"\":\"\","
          },
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true,
          "if": "ctx.event?.original == null",
          "description": "Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document."
        }
      },
      {
        "remove": {
          "field": "message",
          "ignore_missing": true,
          "if": "ctx.event?.original != null",
          "description": "The `message` field is no longer required if the document has an `event.original` field."
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "azure.activitylogs"
        }
      },
      {
        "date": {
          "field": "azure.activitylogs.time",
          "target_field": "@timestamp",
          "ignore_failure": true,
          "formats": [
            "ISO8601"
          ]
        }
      },
      {
        "remove": {
          "field": "azure.activitylogs.time",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.activitylogs.resourceId",
          "target_field": "azure.resource_id",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "azure.activitylogs.callerIpAddress",
          "target_field": "source.ip",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "rename": {
                "field": "azure.activitylogs.callerIpAddress",
                "target_field": "source.address",
                "ignore_missing": true,
                "ignore_failure": true
              }
            }
          ]
        }
      },
      {
        "remove": {
          "field": "azure.activitylogs.callerIpAddress",
          "if": "ctx.source?.ip != null",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "client.ip",
          "value": "{{source.ip}}",
          "ignore_empty_value": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{source.ip}}",
          "allow_duplicates": false,
          "if": "ctx.source?.ip != null"
        }
      },
      {
        "rename": {
          "field": "azure.activitylogs.level",
          "target_field": "log.level",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.activitylogs.durationMs",
          "target_field": "event.duration",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "source": "if (ctx.event.duration!= null) {ctx.event.duration = ctx.event.duration * params.param_nano;}",
          "params": {
            "param_nano": 1000000
          },
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "azure.activitylogs.location",
          "target_field": "geo.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.activitylogs.identity",
          "if": "ctx.azure?.activitylogs?.identity instanceof String",
          "target_field": "azure.activitylogs.identity_name",
          "ignore_missing": true
        }
      },
      {
        "json": {
          "field": "azure.activitylogs.identity",
          "if": "ctx.azure?.activitylogs?.identity instanceof String",
          "ignore_failure": true
        }
      },
      {
        "json": {
          "field": "azure.activitylogs.properties",
          "if": "ctx.azure?.activitylogs?.properties instanceof String",
          "ignore_failure": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "source": "if (ctx?.azure?.activitylogs?.properties?.eventCategory != null) {\n  ctx.azure.activitylogs.event_category = ctx.azure.activitylogs.properties.eventCategory;\n} else if (ctx?.azure?.activitylogs?.properties?.policies != null)  {\n  ctx.azure.activitylogs.event_category = 'Policy';\n} else {\n  ctx.azure.activitylogs.event_category = 'Administrative';\n}",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": "azure.activitylogs.properties.eventCategory",
          "if": "ctx.azure.activitylogs.event_category != null",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.activitylogs.resultType",
          "target_field": "azure.activitylogs.result_type",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "azure.activitylogs.result_type",
          "target_field": "event.outcome",
          "type": "string",
          "if": "ctx?.azure?.activitylogs?.result_type != null && ctx.azure.activitylogs.result_type instanceof String && (ctx.azure.activitylogs.result_type.toLowerCase() == 'success' || ctx.azure.activitylogs.result_type.toLowerCase() == 'failure')"
        }
      },
      {
        "convert": {
          "field": "azure.activitylogs.properties.result",
          "target_field": "event.outcome",
          "type": "string",
          "if": "ctx?.event?.outcome == null && ctx?.azure?.activitylogs?.properties?.result != null && ctx?.azure?.activitylogs?.properties?.result instanceof String && ['success', 'failure', 'unknown'].contains(ctx.azure?.activitylogs?.properties?.result)"
        }
      },
      {
        "rename": {
          "field": "azure.activitylogs.operationName",
          "target_field": "azure.activitylogs.operation_name",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "azure.activitylogs.operation_name",
          "target_field": "event.action",
          "type": "string",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.activitylogs.operationVersion",
          "target_field": "azure.activitylogs.operation_version",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.activitylogs.tenantId",
          "target_field": "azure.activitylogs.tenant_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.activitylogs.Level",
          "target_field": "azure.activitylogs.level",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.activitylogs.resultSignature",
          "target_field": "azure.activitylogs.result_signature",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.activitylogs.identity.authorization.evidence.roleAssignmentScope",
          "target_field": "azure.activitylogs.identity.authorization.evidence.role_assignment_scope",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.activitylogs.identity.authorization.evidence.roleDefinitionId",
          "target_field": "azure.activitylogs.identity.authorization.evidence.role_definition_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.activitylogs.identity.authorization.evidence.roleAssignmentId",
          "target_field": "azure.activitylogs.identity.authorization.evidence.role_assignment_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.activitylogs.identity.authorization.evidence.principalId",
          "target_field": "azure.activitylogs.identity.authorization.evidence.principal_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.activitylogs.identity.authorization.evidence.principalType",
          "target_field": "azure.activitylogs.identity.authorization.evidence.principal_type",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.activitylogs.correlationId",
          "target_field": "azure.correlation_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.activitylogs.properties.serviceRequestId",
          "target_field": "azure.activitylogs.properties.service_request_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.activitylogs.properties.statusMessage",
          "target_field": "message",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.activitylogs.properties.statusCode",
          "target_field": "azure.activitylogs.properties.status_code",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "geo",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.activitylogs.identity.claims.name",
          "target_field": "azure.activitylogs.identity.claims_initiated_by_user.fullname",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "source": "if (ctx.azure.activitylogs.identity.claims['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname'] != null) {\n  ctx.azure.activitylogs.identity.claims_initiated_by_user.surname = ctx.azure.activitylogs.identity.claims['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname'];\n}",
          "ignore_failure": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "source": "if (ctx.azure.activitylogs.identity.claims['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'] != null) {\n  ctx.azure.activitylogs.identity.claims_initiated_by_user.name = ctx.azure.activitylogs.identity.claims['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'];\n}",
          "ignore_failure": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "source": "if (ctx.azure.activitylogs.identity.claims['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname'] != null) {\n  ctx.azure.activitylogs.identity.claims_initiated_by_user.givenname = ctx.azure.activitylogs.identity.claims['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname'];\n}",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "if": "ctx.azure.activitylogs.identity!= null && ctx.azure.activitylogs.identity.claims_initiated_by_user != null && ctx.azure.activitylogs.identity.claims_initiated_by_user.name != null",
          "field": "azure.activitylogs.identity.claims_initiated_by_user.schema",
          "value": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims",
          "ignore_failure": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "source": "if (ctx.azure.activitylogs.identity.claims != null) {\n  ctx.temp_claims = new HashMap();\n  for (String key : ctx.azure.activitylogs.identity.claims.keySet()) {\n    ctx.temp_claims[key.replace('.', '_')] = ctx.azure.activitylogs.identity.claims.get(key);\n  }\n  ctx.azure.activitylogs.identity.claims = ctx.temp_claims; ctx.remove('temp_claims');\n}",
          "ignore_failure": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "params": {
            "write": {
              "type": [
                "change"
              ]
            },
            "read": {
              "type": [
                "access"
              ]
            },
            "delete": {
              "type": [
                "deletion"
              ]
            },
            "action": {
              "type": [
                "change"
              ]
            }
          },
          "source": "if (ctx?.azure?.activitylogs?.category == null) {\n  return;\n} def category = ctx.azure.activitylogs.category.toLowerCase(); if (params.get(category) == null) {\n  return;\n} def hm = new HashMap(params.get(category)); hm.forEach((k, v) -> ctx.event[k] = v);"
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "source.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.asn",
          "target_field": "source.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.organization_name",
          "target_field": "source.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "grok": {
          "field": "azure.activitylogs.identity.claims_initiated_by_user.name",
          "patterns": [
            "%{USERNAME:user.name}@%{HOSTNAME:user.domain}"
          ],
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "user.email",
          "value": "{{azure.activitylogs.identity.claims_initiated_by_user.name}}",
          "ignore_empty_value": true,
          "if": "ctx.user?.name != null"
        }
      },
      {
        "set": {
          "field": "user.name",
          "value": "{{azure.activitylogs.identity.claims_initiated_by_user.name}}",
          "ignore_empty_value": true,
          "if": "ctx.user?.name == null"
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{user.name}}",
          "allow_duplicates": false,
          "if": "ctx.user?.name != null"
        }
      },
      {
        "convert": {
          "field": "azure.activitylogs.identity.claims_initiated_by_user.fullname",
          "target_field": "user.full_name",
          "type": "string",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "pipeline": {
          "name": "logs-azure.activitylogs-1.5.4-azure-shared-pipeline"
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-azure.activitylogs@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "Processor \"{{ _ingest.on_failure_processor_type }}\" with tag \"{{ _ingest.on_failure_processor_tag }}\" in pipeline \"{{ _ingest.on_failure_pipeline }}\" failed with message \"{{ _ingest.on_failure_message }}\""
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "azure"
      }
    }
  },
  "logs-endpoint.events.library-8.4.1": {
    "description": "Pipeline for setting event.ingested",
    "processors": [
      {
        "set": {
          "field": "event.ingested",
          "value": "{{ _ingest.timestamp }}",
          "ignore_failure": true
        }
      },
      {
        "pipeline": {
          "name": "logs-endpoint.events.library@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "endpoint"
      }
    }
  },
  "metrics-kubernetes.proxy-1.26.0": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-kubernetes.proxy@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "kubernetes"
      }
    }
  },
  "metrics-kubernetes.state_storageclass-1.26.0": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-kubernetes.state_storageclass@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "kubernetes"
      }
    }
  },
  "logs-kubernetes.audit_logs-1.26.0": {
    "processors": [
      {
        "pipeline": {
          "name": "logs-kubernetes.audit_logs@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "kubernetes"
      }
    }
  },
  "logs-cisco_duo.summary-1.5.1": {
    "description": "Pipeline for parsing cisco_duo summary logs",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.4.0"
        }
      },
      {
        "set": {
          "field": "@timestamp",
          "value": "{{{_ingest.timestamp}}}"
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "json",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.response.admin_count",
          "target_field": "cisco_duo.summary.admin_count"
        }
      },
      {
        "rename": {
          "field": "json.response.integration_count",
          "target_field": "cisco_duo.summary.integration_count"
        }
      },
      {
        "rename": {
          "field": "json.response.telephony_credits_remaining",
          "target_field": "cisco_duo.summary.telephony_credits_remaining"
        }
      },
      {
        "rename": {
          "field": "json.response.user_count",
          "target_field": "cisco_duo.summary.user_count"
        }
      },
      {
        "remove": {
          "field": "json"
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-cisco_duo.summary@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "append": {
          "field": "error.message",
          "value": "{{{_ingest.on_failure_message}}}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "cisco_duo"
      }
    }
  },
  "logs-panw.panos-3.1.1-decryption": {
    "description": "Pipeline for PanOS Decryption Logs.",
    "processors": [
      {
        "csv": {
          "field": "message",
          "ignore_failure": true,
          "target_fields": [
            "panw.panos.source.ip",
            "panw.panos.destination.ip",
            "panw.panos.source.nat.ip",
            "panw.panos.destination.nat.ip",
            "panw.panos.ruleset",
            "_temp_.srcuser",
            "panw.panos.destination.user",
            "panw.panos.network.application",
            "panw.panos.virtual_sys",
            "panw.panos.source.zone",
            "panw.panos.destination.zone",
            "panw.panos.inbound_interface",
            "panw.panos.outbound_interface",
            "panw.panos.log_profile",
            "_temp_.logged_time",
            "panw.panos.flow_id",
            "panw.panos.repeat_count",
            "panw.panos.source.port",
            "panw.panos.destination.port",
            "panw.panos.source.nat.port",
            "panw.panos.destination.nat.port",
            "_temp_.labels",
            "panw.panos.protocol",
            "panw.panos.action",
            "panw.panos.tunnel_type",
            "_temp_.future_use1",
            "_temp_.future_use2",
            "panw.panos.source_vm_uuid",
            "panw.panos.destination_vm_uuid",
            "panw.panos.rule_uuid",
            "panw.panos.hs_stage_c2f",
            "panw.panos.hs_stage_f2s",
            "_temp_.tls",
            "panw.panos.tls.key_exchange_algorithm",
            "panw.panos.tls.encryption",
            "panw.panos.tls.auth",
            "panw.panos.policy.name",
            "panw.panos.elliptic_curve",
            "panw.panos.tls.error_type",
            "panw.panos.root_certificate_status",
            "panw.panos.chain_status",
            "panw.panos.proxy_type",
            "panw.panos.certificate.serial_number",
            "_temp_.hash",
            "panw.panos.certificate.not_before",
            "panw.panos.certificate.not_after",
            "panw.panos.certificate.version",
            "panw.panos.certificate.size",
            "panw.panos.subject_common_name.length",
            "panw.panos.issuer_common_name.length",
            "panw.panos.root_common_name.length",
            "panw.panos.server_name_indication.length",
            "panw.panos.certificate.flags",
            "panw.panos.subject_common_name.value",
            "panw.panos.issuer_common_name.value",
            "panw.panos.root_common_name.value",
            "panw.panos.server_name_indication.value",
            "panw.panos.error_message",
            "panw.panos.container.id",
            "panw.panos.pod.namespace",
            "panw.panos.pod.name",
            "panw.panos.src.external_dynamic_list",
            "panw.panos.dst.external_dynamic_list",
            "panw.panos.src.dynamic_address_group",
            "panw.panos.dst.dynamic_address_group",
            "_temp_.high_res_timestamp",
            "panw.panos.src.category",
            "panw.panos.src.profile",
            "panw.panos.src.model",
            "panw.panos.src.vendor",
            "panw.panos.src.os.family",
            "panw.panos.src.os.version",
            "panw.panos.src.host",
            "panw.panos.src.mac",
            "panw.panos.dst.category",
            "panw.panos.dst.profile",
            "panw.panos.dst.model",
            "panw.panos.dst.vendor",
            "panw.panos.dst.os.family",
            "panw.panos.dst.os.version",
            "panw.panos.dst.host",
            "panw.panos.dst.mac",
            "panw.panos.sequence_number",
            "panw.panos.action_flags",
            "panw.panos.device_group_hierarchy1",
            "panw.panos.device_group_hierarchy2",
            "panw.panos.device_group_hierarchy3",
            "panw.panos.device_group_hierarchy4",
            "panw.panos.vsys_name",
            "panw.panos.device_name",
            "panw.panos.vsys_id",
            "panw.panos.application.sub_category",
            "panw.panos.application.category",
            "panw.panos.application.technology",
            "panw.panos.application.risk_level",
            "panw.panos.application.characteristics",
            "panw.panos.application.container",
            "panw.panos.application.tunneled",
            "panw.panos.application.is_saas",
            "panw.panos.application.is_sanctioned"
          ]
        }
      },
      {
        "rename": {
          "field": "_temp_.config_version",
          "target_field": "panw.panos.config_version",
          "ignore_missing": true
        }
      },
      {
        "date": {
          "if": "ctx.event?.timezone == null",
          "field": "panw.panos.certificate.not_after",
          "target_field": "panw.panos.certificate.not_after",
          "formats": [
            "yyyy/MM/dd HH:mm:ss",
            "strict_date_optional_time_nanos"
          ],
          "ignore_failure": true
        }
      },
      {
        "date": {
          "if": "ctx.event?.timezone != null",
          "field": "panw.panos.certificate.not_after",
          "target_field": "panw.panos.certificate.not_after",
          "formats": [
            "yyyy/MM/dd HH:mm:ss",
            "strict_date_optional_time_nanos"
          ],
          "timezone": "{{{ event.timezone }}}",
          "ignore_failure": true
        }
      },
      {
        "date": {
          "if": "ctx.event?.timezone == null",
          "field": "panw.panos.certificate.not_before",
          "target_field": "panw.panos.certificate.not_before",
          "formats": [
            "yyyy/MM/dd HH:mm:ss",
            "strict_date_optional_time_nanos"
          ],
          "ignore_failure": true
        }
      },
      {
        "date": {
          "if": "ctx.event?.timezone != null",
          "field": "panw.panos.certificate.not_before",
          "target_field": "panw.panos.certificate.not_before",
          "formats": [
            "yyyy/MM/dd HH:mm:ss",
            "strict_date_optional_time_nanos"
          ],
          "timezone": "{{{ event.timezone }}}",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": [
            "network"
          ]
        }
      },
      {
        "set": {
          "field": "panw.panos.hash",
          "copy_from": "_temp_.hash",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "panw.panos.tls.version",
          "copy_from": "_temp_.tls",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "destination.ip",
          "copy_from": "panw.panos.destination.ip",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "destination.nat.ip",
          "copy_from": "panw.panos.destination.nat.ip",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "destination.nat.port",
          "copy_from": "panw.panos.destination.nat.port",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "destination.port",
          "copy_from": "panw.panos.destination.port",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "destination.user.name",
          "copy_from": "panw.panos.destination.user",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "network.application",
          "copy_from": "panw.panos.network.application",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "network.transport",
          "copy_from": "panw.panos.protocol",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.egress.interface.name",
          "copy_from": "panw.panos.outbound_interface",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.egress.zone",
          "copy_from": "panw.panos.destination.zone",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.hostname",
          "copy_from": "panw.panos.device_name",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.ingress.interface.name",
          "copy_from": "panw.panos.inbound_interface",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.ingress.zone",
          "copy_from": "panw.panos.source.zone",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "x509.subject.common_name",
          "copy_from": "panw.panos.subject_common_name.value",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "x509.issuer.common_name",
          "copy_from": "panw.panos.issuer_common_name.value",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "rule.uuid",
          "copy_from": "panw.panos.rule_uuid",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.ip",
          "copy_from": "panw.panos.source.ip",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.nat.ip",
          "copy_from": "panw.panos.source.nat.ip",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.port",
          "copy_from": "panw.panos.source.port",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.nat.port",
          "copy_from": "panw.panos.source.nat.port",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "panw.panos.source.user",
          "copy_from": "_temp_.srcuser",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "tls.cipher",
          "copy_from": "panw.panos.tls.encryption",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "tls.client.not_after",
          "copy_from": "panw.panos.certificate.not_after",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "tls.client.not_before",
          "copy_from": "panw.panos.certificate.not_before",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "tls.client.server_name",
          "copy_from": "panw.panos.server_name_indication.value",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "tls.client.x509.public_key_size",
          "copy_from": "panw.panos.certificate.size",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "tls.client.x509.serial_number",
          "copy_from": "panw.panos.certificate.serial_number",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "tls.client.x509.version_number",
          "copy_from": "panw.panos.certificate.version",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "tls.curve",
          "copy_from": "panw.panos.elliptic_curve",
          "ignore_failure": true
        }
      },
      {
        "script": {
          "description": "Dynamically map fingerprint hash to MD5, SHA1 and SHA256 hash.",
          "lang": "painless",
          "if": "ctx._temp_?.hash != null",
          "source": "ctx.tls.client.hash = new HashMap();\nif (ctx._temp_.hash.length() == 32) {ctx.tls.client.hash.md5 = ctx._temp_.hash}\nelse if (ctx._temp_.hash.length() == 40) {ctx.tls.client.hash.sha1 = ctx._temp_.hash}\nelse if (ctx._temp_.hash.length() == 64) {ctx.tls.client.hash.sha256 = ctx._temp_.hash}\n"
        }
      },
      {
        "script": {
          "description": "Dynamically map fingerprint hash to MD5, SHA1 and SHA256 hash.",
          "lang": "painless",
          "if": "ctx._temp_?.tls != null",
          "source": "ctx.tls.version = new HashMap();\nctx.tls.version_protocol = ctx._temp_?.tls.substring(0,3).toLowerCase();\nctx.tls.version = ctx._temp_?.tls.substring(3,6);\n"
        }
      },
      {
        "pipeline": {
          "name": "logs-panw.panos@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "append": {
          "field": "error.message",
          "value": "error in Decryption pipeline: error in [{{{_ingest.on_failure_processor_type}}}] processor{{{#_ingest.on_failure_processor_tag}}} with tag [{{{_ingest.on_failure_processor_tag}}}]{{{/_ingest.on_failure_processor_tag}}} {{{_ingest.on_failure_message}}}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "panw"
      }
    }
  },
  "metrics-aws.kinesis-1.25.2": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-aws.kinesis@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "logs-aws.cloudtrail-1.25.2-third-party": {
    "description": "Pipeline for parsing CloudTrail logs from third party api",
    "processors": [
      {
        "drop": {
          "if": "ctx?.json?._raw == null",
          "description": "JSON doesn't have CloudTrail data"
        }
      },
      {
        "fingerprint": {
          "fields": [
            "_temp_.result._cd",
            "_temp_.result._indextime",
            "_temp_.result._raw",
            "_temp_.result._time"
          ],
          "target_field": "_id",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "event.original",
          "copy_from": "json.result._raw",
          "ignore_empty_value": true
        }
      },
      {
        "remove": {
          "field": "json",
          "ignore_missing": true
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "json"
        }
      },
      {
        "pipeline": {
          "name": "logs-aws.cloudtrail@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "append": {
          "field": "error.message",
          "value": "error in third party api pipeline: error in [{{_ingest.on_failure_processor_type}}] processor{{#_ingest.on_failure_processor_tag}} with tag [{{_ingest.on_failure_processor_tag }}]{{/_ingest.on_failure_processor_tag}} {{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "logs-cisco_duo.offline_enrollment-1.5.1": {
    "description": "Pipeline for parsing cisco_duo offline enrollment logs",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.4.0"
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "json",
          "ignore_failure": true
        }
      },
      {
        "fingerprint": {
          "fields": [
            "json.timestamp",
            "json.action",
            "json.description",
            "json.object",
            "json.username"
          ],
          "target_field": "_id",
          "ignore_missing": true
        }
      },
      {
        "date": {
          "field": "json.timestamp",
          "target_field": "@timestamp",
          "if": "ctx.json?.timestamp != null",
          "formats": [
            "UNIX"
          ],
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{_ingest.on_failure_message}}}"
              }
            }
          ]
        }
      },
      {
        "json": {
          "field": "json.description",
          "target_field": "json_description",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "user.name",
          "copy_from": "json.username",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.action",
          "target_field": "cisco_duo.offline_enrollment.action",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json_description.hostname",
          "target_field": "cisco_duo.offline_enrollment.description.hostname",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json_description.user_agent",
          "target_field": "cisco_duo.offline_enrollment.description.user_agent",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json_description.factor",
          "target_field": "cisco_duo.offline_enrollment.description.factor",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.object",
          "target_field": "cisco_duo.offline_enrollment.object",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.username",
          "target_field": "cisco_duo.offline_enrollment.user.name",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "json"
        }
      },
      {
        "remove": {
          "field": "json_description",
          "if": "ctx?.json_description != null"
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-cisco_duo.offline_enrollment@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "append": {
          "field": "error.message",
          "value": "{{{_ingest.on_failure_message}}}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "cisco_duo"
      }
    }
  },
  "logs-apm.app-8.4.2": {
    "description": "Pipeline for ingesting APM application logs.",
    "processors": [
      {
        "grok": {
          "field": "observer.version",
          "pattern_definitions": {
            "DIGITS": "(?:[0-9]+)"
          },
          "patterns": [
            "%{DIGITS:observer.version_major:int}.%{DIGITS:observer.version_minor:int}.%{DIGITS:observer.version_patch:int}(?:[-+].*)?"
          ]
        }
      },
      {
        "fail": {
          "if": "ctx.observer.version_major > 8 || (ctx.observer.version_major == 8 && ctx.observer.version_minor > 4)",
          "message": "Document produced by APM Server v{{{observer.version}}}, which is newer than the installed APM integration (v8.4.2). The APM integration must be upgraded."
        }
      },
      {
        "remove": {
          "field": [
            "observer.version_major",
            "observer.version_minor",
            "observer.version_patch"
          ],
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-apm.app@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "apm"
      }
    }
  },
  "metrics-kubernetes.state_container-1.26.0": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-kubernetes.state_container@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "kubernetes"
      }
    }
  },
  "metrics-elastic_agent.packetbeat-1.3.5": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-elastic_agent.packetbeat@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "elastic_agent"
      }
    }
  },
  "metrics-kubernetes.container-1.26.0": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-kubernetes.container@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "kubernetes"
      }
    }
  },
  "logs-system.system-1.20.4": {
    "description": "Pipeline for Windows System Event Logs",
    "processors": [
      {
        "set": {
          "field": "event.ingested",
          "value": "{{_ingest.timestamp}}"
        }
      },
      {
        "set": {
          "field": "ecs.version",
          "value": "8.0.0"
        }
      },
      {
        "pipeline": {
          "name": "logs-system.system@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "system"
      }
    }
  },
  "logs-windows.sysmon_operational-1.15.0": {
    "description": "Pipeline for Windows Sysmon Event Logs",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.0.0"
        }
      },
      {
        "script": {
          "description": "Remove all empty values from event_data.",
          "lang": "painless",
          "source": "ctx.winlog?.event_data?.entrySet().removeIf(entry -> [null, \"\", \"-\", \"{00000000-0000-0000-0000-000000000000}\"].contains(entry.getValue()))"
        }
      },
      {
        "rename": {
          "field": "winlog.level",
          "target_field": "log.level",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.level != \"\""
        }
      },
      {
        "date": {
          "field": "winlog.time_created",
          "target_field": "event.created",
          "formats": [
            "ISO8601"
          ],
          "ignore_failure": true,
          "if": "ctx?.winlog?.time_created != null"
        }
      },
      {
        "date": {
          "field": "winlog.event_data.UtcTime",
          "formats": [
            "yyyy-MM-dd HH:mm:ss.SSS"
          ],
          "timezone": "UTC",
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.UtcTime != null"
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "set": {
          "field": "event.code",
          "value": "{{winlog.event_id}}"
        }
      },
      {
        "script": {
          "description": "Set event category and type for all event types.",
          "lang": "painless",
          "params": {
            "1": {
              "category": [
                "process"
              ],
              "type": [
                "start"
              ]
            },
            "2": {
              "category": [
                "file"
              ],
              "type": [
                "change"
              ]
            },
            "3": {
              "category": [
                "network"
              ],
              "type": [
                "start",
                "connection",
                "protocol"
              ]
            },
            "4": {
              "category": [
                "process"
              ],
              "type": [
                "change"
              ]
            },
            "5": {
              "category": [
                "process"
              ],
              "type": [
                "end"
              ]
            },
            "6": {
              "category": [
                "driver"
              ],
              "type": [
                "start"
              ]
            },
            "7": {
              "category": [
                "process"
              ],
              "type": [
                "change"
              ]
            },
            "10": {
              "category": [
                "process"
              ],
              "type": [
                "access"
              ]
            },
            "11": {
              "category": [
                "file"
              ],
              "type": [
                "creation"
              ]
            },
            "12": {
              "category": [
                "configuration",
                "registry"
              ],
              "type": [
                "change"
              ]
            },
            "13": {
              "category": [
                "configuration",
                "registry"
              ],
              "type": [
                "change"
              ]
            },
            "14": {
              "category": [
                "configuration",
                "registry"
              ],
              "type": [
                "change"
              ]
            },
            "15": {
              "category": [
                "file"
              ],
              "type": [
                "access"
              ]
            },
            "16": {
              "category": [
                "configuration"
              ],
              "type": [
                "change"
              ]
            },
            "17": {
              "category": [
                "file"
              ],
              "type": [
                "creation"
              ]
            },
            "18": {
              "category": [
                "file"
              ],
              "type": [
                "access"
              ]
            },
            "22": {
              "category": [
                "network"
              ],
              "type": [
                "connection",
                "protocol",
                "info"
              ]
            },
            "23": {
              "category": [
                "file"
              ],
              "type": [
                "deletion"
              ]
            },
            "24": {
              "type": [
                "change"
              ]
            },
            "25": {
              "category": [
                "process"
              ],
              "type": [
                "change"
              ]
            },
            "26": {
              "category": [
                "file"
              ],
              "type": [
                "deletion"
              ]
            }
          },
          "tag": "Add ECS categorization fields",
          "source": "if (ctx?.event?.code == null || params.get(ctx.event.code) == null) {\n  return;\n}\ndef hm = new HashMap(params[ctx.event.code]);\nhm.forEach((k, v) -> ctx.event[k] = v);"
        }
      },
      {
        "convert": {
          "field": "winlog.record_id",
          "type": "string",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.ID",
          "target_field": "error.code",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx.event.code == \"255\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.RuleName",
          "target_field": "rule.name",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.Type",
          "target_field": "message",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx.event.code == \"25\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.Hash",
          "target_field": "winlog.event_data.Hashes",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "kv": {
          "field": "winlog.event_data.Hashes",
          "target_field": "_temp.hashes",
          "field_split": ",",
          "value_split": "=",
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.Hashes != null"
        }
      },
      {
        "script": {
          "lang": "painless",
          "if": "ctx?._temp?.hashes != null",
          "source": "def hashIsEmpty(String hash) {\n  if (hash == \"\") {\n    return true;\n  }\n  \n  Pattern emptyHashRegex = /^0*$/;\n  def matcher = emptyHashRegex.matcher(hash);\n  \n  return matcher.matches(); \n}\n\ndef hashes = new HashMap();\ndef related = [\n  \"hash\": new ArrayList()\n];\nfor (entry in ctx._temp.hashes.entrySet()) {\n  def key = entry.getKey().toString().toLowerCase();\n  def value = entry.getValue().toString().toLowerCase();\n\n  if (hashIsEmpty(value)) {\n    continue;\n  }\n\n  hashes[key] = value;\n  related.hash.add(value);\n}\n\nctx._temp.hashes = hashes;\nif (related.hash.length > 0) {\n  ctx.related = related;\n}"
        }
      },
      {
        "rename": {
          "field": "_temp.hashes",
          "target_field": "process.hash",
          "if": "ctx?._temp?.hashes != null &&\n[\"1\", \"23\", \"24\", \"25\", \"26\"].contains(ctx.event.code)"
        }
      },
      {
        "rename": {
          "field": "process.hash.imphash",
          "target_field": "process.pe.imphash",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.ProcessGuid",
          "target_field": "process.entity_id",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "winlog.event_data.ProcessId",
          "target_field": "process.pid",
          "type": "long",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.Image",
          "target_field": "process.executable",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.SourceProcessGuid",
          "target_field": "process.entity_id",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.SourceProcessGUID",
          "target_field": "process.entity_id",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "winlog.event_data.SourceProcessId",
          "target_field": "process.pid",
          "type": "long",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "winlog.event_data.SourceThreadId",
          "target_field": "process.thread.id",
          "type": "long",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.SourceImage",
          "target_field": "process.executable",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.Destination",
          "target_field": "process.executable",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.CommandLine",
          "target_field": "process.command_line",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.CurrentDirectory",
          "target_field": "process.working_directory",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.ParentProcessGuid",
          "target_field": "process.parent.entity_id",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "winlog.event_data.ParentProcessId",
          "target_field": "process.parent.pid",
          "type": "long",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.ParentImage",
          "target_field": "process.parent.executable",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.ParentCommandLine",
          "target_field": "process.parent.command_line",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.OriginalFileName",
          "target_field": "process.pe.original_file_name",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx.event.code != \"7\""
        }
      },
      {
        "set": {
          "field": "process.pe.company",
          "copy_from": "winlog.event_data.Company",
          "ignore_empty_value": true,
          "ignore_failure": true,
          "if": "ctx.event.code != \"7\""
        }
      },
      {
        "set": {
          "field": "process.pe.description",
          "copy_from": "winlog.event_data.Description",
          "ignore_empty_value": true,
          "ignore_failure": true,
          "if": "ctx.event.code != \"7\""
        }
      },
      {
        "set": {
          "field": "process.pe.file_version",
          "copy_from": "winlog.event_data.FileVersion",
          "ignore_empty_value": true,
          "ignore_failure": true,
          "if": "ctx.event.code != \"7\""
        }
      },
      {
        "set": {
          "field": "process.pe.product",
          "copy_from": "winlog.event_data.Product",
          "ignore_empty_value": true,
          "ignore_failure": true,
          "if": "ctx.event.code != \"7\""
        }
      },
      {
        "script": {
          "description": "Implements Windows-like SplitCommandLine",
          "lang": "painless",
          "if": "(ctx?.process?.command_line != null && ctx.process.command_line != \"\") || \n(ctx?.process?.parent?.command_line != null && ctx.process.parent.command_line != \"\")",
          "source": "// appendBSBytes appends n '\\\\' bytes to b and returns the resulting slice.\ndef appendBSBytes(StringBuilder b, int n) {\n    for (; n > 0; n--) {\n        b.append('\\\\');\n    }\n    return b;\n}\n\n// readNextArg splits command line string cmd into next\n// argument and command line remainder.\ndef readNextArg(String cmd) {\n    def b = new StringBuilder();\n    boolean inquote;\n    int nslash;\n    for (; cmd.length() > 0; cmd = cmd.substring(1)) {\n        def c = cmd.charAt(0);\n        if (c == (char)' ' || c == (char)0x09) {\n            if (!inquote) {\n                return [\n                    \"arg\":  appendBSBytes(b, nslash).toString(),\n                    \"rest\": cmd.substring(1)\n                ];\n            }\n        } else if (c == (char)'\"') {\n            b = appendBSBytes(b, nslash/2);\n            if (nslash%2 == 0) {\n                // use \"Prior to 2008\" rule from\n                // http://daviddeley.com/autohotkey/parameters/parameters.htm\n                // section 5.2 to deal with double double quotes\n                if (inquote && cmd.length() > 1 && cmd.charAt(1) == (char)'\"') {\n                    b.append(c);\n                    cmd = cmd.substring(1);\n                }\n                inquote = !inquote;\n            } else {\n                b.append(c);\n            }\n            nslash = 0;\n            continue;\n        } else if (c == (char)'\\\\') {\n            nslash++;\n            continue;\n        }\n        b = appendBSBytes(b, nslash);\n        nslash = 0;\n        b.append(c);\n    }\n    return [\n        \"arg\":  appendBSBytes(b, nslash).toString(), \n        \"rest\": ''\n    ];\n}\n\n// commandLineToArgv splits a command line into individual argument\n// strings, following the Windows conventions documented\n// at http://daviddeley.com/autohotkey/parameters/parameters.htm#WINARGV\n// Original implementation found at: https://github.com/golang/go/commit/39c8d2b7faed06b0e91a1ad7906231f53aab45d1\ndef commandLineToArgv(String cmd) {\n    def args = new ArrayList();\n    while (cmd.length() > 0) {\n        if (cmd.charAt(0) == (char)' ' || cmd.charAt(0) == (char)0x09) {\n            cmd = cmd.substring(1);\n            continue;\n        }\n        def next = readNextArg(cmd);\n        cmd = next.rest;\n        args.add(next.arg);\n    }\n    return args;\n}\n\ndef cmd = ctx?.process?.command_line;\nif (cmd != null && cmd != \"\") {\n  ctx.process.args = commandLineToArgv(cmd);\n  ctx.process.args_count = ctx.process.args.length;\n}\n\ndef parentCmd = ctx?.process?.parent?.command_line;\nif (parentCmd != null && parentCmd != \"\") {\n  ctx.process.parent.args = commandLineToArgv(parentCmd);\n  ctx.process.parent.args_count = ctx.process.parent.args.length;\n}"
        }
      },
      {
        "script": {
          "description": "Adds process name information.",
          "lang": "painless",
          "if": "(ctx?.process?.executable != null && ctx.process.executable.length() > 1) ||\n(ctx?.process?.parent?.executable != null && ctx.process.parent.executable.length() > 1)",
          "source": "def getProcessName(def path) {\n  def idx = path.lastIndexOf(\"\\\\\");\n  if (idx > -1) {\n      return path.substring(idx+1);\n  }\n  return \"\";\n}\n\ndef cmd = ctx?.process?.executable;\nif (cmd != null && cmd != \"\" && ctx?.process?.name == null) {\n  def name = getProcessName(cmd);\n  if (name != \"\") {\n    ctx.process.name = name;\n  }\n}\n\ndef parentCmd = ctx?.process?.parent?.executable;\nif (parentCmd != null && parentCmd != \"\" && ctx?.process?.parent?.name == null) {\n  def name = getProcessName(parentCmd);\n  if (name != \"\") {\n    ctx.process.parent.name = name;\n  }\n}"
        }
      },
      {
        "rename": {
          "field": "_temp.hashes",
          "target_field": "file.hash",
          "if": "ctx?._temp?.hashes != null &&\n[\"6\", \"7\", \"15\"].contains(ctx.event.code)"
        }
      },
      {
        "rename": {
          "field": "file.hash.imphash",
          "target_field": "file.pe.imphash",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.TargetFilename",
          "target_field": "file.path",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.Device",
          "target_field": "file.path",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.PipeName",
          "target_field": "file.name",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.ImageLoaded",
          "target_field": "file.path",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "file.code_signature.subject_name",
          "copy_from": "winlog.event_data.Signature",
          "ignore_failure": true,
          "ignore_empty_value": true
        }
      },
      {
        "set": {
          "field": "file.code_signature.status",
          "copy_from": "winlog.event_data.SignatureStatus",
          "ignore_failure": true,
          "ignore_empty_value": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.OriginalFileName",
          "target_field": "file.pe.original_file_name",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx.event.code == \"7\""
        }
      },
      {
        "set": {
          "field": "file.pe.company",
          "copy_from": "winlog.event_data.Company",
          "ignore_failure": true,
          "ignore_empty_value": true,
          "if": "ctx.event.code == \"7\""
        }
      },
      {
        "set": {
          "field": "file.pe.description",
          "copy_from": "winlog.event_data.Description",
          "ignore_failure": true,
          "ignore_empty_value": true,
          "if": "ctx.event.code == \"7\""
        }
      },
      {
        "set": {
          "field": "file.pe.file_version",
          "copy_from": "winlog.event_data.FileVersion",
          "ignore_failure": true,
          "ignore_empty_value": true,
          "if": "ctx.event.code == \"7\""
        }
      },
      {
        "set": {
          "field": "file.pe.product",
          "copy_from": "winlog.event_data.Product",
          "ignore_failure": true,
          "ignore_empty_value": true,
          "if": "ctx.event.code == \"7\""
        }
      },
      {
        "set": {
          "field": "file.code_signature.signed",
          "value": true,
          "if": "ctx?.winlog?.event_data?.Signed == true"
        }
      },
      {
        "set": {
          "field": "file.code_signature.valid",
          "value": true,
          "if": "ctx?.winlog?.event_data?.SignatureStatus == \"Valid\""
        }
      },
      {
        "script": {
          "description": "Adds file information.",
          "lang": "painless",
          "if": "ctx?.file?.path != null && ctx.file.path.length() > 1",
          "source": "def path = ctx.file.path;\ndef idx = path.lastIndexOf(\"\\\\\");\nif (idx > -1) {\n    if (ctx?.file == null) {\n        ctx.file = new HashMap();\n    }\n    ctx.file.name = path.substring(idx+1);\n    ctx.file.directory = path.substring(0, idx);\n\n    def extIdx = path.lastIndexOf(\".\");\n    if (extIdx > -1) {\n        ctx.file.extension = path.substring(extIdx+1);\n    }\n}"
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.Protocol",
          "target_field": "network.transport",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.DestinationPortName",
          "target_field": "network.protocol",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx.event.code != \"22\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.SourcePortName",
          "target_field": "network.protocol",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx.event.code != \"22\""
        }
      },
      {
        "set": {
          "field": "network.protocol",
          "value": "dns",
          "if": "ctx.event.code == \"22\""
        }
      },
      {
        "convert": {
          "field": "winlog.event_data.SourceIp",
          "target_field": "source.ip",
          "type": "ip",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.SourceHostname",
          "target_field": "source.domain",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "winlog.event_data.SourcePort",
          "target_field": "source.port",
          "type": "long",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "winlog.event_data.DestinationIp",
          "target_field": "destination.ip",
          "type": "ip",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.DestinationHostname",
          "target_field": "destination.domain",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "winlog.event_data.DestinationPort",
          "target_field": "destination.port",
          "type": "long",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.QueryName",
          "target_field": "dns.question.name",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "network.direction",
          "value": "egress",
          "if": "ctx?.winlog?.event_data?.Initiated == \"true\""
        }
      },
      {
        "set": {
          "field": "network.direction",
          "value": "ingress",
          "if": "ctx?.winlog?.event_data?.Initiated == \"false\""
        }
      },
      {
        "set": {
          "field": "network.type",
          "value": "ipv4",
          "if": "ctx?.winlog?.event_data?.SourceIsIpv6 == \"false\""
        }
      },
      {
        "set": {
          "field": "network.type",
          "value": "ipv6",
          "if": "ctx?.winlog?.event_data?.SourceIsIpv6 == \"true\""
        }
      },
      {
        "script": {
          "description": "Splits the QueryResults field that contains the DNS responses.\nExample: \"type:  5 f2.taboola.map.fastly.net;::ffff:151.101.66.2;::ffff:151.101.130.2;::ffff:151.101.194.2;::ffff:151.101.2.2;\"\n",
          "lang": "painless",
          "if": "ctx?.winlog?.event_data?.QueryResults != null",
          "params": {
            "1": "A",
            "2": "NS",
            "3": "MD",
            "4": "MF",
            "5": "CNAME",
            "6": "SOA",
            "7": "MB",
            "8": "MG",
            "9": "MR",
            "10": "NULL",
            "11": "WKS",
            "12": "PTR",
            "13": "HINFO",
            "14": "MINFO",
            "15": "MX",
            "16": "TXT",
            "17": "RP",
            "18": "AFSDB",
            "19": "X25",
            "20": "ISDN",
            "21": "RT",
            "22": "NSAP",
            "23": "NSAPPTR",
            "24": "SIG",
            "25": "KEY",
            "26": "PX",
            "27": "GPOS",
            "28": "AAAA",
            "29": "LOC",
            "30": "NXT",
            "31": "EID",
            "32": "NIMLOC",
            "33": "SRV",
            "34": "ATMA",
            "35": "NAPTR",
            "36": "KX",
            "37": "CERT",
            "38": "A6",
            "39": "DNAME",
            "40": "SINK",
            "41": "OPT",
            "43": "DS",
            "46": "RRSIG",
            "47": "NSEC",
            "48": "DNSKEY",
            "49": "DHCID",
            "100": "UINFO",
            "101": "UID",
            "102": "GID",
            "103": "UNSPEC",
            "248": "ADDRS",
            "249": "TKEY",
            "250": "TSIG",
            "251": "IXFR",
            "252": "AXFR",
            "253": "MAILB",
            "254": "MAILA",
            "255": "ANY",
            "65281": "WINS",
            "65282": "WINSR"
          },
          "source": "def results = /;/.split(ctx.winlog.event_data.QueryResults);\ndef answers = new ArrayList();\ndef ips = new ArrayList();\ndef relatedHosts = new ArrayList();\nfor (def i = 0; i < results.length; i++) {\n  def answer = results[i];\n  if (answer == \"\") {\n    continue;\n  }\n\n  if (answer.startsWith(\"type:\")) {\n    def parts = /\\s+/.split(answer);\n    if (parts.length != 3) {\n      throw new Exception(\"unexpected QueryResult format\");\n    }\n\n    answers.add([\n      \"type\": params[parts[1]],\n      \"data\": parts[2]\n    ]);\n    relatedHosts.add(parts[2]);\n  } else {\n    answer = answer.replace(\"::ffff:\", \"\");\n    ips.add(answer);\n  }\n}\n\nif (answers.length > 0) {\n  ctx.dns.answers = answers;\n}\nif (ips.length > 0) {\n  ctx.dns.resolved_ip = ips;\n}\nif (relatedHosts.length > 0) {\n  if (ctx?.related == null) {\n    ctx.related = new HashMap();\n  }\n  ctx.related.hosts = relatedHosts;\n}"
        }
      },
      {
        "foreach": {
          "field": "dns.resolved_ip",
          "ignore_missing": true,
          "processor": {
            "convert": {
              "field": "_ingest._value",
              "type": "ip",
              "on_failure": [
                {
                  "remove": {
                    "field": "_ingest._value"
                  }
                }
              ]
            }
          }
        }
      },
      {
        "script": {
          "description": "Convert V4MAPPED addresses.",
          "lang": "painless",
          "if": "ctx?.dns?.resolved_ip != null",
          "source": "if (ctx.dns.answers == null) {\n  ctx.dns.answers = new ArrayList();\n}\nfor (def i = 0; i < ctx.dns.resolved_ip.length; i++) {\n  def ip = ctx.dns.resolved_ip[i];\n  if (ip == null) {\n    ctx.dns.resolved_ip.remove(i);\n    continue;\n  }\n\n  // Synthesize record type based on IP address type.\n  def type = \"A\";\n  if (ip.indexOf(\":\") != -1) {\n    type = \"AAAA\";\n  }\n  ctx.dns.answers.add([\n    \"type\": type,\n    \"data\": ip\n  ]);\n}"
        }
      },
      {
        "registered_domain": {
          "field": "dns.question.name",
          "target_field": "dns.question",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.hosts",
          "value": "{{dns.question.name}}",
          "allow_duplicates": false,
          "if": "ctx?.dns?.question?.name != null && ctx?.dns?.question?.name != \"\""
        }
      },
      {
        "remove": {
          "description": "Remove dns.question.domain because it is not part of ECS and is redundant with dns.question.name.",
          "field": "dns.question.domain",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "foreach": {
          "field": "dns.resolved_ip",
          "ignore_missing": true,
          "processor": {
            "append": {
              "field": "related.ip",
              "value": "{{_ingest._value}}",
              "allow_duplicates": false,
              "ignore_failure": true
            }
          }
        }
      },
      {
        "community_id": {
          "ignore_failure": true,
          "ignore_missing": false
        }
      },
      {
        "set": {
          "field": "user.id",
          "copy_from": "winlog.user.identifier",
          "ignore_empty_value": true,
          "ignore_failure": true
        }
      },
      {
        "split": {
          "field": "winlog.event_data.User",
          "target_field": "_temp.user_parts",
          "separator": "\\\\",
          "if": "ctx?.winlog?.event_data?.User != null"
        }
      },
      {
        "set": {
          "field": "user.domain",
          "value": "{{_temp.user_parts.0}}",
          "ignore_failure": true,
          "ignore_empty_value": true,
          "if": "ctx?._temp?.user_parts != null && ctx._temp.user_parts.size() == 2"
        }
      },
      {
        "set": {
          "field": "user.name",
          "value": "{{_temp.user_parts.1}}",
          "ignore_failure": true,
          "ignore_empty_value": true,
          "if": "ctx?._temp?.user_parts != null && ctx._temp.user_parts.size() == 2"
        }
      },
      {
        "rename": {
          "field": "winlog.event_data._MemberUserName",
          "target_field": "user.name",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data._MemberDomain",
          "target_field": "user.domain",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "append": {
          "value": "{{{winlog.event_data._MemberAccountType}}}",
          "field": "user.roles",
          "ignore_failure": true,
          "allow_duplicates": false,
          "if": "ctx.winlog?.event_data?._MemberAccountType != null"
        }
      },
      {
        "remove": {
          "field": "winlog.event_data._MemberAccountType",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx.user?.roles != null && ctx.winlog?.event_data?._MemberAccountType != null && ctx.user.roles.contains(ctx.winlog.event_data._MemberAccountType)"
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.QueryStatus",
          "target_field": "sysmon.dns.status",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "script": {
          "description": "Translate DNS Query status.",
          "lang": "painless",
          "params": {
            "0": "SUCCESS",
            "5": "ERROR_ACCESS_DENIED",
            "8": "ERROR_NOT_ENOUGH_MEMORY",
            "13": "ERROR_INVALID_DATA",
            "14": "ERROR_OUTOFMEMORY",
            "123": "ERROR_INVALID_NAME",
            "1214": "ERROR_INVALID_NETNAME",
            "1223": "ERROR_CANCELLED",
            "1460": "ERROR_TIMEOUT",
            "4312": "ERROR_OBJECT_NOT_FOUND",
            "9001": "DNS_ERROR_RCODE_FORMAT_ERROR",
            "9002": "DNS_ERROR_RCODE_SERVER_FAILURE",
            "9003": "DNS_ERROR_RCODE_NAME_ERROR",
            "9004": "DNS_ERROR_RCODE_NOT_IMPLEMENTED",
            "9005": "DNS_ERROR_RCODE_REFUSED",
            "9006": "DNS_ERROR_RCODE_YXDOMAIN",
            "9007": "DNS_ERROR_RCODE_YXRRSET",
            "9008": "DNS_ERROR_RCODE_NXRRSET",
            "9009": "DNS_ERROR_RCODE_NOTAUTH",
            "9010": "DNS_ERROR_RCODE_NOTZONE",
            "9016": "DNS_ERROR_RCODE_BADSIG",
            "9017": "DNS_ERROR_RCODE_BADKEY",
            "9018": "DNS_ERROR_RCODE_BADTIME",
            "9101": "DNS_ERROR_KEYMASTER_REQUIRED",
            "9102": "DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE",
            "9103": "DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1",
            "9104": "DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS",
            "9105": "DNS_ERROR_UNSUPPORTED_ALGORITHM",
            "9106": "DNS_ERROR_INVALID_KEY_SIZE",
            "9107": "DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE",
            "9108": "DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION",
            "9109": "DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR",
            "9110": "DNS_ERROR_UNEXPECTED_CNG_ERROR",
            "9111": "DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION",
            "9112": "DNS_ERROR_KSP_NOT_ACCESSIBLE",
            "9113": "DNS_ERROR_TOO_MANY_SKDS",
            "9114": "DNS_ERROR_INVALID_ROLLOVER_PERIOD",
            "9115": "DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET",
            "9116": "DNS_ERROR_ROLLOVER_IN_PROGRESS",
            "9117": "DNS_ERROR_STANDBY_KEY_NOT_PRESENT",
            "9118": "DNS_ERROR_NOT_ALLOWED_ON_ZSK",
            "9119": "DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD",
            "9120": "DNS_ERROR_ROLLOVER_ALREADY_QUEUED",
            "9121": "DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE",
            "9122": "DNS_ERROR_BAD_KEYMASTER",
            "9123": "DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD",
            "9124": "DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT",
            "9125": "DNS_ERROR_DNSSEC_IS_DISABLED",
            "9126": "DNS_ERROR_INVALID_XML",
            "9127": "DNS_ERROR_NO_VALID_TRUST_ANCHORS",
            "9128": "DNS_ERROR_ROLLOVER_NOT_POKEABLE",
            "9129": "DNS_ERROR_NSEC3_NAME_COLLISION",
            "9130": "DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1",
            "9501": "DNS_INFO_NO_RECORDS",
            "9502": "DNS_ERROR_BAD_PACKET",
            "9503": "DNS_ERROR_NO_PACKET",
            "9504": "DNS_ERROR_RCODE",
            "9505": "DNS_ERROR_UNSECURE_PACKET",
            "9506": "DNS_REQUEST_PENDING",
            "9551": "DNS_ERROR_INVALID_TYPE",
            "9552": "DNS_ERROR_INVALID_IP_ADDRESS",
            "9553": "DNS_ERROR_INVALID_PROPERTY",
            "9554": "DNS_ERROR_TRY_AGAIN_LATER",
            "9555": "DNS_ERROR_NOT_UNIQUE",
            "9556": "DNS_ERROR_NON_RFC_NAME",
            "9557": "DNS_STATUS_FQDN",
            "9558": "DNS_STATUS_DOTTED_NAME",
            "9559": "DNS_STATUS_SINGLE_PART_NAME",
            "9560": "DNS_ERROR_INVALID_NAME_CHAR",
            "9561": "DNS_ERROR_NUMERIC_NAME",
            "9562": "DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER",
            "9563": "DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION",
            "9564": "DNS_ERROR_CANNOT_FIND_ROOT_HINTS",
            "9565": "DNS_ERROR_INCONSISTENT_ROOT_HINTS",
            "9566": "DNS_ERROR_DWORD_VALUE_TOO_SMALL",
            "9567": "DNS_ERROR_DWORD_VALUE_TOO_LARGE",
            "9568": "DNS_ERROR_BACKGROUND_LOADING",
            "9569": "DNS_ERROR_NOT_ALLOWED_ON_RODC",
            "9570": "DNS_ERROR_NOT_ALLOWED_UNDER_DNAME",
            "9571": "DNS_ERROR_DELEGATION_REQUIRED",
            "9572": "DNS_ERROR_INVALID_POLICY_TABLE",
            "9573": "DNS_ERROR_ADDRESS_REQUIRED",
            "9601": "DNS_ERROR_ZONE_DOES_NOT_EXIST",
            "9602": "DNS_ERROR_NO_ZONE_INFO",
            "9603": "DNS_ERROR_INVALID_ZONE_OPERATION",
            "9604": "DNS_ERROR_ZONE_CONFIGURATION_ERROR",
            "9605": "DNS_ERROR_ZONE_HAS_NO_SOA_RECORD",
            "9606": "DNS_ERROR_ZONE_HAS_NO_NS_RECORDS",
            "9607": "DNS_ERROR_ZONE_LOCKED",
            "9608": "DNS_ERROR_ZONE_CREATION_FAILED",
            "9609": "DNS_ERROR_ZONE_ALREADY_EXISTS",
            "9610": "DNS_ERROR_AUTOZONE_ALREADY_EXISTS",
            "9611": "DNS_ERROR_INVALID_ZONE_TYPE",
            "9612": "DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP",
            "9613": "DNS_ERROR_ZONE_NOT_SECONDARY",
            "9614": "DNS_ERROR_NEED_SECONDARY_ADDRESSES",
            "9615": "DNS_ERROR_WINS_INIT_FAILED",
            "9616": "DNS_ERROR_NEED_WINS_SERVERS",
            "9617": "DNS_ERROR_NBSTAT_INIT_FAILED",
            "9618": "DNS_ERROR_SOA_DELETE_INVALID",
            "9619": "DNS_ERROR_FORWARDER_ALREADY_EXISTS",
            "9620": "DNS_ERROR_ZONE_REQUIRES_MASTER_IP",
            "9621": "DNS_ERROR_ZONE_IS_SHUTDOWN",
            "9622": "DNS_ERROR_ZONE_LOCKED_FOR_SIGNING",
            "9651": "DNS_ERROR_PRIMARY_REQUIRES_DATAFILE",
            "9652": "DNS_ERROR_INVALID_DATAFILE_NAME",
            "9653": "DNS_ERROR_DATAFILE_OPEN_FAILURE",
            "9654": "DNS_ERROR_FILE_WRITEBACK_FAILED",
            "9655": "DNS_ERROR_DATAFILE_PARSING",
            "9701": "DNS_ERROR_RECORD_DOES_NOT_EXIST",
            "9702": "DNS_ERROR_RECORD_FORMAT",
            "9703": "DNS_ERROR_NODE_CREATION_FAILED",
            "9704": "DNS_ERROR_UNKNOWN_RECORD_TYPE",
            "9705": "DNS_ERROR_RECORD_TIMED_OUT",
            "9706": "DNS_ERROR_NAME_NOT_IN_ZONE",
            "9707": "DNS_ERROR_CNAME_LOOP",
            "9708": "DNS_ERROR_NODE_IS_CNAME",
            "9709": "DNS_ERROR_CNAME_COLLISION",
            "9710": "DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT",
            "9711": "DNS_ERROR_RECORD_ALREADY_EXISTS",
            "9712": "DNS_ERROR_SECONDARY_DATA",
            "9713": "DNS_ERROR_NO_CREATE_CACHE_DATA",
            "9714": "DNS_ERROR_NAME_DOES_NOT_EXIST",
            "9715": "DNS_WARNING_PTR_CREATE_FAILED",
            "9716": "DNS_WARNING_DOMAIN_UNDELETED",
            "9717": "DNS_ERROR_DS_UNAVAILABLE",
            "9718": "DNS_ERROR_DS_ZONE_ALREADY_EXISTS",
            "9719": "DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE",
            "9720": "DNS_ERROR_NODE_IS_DNAME",
            "9721": "DNS_ERROR_DNAME_COLLISION",
            "9722": "DNS_ERROR_ALIAS_LOOP",
            "9751": "DNS_INFO_AXFR_COMPLETE",
            "9752": "DNS_ERROR_AXFR",
            "9753": "DNS_INFO_ADDED_LOCAL_WINS",
            "9801": "DNS_STATUS_CONTINUE_NEEDED",
            "9851": "DNS_ERROR_NO_TCPIP",
            "9852": "DNS_ERROR_NO_DNS_SERVERS",
            "9901": "DNS_ERROR_DP_DOES_NOT_EXIST",
            "9902": "DNS_ERROR_DP_ALREADY_EXISTS",
            "9903": "DNS_ERROR_DP_NOT_ENLISTED",
            "9904": "DNS_ERROR_DP_ALREADY_ENLISTED",
            "9905": "DNS_ERROR_DP_NOT_AVAILABLE",
            "9906": "DNS_ERROR_DP_FSMO_ERROR",
            "9911": "DNS_ERROR_RRL_NOT_ENABLED",
            "9912": "DNS_ERROR_RRL_INVALID_WINDOW_SIZE",
            "9913": "DNS_ERROR_RRL_INVALID_IPV4_PREFIX",
            "9914": "DNS_ERROR_RRL_INVALID_IPV6_PREFIX",
            "9915": "DNS_ERROR_RRL_INVALID_TC_RATE",
            "9916": "DNS_ERROR_RRL_INVALID_LEAK_RATE",
            "9917": "DNS_ERROR_RRL_LEAK_RATE_LESSTHAN_TC_RATE",
            "9921": "DNS_ERROR_VIRTUALIZATION_INSTANCE_ALREADY_EXISTS",
            "9922": "DNS_ERROR_VIRTUALIZATION_INSTANCE_DOES_NOT_EXIST",
            "9923": "DNS_ERROR_VIRTUALIZATION_TREE_LOCKED",
            "9924": "DNS_ERROR_INVAILD_VIRTUALIZATION_INSTANCE_NAME",
            "9925": "DNS_ERROR_DEFAULT_VIRTUALIZATION_INSTANCE",
            "9951": "DNS_ERROR_ZONESCOPE_ALREADY_EXISTS",
            "9952": "DNS_ERROR_ZONESCOPE_DOES_NOT_EXIST",
            "9953": "DNS_ERROR_DEFAULT_ZONESCOPE",
            "9954": "DNS_ERROR_INVALID_ZONESCOPE_NAME",
            "9955": "DNS_ERROR_NOT_ALLOWED_WITH_ZONESCOPES",
            "9956": "DNS_ERROR_LOAD_ZONESCOPE_FAILED",
            "9957": "DNS_ERROR_ZONESCOPE_FILE_WRITEBACK_FAILED",
            "9958": "DNS_ERROR_INVALID_SCOPE_NAME",
            "9959": "DNS_ERROR_SCOPE_DOES_NOT_EXIST",
            "9960": "DNS_ERROR_DEFAULT_SCOPE",
            "9961": "DNS_ERROR_INVALID_SCOPE_OPERATION",
            "9962": "DNS_ERROR_SCOPE_LOCKED",
            "9963": "DNS_ERROR_SCOPE_ALREADY_EXISTS",
            "9971": "DNS_ERROR_POLICY_ALREADY_EXISTS",
            "9972": "DNS_ERROR_POLICY_DOES_NOT_EXIST",
            "9973": "DNS_ERROR_POLICY_INVALID_CRITERIA",
            "9974": "DNS_ERROR_POLICY_INVALID_SETTINGS",
            "9975": "DNS_ERROR_CLIENT_SUBNET_IS_ACCESSED",
            "9976": "DNS_ERROR_CLIENT_SUBNET_DOES_NOT_EXIST",
            "9977": "DNS_ERROR_CLIENT_SUBNET_ALREADY_EXISTS",
            "9978": "DNS_ERROR_SUBNET_DOES_NOT_EXIST",
            "9979": "DNS_ERROR_SUBNET_ALREADY_EXISTS",
            "9980": "DNS_ERROR_POLICY_LOCKED",
            "9981": "DNS_ERROR_POLICY_INVALID_WEIGHT",
            "9982": "DNS_ERROR_POLICY_INVALID_NAME",
            "9983": "DNS_ERROR_POLICY_MISSING_CRITERIA",
            "9984": "DNS_ERROR_INVALID_CLIENT_SUBNET_NAME",
            "9985": "DNS_ERROR_POLICY_PROCESSING_ORDER_INVALID",
            "9986": "DNS_ERROR_POLICY_SCOPE_MISSING",
            "9987": "DNS_ERROR_POLICY_SCOPE_NOT_ALLOWED",
            "9988": "DNS_ERROR_SERVERSCOPE_IS_REFERENCED",
            "9989": "DNS_ERROR_ZONESCOPE_IS_REFERENCED",
            "9990": "DNS_ERROR_POLICY_INVALID_CRITERIA_CLIENT_SUBNET",
            "9991": "DNS_ERROR_POLICY_INVALID_CRITERIA_TRANSPORT_PROTOCOL",
            "9992": "DNS_ERROR_POLICY_INVALID_CRITERIA_NETWORK_PROTOCOL",
            "9993": "DNS_ERROR_POLICY_INVALID_CRITERIA_INTERFACE",
            "9994": "DNS_ERROR_POLICY_INVALID_CRITERIA_FQDN",
            "9995": "DNS_ERROR_POLICY_INVALID_CRITERIA_QUERY_TYPE",
            "9996": "DNS_ERROR_POLICY_INVALID_CRITERIA_TIME_OF_DAY",
            "10054": "WSAECONNRESET",
            "10055": "WSAENOBUFS",
            "10060": "WSAETIMEDOUT"
          },
          "if": "ctx?.sysmon?.dns?.status != null && ctx?.sysmon?.dns?.status != \"\"",
          "source": "def status = params[ctx.sysmon.dns.status];\nif (status != null) {\n  ctx.sysmon.dns.status = status;\n}"
        }
      },
      {
        "convert": {
          "field": "winlog.event_data.Archived",
          "target_field": "sysmon.file.archived",
          "type": "boolean",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "winlog.event_data.IsExecutable",
          "target_field": "sysmon.file.is_executable",
          "type": "boolean",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{user.name}}",
          "ignore_failure": true,
          "allow_duplicates": false,
          "if": "ctx?.user?.name != null && ctx.user.name != \"\""
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{source.ip}}",
          "ignore_failure": true,
          "allow_duplicates": false,
          "if": "ctx?.source?.ip != null && ctx.source.ip != \"\""
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{destination.ip}}",
          "ignore_failure": true,
          "allow_duplicates": false,
          "if": "ctx?.destination?.ip != null && ctx.destination.ip != \"\""
        }
      },
      {
        "script": {
          "description": "Set registry fields.",
          "lang": "painless",
          "if": "ctx?.winlog?.event_data?.TargetObject != null && [\"12\", \"13\", \"14\"].contains(ctx.event.code)",
          "params": {
            "HKEY_CLASSES_ROOT": "HKCR",
            "HKCR": "HKCR",
            "HKEY_CURRENT_CONFIG": "HKCC",
            "HKCC": "HKCC",
            "HKEY_CURRENT_USER": "HKCU",
            "HKCU": "HKCU",
            "HKEY_DYN_DATA": "HKDD",
            "HKDD": "HKDD",
            "HKEY_LOCAL_MACHINE": "HKLM",
            "HKLM": "HKLM",
            "HKEY_PERFORMANCE_DATA": "HKPD",
            "HKPD": "HKPD",
            "HKEY_USERS": "HKU",
            "HKU": "HKU"
          },
          "source": "ctx.registry = new HashMap();\nPattern qwordRegex = /(?i)QWORD \\(((0x[0-9A-F]{8})-(0x[0-9A-F]{8}))\\)/;\nPattern dwordRegex = /(?i)DWORD \\((0x[0-9A-F]{8})\\)/;\nPattern binDataRegex = /Binary Data/;\n\ndef path = ctx.winlog.event_data.TargetObject;\nctx.registry.path = path;\n\ndef pathTokens = Arrays.asList(/\\\\/.split(path));\ndef hive = params[pathTokens[0]];\nif (hive != null) {\n  ctx.registry.hive = hive;\n  if (pathTokens.length > 1) {\n    ctx.registry.key = pathTokens.subList(1, pathTokens.length).join(\"\\\\\");\n  }\n}\n\ndef value = pathTokens[pathTokens.length - 1];\nctx.registry.value = value;\n\ndef data = ctx?.winlog?.event_data?.Details;\nif (data != null && data != \"\") {\n  def prefixLen = 2; // to remove 0x prefix\n  def dataValue = \"\";\n  def dataType = \"\";\n  def matcher = qwordRegex.matcher(data);\n  if (matcher.matches()) {\n    def parsedHighByte = Long.parseLong(matcher.group(2).substring(prefixLen), 16);\n    def parsedLowByte = Long.parseLong(matcher.group(3).substring(prefixLen), 16);\n    if (!Double.isNaN(parsedHighByte) && !Double.isNaN(parsedLowByte)) {\n      dataType = \"SZ_QWORD\";\n      dataValue = Long.toString(((parsedHighByte << 8) + parsedLowByte));\n      ctx.registry.data = [\n        \"strings\": [dataValue],\n        \"type\": dataType\n      ];\n    }\n    return;\n  }\n\n  matcher = dwordRegex.matcher(data);\n  if (matcher.matches()) {\n    def parsedValue = Long.parseLong(matcher.group(1).substring(prefixLen), 16);\n    if (!Double.isNaN(parsedValue)) {\n      dataType = \"SZ_DWORD\";\n      dataValue = Long.toString(parsedValue);\n      ctx.registry.data = [\n        \"strings\": [dataValue],\n        \"type\": dataType\n      ];\n    }\n    return;\n  }\n\n  matcher = binDataRegex.matcher(data);\n  if (matcher.matches()) {\n    // Data type could be REG_BINARY or REG_MULTI_SZ\n    ctx.registry.data = [\n      \"strings\": [data],\n      \"type\": \"REG_BINARY\"\n    ];\n    return;\n  }\n\n  // REG_SZ or REG_EXPAND_SZ\n  ctx.registry.data = [\n    \"strings\": [data],\n    \"type\": \"REG_SZ\"\n  ];\n}"
        }
      },
      {
        "remove": {
          "field": [
            "_temp",
            "winlog.event_data.ProcessId",
            "winlog.event_data.ParentProcessId",
            "winlog.event_data.SourceProcessId",
            "winlog.event_data.SourceThreadId",
            "winlog.event_data.SourceIp",
            "winlog.event_data.SourcePort",
            "winlog.event_data.SourcePortName",
            "winlog.event_data.DestinationIp",
            "winlog.event_data.DestinationPort",
            "winlog.event_data.DestinationPortName",
            "winlog.event_data.RuleName",
            "winlog.event_data.User",
            "winlog.event_data.Initiated",
            "winlog.event_data.SourceIsIpv6",
            "winlog.event_data.DestinationIsIpv6",
            "winlog.event_data.QueryStatus",
            "winlog.event_data.Archived",
            "winlog.event_data.IsExecutable",
            "winlog.event_data.QueryResults",
            "winlog.event_data.UtcTime",
            "winlog.event_data.Hash",
            "winlog.event_data.Hashes",
            "winlog.event_data.TargetObject",
            "winlog.event_data.Details",
            "winlog.time_created",
            "winlog.level"
          ],
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "description": "Remove empty event data.",
          "field": "winlog.event_data",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data != null && ctx.winlog.event_data.size() == 0"
        }
      },
      {
        "pipeline": {
          "name": "logs-windows.sysmon_operational@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "Processor \"{{ _ingest.on_failure_processor_type }}\" with tag \"{{ _ingest.on_failure_processor_tag }}\" in pipeline \"{{ _ingest.on_failure_pipeline }}\" failed with message \"{{ _ingest.on_failure_message }}\""
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "windows"
      }
    }
  },
  "metrics-system.socket_summary-1.20.4": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-system.socket_summary@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "system"
      }
    }
  },
  "metrics-aws.sqs-1.25.2": {
    "description": "Pipeline for SQS metrics",
    "processors": [
      {
        "rename": {
          "field": "aws.sqs.metrics.ApproximateAgeOfOldestMessage.avg",
          "target_field": "aws.sqs.oldest_message_age.sec",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.sqs.metrics.ApproximateNumberOfMessagesDelayed.avg",
          "target_field": "aws.sqs.messages.delayed",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.sqs.metrics.ApproximateNumberOfMessagesNotVisible.avg",
          "target_field": "aws.sqs.messages.not_visible",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.sqs.metrics.ApproximateNumberOfMessagesVisible.avg",
          "target_field": "aws.sqs.messages.visible",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.sqs.metrics.NumberOfMessagesDeleted.avg",
          "target_field": "aws.sqs.messages.deleted",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.sqs.metrics.NumberOfMessagesReceived.avg",
          "target_field": "aws.sqs.messages.received",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.sqs.metrics.NumberOfMessagesSent.avg",
          "target_field": "aws.sqs.messages.sent",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.sqs.metrics.NumberOfEmptyReceives.avg",
          "target_field": "aws.sqs.empty_receives",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.sqs.metrics.SentMessageSize.avg",
          "target_field": "aws.sqs.sent_message_size.bytes",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": [
            "aws.sqs.metrics"
          ],
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "metrics-aws.sqs@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "metrics-aws.transitgateway-1.25.2": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-aws.transitgateway@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "metrics-elastic_agent.endpoint_security-1.3.5": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-elastic_agent.endpoint_security@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "elastic_agent"
      }
    }
  },
  "logs-zscaler_zia.dns-2.4.1": {
    "description": "Pipeline for Zscaler dns logs",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.4.0"
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "resp",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": "json",
          "if": "ctx?.input?.type == 'http_endpoint'",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "resp.event",
          "target_field": "json",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "resp",
          "ignore_missing": true
        }
      },
      {
        "date": {
          "field": "json.datetime",
          "target_field": "@timestamp",
          "ignore_failure": true,
          "formats": [
            "E MMM dd HH:mm:ss yyyy",
            "E MMM  d HH:mm:ss yyyy",
            "E MMM d HH:mm:ss yyyy",
            "yyyy-mm-dd HH:mm:ss"
          ]
        }
      },
      {
        "date": {
          "field": "json.time",
          "target_field": "@timestamp",
          "ignore_failure": true,
          "formats": [
            "E MMM dd HH:mm:ss yyyy",
            "E MMM  d HH:mm:ss yyyy",
            "E MMM d HH:mm:ss yyyy",
            "yyyy-MM-dd HH:mm:ss"
          ]
        }
      },
      {
        "remove": {
          "field": [
            "json.time",
            "json.datetime"
          ],
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "network.protocol",
          "value": "dns"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "network"
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "info"
        }
      },
      {
        "rename": {
          "field": "json.clt_sip",
          "target_field": "source.ip",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "source.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.asn",
          "target_field": "source.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.organization_name",
          "target_field": "source.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{source.ip}}}",
          "if": "ctx?.source?.ip != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.dns_resp",
          "target_field": "dns.answers.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.dns_req",
          "target_field": "dns.question.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.dns_reqtype",
          "target_field": "dns.question.type",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.srv_dip",
          "target_field": "destination.ip",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "field": "destination.ip",
          "target_field": "destination.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "destination.ip",
          "target_field": "destination.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "destination.as.asn",
          "target_field": "destination.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "destination.as.organization_name",
          "target_field": "destination.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{destination.ip}}}",
          "if": "ctx?.destination?.ip != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "json.srv_dport",
          "target_field": "destination.port",
          "type": "long",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": "json.srv_dport",
          "ignore_missing": true
        }
      },
      {
        "urldecode": {
          "field": "json.user",
          "target_field": "user.email",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "json.user",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.deviceowner",
          "target_field": "user.name",
          "ignore_missing": true
        }
      },
      {
        "urldecode": {
          "field": "json.department",
          "target_field": "zscaler_zia.dns.department",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "json.department",
          "ignore_missing": true
        }
      },
      {
        "urldecode": {
          "field": "json.location",
          "target_field": "zscaler_zia.dns.location",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "json.location",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.reqaction",
          "target_field": "zscaler_zia.dns.request.action",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.resaction",
          "target_field": "zscaler_zia.dns.response.action",
          "ignore_missing": true
        }
      },
      {
        "urldecode": {
          "field": "json.reqrulelabel",
          "target_field": "zscaler_zia.dns.request.rule.label",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "json.reqrulelabel",
          "ignore_missing": true
        }
      },
      {
        "urldecode": {
          "field": "json.resrulelabel",
          "target_field": "zscaler_zia.dns.response.rule.label",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "json.resrulelabel",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.durationms",
          "target_field": "zscaler_zia.dns.duration.milliseconds",
          "type": "long",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": "json.durationms",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.category",
          "target_field": "zscaler_zia.dns.dom.category",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.devicehostname",
          "target_field": "zscaler_zia.dns.hostname",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.hosts",
          "value": "{{{zscaler_zia.dns.hostname}}}",
          "if": "ctx?.zscaler_zia?.dns?.hostname != null",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "script": {
          "description": "Drops null/empty values recursively",
          "lang": "painless",
          "source": "boolean dropEmptyFields(Object object) {\n  if (object == null || object == \"\") {\n    return true;\n  } else if (object instanceof Map) {\n    ((Map) object).values().removeIf(value -> dropEmptyFields(value));\n    return (((Map) object).size() == 0);\n  } else if (object instanceof List) {\n    ((List) object).removeIf(value -> dropEmptyFields(value));\n    return (((List) object).length == 0);\n  }\n  return false;\n}\ndropEmptyFields(ctx);\n"
        }
      },
      {
        "script": {
          "description": "Adds all the remaining fields in fields under zscaler_zia.dns",
          "lang": "painless",
          "if": "ctx.json != null",
          "source": "for (Map.Entry m : ctx.json.entrySet()) {\n  ctx.zscaler_zia.dns[m.getKey()] = m.getValue();\n}\n"
        }
      },
      {
        "script": {
          "lang": "painless",
          "if": "ctx?.zscaler_zia?.dns?.duration?.milliseconds != null",
          "source": "ctx.event.duration = ctx?.zscaler_zia?.dns?.duration?.milliseconds * 1000000;\n"
        }
      },
      {
        "remove": {
          "field": "json",
          "ignore_failure": true
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-zscaler_zia.dns@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{{ _ingest.on_failure_message }}}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "zscaler_zia"
      }
    }
  },
  "metrics-aws.ecs_metrics-1.25.2": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-aws.ecs_metrics@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "metrics-system.memory-1.20.4": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-system.memory@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "system"
      }
    }
  },
  "metrics-aws.elb_metrics-1.25.2": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-aws.elb_metrics@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "logs-aws.firewall_logs-1.25.2": {
    "description": "Pipeline for AWS Network Firewall logs",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.0.0"
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "if": "ctx.event?.original == null",
          "description": "Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document."
        }
      },
      {
        "remove": {
          "field": "message",
          "ignore_missing": true,
          "if": "ctx.event?.original != null",
          "description": "The `message` field is no longer required if the document has an `event.original` field."
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "json"
        }
      },
      {
        "date": {
          "field": "json.event.timestamp",
          "target_field": "@timestamp",
          "formats": [
            "ISO8601"
          ],
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.availability_zone",
          "target_field": "cloud.availability_zone",
          "ignore_missing": true
        }
      },
      {
        "grok": {
          "field": "cloud.availability_zone",
          "ignore_missing": true,
          "ignore_failure": true,
          "patterns": [
            "^%{DATA:cloud.region}%{LETTER}$"
          ],
          "pattern_definitions": {
            "LETTER": "[a-z]+"
          }
        }
      },
      {
        "rename": {
          "field": "json.firewall_name",
          "target_field": "observer.name",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "observer.type",
          "value": "firewall"
        }
      },
      {
        "set": {
          "field": "observer.vendor",
          "value": "AWS"
        }
      },
      {
        "set": {
          "field": "observer.product",
          "value": "Network Firewall"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "network",
          "allow_duplicates": false
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "connection",
          "allow_duplicates": false
        }
      },
      {
        "set": {
          "field": "json.event.event_type",
          "value": "event",
          "if": "ctx.json?.event?.event_type == \"netflow\""
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "{{json.event.event_type}}",
          "if": "ctx.json?.event?.event_type != null"
        }
      },
      {
        "set": {
          "field": "json.event.alert.action",
          "value": "denied",
          "if": "ctx.json?.event?.alert?.action == \"blocked\""
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "{{json.event.alert.action}}",
          "if": "ctx.json?.event?.alert?.action != null"
        }
      },
      {
        "convert": {
          "field": "json.event.src_ip",
          "target_field": "source.address",
          "type": "ip",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "source.ip",
          "copy_from": "source.address",
          "if": "ctx?.source?.address != null"
        }
      },
      {
        "convert": {
          "field": "json.event.src_port",
          "type": "integer",
          "target_field": "source.port",
          "if": "ctx?.json?.event?.src_port != null"
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "source.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "ignore_missing": true,
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as",
          "properties": [
            "asn",
            "organization_name"
          ]
        }
      },
      {
        "rename": {
          "field": "source.as.asn",
          "target_field": "source.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.organization_name",
          "target_field": "source.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "network.type",
          "value": "ipv4",
          "if": "ctx.network?.type == null && ctx.source?.ip != null && ctx.source.ip.contains(\".\")"
        }
      },
      {
        "set": {
          "field": "network.type",
          "value": "ipv6",
          "if": "ctx.network?.type == null && ctx.source?.ip != null && ctx.source.ip.contains(\":\")"
        }
      },
      {
        "convert": {
          "field": "json.event.dest_ip",
          "target_field": "destination.address",
          "type": "ip",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "destination.ip",
          "copy_from": "destination.address",
          "if": "ctx?.destination?.address != null"
        }
      },
      {
        "convert": {
          "field": "json.event.dest_port",
          "type": "integer",
          "target_field": "destination.port",
          "if": "ctx?.json?.event?.dest_port != null"
        }
      },
      {
        "geoip": {
          "field": "destination.ip",
          "target_field": "destination.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "destination.ip",
          "target_field": "destination.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "destination.as.asn",
          "target_field": "destination.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "destination.as.organization_name",
          "target_field": "destination.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.event.proto",
          "target_field": "network.transport",
          "ignore_missing": true
        }
      },
      {
        "lowercase": {
          "field": "network.transport",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.event.alert.category",
          "target_field": "message",
          "type": "string",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "rule.category",
          "value": "{{json.event.alert.category}}",
          "ignore_empty_value": true
        }
      },
      {
        "set": {
          "field": "rule.id",
          "value": "{{json.event.alert.signature_id}}",
          "ignore_empty_value": true
        }
      },
      {
        "set": {
          "field": "rule.name",
          "value": "{{json.event.alert.signature}}",
          "ignore_empty_value": true
        }
      },
      {
        "set": {
          "field": "rule.name",
          "value": "rule.id",
          "if": "ctx?.rule?.name == null && ctx?.rule?.id != null"
        }
      },
      {
        "rename": {
          "field": "json.event.alert.rev_id",
          "target_field": "rule.version",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.event.alert.severity",
          "target_field": "event.severity",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.event.app_proto",
          "target_field": "network.protocol",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "network.protocol",
          "value": "unknown",
          "if": "ctx?.network?.protocol == null || ctx?.network?.protocol == \"failed\""
        }
      },
      {
        "rename": {
          "field": "json.event.http.hostname",
          "target_field": "destination.domain",
          "ignore_missing": true
        }
      },
      {
        "uri_parts": {
          "field": "json.event.http.url",
          "if": "ctx?.json?.event?.http?.url != null"
        }
      },
      {
        "rename": {
          "field": "json.event.http.http_method",
          "target_field": "http.request.method",
          "ignore_missing": true
        }
      },
      {
        "user_agent": {
          "field": "json.event.http.http_user_agent",
          "ignore_missing": true
        }
      },
      {
        "dissect": {
          "field": "json.event.http.protocol",
          "pattern": "HTTP/%{http.version}",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.event.tls.sni",
          "target_field": "tls.client.server_name",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "destination.domain",
          "copy_from": "tls.client.server_name",
          "if": "ctx?.tls?.client?.server_name != null"
        }
      },
      {
        "dissect": {
          "field": "json.event.tls.version",
          "pattern": "%{tls.version_protocol} %{tls.version}",
          "ignore_missing": true,
          "if": "ctx?.json?.event?.tls?.version != \"UNDETERMINED\""
        }
      },
      {
        "lowercase": {
          "field": "tls.version_protocol",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.event.tls.ja3s.hash",
          "target_field": "tls.server.ja3s",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.event.tls.ja3.hash",
          "target_field": "tls.server.ja3",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.event.tls.certificate",
          "target_field": "tls.server.certificate",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "tls.server.certificate_chain",
          "target_field": "json.event.tls.chain",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "tls.server.x509.serial_number",
          "target_field": "json.event.tls.serial",
          "ignore_missing": true
        }
      },
      {
        "gsub": {
          "field": "tls.server.x509.serial_number",
          "pattern": ":",
          "replacement": "",
          "ignore_missing": true
        }
      },
      {
        "date": {
          "field": "json.event.tls.notafter",
          "target_field": "tls.server.not_after",
          "formats": [
            "ISO8601"
          ],
          "if": "ctx.json?.event?.tls?.notafter != null"
        }
      },
      {
        "date": {
          "field": "json.event.tls.notbefore",
          "target_field": "tls.server.not_before",
          "formats": [
            "ISO8601"
          ],
          "if": "ctx.json?.event?.tls?.notbefore != null"
        }
      },
      {
        "rename": {
          "field": "tls.server.not_after",
          "target_field": "tls.server.x509.not_after",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "tls.server.not_before",
          "target_field": "tls.server.x509.not_before",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.event.tcp.tcp_flags",
          "target_field": "aws.firewall.tcp_flags",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "ignore_failure": true,
          "if": "ctx?.aws?.firewall?.tcp_flags != null",
          "source": "if (ctx.aws.firewall.tcp_flags_array == null) {\n  ArrayList al = new ArrayList();\n  ctx.aws.firewall.put(\"tcp_flags_array\", al);\n}\n\ndef flags = Integer.parseUnsignedInt(ctx.aws.firewall.tcp_flags);\n\nif ((flags & 0x01) != 0) {\n  ctx.aws.firewall.tcp_flags_array.add(\"fin\");\n}\nif ((flags & 0x02) != 0) {\n  ctx.aws.firewall.tcp_flags_array.add(\"syn\");\n}\nif ((flags & 0x04) != 0) {\n  ctx.aws.firewall.tcp_flags_array.add(\"rst\");\n}\nif ((flags & 0x08) != 0) {\n  ctx.aws.firewall.tcp_flags_array.add(\"psh\");\n}\nif ((flags & 0x10) != 0) {\n  ctx.aws.firewall.tcp_flags_array.add(\"ack\");\n}\nif ((flags & 0x20) != 0) {\n  ctx.aws.firewall.tcp_flags_array.add(\"urg\");\n}\n"
        }
      },
      {
        "rename": {
          "field": "json.event.netflow",
          "target_field": "aws.firewall.flow",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.event.flow_id",
          "target_field": "aws.firewall.flow.id",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "aws.firewall.flow.id",
          "type": "string",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "related.hosts",
          "value": "{{url.domain}}",
          "if": "ctx.url?.domain != null && ctx.url?.domain != \"\"",
          "allow_duplicates": false
        }
      },
      {
        "append": {
          "if": "ctx?.source?.ip != null",
          "field": "related.ip",
          "value": "{{source.ip}}",
          "allow_duplicates": false
        }
      },
      {
        "append": {
          "if": "ctx?.destination?.ip != null",
          "field": "related.ip",
          "value": "{{destination.ip}}",
          "allow_duplicates": false
        }
      },
      {
        "community_id": {
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "description": "This script processor iterates over the whole document to remove fields with null values.",
          "source": "void handleMap(Map map) {\n  for (def x : map.values()) {\n    if (x instanceof Map) {\n        handleMap(x);\n    } else if (x instanceof List) {\n        handleList(x);\n    }\n  }\n  map.values().removeIf(v -> v == null);\n}\nvoid handleList(List list) {\n  for (def x : list) {\n      if (x instanceof Map) {\n          handleMap(x);\n      } else if (x instanceof List) {\n          handleList(x);\n      }\n  }\n}\nhandleMap(ctx);\n"
        }
      },
      {
        "remove": {
          "field": "json",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains(\"preserve_original_event\"))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-aws.firewall_logs@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "logs-crowdstrike.fdr@custom-copy-10-11": {
    "processors": [
      {
        "append": {
          "field": "event.kind",
          "value": [
            "enrichment"
          ],
          "if": "ctx?.crowdstrike?.AgentLoadFlags != null && ctx?.event?.action == null",
          "tag": "append_event_kind"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": [
            "host"
          ],
          "if": "ctx?.crowdstrike?.AgentLoadFlags != null && ctx?.event?.action == null",
          "tag": "append_event_category"
        }
      },
      {
        "enrich": {
          "field": "observer.serial_number",
          "policy_name": "crowdstrike-policy-host-details",
          "target_field": "cs",
          "ignore_missing": true,
          "if": "ctx.event?.action == \"EndOfProcess\"",
          "tag": "enrich",
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "cs.host.name",
          "target_field": "host.name",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "cs.observer.serial_number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "cs.crowdstrike.SensorGroupingTags",
          "target_field": "crowdstrike.SensorGroupingTags",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "cs.crowdstrike.FalconGroupingTags",
          "target_field": "crowdstrike.FalconGroupingTags",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "tags",
          "value": [
            "enrich5"
          ],
          "if": "ctx.event?.action == \"EndOfProcess\"",
          "ignore_failure": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "Processor {{ _ingest.on_failure_processor_type }} with tag {{ _ingest.on_failure_processor_tag }} in pipeline {{ _ingest.on_failure_pipeline }} failed with message {{ _ingest.on_failure_message }}"
        }
      }
    ]
  },
  "metrics-system.diskio-1.20.4": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-system.diskio@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "system"
      }
    }
  },
  "metrics-kubernetes.event-1.26.0": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-kubernetes.event@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "kubernetes"
      }
    }
  },
  "logs-okta.system-1.10.2": {
    "description": "Pipeline for Okta system logs.",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.4.0"
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original"
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "json"
        }
      },
      {
        "script": {
          "description": "Drops null/empty values recursively",
          "lang": "painless",
          "source": "boolean drop(Object o) {\n  if (o == null || o == \"\") {\n    return true;\n  } else if (o instanceof Map) {\n    ((Map) o).values().removeIf(v -> drop(v));\n    return (((Map) o).size() == 0);\n  } else if (o instanceof List) {\n    ((List) o).removeIf(v -> drop(v));\n    return (((List) o).length == 0);\n  }\n  return false;\n}\ndrop(ctx);\n"
        }
      },
      {
        "convert": {
          "field": "json.uuid",
          "target_field": "_id",
          "type": "string",
          "ignore_failure": true,
          "if": "ctx?.json?.uuid != null && ctx?.json?.uuid != \"\""
        }
      },
      {
        "date": {
          "field": "json.published",
          "formats": [
            "ISO8601"
          ],
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "rename": {
          "field": "json.displayMessage",
          "target_field": "okta.display_message",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.eventType",
          "target_field": "okta.event_type",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "iam",
          "if": "[\"group.user_membership.add\",\"group.user_membership.remove\",\n\"user.lifecycle.activate\",\"user.lifecycle.create\",\n\"user.lifecycle.deactivate\",\"user.lifecycle.suspend\",\n\"user.lifecycle.unsuspend\"].contains(ctx?.okta?.event_type)\n"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "configuration",
          "if": "[\"policy.lifecycle.activate\",\"policy.lifecycle.create\",\n\"policy.lifecycle.deactivate\",\"policy.lifecycle.delete\",\n\"policy.lifecycle.update\",\"policy.rule.activate\",\"policy.rule.add\",\n\"policy.rule.deactivate\",\"policy.rule.delete\",\n\"application.lifecycle.create\",\"application.lifecycle.delete\",\n\"policy.rule.update\",\"application.lifecycle.activate\",\n\"application.lifecycle.deactivate\",\"application.lifecycle.update\"].contains(ctx?.okta?.event_type)\n"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "authentication",
          "if": "[\"user.session.start\",\"user.session.end\",\"user.authentication.sso\",\"policy.evaluate_sign_on\"].contains(ctx?.okta?.event_type)"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "session",
          "if": "[\"user.session.start\",\"user.session.end\"].contains(ctx?.okta?.event_type)"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "info",
          "if": "[\"system.org.rate_limit.warning\",\"system.org.rate_limit.violation\",\n\"core.concurrency.org.limit.violation\"].contains(ctx?.okta?.event_type)\n"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "network",
          "if": "[\"security.request.blocked\"].contains(ctx?.okta?.event_type)"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "network",
          "if": "[\"system.org.rate_limit.warning\",\"system.org.rate_limit.violation\",\n\"core.concurrency.org.limit.violation\",\"security.request.blocked\"].contains(ctx?.okta?.event_type)\n"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "start",
          "if": "[\"user.session.start\"].contains(ctx?.okta?.event_type)"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "end",
          "if": "[\"user.session.end\"].contains(ctx?.okta?.event_type)"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "group",
          "if": "[\"group.user_membership.add\",\"group.user_membership.remove\"].contains(ctx?.okta?.event_type)"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "user",
          "if": "[\"user.lifecycle.activate\",\"user.lifecycle.create\",\n\"user.lifecycle.deactivate\",\"user.lifecycle.suspend\",\n\"user.lifecycle.unsuspend\",\"user.authentication.sso\",\n\"user.session.start\",\"user.session.end\",\"application.user_membership.add\",\n\"application.user_membership.remove\",\"application.user_membership.change_username\"].contains(ctx?.okta?.event_type)\n"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "change",
          "if": "[\"user.lifecycle.activate\",\"user.lifecycle.deactivate\",\n\"user.lifecycle.suspend\",\"user.lifecycle.unsuspend\",\n\"group.user_membership.add\",\"group.user_membership.remove\",\n\"policy.lifecycle.activate\",\"policy.lifecycle.deactivate\",\n\"policy.lifecycle.update\",\"policy.rule.activate\",\"policy.rule.add\",\n\"policy.rule.deactivate\",\"policy.rule.update\",\"application.user_membership.add\",\n\"application.user_membership.remove\",\"application.user_membership.change_username\"].contains(ctx?.okta?.event_type)\n"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "creation",
          "if": "[\"user.lifecycle.create\",\"policy.lifecycle.create\",\"application.lifecycle.create\"].contains(ctx?.okta?.event_type)"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "deletion",
          "if": "[\"policy.lifecycle.delete\",\"application.lifecycle.delete\"].contains(ctx?.okta?.event_type)"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "info",
          "if": "[\"policy.evaluate_sign_on\"].contains(ctx?.okta?.event_type)"
        }
      },
      {
        "rename": {
          "field": "json.uuid",
          "target_field": "okta.uuid",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.actor.alternateId",
          "target_field": "okta.actor.alternate_id",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.actor.displayName",
          "target_field": "okta.actor.display_name",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.actor.id",
          "target_field": "okta.actor.id",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.actor.type",
          "target_field": "okta.actor.type",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.client.device",
          "target_field": "okta.client.device",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.client.geographicalContext.geolocation",
          "target_field": "client.geo.location",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.client.geographicalContext.city",
          "target_field": "client.geo.city_name",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.client.geographicalContext.state",
          "target_field": "client.geo.region_name",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.client.geographicalContext.country",
          "target_field": "client.geo.country_name",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.client.id",
          "target_field": "okta.client.id",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "json.client.ipAddress",
          "target_field": "okta.client.ip",
          "type": "ip",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.client.userAgent.browser",
          "target_field": "okta.client.user_agent.browser",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.client.userAgent.os",
          "target_field": "okta.client.user_agent.os",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.client.userAgent.rawUserAgent",
          "target_field": "okta.client.user_agent.raw_user_agent",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.client.zone",
          "target_field": "okta.client.zone",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.outcome.reason",
          "target_field": "okta.outcome.reason",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.outcome.result",
          "target_field": "okta.outcome.result",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.target",
          "target_field": "okta.target",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.transaction.id",
          "target_field": "okta.transaction.id",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.transaction.type",
          "target_field": "okta.transaction.type",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "okta.debug_context.debug_data.flattened",
          "copy_from": "json.debugContext.debugData",
          "ignore_failure": true
        }
      },
      {
        "json": {
          "field": "okta.debug_context.debug_data.flattened.logOnlySecurityData",
          "ignore_failure": true
        }
      },
      {
        "dissect": {
          "field": "okta.debug_context.debug_data.flattened.behaviors",
          "pattern": "{%{okta.debug_context.debug_data.flattened.behaviors}}",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "kv": {
          "field": "okta.debug_context.debug_data.flattened.behaviors",
          "field_split": ", ",
          "value_split": "=",
          "target_field": "_behaviors_object",
          "if": "ctx.okta?.debug_context?.debug_data?.flattened?.behaviors != null"
        }
      },
      {
        "remove": {
          "field": "okta.debug_context.debug_data.flattened.behaviors",
          "if": "ctx._behaviors_object != null"
        }
      },
      {
        "rename": {
          "field": "_behaviors_object",
          "target_field": "okta.debug_context.debug_data.flattened.behaviors",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "dissect": {
          "field": "okta.debug_context.debug_data.flattened.risk",
          "pattern": "{%{okta.debug_context.debug_data.flattened.risk}}",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "kv": {
          "field": "okta.debug_context.debug_data.flattened.risk",
          "field_split": ", ",
          "value_split": "=",
          "target_field": "_risk_object",
          "if": "ctx.okta?.debug_context?.debug_data?.flattened?.risk != null"
        }
      },
      {
        "remove": {
          "field": "okta.debug_context.debug_data.flattened.risk",
          "if": "ctx._risk_object != null"
        }
      },
      {
        "rename": {
          "field": "_risk_object",
          "target_field": "okta.debug_context.debug_data.flattened.risk",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.debugContext.debugData.deviceFingerprint",
          "target_field": "okta.debug_context.debug_data.device_fingerprint",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.debugContext.debugData.requestId",
          "target_field": "okta.debug_context.debug_data.request_id",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.debugContext.debugData.requestUri",
          "target_field": "okta.debug_context.debug_data.request_uri",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.debugContext.debugData.threatSuspected",
          "target_field": "okta.debug_context.debug_data.threat_suspected",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.debugContext.debugData.url",
          "target_field": "okta.debug_context.debug_data.url",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "okta.debug_context.debug_data.risk_level",
          "value": "{{{okta.debug_context.debug_data.flattened.logOnlySecurityData.risk.level}}}",
          "if": "ctx.okta?.debug_context?.debug_data?.flattened?.logOnlySecurityData?.risk?.level != null && ctx.okta?.debug_context?.debug_data?.flattened?.logOnlySecurityData?.risk?.level != \"\""
        }
      },
      {
        "set": {
          "field": "okta.debug_context.debug_data.risk_level",
          "value": "{{{okta.debug_context.debug_data.flattened.risk.level}}}",
          "if": "ctx.okta?.debug_context?.debug_data?.risk_level == null && ctx.okta?.debug_context?.debug_data?.flattened?.risk != null && ctx.okta?.debug_context?.debug_data?.flattened?.risk != \"\""
        }
      },
      {
        "rename": {
          "field": "json.authenticationContext.authenticationProvider",
          "target_field": "okta.authentication_context.authentication_provider",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.authenticationContext.authenticationStep",
          "target_field": "okta.authentication_context.authentication_step",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.authenticationContext.credentialProvider",
          "target_field": "okta.authentication_context.credential_provider",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.authenticationContext.credentialType",
          "target_field": "okta.authentication_context.credential_type",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.authenticationContext.externalSessionId",
          "target_field": "okta.authentication_context.external_session_id",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.authenticationContext.interface",
          "target_field": "okta.authentication_context.authentication_provider",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.authenticationContext.issuer",
          "target_field": "okta.authentication_context.issuer",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.securityContext.asNumber",
          "target_field": "okta.security_context.as.number",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.securityContext.asOrg",
          "target_field": "okta.security_context.as.organization.name",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.securityContext.domain",
          "target_field": "okta.security_context.domain",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.securityContext.isProxy",
          "target_field": "okta.security_context.is_proxy",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.securityContext.isp",
          "target_field": "okta.security_context.isp",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.request.ipChain",
          "target_field": "okta.request.ip_chain",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "foreach": {
          "field": "okta.request.ip_chain",
          "processor": {
            "rename": {
              "field": "_ingest._value.geographicalContext",
              "target_field": "_ingest._value.geographical_context",
              "ignore_missing": true,
              "ignore_failure": true
            }
          },
          "ignore_missing": true
        }
      },
      {
        "foreach": {
          "field": "okta.request.ip_chain",
          "processor": {
            "rename": {
              "field": "_ingest._value.geographical_context.postalCode",
              "target_field": "_ingest._value.geographical_context.postal_code",
              "ignore_missing": true,
              "ignore_failure": true
            }
          },
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "okta.client.user_agent.raw_user_agent",
          "target_field": "user_agent.original",
          "type": "string",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "client.ip",
          "copy_from": "okta.client.ip",
          "if": "ctx?.okta?.client?.ip != null"
        }
      },
      {
        "set": {
          "field": "source.ip",
          "copy_from": "okta.client.ip",
          "if": "ctx?.okta?.client?.ip != null"
        }
      },
      {
        "convert": {
          "field": "okta.event_type",
          "target_field": "event.action",
          "type": "string",
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "okta.security_context.as.organization.name",
          "target_field": "client.as.organization.name",
          "type": "string",
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "okta.security_context.domain",
          "target_field": "client.domain",
          "type": "string",
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "okta.security_context.domain",
          "target_field": "source.domain",
          "type": "string",
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "okta.uuid",
          "target_field": "event.id",
          "type": "string",
          "ignore_failure": true
        }
      },
      {
        "lowercase": {
          "field": "okta.outcome.result",
          "target_field": "okta.outcome.result_lower",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "success",
          "if": "ctx?.okta?.outcome?.result_lower != null && (ctx?.okta?.outcome?.result_lower == \"success\" || ctx?.okta?.outcome?.result_lower == \"allow\")"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "failure",
          "if": "ctx?.okta?.outcome?.result_lower != null && (ctx?.okta?.outcome?.result_lower == \"failure\" || ctx?.okta?.outcome?.result_lower == \"deny\")"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "unknown",
          "if": "ctx?.event?.outcome == null"
        }
      },
      {
        "remove": {
          "field": "okta.outcome.result_lower",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "source": "def arr = ctx?.okta?.target;\nif (arr != null) {\n  for (def i = 0; i < arr.length; i++) {\n    arr[i][\"alternate_id\"] = arr[i][\"alternateId\"];\n    arr[i].remove(\"alternateId\");\n    arr[i][\"display_name\"] = arr[i][\"displayName\"];\n    arr[i].remove(\"displayName\");\n    arr[i].remove(\"detailEntry\");\n  }\n}\n"
        }
      },
      {
        "script": {
          "lang": "painless",
          "source": "def arr = ctx?.okta?.target;\nif (arr != null) {\n  for (def i = 0; i < arr.length; i++) {\n    if (arr[i][\"type\"].toLowerCase().contains(\"user\")) {\n      ctx[\"okta_target_user\"] = arr[i];\n      break;\n    }\n  }\n}\n",
          "if": "ctx?.okta?.event_type != null && ctx?.okta?.event_type.contains(\"user.\")"
        }
      },
      {
        "script": {
          "lang": "painless",
          "source": "def arr = ctx?.okta?.target;\nif (arr != null) {\n  for (def i = 0; i < arr.length; i++) {\n    if (arr[i][\"type\"].toLowerCase().contains(\"group\")) {\n      ctx[\"okta_target_group\"] = arr[i];\n      break;\n    }\n  }\n}\n",
          "if": "ctx?.okta?.event_type != null && ctx?.okta?.event_type.contains(\"group.\")"
        }
      },
      {
        "rename": {
          "field": "okta_target_user.display_name",
          "target_field": "user.target.full_name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "okta_target_user.id",
          "target_field": "user.target.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "okta_target_user.login",
          "target_field": "user.target.email",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "okta_target_group.display_name",
          "target_field": "user.target.group.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "okta_target_group.id",
          "target_field": "user.target.group.id",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": [
            "okta_target_user",
            "okta_target_group"
          ],
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "client.user.id",
          "value": "{{okta.actor.id}}",
          "ignore_empty_value": true,
          "if": "ctx?.okta?.actor?.id != null"
        }
      },
      {
        "set": {
          "field": "source.user.id",
          "value": "{{okta.actor.id}}",
          "ignore_empty_value": true,
          "if": "ctx?.okta?.actor?.id != null"
        }
      },
      {
        "set": {
          "field": "client.user.full_name",
          "value": "{{okta.actor.display_name}}",
          "ignore_empty_value": true,
          "if": "ctx?.okta?.actor?.display_name != null"
        }
      },
      {
        "set": {
          "field": "source.user.full_name",
          "value": "{{okta.actor.display_name}}",
          "ignore_empty_value": true,
          "if": "ctx?.okta?.actor?.display_name != null"
        }
      },
      {
        "set": {
          "field": "user.full_name",
          "value": "{{okta.actor.display_name}}",
          "ignore_empty_value": true,
          "if": "ctx?.okta?.actor?.display_name != null"
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{okta.actor.display_name}}",
          "allow_duplicates": false,
          "if": "ctx?.okta?.actor?.display_name != null"
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{user.target.full_name}}",
          "allow_duplicates": false,
          "if": "ctx?.user?.target?.full_name != null"
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{source.ip}}",
          "allow_duplicates": false,
          "if": "ctx?.source?.ip != null"
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{destination.ip}}",
          "allow_duplicates": false,
          "if": "ctx?.destination?.ip != null"
        }
      },
      {
        "remove": {
          "field": "json",
          "ignore_missing": true
        }
      },
      {
        "user_agent": {
          "field": "user_agent.original",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "source.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "field": "destination.ip",
          "target_field": "destination.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "destination.ip",
          "target_field": "destination.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.asn",
          "target_field": "source.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.organization_name",
          "target_field": "source.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "destination.as.asn",
          "target_field": "destination.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "destination.as.organization_name",
          "target_field": "destination.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-okta.system@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "okta"
      }
    }
  },
  "metrics-aws.rds-1.25.2": {
    "description": "Pipeline for RDS metrics",
    "processors": [
      {
        "rename": {
          "field": "aws.rds.metrics.BurstBalance.avg",
          "target_field": "aws.rds.burst_balance.pct",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.CPUUtilization.avg",
          "target_field": "aws.rds.cpu.total.pct",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.CPUCreditUsage.avg",
          "target_field": "aws.rds.cpu.credit_usage",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.CPUCreditBalance.avg",
          "target_field": "aws.rds.cpu.credit_balance",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.DatabaseConnections.avg",
          "target_field": "aws.rds.database_connections",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.DiskQueueDepth.avg",
          "target_field": "aws.rds.disk_queue_depth",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.FailedSQLServerAgentJobsCount.avg",
          "target_field": "aws.rds.failed_sql_server_agent_jobs",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.FreeableMemory.avg",
          "target_field": "aws.rds.freeable_memory.bytes",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.FreeStorageSpace.avg",
          "target_field": "aws.rds.free_storage.bytes",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.MaximumUsedTransactionIDs.avg",
          "target_field": "aws.rds.maximum_used_transaction_ids",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.OldestReplicationSlotLag.avg",
          "target_field": "aws.rds.oldest_replication_slot_lag.mb",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.ReadIOPS.avg",
          "target_field": "aws.rds.read.iops",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.CommitThroughput.avg",
          "target_field": "aws.rds.throughput.commit",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.DeleteThroughput.avg",
          "target_field": "aws.rds.throughput.delete",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.DDLThroughput.avg",
          "target_field": "aws.rds.throughput.ddl",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.DMLThroughput.avg",
          "target_field": "aws.rds.throughput.dml",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.InsertThroughput.avg",
          "target_field": "aws.rds.throughput.insert",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.NetworkThroughput.avg",
          "target_field": "aws.rds.throughput.network",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.NetworkReceiveThroughput.avg",
          "target_field": "aws.rds.throughput.network_receive",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.NetworkTransmitThroughput.avg",
          "target_field": "aws.rds.throughput.network_transmit",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.ReadThroughput.avg",
          "target_field": "aws.rds.throughput.read",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.SelectThroughput.avg",
          "target_field": "aws.rds.throughput.select",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.UpdateThroughput.avg",
          "target_field": "aws.rds.throughput.update",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.FreeStorageSpace.avg",
          "target_field": "aws.rds.free_storage.bytes",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.WriteThroughput.avg",
          "target_field": "aws.rds.throughput.write",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.CommitLatency.avg",
          "target_field": "aws.rds.latency.commit",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.DDLLatency.avg",
          "target_field": "aws.rds.latency.ddl",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.DMLLatency.avg",
          "target_field": "aws.rds.latency.dml",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.InsertLatency.avg",
          "target_field": "aws.rds.latency.insert",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.ReadLatency.avg",
          "target_field": "aws.rds.latency.read",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.SelectLatency.avg",
          "target_field": "aws.rds.latency.select",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.UpdateLatency.avg",
          "target_field": "aws.rds.latency.update",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.WriteLatency.avg",
          "target_field": "aws.rds.latency.write",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.DeleteLatency.avg",
          "target_field": "aws.rds.latency.delete",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.ReplicaLag.avg",
          "target_field": "aws.rds.replica_lag.sec",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.BinLogDiskUsage.avg",
          "target_field": "aws.rds.disk_usage.bin_log.bytes",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.ReplicationSlotDiskUsage.avg",
          "target_field": "aws.rds.disk_usage.replication_slot.mb",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.TransactionLogsDiskUsage.avg",
          "target_field": "aws.rds.disk_usage.transaction_logs.mb",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.SwapUsage.avg",
          "target_field": "aws.rds.swap_usage.bytes",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.TransactionLogsGeneration.avg",
          "target_field": "aws.rds.transaction_logs_generation",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.WriteIOPS.avg",
          "target_field": "aws.rds.write.iops",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.Queries.avg",
          "target_field": "aws.rds.queries",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.Deadlocks.avg",
          "target_field": "aws.rds.deadlocks",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.VolumeBytesUsed.avg",
          "target_field": "aws.rds.volume_used.bytes",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.FreeLocalStorage.avg",
          "target_field": "aws.rds.free_local_storage.bytes",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.ActiveTransactions.avg",
          "target_field": "aws.rds.transactions.active",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.BlockedTransactions.avg",
          "target_field": "aws.rds.transactions.blocked",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.LoginFailures.avg",
          "target_field": "aws.rds.login_failures",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.AuroraBinlogReplicaLag.avg",
          "target_field": "aws.rds.aurora_bin_log_replica_lag",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.aurora_bin_log_replica_lag.avg",
          "target_field": "aws.rds.aurora_global_db.replicated_write_io.bytes",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.AuroraGlobalDBDataTransferBytes.avg",
          "target_field": "aws.rds.aurora_global_db.data_transfer.bytes",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.AuroraGlobalDBReplicationLag.avg",
          "target_field": "aws.rds.aurora_global_db.replication_lag.ms",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.AuroraReplicaLag.avg",
          "target_field": "aws.rds.aurora_replica.lag.ms",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.AuroraReplicaLagMaximum.avg",
          "target_field": "aws.rds.aurora_replica.lag_max.ms",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.AuroraReplicaLagMinimum.avg",
          "target_field": "aws.rds.aurora_replica.lag_min.ms",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.BacktrackChangeRecordsCreationRate.avg",
          "target_field": "aws.rds.backtrack_change_records.creation_rate",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.BacktrackChangeRecordsStored.avg",
          "target_field": "aws.rds.backtrack_change_records.stored",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.BacktrackWindowActual.avg",
          "target_field": "aws.rds.backtrack_window.actual",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.BacktrackWindowAlert.avg",
          "target_field": "aws.rds.backtrack_window.alert",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.BackupRetentionPeriodStorageUsed.avg",
          "target_field": "aws.rds.storage_used.backup_retention_period.bytes",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.SnapshotStorageUsed.avg",
          "target_field": "aws.rds.storage_used.snapshot.bytes",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.BufferCacheHitRatio.avg",
          "target_field": "aws.rds.cache_hit_ratio.buffer",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.ResultSetCacheHitRatio.avg",
          "target_field": "aws.rds.cache_hit_ratio.result_set",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.EngineUptime.avg",
          "target_field": "aws.rds.engine_uptime.sec",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.VolumeReadIOPs.avg",
          "target_field": "aws.rds.volume.read.iops",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.VolumeWriteIOPs.avg",
          "target_field": "aws.rds.volume.write.iops",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.RDSToAuroraPostgreSQLReplicaLag.avg",
          "target_field": "aws.rds.rds_to_aurora_postgresql_replica_lag.sec",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.TotalBackupStorageBilled.avg",
          "target_field": "aws.rds.backup_storage_billed_total.bytes",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "aws.rds.metrics.AuroraVolumeBytesLeftTotal.avg",
          "target_field": "aws.rds.aurora_volume_left_total.bytes",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": [
            "aws.rds.metrics.BurstBalance",
            "aws.rds.metrics.CPUUtilization",
            "aws.rds.metrics.CPUCreditUsage",
            "aws.rds.metrics.CPUCreditBalance",
            "aws.rds.metrics.DatabaseConnections",
            "aws.rds.metrics.DiskQueueDepth",
            "aws.rds.metrics.FailedSQLServerAgentJobsCount",
            "aws.rds.metrics.FreeableMemory",
            "aws.rds.metrics.FreeStorageSpace",
            "aws.rds.metrics.MaximumUsedTransactionIDs",
            "aws.rds.metrics.OldestReplicationSlotLag",
            "aws.rds.metrics.ReadIOPS.avg",
            "aws.rds.metrics.CommitThroughput",
            "aws.rds.metrics.DeleteThroughput",
            "aws.rds.metrics.DDLThroughput",
            "aws.rds.metrics.DMLThroughput",
            "aws.rds.metrics.InsertThroughput",
            "aws.rds.metrics.NetworkThroughput",
            "aws.rds.metrics.NetworkReceiveThroughput",
            "aws.rds.metrics.NetworkTransmitThroughput",
            "aws.rds.metrics.ReadThroughput",
            "aws.rds.metrics.SelectThroughput",
            "aws.rds.metrics.UpdateThroughput",
            "aws.rds.metrics.WriteThroughput",
            "aws.rds.metrics.CommitLatency",
            "aws.rds.metrics.DDLLatency",
            "aws.rds.metrics.DMLLatency",
            "aws.rds.metrics.InsertLatency",
            "aws.rds.metrics.ReadLatency",
            "aws.rds.metrics.SelectLatency",
            "aws.rds.metrics.UpdateLatency",
            "aws.rds.metrics.WriteLatency",
            "aws.rds.metrics.DeleteLatency",
            "aws.rds.metrics.ReplicaLag",
            "aws.rds.metrics.BinLogDiskUsage",
            "aws.rds.metrics.ReplicationSlotDiskUsage",
            "aws.rds.metrics.TransactionLogsDiskUsage",
            "aws.rds.metrics.SwapUsage",
            "aws.rds.metrics.TransactionLogsGeneration",
            "aws.rds.metrics.WriteIOPS",
            "aws.rds.metrics.Queries",
            "aws.rds.metrics.Deadlocks",
            "aws.rds.metrics.VolumeBytesUsed",
            "aws.rds.metrics.FreeLocalStorage",
            "aws.rds.metrics.ActiveTransactions",
            "aws.rds.metrics.BlockedTransactions",
            "aws.rds.metrics.LoginFailures",
            "aws.rds.metrics.AuroraBinlogReplicaLag",
            "aws.rds.metrics.aurora_bin_log_replica_lag",
            "aws.rds.metrics.AuroraGlobalDBDataTransferBytes",
            "aws.rds.metrics.AuroraGlobalDBReplicationLag",
            "aws.rds.metrics.AuroraReplicaLag",
            "aws.rds.metrics.AuroraReplicaLagMaximum",
            "aws.rds.metrics.AuroraReplicaLagMinimum",
            "aws.rds.metrics.BacktrackChangeRecordsCreationRate",
            "aws.rds.metrics.BacktrackChangeRecordsStored",
            "aws.rds.metrics.BacktrackWindowActual",
            "aws.rds.metrics.BacktrackWindowAlert",
            "aws.rds.metrics.BackupRetentionPeriodStorageUsed",
            "aws.rds.metrics.SnapshotStorageUsed",
            "aws.rds.metrics.BufferCacheHitRatio",
            "aws.rds.metrics.ResultSetCacheHitRatio",
            "aws.rds.metrics.EngineUptime",
            "aws.rds.metrics.VolumeReadIOPs",
            "aws.rds.metrics.VolumeWriteIOPs",
            "aws.rds.metrics.RDSToAuroraPostgreSQLReplicaLag",
            "aws.rds.metrics.TotalBackupStorageBilled",
            "aws.rds.metrics.AuroraVolumeBytesLeftTotal"
          ],
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "metrics-aws.rds@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "logs-elastic_agent.filebeat-1.3.5": {
    "processors": [
      {
        "pipeline": {
          "name": "logs-elastic_agent.filebeat@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "elastic_agent"
      }
    }
  },
  "metrics-aws.lambda-1.25.2": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-aws.lambda@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "logs-zscaler_zia.alerts-2.4.1": {
    "description": "Pipeline for Zscaler alert logs",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.4.0"
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true
        }
      },
      {
        "grok": {
          "field": "event.original",
          "patterns": [
            "<%{NUMBER:log.syslog.priority:long}>%{SYSLOGTIMESTAMP:_tmp.timestamp} \\[%{IPORHOST:destination.address}\\] %{GREEDYDATA:message}"
          ]
        }
      },
      {
        "grok": {
          "field": "message",
          "patterns": [
            "ZscalerNSS: Zscaler cloud configuration connection to  %{IPORHOST:destination.address}:%{NUMBER:destination.port:long} lost and unavailable for the past %{NUMBER:zscaler_zia.alerts.connection_lost_minutes:double} minutes",
            "ZscalerNSS: SIEM Feed connection \"%{GREEDYDATA:zscaler_zia.alerts.log_feed_name}\" to %{IPORHOST:destination.address}:%{NUMBER:destination.port:long} lost and unavailable for the past %{NUMBER:zscaler_zia.alerts.connection_lost_minutes:double} minutes"
          ],
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "destination.address",
          "target_field": "destination.ip",
          "type": "ip",
          "ignore_failure": true
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{destination.ip}}}",
          "if": "ctx?.destination?.ip != null",
          "ignore_failure": true
        }
      },
      {
        "date": {
          "field": "_tmp.timestamp",
          "target_field": "@timestamp",
          "ignore_failure": true,
          "formats": [
            "MMM  d HH:mm:ss",
            "MMM dd HH:mm:ss",
            "MMM d HH:mm:ss",
            "ISO8601"
          ]
        }
      },
      {
        "remove": {
          "field": [
            "_tmp"
          ],
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-zscaler_zia.alerts@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{{ _ingest.on_failure_message }}}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "zscaler_zia"
      }
    }
  },
  "logs-azure.eventhub-1.5.4-azure-shared-pipeline": {
    "description": "Pipeline for parsing Azure shared log fields.",
    "processors": [
      {
        "set": {
          "field": "cloud.provider",
          "value": "azure"
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}/RESOURCEGROUPS/%{GROUPID:azure.resource.group}/PROVIDERS/%{PROVIDERNAME:azure.resource.provider}/NAMESPACES/%{NAMESPACE:azure.resource.namespace}/AUTHORIZATIONRULES/%{RULE:azure.resource.authorization_rule}",
            "/subscriptions/%{SUBID:azure.subscription_id}/resourceGroups/%{GROUPID:azure.resource.group}/providers/%{PROVIDERNAME:azure.resource.provider}/namespaces/%{NAMESPACE:azure.resource.namespace}/authorizationRules/%{RULE:azure.resource.authorization_rule}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "GROUPID": ".+",
            "PROVIDERNAME": ".+",
            "NAMESPACE": ".+",
            "RULE": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}/RESOURCEGROUPS/%{GROUPID:azure.resource.group}/PROVIDERS/%{PROVIDERNAME:azure.resource.provider}/%{NAME:azure.resource.name}",
            "/subscriptions/%{SUBID:azure.subscription_id}/resourceGroups/%{GROUPID:azure.resource.group}/providers/%{PROVIDERNAME:azure.resource.provider}/%{NAME:azure.resource.name}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "GROUPID": ".+",
            "PROVIDERNAME": "([A-Za-z])\\w+.([A-Za-z])\\w+/([A-Za-z])\\w+.",
            "NAME": "((?!AUTHORIZATIONRULES).)*$"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}/RESOURCEGROUPS/%{GROUPID:azure.resource.group}/PROVIDERS/%{PROVIDERNAME:azure.resource.provider}/%{NAME:azure.resource.name}",
            "/subscriptions/%{SUBID:azure.subscription_id}/resourceGroups/%{GROUPID:azure.resource.group}/providers/%{PROVIDERNAME:azure.resource.provider}/%{NAME:azure.resource.name}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "GROUPID": ".+",
            "PROVIDERNAME": "([A-Za-z])\\w+.([A-Za-z])\\w+\\/([A-Za-z][^\\/])\\w+",
            "NAME": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/providers/%{PROVIDER:azure.resource.provider}",
            "/PROVIDERS/%{PROVIDER:azure.resource.provider}"
          ],
          "pattern_definitions": {
            "PROVIDER": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}/PROVIDERS/%{PROVIDERNAME:azure.resource.provider}",
            "/subscriptions/%{SUBID:azure.subscription_id}/providers/%{PROVIDERNAME:azure.resource.provider}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "PROVIDERNAME": "([A-Za-z])\\w+.([A-Za-z])\\w+\\/([A-Za-z][^\\/])\\w+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}/RESOURCEGROUPS/%{GROUPID:azure.resource.group}",
            "/subscriptions/%{SUBID:azure.subscription_id}/resourceGroups/%{GROUPID:azure.resource.group}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "GROUPID": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}",
            "/subscriptions/%{SUBID:azure.subscription_id}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}"
          },
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "azure.resource_id",
          "target_field": "azure.resource.id",
          "ignore_missing": true
        }
      },
      {
        "lowercase": {
          "field": "event.outcome",
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-azure.eventhub@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "azure"
      }
    }
  },
  "logs-okta.system@custom": {
    "processors": [
      {
        "script": {
          "lang": "painless",
          "source": "def arr = ctx?.okta?.target;\nif (arr != null) {\n  for (def i = 0; i < arr.length; i++) {\n    if (arr[i][\"type\"].toLowerCase().startsWith(\"appinstance\")) {\n      ctx[\"okta_target_custom_appinstance\"] = arr[i];\n      break;\n    }\n  }\n}",
          "if": "ctx?.okta?.target != null",
          "tag": "script-appinstance-custom",
          "description": "type is appinstance custom"
        }
      },
      {
        "set": {
          "field": "service.target.id",
          "copy_from": "okta_target_custom_appinstance.display_name",
          "ignore_empty_value": true,
          "tag": "set-custom-user-target-display-name"
        }
      },
      {
        "remove": {
          "field": "okta_target_custom_appinstance",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "field": "tags",
          "value": [
            "test1"
          ]
        }
      }
    ],
    "on_failure": [
      {
        "append": {
          "field": "error.message",
          "value": [
            "Processor {{ _ingest.on_failure_processor_type }} with tag {{ _ingest.on_failure_processor_tag }} in pipeline {{ _ingest.on_failure_pipeline }} failed with message {{ _ingest.on_failure_message }}"
          ]
        }
      }
    ]
  },
  "logs-windows.forwarded-1.15.0-powershell": {
    "description": "Pipeline for Windows Powershell events",
    "processors": [
      {
        "kv": {
          "description": "Split Event 800 event data fields.",
          "field": "winlog.event_data.param2",
          "target_field": "winlog.event_data",
          "field_split": "\n\t",
          "trim_key": "\n\t",
          "trim_value": "\n\t",
          "value_split": "=",
          "if": "ctx?.winlog?.event_id == \"800\""
        }
      },
      {
        "kv": {
          "description": "Split Events 4xx and 600 event data fields.",
          "field": "winlog.event_data.param3",
          "target_field": "winlog.event_data",
          "field_split": "\n\t",
          "trim_key": "\n\t",
          "trim_value": "\n\t",
          "value_split": "=",
          "if": "ctx?.winlog?.event_id != \"800\""
        }
      },
      {
        "set": {
          "field": "ecs.version",
          "value": "8.0.0"
        }
      },
      {
        "set": {
          "field": "log.level",
          "copy_from": "winlog.level",
          "ignore_empty_value": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.level != \"\""
        }
      },
      {
        "date": {
          "field": "winlog.time_created",
          "formats": [
            "ISO8601"
          ],
          "ignore_failure": true,
          "if": "ctx?.winlog?.time_created != null"
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "set": {
          "field": "event.code",
          "value": "{{winlog.event_id}}"
        }
      },
      {
        "set": {
          "field": "event.category",
          "value": "process"
        }
      },
      {
        "set": {
          "field": "event.type",
          "value": "start",
          "if": "ctx?.event.code == \"400\""
        }
      },
      {
        "set": {
          "field": "event.type",
          "value": "end",
          "if": "ctx?.event.code == \"403\""
        }
      },
      {
        "set": {
          "field": "event.type",
          "value": "info",
          "if": "ctx?.event?.type == null"
        }
      },
      {
        "convert": {
          "field": "winlog.event_data.SequenceNumber",
          "target_field": "event.sequence",
          "type": "long",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "winlog.record_id",
          "type": "string",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.HostId",
          "target_field": "process.entity_id",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.HostId != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.HostApplication",
          "target_field": "process.command_line",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.HostApplication != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.HostName",
          "target_field": "process.title",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.HostName != \"\""
        }
      },
      {
        "split": {
          "field": "winlog.event_data.UserId",
          "target_field": "_temp.user_parts",
          "separator": "\\\\",
          "if": "ctx?.winlog?.event_data?.UserId != null"
        }
      },
      {
        "set": {
          "field": "user.domain",
          "value": "{{_temp.user_parts.0}}",
          "ignore_failure": true,
          "ignore_empty_value": true,
          "if": "ctx?._temp?.user_parts != null && ctx._temp.user_parts.size() == 2"
        }
      },
      {
        "set": {
          "field": "user.name",
          "value": "{{_temp.user_parts.1}}",
          "ignore_failure": true,
          "ignore_empty_value": true,
          "if": "ctx?._temp?.user_parts != null && ctx._temp.user_parts.size() == 2"
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{user.name}}",
          "ignore_failure": true,
          "allow_duplicates": false,
          "if": "ctx?.user?.name != null"
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.NewEngineState",
          "target_field": "powershell.engine.new_state",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.NewEngineState != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.PreviousEngineState",
          "target_field": "powershell.engine.previous_state",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.PreviousEngineState != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.NewProviderState",
          "target_field": "powershell.provider.new_state",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.NewProviderState != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.ProviderName",
          "target_field": "powershell.provider.name",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.ProviderName != \"\""
        }
      },
      {
        "convert": {
          "field": "winlog.event_data.DetailTotal",
          "target_field": "powershell.total",
          "type": "long",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.DetailTotal != \"\""
        }
      },
      {
        "convert": {
          "field": "winlog.event_data.DetailSequence",
          "target_field": "powershell.sequence",
          "type": "long",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.DetailSequence != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.EngineVersion",
          "target_field": "powershell.engine.version",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.EngineVersion != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.PipelineId",
          "target_field": "powershell.pipeline_id",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.PipelineId != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.RunspaceId",
          "target_field": "powershell.runspace_id",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.RunspaceId != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.HostVersion",
          "target_field": "powershell.process.executable_version",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data?.HostVersion != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.CommandLine",
          "target_field": "powershell.command.value",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.CommandLine != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.CommandPath",
          "target_field": "powershell.command.path",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.CommandPath != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.CommandName",
          "target_field": "powershell.command.name",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.CommandName != \"\""
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.CommandType",
          "target_field": "powershell.command.type",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.CommandType != \"\""
        }
      },
      {
        "split": {
          "description": "Split Event 800 command invocation details.",
          "field": "winlog.event_data.param3",
          "separator": "\n",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx.event.code == \"800\""
        }
      },
      {
        "script": {
          "description": "Parses all command invocation detail raw lines, and converts them to an object, based on their type.\n - for unexpectedly formatted ones: {value: \"the raw line as it is\"}\n - for all:\n      * related_command: describes to what command it is related to\n      * value: the value for that detail line\n      * type: the type of the detail line, i.e.: CommandInvocation, ParameterBinding, NonTerminatingError\n - additionally, ParameterBinding adds a `name` field with the parameter name being bound.",
          "lang": "painless",
          "if": "ctx.event.code == \"800\"",
          "params": {
            "field": "param3"
          },
          "source": "def parseRawDetail(String raw) {\n    Pattern detailRegex = /^(.+)\\((.+)\\)\\:\\s*(.+)?$/;\n    Pattern parameterBindingRegex = /name\\=(.+);\\s*value\\=(.+)$/;\n\n    def matcher = detailRegex.matcher(raw);\n    if (!matcher.matches()) {\n        return [\"value\": raw];\n    }\n    def matches = new ArrayList();\n    for (def i = 0; i <= matcher.groupCount(); i++) {\n        matches.add(matcher.group(i));\n    }\n    \n    if (matches.length != 4) {\n        return [\"value\": raw];\n    }                \n    \n    if (matches[1] != \"ParameterBinding\") {\n        return [\n            \"type\": matches[1], \n            \"related_command\": matches[2], \n            \"value\": matches[3]\n        ];\n    }\n\n    matcher = parameterBindingRegex.matcher(matches[3]);\n    if (!matcher.matches()) {\n        return [\"value\": matches[4]];\n    }\n    def nameValMatches = new ArrayList();\n    for (def i = 0; i <= matcher.groupCount(); i++) {\n        nameValMatches.add(matcher.group(i));\n    }\n    if (nameValMatches.length !== 3) {\n        return [\"value\": matches[3]];\n    }\n\n    return [\n        \"type\": matches[1],\n        \"related_command\": matches[2],\n        \"name\": nameValMatches[1],\n        \"value\": nameValMatches[2]\n    ];\n}\n\nif (ctx?._temp == null) {\n    ctx._temp = new HashMap();\n}\n\nif (ctx._temp.details == null) {\n    ctx._temp.details = new ArrayList();\n}\n\ndef values = ctx?.winlog?.event_data[params[\"field\"]];\nif (values != null && values.length > 0) {\n    for (v in values) {\n        ctx._temp.details.add(parseRawDetail(v));\n    }\n}"
        }
      },
      {
        "rename": {
          "field": "_temp.details",
          "target_field": "powershell.command.invocation_details",
          "if": "ctx?._temp?.details != null && ctx?._temp?.details.length > 0"
        }
      },
      {
        "script": {
          "description": "Implements Windows-like SplitCommandLine",
          "lang": "painless",
          "if": "ctx?.process?.command_line != null && ctx.process.command_line != \"\"",
          "source": "// appendBSBytes appends n '\\\\' bytes to b and returns the resulting slice.\ndef appendBSBytes(StringBuilder b, int n) {\n    for (; n > 0; n--) {\n        b.append('\\\\');\n    }\n    return b;\n}\n\n// readNextArg splits command line string cmd into next\n// argument and command line remainder.\ndef readNextArg(String cmd) {\n    def b = new StringBuilder();\n    boolean inquote;\n    int nslash;\n    for (; cmd.length() > 0; cmd = cmd.substring(1)) {\n        def c = cmd.charAt(0);\n        if (c == (char)' ' || c == (char)0x09) {\n            if (!inquote) {\n                return [\n                    \"arg\":  appendBSBytes(b, nslash).toString(),\n                    \"rest\": cmd.substring(1)\n                ];\n            }\n        } else if (c == (char)'\"') {\n            b = appendBSBytes(b, nslash/2);\n            if (nslash%2 == 0) {\n                // use \"Prior to 2008\" rule from\n                // http://daviddeley.com/autohotkey/parameters/parameters.htm\n                // section 5.2 to deal with double double quotes\n                if (inquote && cmd.length() > 1 && cmd.charAt(1) == (char)'\"') {\n                    b.append(c);\n                    cmd = cmd.substring(1);\n                }\n                inquote = !inquote;\n            } else {\n                b.append(c);\n            }\n            nslash = 0;\n            continue;\n        } else if (c == (char)'\\\\') {\n            nslash++;\n            continue;\n        }\n        b = appendBSBytes(b, nslash);\n        nslash = 0;\n        b.append(c);\n    }\n    return [\n        \"arg\":  appendBSBytes(b, nslash).toString(), \n        \"rest\": ''\n    ];\n}\n\n// commandLineToArgv splits a command line into individual argument\n// strings, following the Windows conventions documented\n// at http://daviddeley.com/autohotkey/parameters/parameters.htm#WINARGV\n// Original implementation found at: https://github.com/golang/go/commit/39c8d2b7faed06b0e91a1ad7906231f53aab45d1\ndef commandLineToArgv(String cmd) {\n    def args = new ArrayList();\n    while (cmd.length() > 0) {\n        if (cmd.charAt(0) == (char)' ' || cmd.charAt(0) == (char)0x09) {\n            cmd = cmd.substring(1);\n            continue;\n        }\n        def next = readNextArg(cmd);\n        cmd = next.rest;\n        args.add(next.arg);\n    }\n    return args;\n}\n\nctx.process.args = commandLineToArgv(ctx.process.command_line);\nctx.process.args_count = ctx.process.args.length;"
        }
      },
      {
        "script": {
          "description": "Adds file information.",
          "lang": "painless",
          "if": "ctx?.winlog?.event_data?.ScriptName != null && ctx.winlog.event_data.ScriptName.length() > 1",
          "source": "def path = ctx.winlog.event_data.ScriptName;\ndef idx = path.lastIndexOf(\"\\\\\");\nif (idx > -1) {\n    if (ctx?.file == null) {\n        ctx.file = new HashMap();\n    }\n    ctx.file.name = path.substring(idx+1);\n    ctx.file.directory = path.substring(0, idx);\n\n    def extIdx = path.lastIndexOf(\".\");\n    if (extIdx > -1) {\n        ctx.file.extension = path.substring(extIdx+1);\n    }\n}"
        }
      },
      {
        "rename": {
          "field": "winlog.event_data.ScriptName",
          "target_field": "file.path",
          "ignore_failure": true,
          "ignore_missing": true,
          "if": "ctx?.winlog?.event_data?.ScriptName != \"\""
        }
      },
      {
        "remove": {
          "field": [
            "_temp",
            "winlog.event_data.param1",
            "winlog.event_data.param2",
            "winlog.event_data.param3",
            "winlog.event_data.SequenceNumber",
            "winlog.event_data.DetailTotal",
            "winlog.event_data.DetailSequence",
            "winlog.event_data.UserId",
            "winlog.time_created",
            "winlog.level"
          ],
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "script": {
          "description": "Remove all empty values from event_data.",
          "lang": "painless",
          "source": "ctx?.winlog?.event_data?.entrySet().removeIf(entry -> entry.getValue() == null || entry.getValue().equals(\"\"));"
        }
      },
      {
        "remove": {
          "description": "Remove empty event data.",
          "field": "winlog.event_data",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx?.winlog?.event_data != null && ctx.winlog.event_data.size() == 0"
        }
      },
      {
        "pipeline": {
          "name": "logs-windows.forwarded@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "windows"
      }
    }
  },
  "metrics-kubernetes.node-1.26.0": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-kubernetes.node@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "kubernetes"
      }
    }
  },
  "logs-microsoft_dhcp.log-1.7.0": {
    "description": "Pipeline for processing Microsoft DHCP Server logs.",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.4.0"
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "set": {
          "field": "event.timezone",
          "value": "{{{_conf.tz_offset}}}",
          "if": "ctx?._conf?.tz_offset != null && ctx._conf.tz_offset != 'local'"
        }
      },
      {
        "set": {
          "field": "event.original",
          "override": false,
          "copy_from": "message"
        }
      },
      {
        "remove": {
          "field": "message",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-microsoft_dhcp.log-1.7.0-dhcp",
          "if": "ctx?.log?.file?.path != null && !ctx.log.file.path.contains('V6')"
        }
      },
      {
        "pipeline": {
          "name": "logs-microsoft_dhcp.log-1.7.0-dhcpv6",
          "if": "ctx?.log?.file?.path != null && ctx.log.file.path.contains('V6')"
        }
      },
      {
        "foreach": {
          "field": "observer.mac",
          "ignore_missing": true,
          "processor": {
            "gsub": {
              "field": "_ingest._value",
              "pattern": "[:]",
              "replacement": "-"
            }
          }
        }
      },
      {
        "foreach": {
          "field": "observer.mac",
          "ignore_missing": true,
          "processor": {
            "uppercase": {
              "field": "_ingest._value"
            }
          }
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": [
            "_tmp_",
            "_conf"
          ],
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-microsoft_dhcp.log@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "Processor \"{{ _ingest.on_failure_processor_type }}\" with tag \"{{ _ingest.on_failure_processor_tag }}\" in pipeline \"{{ _ingest.on_failure_pipeline }}\" failed with message \"{{ _ingest.on_failure_message }}\""
        }
      },
      {
        "remove": {
          "field": [
            "_tmp_",
            "_conf"
          ]
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "microsoft_dhcp"
      }
    }
  },
  "logs-panw.panos-3.1.1-traffic": {
    "description": "Pipeline for PanOS Traffic Logs.",
    "processors": [
      {
        "csv": {
          "field": "message",
          "target_fields": [
            "panw.panos.source.ip",
            "panw.panos.destination.ip",
            "panw.panos.source.nat.ip",
            "panw.panos.destination.nat.ip",
            "panw.panos.ruleset",
            "panw.panos.source.user",
            "panw.panos.destination.user",
            "panw.panos.network.application",
            "panw.panos.virtual_sys",
            "panw.panos.source.zone",
            "panw.panos.destination.zone",
            "panw.panos.inbound_interface",
            "panw.panos.outbound_interface",
            "panw.panos.log_profile",
            "_temp_.future_use1",
            "panw.panos.flow_id",
            "panw.panos.repeat_count",
            "panw.panos.source.port",
            "panw.panos.destination.port",
            "panw.panos.source.nat.port",
            "panw.panos.destination.nat.port",
            "_temp_.labels",
            "panw.panos.protocol",
            "panw.panos.action",
            "panw.panos.network.bytes",
            "panw.panos.bytes_sent",
            "panw.panos.bytes_received",
            "panw.panos.network.packets",
            "panw.panos.start_time",
            "panw.panos.elapsed_time",
            "panw.panos.url.category",
            "_temp_.future_use2",
            "panw.panos.sequence_number",
            "panw.panos.action_flags",
            "_temp_.srcloc",
            "_temp_.dstloc",
            "_temp_.future_use3",
            "panw.panos.packets_sent",
            "panw.panos.packets_received",
            "panw.panos.endreason",
            "panw.panos.device_group_hierarchy1",
            "panw.panos.device_group_hierarchy2",
            "panw.panos.device_group_hierarchy3",
            "panw.panos.device_group_hierarchy4",
            "panw.panos.vsys_name",
            "panw.panos.device_name",
            "panw.panos.action_source",
            "panw.panos.source_vm_uuid",
            "panw.panos.destination_vm_uuid",
            "panw.panos.imsi",
            "panw.panos.imei",
            "panw.panos.parent_session.id",
            "panw.panos.parent_session.start_time",
            "panw.panos.tunnel_type",
            "panw.panos.sctp.assoc_id",
            "panw.panos.sctp.chunks",
            "panw.panos.sctp.chunks_sent",
            "panw.panos.sctp.chunks_received",
            "panw.panos.rule_uuid",
            "panw.panos.http2_connection",
            "panw.panos.link.change_count",
            "panw.panos.policy.id",
            "panw.panos.link.switches",
            "panw.panos.sdwan.cluster.name",
            "panw.panos.sdwan.device_type",
            "panw.panos.sdwan.cluster.type",
            "panw.panos.sdwan.site",
            "panw.panos.dynamic_user.group.name",
            "panw.panos.xff.ip",
            "panw.panos.src.category",
            "panw.panos.src.profile",
            "panw.panos.src.model",
            "panw.panos.src.vendor",
            "panw.panos.src.os.family",
            "panw.panos.src.os.version",
            "panw.panos.src.host",
            "panw.panos.src.mac",
            "panw.panos.dst.category",
            "panw.panos.dst.profile",
            "panw.panos.dst.model",
            "panw.panos.dst.vendor",
            "panw.panos.dst.os.family",
            "panw.panos.dst.os.version",
            "panw.panos.dst.host",
            "panw.panos.dst.mac",
            "panw.panos.container.id",
            "panw.panos.pod.namespace",
            "panw.panos.pod.name",
            "panw.panos.src.external_dynamic_list",
            "panw.panos.dst.external_dynamic_list",
            "panw.panos.host.id",
            "panw.panos.serial_number",
            "panw.panos.src.dynamic_address_group",
            "panw.panos.dst.dynamic_address_group",
            "panw.panos.session.owner",
            "_temp_.high_res_timestamp",
            "panw.panos.nsdsai_sst",
            "panw.panos.nsdsai_sd",
            "panw.panos.application.sub_category",
            "panw.panos.application.category",
            "panw.panos.application.technology",
            "panw.panos.application.risk_level",
            "panw.panos.application.characteristics",
            "panw.panos.application.container",
            "panw.panos.application.tunneled",
            "panw.panos.application.is_saas",
            "panw.panos.application.is_sanctioned",
            "panw.panos.is_offloaded"
          ]
        }
      },
      {
        "set": {
          "field": "http.version",
          "value": "2",
          "if": "ctx.panw?.panos?.http2_connection != null && ctx.panw?.panos?.http2_connection != 0 && ctx.panw?.panos?.http2_connection != \"0\""
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": [
            "network"
          ]
        }
      },
      {
        "set": {
          "field": "destination.bytes",
          "copy_from": "panw.panos.bytes_received",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "panw.panos.destination.location",
          "copy_from": "_temp_.dstloc",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "destination.ip",
          "copy_from": "panw.panos.destination.ip",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "destination.nat.ip",
          "copy_from": "panw.panos.destination.nat.ip",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "destination.nat.port",
          "copy_from": "panw.panos.destination.nat.port",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "destination.packets",
          "copy_from": "panw.panos.packets_received",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "destination.port",
          "copy_from": "panw.panos.destination.port",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "destination.user.name",
          "copy_from": "panw.panos.destination.user",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "event.duration",
          "copy_from": "panw.panos.elapsed_time",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "event.start",
          "copy_from": "panw.panos.start_time",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "network.application",
          "copy_from": "panw.panos.network.application",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "network.bytes",
          "copy_from": "panw.panos.network.bytes",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "network.packets",
          "copy_from": "panw.panos.network.packets",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "network.transport",
          "copy_from": "panw.panos.protocol",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.egress.interface.name",
          "copy_from": "panw.panos.outbound_interface",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.egress.zone",
          "copy_from": "panw.panos.destination.zone",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.hostname",
          "copy_from": "panw.panos.device_name",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.ingress.interface.name",
          "copy_from": "panw.panos.inbound_interface",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.ingress.zone",
          "copy_from": "panw.panos.source.zone",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "rule.uuid",
          "copy_from": "panw.panos.rule_uuid",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.bytes",
          "copy_from": "panw.panos.bytes_sent",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "panw.panos.source.location",
          "copy_from": "_temp_.srcloc",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.ip",
          "copy_from": "panw.panos.source.ip",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.nat.ip",
          "copy_from": "panw.panos.source.nat.ip",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.packets",
          "copy_from": "panw.panos.packets_sent",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.port",
          "copy_from": "panw.panos.source.port",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.nat.port",
          "copy_from": "panw.panos.source.nat.port",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "source.user.name",
          "copy_from": "panw.panos.source.user",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "network.direction",
          "value": "inbound",
          "if": "ctx._temp_?.external_zones != null && ctx._temp_?.internal_zones != null && ctx.observer?.ingress?.zone != null && ctx.observer?.egress?.zone != null && ctx._temp_.external_zones.contains(ctx.observer.ingress.zone) && ctx._temp_.internal_zones.contains(ctx.observer.egress.zone)\n"
        }
      },
      {
        "set": {
          "field": "network.direction",
          "value": "outbound",
          "if": "ctx._temp_?.external_zones != null && ctx._temp_?.internal_zones != null && ctx.observer?.ingress?.zone != null && ctx.observer?.egress?.zone != null && ctx._temp_.external_zones.contains(ctx.observer.egress.zone) && ctx._temp_.internal_zones.contains(ctx.observer.ingress.zone)\n"
        }
      },
      {
        "set": {
          "field": "network.direction",
          "value": "internal",
          "if": "ctx._temp_?.internal_zones != null && ctx.observer?.ingress?.zone != null && ctx.observer?.egress?.zone != null && ctx._temp_.internal_zones.contains(ctx.observer.egress.zone) && ctx._temp_.internal_zones.contains(ctx.observer.ingress.zone)\n"
        }
      },
      {
        "set": {
          "field": "network.direction",
          "value": "external",
          "if": "ctx._temp_?.external_zones != null && ctx.observer?.ingress?.zone != null && ctx.observer?.egress?.zone != null && ctx._temp_.external_zones.contains(ctx.observer.egress.zone) && ctx._temp_.external_zones.contains(ctx.observer.ingress.zone)\n"
        }
      },
      {
        "set": {
          "field": "network.direction",
          "value": "unknown",
          "if": "ctx._temp_?.external_zones != null && ctx._temp_?.internal_zones != null && (\n  (\n    !ctx._temp_.external_zones.contains(ctx.observer?.egress?.zone) &&\n    !ctx._temp_.internal_zones.contains(ctx.observer?.egress?.zone)\n  ) ||\n  (\n    !ctx._temp_.external_zones.contains(ctx.observer?.ingress?.zone) &&\n    !ctx._temp_.internal_zones.contains(ctx.observer?.ingress?.zone)\n  )\n)\n"
        }
      },
      {
        "date": {
          "if": "ctx.event?.timezone == null && ctx.panw?.panos?.parent_session?.start_time != null",
          "field": "panw.panos.parent_session.start_time",
          "target_field": "panw.panos.parent_session.start_time",
          "formats": [
            "yyyy/MM/dd HH:mm:ss",
            "strict_date_optional_time_nanos"
          ],
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{ _ingest.on_failure_message }}"
              }
            }
          ]
        }
      },
      {
        "date": {
          "if": "ctx.event?.timezone != null && ctx.panw?.panos?.parent_session?.start_time != null",
          "field": "panw.panos.parent_session.start_time",
          "target_field": "panw.panos.parent_session.start_time",
          "timezone": "{{{ event.timezone }}}",
          "formats": [
            "yyyy/MM/dd HH:mm:ss",
            "strict_date_optional_time_nanos"
          ],
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{ _ingest.on_failure_message }}"
              }
            }
          ]
        }
      },
      {
        "pipeline": {
          "name": "logs-panw.panos@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "append": {
          "field": "error.message",
          "value": "error in Traffic pipeline: error in [{{_ingest.on_failure_processor_type}}] processor{{#_ingest.on_failure_processor_tag}} with tag [{{_ingest.on_failure_processor_tag }}]{{/_ingest.on_failure_processor_tag}} {{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "panw"
      }
    }
  },
  "logs-aws.ec2_logs-1.25.2": {
    "description": "Pipeline for EC2 logs in CloudWatch",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.0.0"
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true,
          "if": "ctx.event?.original == null",
          "description": "Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document."
        }
      },
      {
        "remove": {
          "field": "message",
          "ignore_missing": true,
          "if": "ctx.event?.original != null",
          "description": "The `message` field is no longer required if the document has an `event.original` field."
        }
      },
      {
        "grok": {
          "field": "event.original",
          "patterns": [
            "%{TIMESTAMP_ISO8601:_tmp.timestamp} %{SYSLOGTIMESTAMP:_tmp.syslog_timestamp} %{IPORHOST:aws.ec2.ip_address} %{DATA:process.name}(?:\\\\[%{POSINT:process.pid}\\\\])?: %{GREEDYDATA:message}"
          ]
        }
      },
      {
        "date": {
          "field": "_tmp.timestamp",
          "target_field": "@timestamp",
          "ignore_failure": true,
          "formats": [
            "ISO8601"
          ]
        }
      },
      {
        "remove": {
          "field": [
            "_tmp"
          ],
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-aws.ec2_logs@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  },
  "metrics-kubernetes.state_resourcequota-1.26.0": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-kubernetes.state_resourcequota@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "kubernetes"
      }
    }
  },
  "metrics-kubernetes.volume-1.26.0": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-kubernetes.volume@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "kubernetes"
      }
    }
  },
  "logs-azure.platformlogs-1.5.4-azure-shared-pipeline": {
    "description": "Pipeline for parsing Azure shared log fields.",
    "processors": [
      {
        "set": {
          "field": "cloud.provider",
          "value": "azure"
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}/RESOURCEGROUPS/%{GROUPID:azure.resource.group}/PROVIDERS/%{PROVIDERNAME:azure.resource.provider}/NAMESPACES/%{NAMESPACE:azure.resource.namespace}/AUTHORIZATIONRULES/%{RULE:azure.resource.authorization_rule}",
            "/subscriptions/%{SUBID:azure.subscription_id}/resourceGroups/%{GROUPID:azure.resource.group}/providers/%{PROVIDERNAME:azure.resource.provider}/namespaces/%{NAMESPACE:azure.resource.namespace}/authorizationRules/%{RULE:azure.resource.authorization_rule}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "GROUPID": ".+",
            "PROVIDERNAME": ".+",
            "NAMESPACE": ".+",
            "RULE": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}/RESOURCEGROUPS/%{GROUPID:azure.resource.group}/PROVIDERS/%{PROVIDERNAME:azure.resource.provider}/%{NAME:azure.resource.name}",
            "/subscriptions/%{SUBID:azure.subscription_id}/resourceGroups/%{GROUPID:azure.resource.group}/providers/%{PROVIDERNAME:azure.resource.provider}/%{NAME:azure.resource.name}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "GROUPID": ".+",
            "PROVIDERNAME": "([A-Za-z])\\w+.([A-Za-z])\\w+/([A-Za-z])\\w+.",
            "NAME": "((?!AUTHORIZATIONRULES).)*$"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}/RESOURCEGROUPS/%{GROUPID:azure.resource.group}/PROVIDERS/%{PROVIDERNAME:azure.resource.provider}/%{NAME:azure.resource.name}",
            "/subscriptions/%{SUBID:azure.subscription_id}/resourceGroups/%{GROUPID:azure.resource.group}/providers/%{PROVIDERNAME:azure.resource.provider}/%{NAME:azure.resource.name}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "GROUPID": ".+",
            "PROVIDERNAME": "([A-Za-z])\\w+.([A-Za-z])\\w+\\/([A-Za-z][^\\/])\\w+",
            "NAME": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/providers/%{PROVIDER:azure.resource.provider}",
            "/PROVIDERS/%{PROVIDER:azure.resource.provider}"
          ],
          "pattern_definitions": {
            "PROVIDER": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}/PROVIDERS/%{PROVIDERNAME:azure.resource.provider}",
            "/subscriptions/%{SUBID:azure.subscription_id}/providers/%{PROVIDERNAME:azure.resource.provider}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "PROVIDERNAME": "([A-Za-z])\\w+.([A-Za-z])\\w+\\/([A-Za-z][^\\/])\\w+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}/RESOURCEGROUPS/%{GROUPID:azure.resource.group}",
            "/subscriptions/%{SUBID:azure.subscription_id}/resourceGroups/%{GROUPID:azure.resource.group}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "GROUPID": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}",
            "/subscriptions/%{SUBID:azure.subscription_id}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}"
          },
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "azure.resource_id",
          "target_field": "azure.resource.id",
          "ignore_missing": true
        }
      },
      {
        "lowercase": {
          "field": "event.outcome",
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-azure.platformlogs@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "azure"
      }
    }
  },
  "metrics-apm.app-8.4.2": {
    "description": "Pipeline for ingesting APM application metrics.",
    "processors": [
      {
        "grok": {
          "field": "observer.version",
          "pattern_definitions": {
            "DIGITS": "(?:[0-9]+)"
          },
          "patterns": [
            "%{DIGITS:observer.version_major:int}.%{DIGITS:observer.version_minor:int}.%{DIGITS:observer.version_patch:int}(?:[-+].*)?"
          ]
        }
      },
      {
        "fail": {
          "if": "ctx.observer.version_major > 8 || (ctx.observer.version_major == 8 && ctx.observer.version_minor > 4)",
          "message": "Document produced by APM Server v{{{observer.version}}}, which is newer than the installed APM integration (v8.4.2). The APM integration must be upgraded."
        }
      },
      {
        "remove": {
          "field": [
            "observer.version_major",
            "observer.version_minor",
            "observer.version_patch"
          ],
          "ignore_missing": true
        }
      },
      {
        "user_agent": {
          "field": "user_agent.original",
          "ignore_failure": true,
          "ignore_missing": true,
          "target_field": "user_agent"
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-City.mmdb",
          "field": "client.ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "client.ip",
                "ignore_failure": true,
                "ignore_missing": true
              }
            }
          ],
          "target_field": "client.geo"
        }
      },
      {
        "script": {
          "if": "ctx._metric_descriptions != null",
          "source": "Map dynamic_templates = new HashMap();\nfor (entry in ctx._metric_descriptions.entrySet()) {\n  String name = entry.getKey();\n  Map description = entry.getValue();\n  String metric_type = description.type;\n  if (metric_type == \"histogram\") {\n    dynamic_templates[name] = \"histogram\";\n  } else if (metric_type == \"summary\") {\n    dynamic_templates[name] = \"summary\";\n  }\n}\nctx._dynamic_templates = dynamic_templates;\nctx.remove(\"_metric_descriptions\");\n"
        }
      },
      {
        "pipeline": {
          "name": "metrics-apm.app@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "apm"
      }
    }
  },
  "logs-github.secret_scanning-1.6.0": {
    "description": "Pipeline for parsing GitHub audit logs",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.5.0"
        }
      },
      {
        "set": {
          "field": "event.action",
          "value": "secret_scanning"
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "github.secret_scanning"
        }
      },
      {
        "fingerprint": {
          "fields": [
            "github.secret_scanning.number",
            "github.secret_scanning.updated_at",
            "github.secret_scanning.resolved_at"
          ],
          "target_field": "_id",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "copy_from": "github.secret_scanning.created_at",
          "field": "event.created",
          "if": "ctx.github.secret_scanning?.created_at != null"
        }
      },
      {
        "date": {
          "field": "github.secret_scanning.created_at",
          "formats": [
            "ISO8601"
          ],
          "timezone": "UTC",
          "target_field": "@timestamp",
          "if": "ctx.github.secret_scanning?.created_at != null && ctx.github.secret_scanning?.updated_at == null && ctx.github.secret_scanning?.resolved_at == null"
        }
      },
      {
        "date": {
          "field": "github.secret_scanning.updated_at",
          "formats": [
            "ISO8601"
          ],
          "timezone": "UTC",
          "target_field": "@timestamp",
          "if": "ctx.github.secret_scanning?.updated_at != null && ctx.github.secret_scanning?.resolved_at == null"
        }
      },
      {
        "date": {
          "field": "github.secret_scanning.resolved_at",
          "formats": [
            "ISO8601"
          ],
          "timezone": "UTC",
          "target_field": "@timestamp",
          "if": "ctx.github.secret_scanning?.resolved_at != null"
        }
      },
      {
        "rename": {
          "target_field": "_temp.repository",
          "field": "github.secret_scanning.repository",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.repository.id",
          "target_field": "github.repository.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.repository.name",
          "target_field": "github.repository.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.repository.full_name",
          "target_field": "github.repository.full_name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.repository.private",
          "target_field": "github.repository.private",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.repository.html_url",
          "target_field": "github.repository.html_url",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.repository.url",
          "target_field": "github.repository.url",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.repository.description",
          "target_field": "github.repository.description",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.repository.fork",
          "target_field": "github.repository.fork",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.repository.owner.login",
          "target_field": "github.repository.owner.login",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.repository.owner.id",
          "target_field": "github.repository.owner.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.repository.owner.url",
          "target_field": "github.repository.owner.url",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.repository.owner.html_url",
          "target_field": "github.repository.owner.html_url",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.repository.owner.type",
          "target_field": "github.repository.owner.type",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.repository.owner.site_admin",
          "target_field": "github.repository.owner.site_admin",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "target_field": "_temp.resolved_by",
          "field": "github.secret_scanning.resolved_by",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.resolved_by.name",
          "target_field": "github.secret_scanning.resolved_by.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.resolved_by.email",
          "target_field": "github.secret_scanning.resolved_by.email",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.resolved_by.login",
          "target_field": "github.secret_scanning.resolved_by.login",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.resolved_by.id",
          "target_field": "github.secret_scanning.resolved_by.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.resolved_by.node_id",
          "target_field": "github.secret_scanning.resolved_by.node_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.resolved_by.url",
          "target_field": "github.secret_scanning.resolved_by.url",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.resolved_by.html_url",
          "target_field": "github.secret_scanning.resolved_by.html_url",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.resolved_by.type",
          "target_field": "github.secret_scanning.resolved_by.type",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.resolved_by.site_admin",
          "target_field": "github.secret_scanning.resolved_by.site_admin",
          "ignore_missing": true
        }
      },
      {
        "dissect": {
          "field": "github.secret_scanning.url",
          "pattern": "https://api.github.com/repos/%{_temp.owner}/%{_temp.repository}/secret-scanning/alerts/%{_temp.number}",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "github.repository.html_url",
          "value": "https://github.com/{{_temp.owner}}/{{_temp.repository}}",
          "if": "ctx.github.repository?.html_url == null && ctx._temp?.owner != null && ctx._temp?.repository != null"
        }
      },
      {
        "set": {
          "field": "github.repository.url",
          "value": "https://api.github.com/repos/{{_temp.owner}}/{{_temp.repository}}",
          "if": "ctx.github.repository?.url == null && ctx._temp?.owner != null && ctx._temp?.repository != null"
        }
      },
      {
        "rename": {
          "field": "_temp.repository",
          "target_field": "github.repository.name",
          "if": "ctx.github.repository?.name == null",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.owner",
          "target_field": "github.repository.owner.login",
          "if": "ctx.github.repository?.owner?.login == null",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.number",
          "target_field": "github.secret_scanning.number",
          "if": "ctx.github.secret_scanning?.number == null",
          "ignore_missing": true
        }
      },
      {
        "lowercase": {
          "field": "github.secret_scanning.state",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "github.state",
          "value": "{{github.secret_scanning.state}}",
          "if": "ctx.github.secret_scanning?.state != null"
        }
      },
      {
        "set": {
          "field": "github.severity",
          "value": "undefined",
          "if": "ctx.github.severity == null"
        }
      },
      {
        "rename": {
          "target_field": "_temp.push_protection_bypassed_by",
          "field": "github.secret_scanning.push_protection_bypassed_by",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.push_protection_bypassed_by.name",
          "target_field": "github.secret_scanning.push_protection_bypassed_by.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.push_protection_bypassed_by.email",
          "target_field": "github.secret_scanning.push_protection_bypassed_by.email",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.push_protection_bypassed_by.login",
          "target_field": "github.secret_scanning.push_protection_bypassed_by.login",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.push_protection_bypassed_by.id",
          "target_field": "github.secret_scanning.push_protection_bypassed_by.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.push_protection_bypassed_by.node_id",
          "target_field": "github.secret_scanning.push_protection_bypassed_by.node_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.push_protection_bypassed_by.url",
          "target_field": "github.secret_scanning.push_protection_bypassed_by.url",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.push_protection_bypassed_by.html_url",
          "target_field": "github.secret_scanning.push_protection_bypassed_by.html_url",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.push_protection_bypassed_by.type",
          "target_field": "github.secret_scanning.push_protection_bypassed_by.type",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "_temp.push_protection_bypassed_by.site_admin",
          "target_field": "github.secret_scanning.push_protection_bypassed_by.site_admin",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "description": "Mask the secret if hide_secret is true",
          "if": "ctx.tags != null && ctx.tags.contains('hide_secret') && ctx.github?.secret_scanning?.secret != null",
          "source": "def secret = ctx.github.secret_scanning.secret.toString();\ndef masked_secret = secret;\nint num_start = 2;\nint num_end = 2;\ndef masked_value = String.join(\"\", Collections.nCopies(secret.length()-(num_start+num_end), \"X\"));\nmasked_secret = secret.substring(0,num_start) + masked_value + secret.substring(secret.length()-num_end);\nctx.github.secret_scanning.secret = masked_secret;\n"
        }
      },
      {
        "script": {
          "lang": "painless",
          "description": "Calculate time taken to resolve the secrets",
          "if": "ctx.github.secret_scanning?.resolved_at != null",
          "source": "def time_to_resolution = new HashMap();\ndef resolvedAtDt = ctx.github.secret_scanning.resolved_at;\ndef createdAtDt = ctx.github.secret_scanning.created_at;\nZonedDateTime zdt = ZonedDateTime.parse(createdAtDt);\nlong createdAtEpoch = zdt.toEpochSecond();\nzdt = ZonedDateTime.parse(resolvedAtDt);\nlong resolvedAtEpoch = zdt.toEpochSecond();\ntime_to_resolution.put(\"sec\", resolvedAtEpoch - createdAtEpoch);\nctx.github.secret_scanning.time_to_resolution = time_to_resolution;\n"
        }
      },
      {
        "remove": {
          "field": [
            "_temp"
          ],
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "description": "This script processor iterates over the whole document to remove fields with null values.",
          "source": "void handleMap(Map map) {\n  for (def x : map.values()) {\n    if (x instanceof Map) {\n        handleMap(x);\n    } else if (x instanceof List) {\n        handleList(x);\n    }\n  }\n  map.values().removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));\n}\nvoid handleList(List list) {\n  for (def x : list) {\n      if (x instanceof Map) {\n          handleMap(x);\n      } else if (x instanceof List) {\n          handleList(x);\n      }\n  }\n  list.removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));\n}\nhandleMap(ctx);\n"
        }
      },
      {
        "pipeline": {
          "name": "logs-github.secret_scanning@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "github"
      }
    }
  },
  "enrich-policy-reindex-7": {
    "description": "This pipeline sanitizes documents that will be stored in enrich indices for ingest lookup purposes. It is an internal pipeline and should not be modified.",
    "version": 7040099,
    "processors": [
      {
        "remove": {
          "field": "_id"
        }
      }
    ]
  },
  "logs-azure.provisioning-1.5.4": {
    "description": "Pipeline for parsing Azure Provisioning logs.",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.5.0"
        }
      },
      {
        "rename": {
          "field": "azure",
          "target_field": "azure-eventhub",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "source": "ctx.message = ctx.message.replace(params.empty_field_name, '')",
          "params": {
            "empty_field_name": "\"\":\"\","
          },
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true,
          "if": "ctx.event?.original == null",
          "description": "Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document."
        }
      },
      {
        "remove": {
          "field": "message",
          "ignore_missing": true,
          "if": "ctx.event?.original != null",
          "description": "The `message` field is no longer required if the document has an `event.original` field."
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "azure.provisioning"
        }
      },
      {
        "drop": {
          "description": "Drop events that are not Azure Provisioning logs.",
          "if": "ctx?.azure?.provisioning?.category == null || ctx.azure.provisioning.category != 'ProvisioningLogs'"
        }
      },
      {
        "date": {
          "field": "azure.provisioning.time",
          "target_field": "@timestamp",
          "ignore_failure": true,
          "formats": [
            "M/d/yyyy h:mm:ss a",
            "ISO8601"
          ]
        }
      },
      {
        "remove": {
          "field": "azure.provisioning.time",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.resourceId",
          "target_field": "azure.resource_id",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "azure.provisioning.callerIpAddress",
          "target_field": "source.ip",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "rename": {
                "field": "azure.provisioning.callerIpAddress",
                "target_field": "source.address",
                "ignore_missing": true,
                "ignore_failure": true
              }
            }
          ]
        }
      },
      {
        "remove": {
          "field": "azure.provisioning.callerIpAddress",
          "if": "ctx.source?.ip != null",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "source.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.durationMs",
          "target_field": "event.duration",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "source": "if (ctx.event.duration!= null) {ctx.event.duration = ctx.event.duration * params.param_nano;}",
          "params": {
            "param_nano": 1000000
          },
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.resultType",
          "target_field": "azure.provisioning.result_type",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "azure.provisioning.result_type",
          "target_field": "event.outcome",
          "type": "string",
          "if": "ctx?.azure?.provisioning?.result_type != null && ctx.azure.provisioning.result_type instanceof String && (ctx.azure.provisioning.result_type.toLowerCase() == 'success' || ctx.azure.provisioning.result_type.toLowerCase() == 'failure')"
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.operationName",
          "target_field": "azure.provisioning.operation_name",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "azure.provisioning.operation_name",
          "target_field": "event.action",
          "type": "string",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.operationVersion",
          "target_field": "azure.provisioning.operation_version",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.tenantId",
          "target_field": "azure.tenant_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.Level",
          "target_field": "azure.provisioning.level",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.resultSignature",
          "target_field": "azure.provisioning.result_signature",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.correlationId",
          "target_field": "azure.correlation_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.tenantId",
          "target_field": "azure.provisioning.properties.tenant_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.activityDateTime",
          "target_field": "azure.provisioning.properties.activity_datetime",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.changeId",
          "target_field": "azure.provisioning.properties.change_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.cycleId",
          "target_field": "azure.provisioning.properties.cycle_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.durationInMilliseconds",
          "target_field": "azure.provisioning.properties.duration_ms",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.initiatedBy",
          "target_field": "azure.provisioning.properties.initiated_by",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.initiated_by.Id",
          "target_field": "azure.provisioning.properties.initiated_by.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.initiated_by.Name",
          "target_field": "azure.provisioning.properties.initiated_by.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.initiated_by.Type",
          "target_field": "azure.provisioning.properties.initiated_by.type",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.jobId",
          "target_field": "azure.provisioning.properties.job_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.modifiedProperties",
          "target_field": "azure.provisioning.properties.modified_properties",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.modified_properties.displayName",
          "target_field": "azure.provisioning.properties.modified_properties.display_name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.modified_properties.newValue",
          "target_field": "azure.provisioning.properties.modified_properties.new_value",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.modified_properties.oldValue",
          "target_field": "azure.provisioning.properties.modified_properties.old_value",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.provisioningAction",
          "target_field": "azure.provisioning.properties.provisioning_action",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.provisioningStatusInfo",
          "target_field": "azure.provisioning.properties.provisioning_status_info",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.provisioning_status_info.Status",
          "target_field": "azure.provisioning.properties.provisioning_status_info.status",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "azure.provisioning.properties.provisioning_status_info.errorInformation",
          "ignore_missing": true,
          "if": "ctx?.azure?.provisioning?.properties?.provisioning_status_info?.errorInformation == null",
          "description": "Remove errorInformation if it is null to avoid field value parsing errors"
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.provisioning_status_info.errorInformation",
          "target_field": "azure.provisioning.properties.provisioning_status_info.error_information",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.provisioning_status_info.error_information.additionalDetails",
          "target_field": "azure.provisioning.properties.provisioning_status_info.error_information.additional_details",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.provisioning_status_info.error_information.errorCategory",
          "target_field": "azure.provisioning.properties.provisioning_status_info.error_information.error_category",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.provisioning_status_info.error_information.errorCode",
          "target_field": "azure.provisioning.properties.provisioning_status_info.error_information.error_code",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.provisioning_status_info.error_information.recommendedAction",
          "target_field": "azure.provisioning.properties.provisioning_status_info.error_information.recommended_action",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.servicePrincipal",
          "target_field": "azure.provisioning.properties.service_principal",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.service_principal.Id",
          "target_field": "azure.provisioning.properties.service_principal.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.service_principal.Name",
          "target_field": "azure.provisioning.properties.service_principal.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.sourceIdentity",
          "target_field": "azure.provisioning.properties.source_identity",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.source_identity.Id",
          "target_field": "azure.provisioning.properties.source_identity.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.source_identity.Name",
          "target_field": "azure.provisioning.properties.source_identity.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.source_identity.identityType",
          "target_field": "azure.provisioning.properties.source_identity.identity_type",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.source_identity.details.DisplayName",
          "target_field": "azure.provisioning.properties.source_identity.details.display_name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.source_identity.details.UserPrincipalName",
          "target_field": "azure.provisioning.properties.source_identity.details.user_principal_name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.targetIdentity",
          "target_field": "azure.provisioning.properties.target_identity",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.target_identity.Id",
          "target_field": "azure.provisioning.properties.target_identity.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.target_identity.Name",
          "target_field": "azure.provisioning.properties.target_identity.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.target_identity.identityType",
          "target_field": "azure.provisioning.properties.target_identity.identity_type",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.target_identity.details.DisplayName",
          "target_field": "azure.provisioning.properties.target_identity.details.display_name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.target_identity.details.UserPrincipalName",
          "target_field": "azure.provisioning.properties.target_identity.details.user_principal_name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.sourceSystem",
          "target_field": "azure.provisioning.properties.source_system",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.source_system.Id",
          "target_field": "azure.provisioning.properties.source_system.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.source_system.Name",
          "target_field": "azure.provisioning.properties.source_system.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.source_system.details.ApplicationId",
          "target_field": "azure.provisioning.properties.source_system.details.application_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.source_system.details.ServicePrincipalDisplayName",
          "target_field": "azure.provisioning.properties.source_system.details.dervice_principal_display_name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.source_system.details.ServicePrincipalId",
          "target_field": "azure.provisioning.properties.source_system.details.service_principal_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.targetSystem",
          "target_field": "azure.provisioning.properties.target_system",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.target_system.Id",
          "target_field": "azure.provisioning.properties.target_system.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.target_system.Name",
          "target_field": "azure.provisioning.properties.target_system.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.target_system.details.ApplicationId",
          "target_field": "azure.provisioning.properties.target_system.details.application_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.target_system.details.ServicePrincipalDisplayName",
          "target_field": "azure.provisioning.properties.target_system.details.dervice_principal_display_name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.target_system.details.ServicePrincipalId",
          "target_field": "azure.provisioning.properties.target_system.details.service_principal_id",
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "azure.provisioning.properties.statusInfo",
          "description": "It looks like statusInfo contains the same information as provisioningStatusInfo, so we remove it. The statusInfo field is not documented at https://docs.microsoft.com/en-us/azure/azure-monitor/reference/tables/aadprovisioninglogs.\n",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.provisioningSteps",
          "target_field": "azure.provisioning.properties.provisioning_steps",
          "ignore_missing": true
        }
      },
      {
        "foreach": {
          "field": "azure.provisioning.properties.provisioning_steps",
          "ignore_missing": true,
          "processor": {
            "rename": {
              "field": "_ingest._value.provisioningStepType",
              "target_field": "_ingest._value.provisioning_step_type",
              "ignore_missing": true
            }
          }
        }
      },
      {
        "rename": {
          "field": "azure.provisioning.properties.activityDateTime",
          "target_field": "azure.provisioning.properties.activity_datetime",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "pipeline": {
          "name": "logs-azure.provisioning-1.5.4-azure-shared-pipeline"
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-azure.provisioning@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "Processor \"{{ _ingest.on_failure_processor_type }}\" with tag \"{{ _ingest.on_failure_processor_tag }}\" in pipeline \"{{ _ingest.on_failure_pipeline }}\" failed with message \"{{ _ingest.on_failure_message }}\""
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "azure"
      }
    }
  },
  "logs-azure.signinlogs-1.5.4-azure-shared-pipeline": {
    "description": "Pipeline for parsing Azure shared log fields.",
    "processors": [
      {
        "set": {
          "field": "cloud.provider",
          "value": "azure"
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}/RESOURCEGROUPS/%{GROUPID:azure.resource.group}/PROVIDERS/%{PROVIDERNAME:azure.resource.provider}/NAMESPACES/%{NAMESPACE:azure.resource.namespace}/AUTHORIZATIONRULES/%{RULE:azure.resource.authorization_rule}",
            "/subscriptions/%{SUBID:azure.subscription_id}/resourceGroups/%{GROUPID:azure.resource.group}/providers/%{PROVIDERNAME:azure.resource.provider}/namespaces/%{NAMESPACE:azure.resource.namespace}/authorizationRules/%{RULE:azure.resource.authorization_rule}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "GROUPID": ".+",
            "PROVIDERNAME": ".+",
            "NAMESPACE": ".+",
            "RULE": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}/RESOURCEGROUPS/%{GROUPID:azure.resource.group}/PROVIDERS/%{PROVIDERNAME:azure.resource.provider}/%{NAME:azure.resource.name}",
            "/subscriptions/%{SUBID:azure.subscription_id}/resourceGroups/%{GROUPID:azure.resource.group}/providers/%{PROVIDERNAME:azure.resource.provider}/%{NAME:azure.resource.name}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "GROUPID": ".+",
            "PROVIDERNAME": "([A-Za-z])\\w+.([A-Za-z])\\w+/([A-Za-z])\\w+.",
            "NAME": "((?!AUTHORIZATIONRULES).)*$"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}/RESOURCEGROUPS/%{GROUPID:azure.resource.group}/PROVIDERS/%{PROVIDERNAME:azure.resource.provider}/%{NAME:azure.resource.name}",
            "/subscriptions/%{SUBID:azure.subscription_id}/resourceGroups/%{GROUPID:azure.resource.group}/providers/%{PROVIDERNAME:azure.resource.provider}/%{NAME:azure.resource.name}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "GROUPID": ".+",
            "PROVIDERNAME": "([A-Za-z])\\w+.([A-Za-z])\\w+\\/([A-Za-z][^\\/])\\w+",
            "NAME": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/providers/%{PROVIDER:azure.resource.provider}",
            "/PROVIDERS/%{PROVIDER:azure.resource.provider}"
          ],
          "pattern_definitions": {
            "PROVIDER": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}/PROVIDERS/%{PROVIDERNAME:azure.resource.provider}",
            "/subscriptions/%{SUBID:azure.subscription_id}/providers/%{PROVIDERNAME:azure.resource.provider}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "PROVIDERNAME": "([A-Za-z])\\w+.([A-Za-z])\\w+\\/([A-Za-z][^\\/])\\w+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}/RESOURCEGROUPS/%{GROUPID:azure.resource.group}",
            "/subscriptions/%{SUBID:azure.subscription_id}/resourceGroups/%{GROUPID:azure.resource.group}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}",
            "GROUPID": ".+"
          },
          "ignore_failure": true
        }
      },
      {
        "grok": {
          "field": "azure.resource_id",
          "if": "ctx.azure?.subscription_id == null",
          "patterns": [
            "/SUBSCRIPTIONS/%{SUBID:azure.subscription_id}",
            "/subscriptions/%{SUBID:azure.subscription_id}"
          ],
          "pattern_definitions": {
            "SUBID": "(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}"
          },
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "azure.resource_id",
          "target_field": "azure.resource.id",
          "ignore_missing": true
        }
      },
      {
        "lowercase": {
          "field": "event.outcome",
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-azure.signinlogs@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "azure"
      }
    }
  },
  "metrics-kubernetes.state_statefulset-1.26.0": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-kubernetes.state_statefulset@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "kubernetes"
      }
    }
  },
  "metrics-elastic_agent.apm_server-1.3.5": {
    "processors": [
      {
        "pipeline": {
          "name": "metrics-elastic_agent.apm_server@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "elastic_agent"
      }
    }
  },
  "logs-endpoint.events.network-8.4.1": {
    "description": "Pipeline for network events",
    "processors": [
      {
        "set": {
          "field": "event.ingested",
          "value": "{{ _ingest.timestamp }}",
          "ignore_failure": true
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "source.geo",
          "properties": [
            "continent_name",
            "country_name",
            "country_iso_code",
            "region_iso_code",
            "region_name",
            "city_name",
            "location"
          ],
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "field": "destination.ip",
          "target_field": "destination.geo",
          "properties": [
            "continent_name",
            "country_name",
            "country_iso_code",
            "region_iso_code",
            "region_name",
            "city_name",
            "location"
          ],
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "destination.ip",
          "target_field": "destination.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.asn",
          "target_field": "source.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.organization_name",
          "target_field": "source.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "destination.as.asn",
          "target_field": "destination.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "destination.as.organization_name",
          "target_field": "destination.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "grok": {
          "if": "ctx.network?.protocol == 'dns'",
          "ignore_missing": true,
          "ignore_failure": true,
          "field": "message",
          "patterns": [
            "^DNS query is completed for the name .* type %{WORD:dns.question.Ext_temp.type}"
          ]
        }
      },
      {
        "script": {
          "ignore_failure": true,
          "if": "ctx.network?.protocol == 'dns' && ctx.dns?.question?.Ext_temp?.type != null && ctx.dns?.question?.type == null",
          "source": "Map typeMap = ['1': 'A', '2': 'NS', '3': 'MD', '4': 'MF', '5': 'CNAME', '6': 'SOA', '7': 'MB', '8': 'MG', '9': 'MR',\n  '10': 'NULL', '11': 'WKS', '12': 'PTR', '13': 'HINFO', '14': 'MINFO', '15': 'MX', '16': 'TXT', '17': 'RP', '18': 'AFSDB',\n  '19': 'X25', '20': 'ISDN', '21': 'RT', '22': 'NSAP', '23': 'NSAPPTR', '24': 'SIG', '25': 'KEY', '26': 'PX',\n  '27': 'GPOS', '28': 'AAAA', '29': 'LOC', '30': 'NXT', '31': 'EID', '32': 'NIMLOC', '33': 'SRV', '34': 'ATMA',\n  '35': 'NAPTR', '36': 'KX', '37': 'CERT', '38': 'A6', '39': 'DNAME', '40': 'SINK', '41': 'OPT', '42': 'APL',\n  '43': 'DS', '44': 'SSHFP', '45': 'ISECKEY', '46': 'RRSIG', '47': 'NSEC', '48': 'DNSKEY', '49': 'DHCID',\n  '50': 'NSEC3', '51': 'NSEC3PARAM', '52': 'TLSA', '53': 'SMIMEA', '55': 'HIP', '56': 'NINFO', '57': 'RKEY',\n  '58': 'TALINK', '59': 'CDS', '60': 'CDNSKEY', '61': 'OPENPGPKEY', '62': 'CSYNC', '63': 'ZONEMD', '64': 'SVCB',\n  '65': 'HTTPS', '99': 'SPF', '100': 'UINFO', '101': 'UID', '102': 'GID', '103': 'UNSPEC', '104': 'NID',\n  '105': 'L32', '106': 'L64', '107': 'LP', '108': 'EUI48', '109': 'EUI64', '249': 'TKEY', '250': 'TSIG',\n  '251': 'IXFR', '252': 'AXFR', '253': 'MAILB', '254': 'MAILA', '255': 'ANY','256': 'URI', '257': 'CAA',\n  '258': 'AVC'];\ndef type = typeMap[ctx.dns.question.Ext_temp.type]; if (type != null) {\n  ctx.dns.question.type = type;\n}"
        }
      },
      {
        "remove": {
          "if": "ctx.network?.protocol == 'dns'",
          "ignore_failure": true,
          "ignore_missing": true,
          "field": "dns.question.Ext_temp"
        }
      },
      {
        "pipeline": {
          "name": "logs-endpoint.events.network@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "endpoint"
      }
    }
  },
  "logs-panw.panos-3.1.1-config": {
    "description": "Pipeline for PanOS Config Logs.",
    "processors": [
      {
        "csv": {
          "field": "message",
          "ignore_failure": true,
          "target_fields": [
            "panw.panos.host.ip",
            "panw.panos.virtual_sys",
            "panw.panos.cmd",
            "panw.panos.admin",
            "panw.panos.client_type",
            "panw.panos.result",
            "panw.panos.path",
            "panw.panos.before_change_detail",
            "panw.panos.after_change_detail",
            "panw.panos.sequence_number",
            "panw.panos.action_flags",
            "panw.panos.device_group_hierarchy1",
            "panw.panos.device_group_hierarchy2",
            "panw.panos.device_group_hierarchy3",
            "panw.panos.device_group_hierarchy4",
            "panw.panos.vsys_name",
            "panw.panos.device_name",
            "panw.panos.device_group_id",
            "panw.panos.comment"
          ]
        }
      },
      {
        "script": {
          "description": "Set Event Action.",
          "lang": "painless",
          "ignore_failure": true,
          "if": "ctx.panw?.panos?.cmd != null",
          "params": {
            "add": "cmd-add",
            "clone": "cmd-clone",
            "commit": "cmd-commit",
            "delete": "cmd-delete",
            "edit": "cmd-edit",
            "move": "cmd-move",
            "rename": "cmd-rename",
            "set": "cmd-set"
          },
          "source": "ctx.event.action = params.get(ctx.panw.panos.cmd);"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "success",
          "ignore_failure": true,
          "if": "ctx.panw?.panos?.result == 'Succeeded'"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "failure",
          "ignore_failure": true,
          "if": "ctx.panw?.panos?.result == 'Failed'"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "unknown",
          "ignore_failure": true,
          "if": "![\"Succeeded\", \"Failed\"].contains(ctx.panw.panos.action)"
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": [
            "configuration"
          ]
        }
      },
      {
        "set": {
          "field": "host.ip",
          "copy_from": "panw.panos.host.ip",
          "ignore_failure": true
        }
      },
      {
        "set": {
          "field": "observer.hostname",
          "copy_from": "panw.panos.device_name",
          "ignore_failure": true
        }
      },
      {
        "pipeline": {
          "name": "logs-panw.panos@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "append": {
          "field": "error.message",
          "value": "error in Config pipeline: error in [{{{_ingest.on_failure_processor_type}}}] processor{{{#_ingest.on_failure_processor_tag}}} with tag [{{{_ingest.on_failure_processor_tag}}}]{{{/_ingest.on_failure_processor_tag}}} {{{_ingest.on_failure_message}}}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "panw"
      }
    }
  },
  "logs-azure.application_gateway-1.5.4": {
    "description": "Pipeline for processing Azure firewall logs.",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.5.0"
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "set": {
          "field": "event.category",
          "value": [
            "network"
          ]
        }
      },
      {
        "set": {
          "field": "event.type",
          "value": [
            "connection"
          ]
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true
        }
      },
      {
        "json": {
          "field": "event.original",
          "target_field": "json",
          "ignore_failure": true
        }
      },
      {
        "date": {
          "field": "json.time",
          "target_field": "@timestamp",
          "ignore_failure": true,
          "formats": [
            "ISO8601"
          ],
          "if": "ctx.json?.time != null"
        }
      },
      {
        "date": {
          "field": "json.timestamp",
          "target_field": "@timestamp",
          "ignore_failure": true,
          "formats": [
            "ISO8601"
          ],
          "if": "ctx.json?.timestamp != null"
        }
      },
      {
        "rename": {
          "field": "json.resourceId",
          "target_field": "azure.resource_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.properties.clientIP",
          "target_field": "source.address",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "source.address",
          "target_field": "source.ip",
          "type": "ip",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "json.properties.clientPort",
          "target_field": "source.port",
          "type": "long",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.properties.httpMethod",
          "target_field": "http.request.method",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.properties.requestUri",
          "target_field": "url.path",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "url.path",
          "copy_from": "url.original",
          "ignore_empty_value": true
        }
      },
      {
        "rename": {
          "field": "json.properties.requestQuery",
          "target_field": "url.query",
          "ignore_missing": true
        }
      },
      {
        "user_agent": {
          "field": "json.properties.userAgent",
          "ignore_missing": true,
          "if": "ctx.json?.properties?.userAgent != \"-\""
        }
      },
      {
        "rename": {
          "field": "json.properties.httpStatus",
          "target_field": "http.response.status_code",
          "ignore_missing": true
        }
      },
      {
        "dissect": {
          "field": "json.properties.httpVersion",
          "pattern": "%{}/%{http.version}",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "network.protocol",
          "value": "http"
        }
      },
      {
        "rename": {
          "field": "json.properties.receivedBytes",
          "target_field": "source.bytes",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.properties.sentBytes",
          "target_field": "destination.bytes",
          "ignore_missing": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "source": "ctx.network.bytes = ctx.source.bytes + ctx.destination.bytes",
          "if": "ctx.source?.bytes != null && ctx.destination?.bytes != null && ctx.network?.bytes == null",
          "ignore_failure": true
        }
      },
      {
        "script": {
          "lang": "painless",
          "if": "ctx.event?.duration != null",
          "params": {
            "MS_TO_NS": 1000000
          },
          "source": "ctx.event.duration *= params.MS_TO_NS;"
        }
      },
      {
        "rename": {
          "field": "json.properties.host",
          "target_field": "url.domain",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "destination.address",
          "copy_from": "url.domain",
          "ignore_empty_value": true
        }
      },
      {
        "set": {
          "field": "destination.domain",
          "copy_from": "url.domain",
          "ignore_empty_value": true
        }
      },
      {
        "rename": {
          "field": "json.properties.sslCipher",
          "target_field": "tls.cipher",
          "ignore_missing": true
        }
      },
      {
        "dissect": {
          "field": "json.properties.sslProtocol",
          "pattern": "%{tls.version_protocol}v%{tls.version}",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "source.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.asn",
          "target_field": "source.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.organization_name",
          "target_field": "source.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "append": {
          "if": "ctx?.source?.ip != null",
          "field": "related.ip",
          "value": "{{source.ip}}",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "append": {
          "if": "ctx?.destination?.domain != null",
          "field": "related.hosts",
          "value": "{{destination.domain}}",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "append": {
          "if": "ctx?.url?.domain != null",
          "field": "related.hosts",
          "value": "{{url.domain}}",
          "allow_duplicates": false,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "json.operationName",
          "target_field": "azure.application_gateway.operation_name",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.properties.instanceId",
          "target_field": "azure.application_gateway.instance_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.properties.hostname",
          "target_field": "azure.application_gateway.hostname",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.properties.action",
          "target_field": "event.action",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "json.event.alert.action",
          "value": "denied",
          "if": "ctx.azure?.firewall?.action == 'Deny'"
        }
      },
      {
        "set": {
          "field": "json.event.alert.action",
          "value": "allowed",
          "if": "ctx.azure?.firewall?.action == 'Allow'"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "allowed",
          "if": "ctx.event?.action != null && [\"Allowed\",\"Matched\",\"Detected\"].contains(ctx.event.action)"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "denied",
          "if": "ctx.event?.action != null && [\"Blocked\"].contains(ctx.event.action)"
        }
      },
      {
        "rename": {
          "field": "json.properties.ruleSetType",
          "target_field": "rule.category",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.properties.ruleSetVersion",
          "target_field": "rule.version",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.properties.ruleId",
          "target_field": "rule.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.properties.ruleGroup",
          "target_field": "rule.ruleset",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.properties.message",
          "target_field": "message",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.properties.details.message",
          "target_field": "rule.description",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.properties.transactionId",
          "target_field": "azure.application_gateway.transaction_id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.properties.policyId",
          "target_field": "azure.application_gateway.policy.id",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.properties.policyScope",
          "target_field": "azure.application_gateway.policy.scope",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "json.properties.policyScopeName",
          "target_field": "azure.application_gateway.policy.scope_name",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "observer.type",
          "value": "firewall"
        }
      },
      {
        "set": {
          "field": "observer.vendor",
          "value": "Azure"
        }
      },
      {
        "set": {
          "field": "observer.product",
          "value": "Web Application Firewall"
        }
      },
      {
        "remove": {
          "field": [
            "json"
          ],
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-azure.application_gateway-1.5.4-azure-shared-pipeline"
        }
      },
      {
        "set": {
          "field": "observer.name",
          "copy_from": "azure.resource.name",
          "ignore_empty_value": true
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "script": {
          "description": "Drops null/empty values recursively.",
          "lang": "painless",
          "source": "boolean dropEmptyFields(Object object) {\n  if (object == null || object == \"\") {\n    return true;\n  } else if (object instanceof Map) {\n    ((Map) object).values().removeIf(value -> dropEmptyFields(value));\n    return (((Map) object).size() == 0);\n  } else if (object instanceof List) {\n    ((List) object).removeIf(value -> dropEmptyFields(value));\n    return (((List) object).length == 0);\n  }\n  return false;\n}\ndropEmptyFields(ctx);\n"
        }
      },
      {
        "pipeline": {
          "name": "logs-azure.application_gateway@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "append": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }} {{ _ingest.on_failure_processor_type }}"
        }
      },
      {
        "remove": {
          "field": [
            "json",
            "_conf",
            "message"
          ],
          "ignore_missing": true
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "azure"
      }
    }
  },
  "logs-system.auth-1.20.4": {
    "description": "Pipeline for parsing system authorization and secure logs.",
    "processors": [
      {
        "rename": {
          "if": "ctx.event?.original == null",
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true
        }
      },
      {
        "grok": {
          "description": "Grok the message header.",
          "tag": "grok-message-header",
          "field": "event.original",
          "pattern_definitions": {
            "GREEDYMULTILINE": "(.|\\n)*",
            "TIMESTAMP": "(?:%{TIMESTAMP_ISO8601}|%{SYSLOGTIMESTAMP})"
          },
          "patterns": [
            "^%{TIMESTAMP:system.auth.timestamp} %{SYSLOGHOST:host.hostname}? %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?:%{SPACE}+%{GREEDYMULTILINE:_temp.message}$"
          ]
        }
      },
      {
        "grok": {
          "description": "Grok specific auth messages.",
          "tag": "grok-specific-messages",
          "field": "_temp.message",
          "ignore_missing": true,
          "patterns": [
            "^%{DATA:system.auth.ssh.event} %{DATA:system.auth.ssh.method} for (invalid user)?%{DATA:user.name} from %{IPORHOST:source.ip} port %{NUMBER:source.port:long} ssh2(: %{GREEDYDATA:system.auth.ssh.signature})?",
            "^%{DATA:system.auth.ssh.event} user %{DATA:user.name} from %{IPORHOST:source.ip}",
            "^Did not receive identification string from %{IPORHOST:system.auth.ssh.dropped_ip}",
            "^%{DATA:user.name} :( %{DATA:system.auth.sudo.error} ;)? TTY=%{DATA:system.auth.sudo.tty} ; PWD=%{DATA:system.auth.sudo.pwd} ; USER=%{DATA:system.auth.sudo.user} ; COMMAND=%{GREEDYDATA:system.auth.sudo.command}",
            "^new group: name=%{DATA:group.name}, GID=%{NUMBER:group.id}",
            "^new user: name=%{DATA:user.name}, UID=%{NUMBER:user.id}, GID=%{NUMBER:group.id}, home=%{DATA:system.auth.useradd.home}, shell=%{DATA:system.auth.useradd.shell}$"
          ],
          "on_failure": [
            {
              "rename": {
                "description": "Leave the unmatched content in message.",
                "field": "_temp.message",
                "target_field": "message"
              }
            }
          ]
        }
      },
      {
        "remove": {
          "field": "_temp"
        }
      },
      {
        "grok": {
          "description": "Grok usernames from PAM messages.",
          "tag": "grok-pam-users",
          "field": "message",
          "ignore_missing": true,
          "ignore_failure": true,
          "patterns": [
            "for user \\\"?%{DATA:_temp.foruser}\\\"? by \\\"?%{DATA:_temp.byuser}\\\"?(?:\\(uid=%{NUMBER:_temp.byuid}\\))?$",
            "for user \\\"?%{DATA:_temp.foruser}\\\"?$",
            "by user \\\"?%{DATA:_temp.byuser}\\\"?$"
          ],
          "if": "ctx.message != null && ctx.message != \"\""
        }
      },
      {
        "rename": {
          "field": "_temp.byuser",
          "target_field": "user.name",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "_temp.byuid",
          "target_field": "user.id",
          "ignore_missing": true,
          "ignore_failure": true
        }
      },
      {
        "rename": {
          "field": "_temp.foruser",
          "target_field": "user.name",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx.user?.name == null || ctx.user?.name == \"\""
        }
      },
      {
        "rename": {
          "field": "_temp.foruser",
          "target_field": "user.effective.name",
          "ignore_missing": true,
          "ignore_failure": true,
          "if": "ctx.user?.name != null"
        }
      },
      {
        "remove": {
          "field": "_temp",
          "ignore_missing": true
        }
      },
      {
        "convert": {
          "field": "system.auth.sudo.user",
          "target_field": "user.effective.name",
          "type": "string",
          "ignore_failure": true,
          "if": "ctx.system?.auth?.sudo?.user != null"
        }
      },
      {
        "convert": {
          "field": "system.auth.ssh.dropped_ip",
          "target_field": "source.ip",
          "type": "ip",
          "ignore_missing": true,
          "on_failure": [
            {
              "remove": {
                "field": "system.auth.ssh.dropped_ip"
              }
            }
          ]
        }
      },
      {
        "date": {
          "if": "ctx.event?.timezone == null",
          "field": "system.auth.timestamp",
          "target_field": "@timestamp",
          "formats": [
            "MMM  d HH:mm:ss",
            "MMM dd HH:mm:ss",
            "ISO8601"
          ],
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{ _ingest.on_failure_message }}}"
              }
            }
          ]
        }
      },
      {
        "date": {
          "if": "ctx.event?.timezone != null",
          "field": "system.auth.timestamp",
          "target_field": "@timestamp",
          "formats": [
            "MMM  d HH:mm:ss",
            "MMM dd HH:mm:ss",
            "ISO8601"
          ],
          "timezone": "{{{ event.timezone }}}",
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{{ _ingest.on_failure_message }}}"
              }
            }
          ]
        }
      },
      {
        "remove": {
          "field": "system.auth.timestamp"
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "source.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.asn",
          "target_field": "source.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.organization_name",
          "target_field": "source.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "script": {
          "description": "Add event.category/action/output to SSH events.",
          "tag": "script-categorize-ssh-event",
          "if": "ctx.system?.auth?.ssh?.event != null",
          "lang": "painless",
          "source": "if (ctx.system.auth.ssh.event == \"Accepted\") {\n  ctx.event.type = [\"info\"];\n  ctx.event.category = [\"authentication\", \"session\"];\n  ctx.event.action = \"ssh_login\";\n  ctx.event.outcome = \"success\";\n} else if (ctx.system.auth.ssh.event == \"Invalid\" || ctx.system.auth.ssh.event == \"Failed\") {\n  ctx.event.type = [\"info\"];\n  ctx.event.category = [\"authentication\"];\n  ctx.event.action = \"ssh_login\";\n  ctx.event.outcome = \"failure\";\n}"
        }
      },
      {
        "append": {
          "field": "event.category",
          "value": "iam",
          "if": "ctx.process?.name != null && ['groupadd', 'groupdel', 'groupmod', 'useradd', 'userdel', 'usermod'].contains(ctx.process.name)"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "success",
          "if": "ctx.process?.name != null && ['groupadd', 'groupdel', 'groupmod', 'useradd', 'userdel', 'usermod'].contains(ctx.process.name)"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "user",
          "if": "ctx.process?.name != null && ['useradd', 'userdel', 'usermod'].contains(ctx.process.name)"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "group",
          "if": "ctx.process?.name != null && ['groupadd', 'groupdel', 'groupmod'].contains(ctx.process.name)"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "creation",
          "if": "ctx.process?.name != null && ['useradd', 'groupadd'].contains(ctx.process.name)"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "deletion",
          "if": "ctx.process?.name != null && ['userdel', 'groupdel'].contains(ctx.process.name)"
        }
      },
      {
        "append": {
          "field": "event.type",
          "value": "change",
          "if": "ctx.process?.name != null && ['usermod', 'groupmod'].contains(ctx.process.name)"
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{{ user.name }}}",
          "allow_duplicates": false,
          "if": "ctx.user?.name != null && ctx.user?.name != ''"
        }
      },
      {
        "append": {
          "field": "related.user",
          "value": "{{{ user.effective.name }}}",
          "allow_duplicates": false,
          "if": "ctx.user?.effective?.name != null && ctx.user?.effective?.name != ''"
        }
      },
      {
        "append": {
          "field": "related.ip",
          "value": "{{{ source.ip }}}",
          "allow_duplicates": false,
          "if": "ctx.source?.ip != null && ctx.source?.ip != ''"
        }
      },
      {
        "append": {
          "field": "related.hosts",
          "value": "{{{ host.hostname }}}",
          "allow_duplicates": false,
          "if": "ctx.host?.hostname != null && ctx.host?.hostname != ''"
        }
      },
      {
        "set": {
          "field": "ecs.version",
          "value": "8.0.0"
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-system.auth@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{{ _ingest.on_failure_message }}}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "system"
      }
    }
  },
  "logs-aws.elb_logs-1.25.2": {
    "description": "Pipeline for ELB logs",
    "processors": [
      {
        "set": {
          "field": "ecs.version",
          "value": "8.2.0"
        }
      },
      {
        "rename": {
          "field": "message",
          "target_field": "event.original",
          "ignore_missing": true,
          "if": "ctx.event?.original == null",
          "description": "Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document."
        }
      },
      {
        "remove": {
          "field": "message",
          "ignore_missing": true,
          "if": "ctx.event?.original != null",
          "description": "The `message` field is no longer required if the document has an `event.original` field."
        }
      },
      {
        "grok": {
          "field": "event.original",
          "patterns": [
            "%{ELBHTTPLOG}",
            "%{ELBTCPLOG}",
            "%{ELBV2TYPE} %{ELBHTTPLOG} %{NOTSPACE:aws.elb.target_group.arn} \\\"%{DATA:aws.elb.trace_id}\\\" \\\"(?:-|%{DATA:destination.domain})\\\" \\\"(?:-|%{DATA:aws.elb.chosen_cert.arn})\\\" (?:-1|%{NUMBER:aws.elb.matched_rule_priority}) %{TIMESTAMP_ISO8601:event.start} \\\"(?:-|%{DATA:_tmp.actions_executed})\\\" \\\"(?:-|%{DATA:aws.elb.redirect_url})\\\" \\\"(?:-|%{DATA:aws.elb.error.reason})\\\"( \\\"(?:-|%{DATA:_tmp.target_port})\\\")?( \\\"(?:-|%{DATA:_tmp.target_status_code})\\\")?( \\\"(?:-|%{DATA:aws.elb.classification})\\\")?( \\\"(?:-|%{DATA:aws.elb.classification_reason})\\\")?",
            "%{ELBV2TYPE} %{ELBV2LOGVERSION} %{ELBTIMESTAMP} %{ELBNAME} %{NOTSPACE:aws.elb.listener} %{ELBSOURCE} %{ELBBACKEND} %{NUMBER:aws.elb.connection_time.ms:float} %{NUMBER:aws.elb.tls_handshake_time.ms:float} %{NUMBER:source.bytes:long} %{NUMBER:destination.bytes:long} (?:-|%{NUMBER:aws.elb.incoming_tls_alert}) (?:-|%{NOTSPACE:aws.elb.chosen_cert.arn}) (?:-|%{NOTSPACE:aws.elb.chosen_cert.serial}) %{ELBSSL} (?:-|%{NOTSPACE:aws.elb.ssl_named_group}) (?:-|%{NOTSPACE:destination.domain})"
          ],
          "pattern_definitions": {
            "ELBTIMESTAMP": "%{TIMESTAMP_ISO8601:_tmp.timestamp}",
            "ELBNAME": "%{NOTSPACE:aws.elb.name}",
            "ELBSOURCE": "%{IP:source.address}:%{POSINT:source.port:long}",
            "ELBBACKEND": "(?:-|%{IP:aws.elb.backend.ip}:%{POSINT:aws.elb.backend.port})",
            "ELBPROCESSINGTIME": "(?:-1|%{NUMBER:aws.elb.request_processing_time.sec:float}) (?:-1|%{NUMBER:aws.elb.backend_processing_time.sec:float}) (?:-1|%{NUMBER:aws.elb.response_processing_time.sec:float})",
            "ELBSSL": "(?:-|%{NOTSPACE:aws.elb.ssl_cipher}) (?:-|%{NOTSPACE:aws.elb.ssl_protocol})",
            "ELBCOMMON": "%{ELBTIMESTAMP} %{ELBNAME} %{ELBSOURCE} %{ELBBACKEND} %{ELBPROCESSINGTIME}",
            "ELBHTTPLOG": "%{ELBCOMMON} %{NUMBER:http.response.status_code:long} (?:-|%{NUMBER:aws.elb.backend.http.response.status_code:long}) %{NUMBER:http.request.body.bytes:long} %{NUMBER:http.response.body.bytes:long} \\\"(?:-|%{WORD:http.request.method}) (?:-|%{DATA:_tmp.uri_orig}) (?:-|HTTP/%{NOTSPACE:http.version})\\\" \\\"%{DATA:_tmp.user_agent}\\\" %{ELBSSL}",
            "ELBTCPLOG": "%{ELBCOMMON} - - %{NUMBER:source.bytes:long} %{NUMBER:destination.bytes:long} \\\"- - - \\\" \\\"-\\\" %{ELBSSL}",
            "ELBV2TYPE": "%{WORD:aws.elb.type}",
            "ELBV2LOGVERSION": "%{NOTSPACE}"
          }
        }
      },
      {
        "set": {
          "field": "event.kind",
          "value": "event"
        }
      },
      {
        "set": {
          "field": "cloud.provider",
          "value": "aws"
        }
      },
      {
        "set": {
          "if": "ctx.http != null",
          "field": "aws.elb.protocol",
          "value": "http"
        }
      },
      {
        "uri_parts": {
          "if": "ctx?._tmp?.uri_orig != null",
          "field": "_tmp.uri_orig",
          "ignore_failure": true
        }
      },
      {
        "user_agent": {
          "if": "ctx?._tmp?.user_agent != null",
          "field": "_tmp.user_agent",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "if": "ctx.http != null",
          "field": "event.category",
          "value": "web"
        }
      },
      {
        "set": {
          "field": "aws.elb.protocol",
          "value": "tcp",
          "if": "ctx.http == null"
        }
      },
      {
        "set": {
          "field": "event.category",
          "value": "network",
          "if": "ctx.http == null"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "success",
          "if": "ctx?.http?.response?.status_code != null && ctx.http.response.status_code < 400"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "failure",
          "if": "ctx?.http?.response?.status_code != null && ctx.http.response.status_code >= 400"
        }
      },
      {
        "set": {
          "field": "trace.id",
          "value": "{{aws.elb.trace_id}}",
          "if": "ctx?.aws?.elb?.trace_id != null"
        }
      },
      {
        "split": {
          "field": "_tmp.actions_executed",
          "target_field": "aws.elb.action_executed",
          "separator": ",",
          "ignore_missing": true
        }
      },
      {
        "split": {
          "field": "_tmp.target_port",
          "target_field": "aws.elb.target_port",
          "separator": " ",
          "ignore_missing": true
        }
      },
      {
        "split": {
          "field": "_tmp.target_status_code",
          "target_field": "aws.elb.target_status_code",
          "separator": " ",
          "ignore_missing": true
        }
      },
      {
        "date": {
          "field": "_tmp.timestamp",
          "formats": [
            "ISO8601"
          ]
        }
      },
      {
        "set": {
          "field": "event.end",
          "value": "{{ @timestamp }}"
        }
      },
      {
        "convert": {
          "field": "source.address",
          "target_field": "source.ip",
          "type": "ip",
          "ignore_failure": true
        }
      },
      {
        "convert": {
          "field": "source.port",
          "type": "long",
          "ignore_failure": true
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "source.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as",
          "properties": [
            "asn",
            "organization_name"
          ],
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.asn",
          "target_field": "source.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.organization_name",
          "target_field": "source.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "tls.cipher",
          "value": "{{aws.elb.ssl_cipher}}",
          "if": "ctx.aws?.elb?.ssl_cipher != null"
        }
      },
      {
        "script": {
          "lang": "painless",
          "if": "ctx.aws?.elb?.ssl_protocol != null",
          "source": "def parts = ctx.aws.elb.ssl_protocol.splitOnToken(\"v\"); if (parts.length != 2) {\n  return;\n} if (parts[1].contains(\".\")) {\n  ctx.tls.version = parts[1];\n} else {\n  ctx.tls.version = parts[1].substring(0,1) + \".\" + parts[1].substring(1);\n} ctx.tls.version_protocol = parts[0].toLowerCase();"
        }
      },
      {
        "remove": {
          "field": [
            "_tmp"
          ],
          "ignore_missing": true
        }
      },
      {
        "remove": {
          "field": "event.original",
          "if": "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
          "ignore_failure": true,
          "ignore_missing": true
        }
      },
      {
        "pipeline": {
          "name": "logs-aws.elb_logs@custom",
          "ignore_missing_pipeline": true
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ],
    "_meta": {
      "managed_by": "fleet",
      "managed": true,
      "package": {
        "name": "aws"
      }
    }
  }
}